<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Life Lies in Traveling - Bot</title><link href="http://lee-w.github.io/" rel="alternate"></link><link href="http://lee-w.github.io/feeds/bot.atom.xml" rel="self"></link><id>http://lee-w.github.io/</id><updated>2017-03-31T19:24:00+08:00</updated><entry><title>Create a Telegram EchoBot</title><link href="http://lee-w.github.io/posts/bot/2017/03/create-a-telegram-echobot" rel="alternate"></link><published>2017-03-31T19:24:00+08:00</published><updated>2017-03-31T19:24:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-03-31:/posts/bot/2017/03/create-a-telegram-echobot</id><summary type="html">&lt;p&gt;最近當助教要出一個Telegram Bot相關的Project&lt;br&gt;&amp;nbsp;先來寫一篇簡單的教學，減少之後的問題XDD&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近當助教要出一個Telegram Bot相關的Project&lt;br&gt;&amp;nbsp;先來寫一篇簡單的教學，減少之後的問題XDD&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;如果對Chat Bot的基本運作概念不太熟&lt;br&gt;
可以參考&lt;a href="http://lee-w.github.io/posts/bot/2016/11/introduction-to-chatbot/#introduction-to-chatbot"&gt;[Bot] Introduction to&amp;nbsp;Chatbot&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What is&amp;nbsp;Telegram&lt;/h2&gt;
&lt;p&gt;在台灣，好像還沒有那麼多人用Telegram&lt;br&gt;
簡單來說就跟Facebook&amp;nbsp;Messenger或Line這類的IM差不多&lt;/p&gt;
&lt;h2&gt;Why&amp;nbsp;Telegram&lt;/h2&gt;
&lt;p&gt;至於這次為什麼要選用Telegram麻&lt;br&gt;
是因為上次有聽其他開發者說Telegram Bot提供相當多的功能&lt;br&gt;&amp;nbsp;就想說來試試看&lt;/p&gt;
&lt;h2&gt;Web&amp;nbsp;Framework&lt;/h2&gt;
&lt;p&gt;上次寫Line EchoBot的教學是用django&lt;br&gt;&amp;nbsp;這次來試試Flask&lt;/p&gt;
&lt;p&gt;Source Code一樣放在Github上&lt;br&gt;
這篇文章會用&lt;a href="https://github.com/Lee-W/telegram_echobot/tree/minimal-flask"&gt;minimal-flask&lt;/a&gt; branch當範例&lt;br&gt;&amp;nbsp;只有31行Code，比較容易理解&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Lee-W/telegram_echobot/tree/master"&gt;master&lt;/a&gt;上也是用Flask&lt;br&gt;&amp;nbsp;只是架構比較複雜，有試一下Flask的blueprint，之後可能還會多加一些奇怪的功能xd&lt;/p&gt;
&lt;h2&gt;Apply a telegram&amp;nbsp;bot&lt;/h2&gt;
&lt;p&gt;首先當然必須要有&lt;a href="https://telegram.org"&gt;Telegram&lt;/a&gt;的帳號&lt;br&gt;
再來要加&lt;a href="https://telegram.me/botfather"&gt;BotFather&lt;/a&gt;為好友&lt;/p&gt;
&lt;p&gt;跟他說&lt;code&gt;/newbot&lt;/code&gt;&lt;br&gt;&amp;nbsp;接著他會問你，Bot的name跟username&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name是Bot在聯絡人資訊顯示的名稱&lt;/li&gt;
&lt;li&gt;username則比較像id的概念，而且一定要用Bot結尾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之後就會得到剛申請Bot的API Token&lt;br&gt;
然後你就可以從&lt;code&gt;https://telegram.me/&amp;lt;bot_username&amp;gt;&lt;/code&gt;找到剛申請的bot&lt;/p&gt;
&lt;h2&gt;Telegram Bot &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;Wrapper&lt;/h2&gt;
&lt;p&gt;開發上，我使用的是&lt;a href="https://github.com/python-telegram-bot/python-telegram-bot"&gt;python-telegram-bot&lt;/a&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install python-telegram-bot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它其中一點設計的很不錯的是&lt;br&gt;
Telegram API的命名是CamelCase (e.g. sendMessage)&lt;br&gt;
但Python的命名convention卻是lowercase_separated_by_underscores (e.g. send_message)&lt;br&gt;&amp;nbsp;而它是兩種都支援&lt;/p&gt;
&lt;h2&gt;Star&amp;nbsp;Programming&lt;/h2&gt;
&lt;p&gt;先附上全部的code，後面再慢慢解釋&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;telegram&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your API Token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_webhook&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_webhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://Your URL/hook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Webhook setup failed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;webhook_handler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;de_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

        &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_set_webhook&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setup&lt;/h3&gt;
&lt;p&gt;其中有兩個地方，必須要改成自己的設定&lt;/p&gt;
&lt;h4&gt;1. &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;Token&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your API Token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your &lt;span class="caps"&gt;API&lt;/span&gt; Token要改成剛剛取得的API&amp;nbsp;Token&lt;/p&gt;
&lt;h4&gt;2. Webhook &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;_set_webhook中的Your &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;statue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_webhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://Your URL/hook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡的URL就是設定成你這個Bot Server的URL&lt;br&gt;
不過Telegram一樣要求必須要是https&lt;br&gt;
最簡單的方式就是使用ngrok&lt;br&gt;
(ngrok的使用在&lt;a href="http://lee-w.github.io/posts/bot/2016/11/line-echo-bot-on-django/#line-echo-bot-on-django"&gt;[Bot] Line Echo Bot on Django&lt;/a&gt;最後面有介紹)&lt;br&gt;
平常測試使用ngrok就很足夠了&lt;br&gt;&amp;nbsp;之後要production的時候，在deploy到適當的server就好了&lt;/p&gt;
&lt;h3&gt;_set_webhook&lt;/h3&gt;
&lt;p&gt;Telegram有兩種接收訊息的方式&lt;br&gt;
隨時去監聽的webhook，和主動去要求更新的&lt;code&gt;get_updates&lt;/code&gt;&lt;br&gt;&amp;nbsp;這裡使用的是webhook&lt;/p&gt;
&lt;p&gt;這個function先設定Bot的webhook &lt;span class="caps"&gt;URL&lt;/span&gt;，如果設定失敗就直接終止程式&lt;br&gt;
也就是告訴Telegram要把Bot收到的訊息傳到哪&lt;br&gt;
而&lt;code&gt;set_webhook&lt;/code&gt;前面要有個_的原因是我不希望它被其他的code使用&lt;br&gt;&amp;nbsp;但Python本身並不支援Private的概念，而是慣例上在前面加一個底線&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_webhook&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_webhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://Your URL/hook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Webhook setup failed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在最後run Flask app前，要先把webhook&amp;nbsp;URL設定好&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_set_webhook&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;wehook_handler&lt;/h3&gt;
&lt;p&gt;這裡就是bot收到訊息要怎麼處理&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;webhook_handler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;de_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

        &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;app.route&lt;/code&gt;這個decorator是Flask的語法&lt;br&gt;
表示&lt;code&gt;https:/Your URL/hook&lt;/code&gt;會導到這個function，而它只能接受POST&lt;br&gt;
這裡設定的&lt;code&gt;/hook&lt;/code&gt;也就是為什麼在&lt;code&gt;_set_webhook&lt;/code&gt;中的URL最後面必須有&lt;code&gt;/hook&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外還可以發現webhook_handler是不帶任何參數的&lt;br&gt;
跟django不同的是&lt;br&gt;
Flask把request這種幾乎所有view function都會用到的參數直接變成全域可讀取的變數&lt;br&gt;&amp;nbsp;也就是最一開始的&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下來&lt;code&gt;webhook_handler&lt;/code&gt;內做的就只是把收到的訊息轉成&lt;code&gt;update&lt;/code&gt;&lt;br&gt;
再從裡面讀到對方傳來的&lt;code&gt;text&lt;/code&gt;&lt;br&gt;
最後用&lt;code&gt;reply_text&lt;/code&gt;回傳同樣的text回去&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這是最簡單的Telegram Bot&lt;br&gt;
不過我覺得開始學一個東西，還是會希望能在最短時間看到點東西，再慢慢專研&lt;br&gt;
接下來可以從&lt;a href="https://github.com/python-telegram-bot/python-telegram-bot"&gt;python-telegram-bot&lt;/a&gt;的&lt;a href="https://github.com/python-telegram-bot/python-telegram-bot/wiki"&gt;wiki&lt;/a&gt;，試更多Telegram&amp;nbsp;Bot的功能&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sooyhwang/Simple-Echo-Telegram-Bot"&gt;Simple-Echo-Telegram-Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.30sparks.com/develop-telegram-bot-introduction/"&gt;開發 Telegram Bot&amp;nbsp;簡介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Telegram"></category><category term="Flask"></category></entry><entry><title>[Bot] More than Just Echo Bot</title><link href="http://lee-w.github.io/posts/bot/2016/11/more-than-just-echo-bot" rel="alternate"></link><published>2016-11-29T01:57:00+08:00</published><updated>2016-11-29T01:57:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-29:/posts/bot/2016/11/more-than-just-echo-bot</id><summary type="html">&lt;p&gt;知道怎麼實作一個會Echo的Bot後&lt;br&gt;
再來就要思考，開發一個Bot我們要提供什麼功能&lt;br&gt;
(e.g. 天氣查詢, 訂票,&amp;nbsp;推薦旅遊景點)&lt;/p&gt;
&lt;p&gt;不過這裡要討論的不是Bot的功能&lt;br&gt;&amp;nbsp;Bot的功能實作，跟一般網站或App的實作並沒有太大的差別&lt;/p&gt;
&lt;p&gt;接下來來談如何從使用者說的話來判斷，使用者要使用的功能&lt;/p&gt;
</summary><content type="html">&lt;p&gt;知道怎麼實作一個會Echo的Bot後&lt;br&gt;
再來就要思考，開發一個Bot我們要提供什麼功能&lt;br&gt;
(e.g. 天氣查詢, 訂票,&amp;nbsp;推薦旅遊景點)&lt;/p&gt;
&lt;p&gt;不過這裡要討論的不是Bot的功能&lt;br&gt;&amp;nbsp;Bot的功能實作，跟一般網站或App的實作並沒有太大的差別&lt;/p&gt;
&lt;p&gt;接下來來談如何從使用者說的話來判斷，使用者要使用的功能&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;如果使用者問：「今天天氣如何？」「天氣今天好嗎？」&lt;br&gt;
要如何知道，他都是要詢問今天的天氣狀況&lt;br&gt;&amp;nbsp;也就是使用者的「意圖」&lt;/p&gt;
&lt;h2&gt;Based on&amp;nbsp;Keyword&lt;/h2&gt;
&lt;p&gt;上一篇文章，輸入關鍵字就能回傳template&amp;nbsp;message的bot也是用這樣的方式實作的&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;button&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Send ButtonTemplate&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Send ConfirmTemplate&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;carousel&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Send CarouselTemplate&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Echo TextMessage&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;回歸到天氣的問題&lt;br&gt;
可以試著找出「天氣」是否有出現在使用者的問句中&lt;br&gt;
再來判斷「今天」,&amp;nbsp;「明天」這樣敘述時間的詞&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;天氣&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;今天&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;today_s_weather&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;明天&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tomorrow_s_weather&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不需要其他的背景知識，容易實作&lt;/li&gt;
&lt;li&gt;運算量小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;建立規則很麻煩&lt;/li&gt;
&lt;li&gt;規則很容易就會出現例外，很難定義得完整&lt;ul&gt;
&lt;li&gt;只要使用者無法觸發到關鍵字，就無法使用功能 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一堆if&amp;nbsp;else造成程式冗長，不易擴充和維護&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;AIML&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Artificial Intelligence Modelling Language&lt;br&gt;
它是一款基於XML的markup&amp;nbsp;language&lt;/p&gt;
&lt;p&gt;這是最基本的AIML&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;aiml&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0.1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;encoding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;category&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt; HELLO ALICE &lt;span class="nt"&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
         Hello User!
      &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/aiml&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要符合特定的pattern，就回傳指定的template&lt;br&gt;
也能透過&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;這樣的tag，從多種回覆隨機丟一種回傳&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;random&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; response1 &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; response2 &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
   ...
&lt;span class="nt"&gt;&amp;lt;/random&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;比起只用if&amp;nbsp;else更結構化，較易維護和擴充&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;依然很難包含所有的狀況&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other &lt;span class="caps"&gt;NLP&lt;/span&gt;&amp;nbsp;Service&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wit.ai"&gt;Wit.ai&lt;/a&gt; (Facebook)&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;COSCUP&lt;/span&gt;&amp;nbsp;2016的聊天機器人小啄，就是透過Wit.ai實作的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.luis.ai"&gt;&lt;span class="caps"&gt;LUIS&lt;/span&gt;&lt;/a&gt;&amp;nbsp;(Microsoft)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.ai"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;.ai&lt;/a&gt;&amp;nbsp;(Google)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些服務能透過標記和訓練&lt;br&gt;&amp;nbsp;解析出這句話的每一個片段，所具有的意義&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. 「今天西雅圖天氣如何」&lt;ul&gt;
&lt;li&gt;時間：今天&lt;/li&gt;
&lt;li&gt;地點：西雅圖&lt;/li&gt;
&lt;li&gt;意圖：天氣如何&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Wit.ai&lt;/h3&gt;
&lt;p&gt;Wit.ai跟Luis, &lt;span class="caps"&gt;API&lt;/span&gt;.ai比較不同的地方是&lt;br&gt;
從Wit.ai得到的是，我們設定的回覆&lt;br&gt;&amp;nbsp;而不是一句話解析後的結果&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;LUIS&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;從&lt;a href="https://www.microsoft.com/cognitive-services/en-us/language-understanding-intelligent-service-luis"&gt;這裡&lt;/a&gt;可以測試兩個訓練過的範例機器人，看看從LUIS可以得到什麼&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;how is the weather in the Taipei
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;how is the weather in the Taipei&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;topScoringIntent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;intent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GetCurrentWeather&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.50119406&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;triggered&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GetCurrentWeather&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;parameters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;entities&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;dialog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;contextId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;80cd646a-d85d-4b40-873d-1b47fa49adc8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Question&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;prompt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Where would you like to get the current weather for?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;parameterName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;span class="caps"&gt;API&lt;/span&gt;.ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Hey Calendar, schedule lunch with 
Mary Johnson at 12 pm tomorrow.
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;meeting.create&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lunch with Mary Johnson&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;invitees&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mary Johnson&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2014-08-06T12:00:00-07:00&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Implement Through Powerful&amp;nbsp;Libraries&lt;/h2&gt;
&lt;p&gt;不過這些服務，通常會有它的限制&lt;br&gt;&amp;nbsp;這時候就能用上Python強大的函式庫們，來實作自己的版本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.nltk.org"&gt;&lt;span class="caps"&gt;NLTK&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Python經典的NLP函式庫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radimrehurek.com/gensim/"&gt;word2vec&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;透過詞向量，找出相似詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fxsjy/jieba"&gt;jieba&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;中文斷詞 &lt;/li&gt;
&lt;li&gt;判斷句子中的關鍵詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我在&lt;a href="https://gist.github.com/Lee-W/72f3a59b015cd67b3a939bf8a12680ac"&gt;&lt;span class="caps"&gt;NLP&lt;/span&gt; Libs Sample&lt;/a&gt;寫了這些函式庫的基本使用範例&lt;/p&gt;
&lt;p&gt;另外，也可以看&lt;a href="https://github.com/warmheartli/ChatBotCourse"&gt;自己动手做聊天机器人教程&lt;/a&gt;&lt;br&gt;&amp;nbsp;它是一系列聊天機器人教學，談這些做法背後的理論和實作&lt;/p&gt;
&lt;h2&gt;Beyond &lt;span class="caps"&gt;NLP&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;不過就算做了這些分詞、判斷意圖&lt;br&gt;&amp;nbsp;也不能保證使用者就會買單&lt;/p&gt;
&lt;p&gt;有人稱Chat Bot為下一代的UX&amp;nbsp;Design&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fastcodesign.com/3054934/the-next-phase-of-ux-designing-chatbot-personalities"&gt;The Next Phase Of &lt;span class="caps"&gt;UX&lt;/span&gt;: Designing Chatbot&amp;nbsp;Personalities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Issue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如何讓使用者，在機器人的Scope內不會碰壁&lt;/li&gt;
&lt;li&gt;如何讓機器人的判斷足夠robust，不會每次回答都是不明白&lt;/li&gt;
&lt;li&gt;如何讓使用者在最少的操作下，得到想得到的服務&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更進一步是&lt;br&gt;
如何設計一個有個性、有溫度的機器人&lt;br&gt;&amp;nbsp;這裡就可以再去研究NLP的情感分析&lt;/p&gt;
&lt;h3&gt;Read&amp;nbsp;More&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.topbots.com/common-chatbot-ux-mistakes-in-bot-design/"&gt;&lt;span class="caps"&gt;WHEN&lt;/span&gt; &lt;span class="caps"&gt;BOTS&lt;/span&gt; &lt;span class="caps"&gt;GO&lt;/span&gt; &lt;span class="caps"&gt;BAD&lt;/span&gt;: &lt;span class="caps"&gt;COMMON&lt;/span&gt; &lt;span class="caps"&gt;UX&lt;/span&gt; &lt;span class="caps"&gt;MISTAKES&lt;/span&gt; &lt;span class="caps"&gt;IN&lt;/span&gt; &lt;span class="caps"&gt;CHATBOT&lt;/span&gt; &lt;span class="caps"&gt;DESIGN&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smashingmagazine.com/2016/11/does-conversation-hurt-or-help-the-chatbot-ux/"&gt;Does Conversation Hurt Or Help The Chatbot &lt;span class="caps"&gt;UX&lt;/span&gt;?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/SyJUciYWg"&gt;Head First&amp;nbsp;ChatBot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/aiml/index.htm"&gt;&lt;span class="caps"&gt;AIML&lt;/span&gt;&amp;nbsp;Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.devdungeon.com/content/ai-chat-bot-python-aiml"&gt;&lt;span class="caps"&gt;AI&lt;/span&gt; Chat Bot in Python with &lt;span class="caps"&gt;AIML&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wit.ai/docs/quickstart"&gt;Wit.ai&amp;nbsp;Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/warmheartli/ChatBotCourse"&gt;自己动手做聊天机器人教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/ideas/an-overview-of-the-bot-landscape?imm_mid=0eb199&amp;amp;cmp=em-data-na-na-newsltr_20161130"&gt;An overview of the bot&amp;nbsp;landscape&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>[Bot] More About Line Messaging API - Template Messages</title><link href="http://lee-w.github.io/posts/bot/2016/11/more-about-line-messaging-api-template-messages" rel="alternate"></link><published>2016-11-27T06:08:00+08:00</published><updated>2016-11-27T06:08:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-27:/posts/bot/2016/11/more-about-line-messaging-api-template-messages</id><summary type="html">&lt;p&gt;除了傳送文字外，Line&amp;nbsp;Bot還可以傳&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;圖片, 影像, 聲音,&amp;nbsp;地圖&lt;/li&gt;
&lt;li&gt;貼圖 (Line Bot所能使用的&lt;a href="https://devdocs.line.me/files/sticker_list.pdf"&gt;貼圖清單&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Imagemap&lt;/li&gt;
&lt;li&gt;Tempalte&lt;ul&gt;
&lt;li&gt;Button&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confirm&lt;/li&gt;
&lt;li&gt;Carousel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大部分使用上很直覺，可以直接參考&lt;a href="https://devdocs.line.me/en/"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Reference - Messaging &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;和&lt;a href="https://github.com/line/line-bot-sdk-python"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章主要談Template&amp;nbsp;Messages的使用&lt;/p&gt;
</summary><content type="html">&lt;p&gt;除了傳送文字外，Line&amp;nbsp;Bot還可以傳&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;圖片, 影像, 聲音,&amp;nbsp;地圖&lt;/li&gt;
&lt;li&gt;貼圖 (Line Bot所能使用的&lt;a href="https://devdocs.line.me/files/sticker_list.pdf"&gt;貼圖清單&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Imagemap&lt;/li&gt;
&lt;li&gt;Tempalte&lt;ul&gt;
&lt;li&gt;Button&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confirm&lt;/li&gt;
&lt;li&gt;Carousel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大部分使用上很直覺，可以直接參考&lt;a href="https://devdocs.line.me/en/"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Reference - Messaging &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;和&lt;a href="https://github.com/line/line-bot-sdk-python"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章主要談Template&amp;nbsp;Messages的使用&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;Template&lt;/h1&gt;
&lt;p&gt;Template分為Button, Confirm跟Carousel三種&lt;br&gt;
這些功能也是我認為從Line Bot Trail升級到Line Messaging&amp;nbsp;API最好用的功能&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;以下的測試是bot收到關鍵字，回傳相對應的訊息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Button&lt;br&gt;
&lt;img alt="button_example" src="http://i.imgur.com/KYN6kDR.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confirm&lt;br&gt;
&lt;img alt="confirm_example" src="http://i.imgur.com/pUFboL5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Carousel (如果超出版面，則可以左右滑動)&lt;br&gt;
&lt;img alt="carousel_example" src="http://i.imgur.com/Pxvj6om.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外必須要注意的是，這些功能目前都只支援手機版&lt;br&gt;
在電腦版上的Line看到的訊息會是這樣&lt;br&gt;
&lt;img alt="template_message_on_pc" src="http://i.imgur.com/ZdGQjc6.png"&gt;&lt;br&gt;&amp;nbsp;這個文字內容可以透過template的alt_text參數設定&lt;/p&gt;
&lt;p&gt;上面的例子是&lt;a href="https://github.com/line/line-bot-sdk-python#templatesendmessage---buttonstemplaten"&gt;line-bot-sdk-python&lt;/a&gt;的使用範例&lt;br&gt;
(&lt;a href="https://github.com/Lee-W/line_echobot/tree/template-message"&gt;可以回傳template message的echo bot&lt;/a&gt;)&lt;br&gt;&amp;nbsp;大部分都能透過Code和Example比對，找到需要調整的參數&lt;/p&gt;
&lt;p&gt;接下來談的是那些按鍵的設定&lt;br&gt;
上面所看到的按鍵都是一個Action&lt;br&gt;
三種Template最大的不同，主要是這些action擺設的方式不同&lt;br&gt;&amp;nbsp;限制的數量也不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Button一次可以支援四個action&lt;/li&gt;
&lt;li&gt;Confirm支援三個action&lt;/li&gt;
&lt;li&gt;Carousel則可以用5個CarouselColumn，每一個Column支援3個Action&lt;ul&gt;
&lt;li&gt;另外需要注意的是Carousel中每一個Column的action數量必須是一樣的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Action&lt;/h1&gt;
&lt;p&gt;這些action的label參數，就是顯示在按鍵上的文字，必須在20字以內&lt;/p&gt;
&lt;p&gt;text參數則是按下這個按鍵，會由使用者回傳設定的文字&lt;br&gt;
e.g. 這是我按下上面Button的postback的效果&lt;br&gt;
&lt;img alt="text_example" src="http://i.imgur.com/ow2G8wU.png"&gt;&lt;br&gt;
而text就是設定為postback&amp;nbsp;(注意並非label的&amp;#8217;postback&amp;#8217;)&lt;/p&gt;
&lt;h2&gt;Postback&lt;/h2&gt;
&lt;p&gt;當使用者按了這個按鍵&lt;br&gt;
Line Server會傳一個postback event給我們，裡面包含著data參數中設定的字串 &lt;br&gt;
在收到event的時候，透過&lt;code&gt;event.postback.postback.data&lt;/code&gt;取出data&lt;/p&gt;
&lt;p&gt;Postback可以不給text參數&lt;/p&gt;
&lt;h2&gt;Message&lt;/h2&gt;
&lt;p&gt;text參數在Message Action是必須的，也不能給空字串&lt;br&gt;
如果希望這個按鍵，只有顯示但不會由使用者傳文字過來，可以給一串空白 (e.g. &amp;#8216;&amp;nbsp;&amp;#8216;)&lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;使用者按下這個按鍵就會用Line的瀏覽器跳到外部網頁&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devdocs.line.me/en/#template-messages"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Reference - Messaging &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/line/line-bot-sdk-python#templatesendmessage---buttonstemplate"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Line"></category></entry><entry><title>[Bot] Deploy LineBot on Heroku</title><link href="http://lee-w.github.io/posts/bot/2016/11/deploy-linebot-on-heroku" rel="alternate"></link><published>2016-11-27T06:05:00+08:00</published><updated>2016-11-27T06:05:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-27:/posts/bot/2016/11/deploy-linebot-on-heroku</id><summary type="html">&lt;p&gt;上一篇提到如何用ngrok&lt;br&gt;
讓我們可以不用架Https&amp;nbsp;Server，直接在本地端測試Bot&lt;/p&gt;
&lt;p&gt;再來要談的是如何把Bot部署到Heroku上&lt;/p&gt;
</summary><content type="html">&lt;p&gt;上一篇提到如何用ngrok&lt;br&gt;
讓我們可以不用架Https&amp;nbsp;Server，直接在本地端測試Bot&lt;/p&gt;
&lt;p&gt;再來要談的是如何把Bot部署到Heroku上&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;Why not&amp;nbsp;ngrok&lt;/h1&gt;
&lt;p&gt;使用ngrok必須要讓你的本地端一直開著才能收到訊息&lt;br&gt;
而且免費版的ngrok每次都會更改url&lt;br&gt;&amp;nbsp;所以我們需要一個可以讓其他人較長時間測試的Server&lt;/p&gt;
&lt;p&gt;以我自己的開發習慣&lt;br&gt;
我會使用ngrok，來做Bot的基本除錯&lt;br&gt;
Heroku則是用來讓其他人測試功能&lt;br&gt;
真的要上線的時候才會自己架一個Https&amp;nbsp;Server&lt;/p&gt;
&lt;p&gt;Line的帳號也是ngrok, heroku跟上線需要的各申請一個&lt;br&gt;
不過ngrok可以好幾個Line&amp;nbsp;Bot專案共用一個即可&lt;/p&gt;
&lt;h1&gt;Heroku&lt;/h1&gt;
&lt;h2&gt;Create&amp;nbsp;App&lt;/h2&gt;
&lt;p&gt;先上&lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt;辦個帳號&lt;/p&gt;
&lt;p&gt;到個人的dashboard&lt;br&gt;
&lt;code&gt;New&lt;/code&gt; -&amp;gt; &lt;code&gt;Create New App&lt;/code&gt;&lt;br&gt;&amp;nbsp;選一個名字，就創好App了&lt;/p&gt;
&lt;h2&gt;Deploy&lt;/h2&gt;
&lt;h3&gt;Add&amp;nbsp;Remote&lt;/h3&gt;
&lt;p&gt;在部署之前要先安裝&lt;a href="https://devcenter.heroku.com/articles/heroku-command-line"&gt;Heroku &lt;span class="caps"&gt;CLI&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再來我們要到原本line-echobot，將heroku加入這個專案的remote&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;heroku login
heroku git:remote -a leewbot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著用&lt;code&gt;git remote -v&lt;/code&gt;就能看到&lt;code&gt;heroku&lt;/code&gt;已經被加入remote了&lt;br&gt;
以後只要&lt;code&gt;git push heroku master&lt;/code&gt;，就能部署到Heroku&lt;br&gt;&amp;nbsp;不過我們還必須要多做一些設定才能讓Bot順利的部署&lt;/p&gt;
&lt;h3&gt;Environment&amp;nbsp;Variables&lt;/h3&gt;
&lt;p&gt;首先是我們原先設定的環境變數&lt;br&gt;&amp;nbsp;Heroku是透過這個指令來做設定&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;heroku config:set &lt;span class="s2"&gt;&amp;quot;env key&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;env value&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者也能到dashboard的&lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Config Variables&lt;/code&gt; -&amp;gt; &lt;code&gt;Reveal Config Vars&lt;/code&gt;做設定&lt;/p&gt;
&lt;h3&gt;Python&amp;nbsp;Envrionments&lt;/h3&gt;
&lt;p&gt;因為Heroku支援多種不同的語言&lt;br&gt;&amp;nbsp;所以要讓Heroku知道我們使用的是Python&lt;/p&gt;
&lt;p&gt;Heroku可過專案中是否有&lt;code&gt;requirements.txt&lt;/code&gt;來判斷這個專案是否為Python專案&lt;br&gt;
並且安裝&lt;code&gt;requirements.txt&lt;/code&gt;內的函式庫&lt;br&gt;&amp;nbsp;名稱如果打錯，可能會讓Heroku不知道這是Python專案，導致部署失敗&lt;/p&gt;
&lt;p&gt;另外可以透過&lt;code&gt;runtime.txt&lt;/code&gt;來指定Python的版本&lt;br&gt;
目前支援這兩種版本&lt;br&gt;
- &lt;code&gt;python-2.7.12&lt;/code&gt;&lt;br&gt;
- &lt;code&gt;python-3.5.2&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Deploy Settings -&amp;nbsp;Procfile&lt;/h3&gt;
&lt;p&gt;再來必須要讓Heroku知道我們執行專案的指令是什麼&lt;br&gt;
這個指令就是寫在&lt;code&gt;Profile&lt;/code&gt;中&lt;/p&gt;
&lt;p&gt;這裡使用的部署套件是gunicorn&lt;br&gt;
先在&lt;code&gt;requirements.txt&lt;/code&gt;加入&lt;code&gt;gunicorn==19.0.0&lt;/code&gt;&lt;br&gt;
再來創一個&lt;code&gt;Profile&lt;/code&gt;，內容是&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gunicorn&lt;/span&gt; &lt;span class="n"&gt;line_echobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wsgi&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果用其他的部署套件，則需要修改web後面的指令&lt;/p&gt;
&lt;p&gt;到了這裡就做好所有的設定了&lt;br&gt;
最後只要&lt;code&gt;git push heroku master&lt;/code&gt;就會部署到Heroku上&lt;/p&gt;
&lt;p&gt;透過&lt;code&gt;heroku open&lt;/code&gt;能看到剛剛部署上去的專案&lt;br&gt;
接著把專案的網址加上我們先前設定的callback url &lt;code&gt;echobot/callback&lt;/code&gt;&lt;br&gt;
設定到Line Bot的Webhook &lt;span class="caps"&gt;URL&lt;/span&gt;，就完成了&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/getting-started-with-python#introduction"&gt;Getting Started on Heroku with&amp;nbsp;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/deploying-python"&gt;Deploying Python and Django Apps on&amp;nbsp;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Heroku"></category><category term="django"></category><category term="Line"></category></entry><entry><title>[Bot] Line Echo Bot on Django</title><link href="http://lee-w.github.io/posts/bot/2016/11/line-echo-bot-on-django" rel="alternate"></link><published>2016-11-24T03:26:00+08:00</published><updated>2016-11-24T03:26:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-24:/posts/bot/2016/11/line-echo-bot-on-django</id><summary type="html">&lt;p&gt;單純要寫一個只會Echo的Line Chat Bot&lt;br&gt;
用flask只要85行的code就能解決&lt;br&gt;
官方已經有提供相當清楚的範例[flask-echo]&lt;br&gt;&amp;nbsp;(https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-echo)了&lt;/p&gt;
&lt;p&gt;這篇文章則是提供了django的做法&lt;br&gt;
想直接看code也可以參考&lt;a href="https://github.com/Lee-W/line_echobot"&gt;line_echobot&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;單純要寫一個只會Echo的Line Chat Bot&lt;br&gt;
用flask只要85行的code就能解決&lt;br&gt;
官方已經有提供相當清楚的範例[flask-echo]&lt;br&gt;&amp;nbsp;(https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-echo)了&lt;/p&gt;
&lt;p&gt;這篇文章則是提供了django的做法&lt;br&gt;
想直接看code也可以參考&lt;a href="https://github.com/Lee-W/line_echobot"&gt;line_echobot&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;Line Messaging &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;(line-bot-sdk-python)&lt;/h1&gt;
&lt;p&gt;詳細的Line Bot提供哪些功能，該如何使用&lt;br&gt;
可以在&lt;a href="https://devdocs.line.me/en/"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Reference - Messaging &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;找到&lt;br&gt;&amp;nbsp;之後的文章，會談如何使用文字以外的功能&lt;/p&gt;
&lt;p&gt;這裡直接使用官方提供的&lt;a href="https://github.com/line/line-bot-sdk-python"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install line-bot-sdk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外官方也提供&lt;a href="https://github.com/line/line-bot-sdk-java"&gt;java&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-go"&gt;go&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-php"&gt;php&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-ruby"&gt;ruby&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-perl"&gt;perl&lt;/a&gt;的版本&lt;/p&gt;
&lt;h1&gt;Start&amp;nbsp;Project&lt;/h1&gt;
&lt;h2&gt;Create&amp;nbsp;Project&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a line_echobot project&lt;/span&gt;
django-admin startproject line_echobot

&lt;span class="c1"&gt;# Create an echobot app&lt;/span&gt;
python3 manage.py startapp echobot
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Setup Line&amp;nbsp;Secrets&lt;/h2&gt;
&lt;p&gt;接著設定Line Bot的&lt;code&gt;Channel Secret&lt;/code&gt;, &lt;code&gt;Channel Access Token&lt;/code&gt;&lt;br&gt;
(可以在Line Bot的&lt;code&gt;Line Deverloper&lt;/code&gt;頁面取得)&lt;/p&gt;
&lt;p&gt;不過這些值不該被git記錄，所以不該被寫死在&lt;code&gt;settings.py&lt;/code&gt;中&lt;br&gt;&amp;nbsp;建議將這些值寫入環境變數&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your django secret key&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your line channel access token&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your line channel secret&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行時，讓設定檔先去讀取這些環境變數&lt;br&gt;
下面的&lt;code&gt;get_env_variable&lt;/code&gt;函式是用來取得環境變數&lt;br&gt;&amp;nbsp;只要有少設定，就會丟出ImproperlyConfigured的例外事件中斷執行&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# line_echobot/settings.py&lt;/span&gt;

&lt;span class="o"&gt;......&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;error_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Set the {} environment variable&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ImproperlyConfigured&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error_msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LINE_CHANNEL_ACCESS_TOKEN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LINE_CHANNEL_SECRET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;......&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="o"&gt;......&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;echobot&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過如果只是單純測試用，這些值也可以直接寫死在settings.py中&lt;/p&gt;
&lt;p&gt;另外也不要忘了在&lt;code&gt;INSTLLED_APPS&lt;/code&gt;加入echobot&lt;/p&gt;
&lt;p&gt;一般來說，django產生project時&lt;br&gt;
&lt;code&gt;settings.py&lt;/code&gt;裡面就會有secret key&lt;br&gt;
這裡的做法是把預設的secret key刪掉&lt;br&gt;
設定到環境變數中，避免被git記錄下來&lt;br&gt;
如果還需要另外還要重新產生可以透過&lt;a href="https://gist.github.com/mattseymour/9205591"&gt;django-secret-keygen.py&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Setup Line Webhook &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;再來要設定一個Webhook &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;br&gt;&amp;nbsp;讓Line可以把Bot收到的訊息傳給我們&lt;/p&gt;
&lt;p&gt;先在project的&lt;code&gt;urls.py&lt;/code&gt;設定&lt;br&gt;
讓project可以找到echobot這個app的&lt;code&gt;urls.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# line_echobot/urls.py&lt;/span&gt;
&lt;span class="o"&gt;......&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;echobot&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^echobot/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echobot.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著在echobot內，創一個&lt;code&gt;urls.py&lt;/code&gt;&lt;br&gt;
並將url再導到&lt;code&gt;callback&lt;/code&gt;，呼叫&lt;code&gt;views.py&lt;/code&gt;裡面的&lt;code&gt;callback&lt;/code&gt;函式(接下來才會實作)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# echobot/urls.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^callback/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這些都設定完後，要在Line那邊設定的Webhook Url就是&lt;code&gt;https://"your domain name"/echobot/callback/&lt;/code&gt;&lt;br&gt;
(&lt;code&gt;your domain name&lt;/code&gt;要設定什麼，會在這篇文章的&lt;a href="#https-server"&gt;最後&lt;/a&gt;說明)&lt;/p&gt;
&lt;h2&gt;Implement Callback&amp;nbsp;Funtion&lt;/h2&gt;
&lt;p&gt;接下來就是要在&lt;code&gt;echobot/views.py&lt;/code&gt;實作&lt;code&gt;callback&lt;/code&gt;了&lt;/p&gt;
&lt;h3&gt;Initial&lt;/h3&gt;
&lt;p&gt;先import相關的函式庫&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csrf_exempt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookHanlder&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;透過line_bot_api傳訊息給Line，讓Line轉傳給使用者&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;line_bot_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Callback&amp;nbsp;Function&lt;/h3&gt;
&lt;p&gt;有兩種方法可以處理Line Server送過來的訊息&lt;br&gt;&amp;nbsp;這裡先用Todo記著，待會再來補上&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# TODO: Define Receiver&lt;/span&gt;


&lt;span class="nd"&gt;@csrf_exempt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# TODO: Handler when receiver Line Message&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Validate&amp;nbsp;Signature&lt;/h3&gt;
&lt;p&gt;處理訊息之前&lt;br&gt;
先確認這個request是不是真的是從Line Server傳來的&lt;br&gt;
要確認這件事，需要&lt;br&gt;
- request的body&lt;br&gt;
- request&amp;nbsp;header中的X-Line-Signature&lt;/p&gt;
&lt;p&gt;也就是上面的&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Handle Recevied&amp;nbsp;Message&lt;/h3&gt;
&lt;p&gt;取得body跟signature後&lt;br&gt;
Line Bot&amp;nbsp;API會在處理訊息的同時，確認這個訊息是否來自Line&lt;/p&gt;
&lt;p&gt;而處理Line傳過來給我們的訊息，有兩種不同的做法&lt;/p&gt;
&lt;h4&gt;WebhookParser&lt;/h4&gt;
&lt;p&gt;WebhookParser會Parse這個訊息的所有欄位&lt;br&gt;
讓我們針對各種不同型別的訊息做個別的處理&lt;br&gt;
e.g.&lt;br&gt;
- UserID&lt;br&gt;
- Event Type&lt;br&gt;
- Message Content&lt;br&gt;
- and&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://github.com/line/line-bot-sdk-python#webhook-event-object"&gt;這裡&lt;/a&gt;可以找到有哪些欄位&lt;/p&gt;
&lt;p&gt;這段code要取代上面的&lt;code&gt;# TODO: Define Receiver&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面三段code則要取代&lt;code&gt;# TODO: Handler when receiver Line Message&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;parser會parse所有的event跟各個event中的所有欄位&lt;br&gt;
如果request不是從Line Server來的，就會丟出InvalidSignatureError&lt;br&gt;
其他使用錯誤，或Line&amp;nbsp;Server的問題都會是丟出LineBotApiError&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來要判斷收到的事件是什麼事件&lt;br&gt;
這個Bot只需要echo純文字訊息&lt;br&gt;&amp;nbsp;所以先判斷這個事件是不是訊息事件，而這個訊息是不是文字訊息&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後的&lt;code&gt;reply_message&lt;/code&gt;函式，讓我們傳訊息給Line Server&lt;br&gt;
第一個參數是要回傳要用的reply_token，可以從事件中取得 （&lt;code&gt;event.reply_token&lt;/code&gt;）&lt;br&gt;
使用這個reply_token做回覆，是不用收費的&lt;br&gt;&amp;nbsp;不過同一個reply_token只能使用一次，而且在一定的時間內就會失效&lt;/p&gt;
&lt;p&gt;第二個參數是這次要回傳的訊息&lt;br&gt;
&lt;a href="https://github.com/line/line-bot-sdk-python#send-message-object"&gt;這裡&lt;/a&gt;有所有能回傳的訊息&lt;br&gt;
也可以傳一個都是訊息的list或tuple&lt;br&gt;
不過一次最多只能傳5個&lt;br&gt;&amp;nbsp;只要超過就會有LineBotApiError&lt;/p&gt;
&lt;h4&gt;WebhookHandler&lt;/h4&gt;
&lt;p&gt;WebhookHandler是針對每一種不同的訊息型態註冊一個處理器&lt;br&gt;
只要收到這樣的訊息，就會丟給對應的處理器&lt;br&gt;&amp;nbsp;如果確定每一類訊息，在任何情況下都會有相似的處理方式，就很適合這樣的設計&lt;/p&gt;
&lt;p&gt;接下來的三段code要取代&lt;code&gt;# TODO: Define Receiver&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先為handler加入，TextMessage的處理器&lt;br&gt;
參數是接收到的event&lt;br&gt;&amp;nbsp;這裡做的也是讀取到原本event中的文字，並回傳回去&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@handler.add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_text_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為沒有要處理其他訊息&lt;br&gt;
如果收到其他訊息(e.g. 貼圖, 照片)或訊息以外的事件&lt;br&gt;
使用default來回傳&amp;#8221;Currently Not Support None Text&amp;nbsp;Message&amp;#8221;的文字訊息&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@handler.default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Currently Not Support None Text Message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面的這段code是要取代&lt;code&gt;# TODO: Handler when receiver Line Message&lt;/code&gt;&lt;br&gt;&amp;nbsp;handler判斷完這個訊息，應該被哪個處理器處理，就會傳給那個函式處理&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Full&amp;nbsp;Code&lt;/h4&gt;
&lt;p&gt;由於上面的code說明比較分散&lt;br&gt;&amp;nbsp;這裡附上兩個版本各自的完整版&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WebhookParser&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# line_echobot/echobot/views.py&lt;/span&gt;
&lt;span class="c1"&gt;# WebhookParser version&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csrf_exempt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;

&lt;span class="n"&gt;line_bot_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@csrf_exempt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;WebhookHandler&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# line_echobot/echobot/views.py&lt;/span&gt;
&lt;span class="c1"&gt;# WebhookHandler version&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csrf_exempt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;

&lt;span class="n"&gt;line_bot_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@handler.add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_text_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@handler.default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Currently Not Support None Text Message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@csrf_exempt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到了這裡，echo&amp;nbsp;bot實作的部分就完成了&lt;/p&gt;
&lt;h2&gt;&lt;a name='https-server'&gt;&lt;/a&gt; Https Server (Setup &amp;#8216;your domain&amp;nbsp;name&amp;#8217;)&lt;/h2&gt;
&lt;p&gt;使用這些Bot的服務時，大多會要求我們一定要先有一個Https Server&lt;br&gt;
除了自己架Http Server外，還透過其他服務，更方便我們做測試&lt;br&gt;&amp;nbsp;接下來我會分享兩種做法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;架在&lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt;&amp;nbsp;(由於篇幅的關係，Heroku會在接下來的文章談)&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://ngrok.com"&gt;ngrok&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ngrok&lt;/h3&gt;
&lt;p&gt;ngrok提供的服務是&lt;br&gt;
讓外部的訊息先經過ngrok的server，ngrok再將這個訊息傳給你的server&lt;br&gt;
回傳時也是從你的server傳給ngrok的server，再把訊息傳出去&lt;br&gt;&amp;nbsp;所以外部都只會看到ngrok的server&lt;/p&gt;
&lt;p&gt;&lt;img alt="ngrok" src="https://ngrok.com/static/img/demo.png"&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Install ngrok on mac&lt;/span&gt;
brew cask install ngrok
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先把django的server&amp;nbsp;run起來&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3  manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;預設django的port是8000&lt;br&gt;
這裡並不需要使用0.0.0.0:8000，讓外部可以連到這個django server&lt;br&gt;&amp;nbsp;ngrok會把request傳到local端相對應的port&lt;/p&gt;
&lt;p&gt;接著就要用ngrok將request導到本地端的port&amp;nbsp;8000&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ngrok http &lt;span class="m"&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="1_ngrok_example" src="http://i.imgur.com/r525wEI.png"&gt;&lt;/p&gt;
&lt;p&gt;再來到Line Bot的&lt;code&gt;Line Developer&lt;/code&gt;頁面設定Webhook &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;br&gt;
這時候填上ngrok後的https那串url，再加上&lt;code&gt;echobot/callback/&lt;/code&gt;(我們設定的callback url)&lt;br&gt;
(e.g. &lt;code&gt;https://2.....f.ngrok.io/echobot/callback/&lt;/code&gt;)&lt;br&gt;
&lt;img alt="2_webhook_url" src="http://i.imgur.com/qVWlwoK.png"&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是我的Webhook URL下面有一個&lt;code&gt;Read timeout.&lt;/code&gt;&lt;br&gt;
如果按了後面的Verify，Line Server會傳一些測試訊息過來&lt;br&gt;
但是那個reply_token 是無法被回覆的&lt;br&gt;
這時候在Server就會丟出LineBotApiError&lt;br&gt;
不過沒關係，這只是給我們檢查用的&lt;br&gt;
並沒有一定要通過才能使用Line&amp;nbsp;Bot&lt;/p&gt;
&lt;p&gt;這時候加Bot為好友，就可以開始跟它聊天了&lt;br&gt;
&lt;img alt="3_message_sample" src="http://i.imgur.com/boxeHoG.png"&gt;&lt;/p&gt;
&lt;p&gt;如果你發現除了echo訊息外，還有其他的訊息&lt;br&gt;
可能就是沒有把Atuo Reply Message關掉&lt;br&gt;
這時候就可以去Line Bot的&lt;code&gt;LINE@ Manger&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Bot Settings&lt;/code&gt;把它關掉&lt;br&gt;
或者到&lt;code&gt;Messages&lt;/code&gt; -&amp;gt; &lt;code&gt;Auto Reply Message&lt;/code&gt;做修改訊息內容&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://studyhost.blogspot.tw/2016/10/line-messaging-api-line-bot-v2.html"&gt;新版Line@ Messaging API使用心得 (Line Bot v2)&lt;br&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jiunjiun.logdown.com/posts/2016/10/06/linebot-with-sinatra"&gt;LineBot -&amp;nbsp;Sinatra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ngrok.com"&gt;ngrok&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="django"></category><category term="Line"></category></entry><entry><title>[Bot] Apply Line Messaging API</title><link href="http://lee-w.github.io/posts/bot/2016/11/apply-line-messaging-api" rel="alternate"></link><published>2016-11-22T12:43:00+08:00</published><updated>2016-11-22T12:43:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-22:/posts/bot/2016/11/apply-line-messaging-api</id><summary type="html">&lt;p&gt;先到&lt;a href="https://business.line.me/zh-hant/services/bot"&gt;Messaging &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;申請帳號&lt;/p&gt;
&lt;p&gt;&lt;code&gt;開始使用Messaging API&lt;/code&gt;和&lt;code&gt;開始使用Developer Trial&lt;/code&gt;申請到的帳號是不同的&lt;br&gt;&amp;nbsp;之後不能互換，所以一開始就要根據需求來決定申請哪種帳號&lt;/p&gt;
</summary><content type="html">&lt;p&gt;先到&lt;a href="https://business.line.me/zh-hant/services/bot"&gt;Messaging &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;申請帳號&lt;/p&gt;
&lt;p&gt;&lt;code&gt;開始使用Messaging API&lt;/code&gt;和&lt;code&gt;開始使用Developer Trial&lt;/code&gt;申請到的帳號是不同的&lt;br&gt;&amp;nbsp;之後不能互換，所以一開始就要根據需求來決定申請哪種帳號&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;img alt="1_messaging_api" src="http://i.imgur.com/3i3O1wO.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;開始使用Messaging API&lt;/code&gt;會申請免費版的帳號&lt;br&gt;
  之後可以選擇付費升級為入門版等更多功能的版本&lt;br&gt;&amp;nbsp;主要拿來做正式發佈用的帳號&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;開始使用Developer Trial&lt;/code&gt;則是Developer的帳號&lt;br&gt;
  雖然一開始就能使用Push &lt;span class="caps"&gt;API&lt;/span&gt;，但好友人數只有50人&lt;br&gt;
  如果還在開發階段，就適合辦這個帳號來測試&lt;br&gt;&amp;nbsp;不過需要注意的是developer帳號，並不能接升級成一般帳號&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="2_price" src="http://i.imgur.com/FmTjOBH.png"&gt;&lt;/p&gt;
&lt;p&gt;再來會詢問業務類別，跟要求設定Bot名稱和照片&lt;br&gt;
&lt;img alt="3_apply_account" src="http://i.imgur.com/VdCT8JX.png"&gt;&lt;/p&gt;
&lt;p&gt;回到&lt;a href="https://business.line.me/zh-hant/"&gt;Line Bussiness Center&lt;/a&gt;的帳號清單&lt;br&gt;
就能看到帳號已經創好了&lt;br&gt;
&lt;img alt="4_success_apply" src="http://i.imgur.com/4ViJbIR.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;進入剛剛創好的帳號的&lt;code&gt;LINE@ Manager&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;頁面左上方，Bot名稱下方&lt;br&gt;
@開頭的就是這個Bot的id&lt;br&gt;
可以從Line輸入這個id加Bot為好友&amp;nbsp;（需加上@）&lt;/p&gt;
&lt;p&gt;&lt;img alt="5_bot_page" src="http://i.imgur.com/8DC4TSG.png"&gt;&lt;/p&gt;
&lt;p&gt;接著到設定頁面左下方，找到&lt;code&gt;Settings&lt;/code&gt;-&amp;gt;&lt;code&gt;Bot Settings&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;進入以下的畫面開啟Messaging &lt;span class="caps"&gt;API&lt;/span&gt;&lt;br&gt;
&lt;img alt="6_bot_setting" src="http://i.imgur.com/BtaSwa5.png"&gt;&lt;/p&gt;
&lt;p&gt;開啟Bot API後，就會不能用以下三個功能&lt;br&gt;
- 1-on-1 Chat&lt;br&gt;
- &lt;span class="caps"&gt;LINE&lt;/span&gt;@ app&lt;br&gt;
- Store&amp;nbsp;Chat&lt;/p&gt;
&lt;p&gt;之後會進到以下畫面&lt;br&gt;
記得要把&lt;code&gt;Use webhooks&lt;/code&gt;調成&lt;code&gt;Allow&lt;/code&gt;&lt;br&gt;
才能把這個Line Bot串到自己的server上&lt;br&gt;
&lt;img alt="7_bot_webhook" src="http://i.imgur.com/yqpw3x7.png"&gt;&lt;/p&gt;
&lt;p&gt;往下拉可以看到更多的選項&lt;br&gt;
&lt;img alt="8_bot_detail" src="http://i.imgur.com/nKegbk6.png"&gt;&lt;br&gt;
如果不想要Line每次收到訊息都自動幫你回覆&lt;br&gt;
就要把&lt;code&gt;Auto Reply Message&lt;/code&gt;調成&lt;code&gt;Don't Allow&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Greeting Message&lt;/code&gt;則是，剛加Bot為好友時的歡迎詞&lt;/p&gt;
&lt;p&gt;如果有需要對這些訊息做設定&lt;br&gt;
都可以在左手邊選單的&lt;code&gt;Messages&lt;/code&gt;找到&lt;/p&gt;
&lt;p&gt;再回到帳號清單就會看到，帳號已經開通Messaging API了&lt;br&gt;
&lt;img alt="9_finish_all_setting" src="http://i.imgur.com/io9LuHs.png"&gt;&lt;/p&gt;
&lt;p&gt;進到&lt;code&gt;LINE Developers&lt;/code&gt;就能取得你的Channel Secret和Channel Access Token了&lt;br&gt;
（這些都是運用Line Messaging&amp;nbsp;API會用到的）&lt;/p&gt;
&lt;p&gt;&lt;img alt="10_line_developers_page" src="http://i.imgur.com/cl8k3Mh.png"&gt;&lt;/p&gt;
&lt;p&gt;除了前面提到可以用ID加好友，也能透過這裡的QR&amp;nbsp;code&lt;/p&gt;
&lt;p&gt;另外要注意的是&lt;code&gt;Webhook URL&lt;/code&gt;&lt;br&gt;
這裡之後要填的就是你的Server的Webhook&amp;nbsp;url&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://developers.line.me/messaging-api/getting-started#apply_messagingapi"&gt;Enable the Messaging &lt;span class="caps"&gt;API&lt;/span&gt; for your &lt;span class="caps"&gt;LINE&lt;/span&gt;@&amp;nbsp;account&lt;/a&gt;&lt;/p&gt;</content><category term="Line"></category></entry><entry><title>[Bot] Introduction to Chatbot</title><link href="http://lee-w.github.io/posts/bot/2016/11/introduction-to-chatbot" rel="alternate"></link><published>2016-11-21T08:18:00+08:00</published><updated>2016-11-21T08:18:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-21:/posts/bot/2016/11/introduction-to-chatbot</id><summary type="html">&lt;p&gt;有人說聊天機器人Chat&amp;nbsp;Bot將要取代APP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://venturebeat.com/2016/08/02/why-chatbots-are-replacing-apps/"&gt;Why chatbots are replacing&amp;nbsp;apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chatbotslife.com/this-is-how-chatbots-will-kill-99-of-apps-2fd938a22c99#.tdfugot4m"&gt;This is how Chatbots will Kill 99% of&amp;nbsp;Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各大軟體公司也爭相提供Bot的服務&lt;br&gt;
</summary><content type="html">&lt;p&gt;有人說聊天機器人Chat&amp;nbsp;Bot將要取代APP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://venturebeat.com/2016/08/02/why-chatbots-are-replacing-apps/"&gt;Why chatbots are replacing&amp;nbsp;apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chatbotslife.com/this-is-how-chatbots-will-kill-99-of-apps-2fd938a22c99#.tdfugot4m"&gt;This is how Chatbots will Kill 99% of&amp;nbsp;Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各大軟體公司也爭相提供Bot的服務&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://messengerplatform.fb.com"&gt;Facebook Messenger&amp;nbsp;Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.line.me/messaging-api/overview"&gt;Line Messaging &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.slack.com"&gt;Slack &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://core.telegram.org/bots/api"&gt;Telegram Bot&amp;nbsp;Platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What can Bot&amp;nbsp;Do?&lt;/h2&gt;
&lt;p&gt;那Chat&amp;nbsp;Bot究竟能幹嘛呢?&lt;/p&gt;
&lt;p&gt;先來看段影片吧&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=C7ZuzJe24y4"&gt;【公式】&lt;span class="caps"&gt;BOT&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;THE&lt;/span&gt; &lt;span class="caps"&gt;NEW&lt;/span&gt; &lt;span class="caps"&gt;WORLD&lt;/span&gt; by &lt;span class="caps"&gt;LINE&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;影片中出現了什麼？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;預約餐廳&lt;/li&gt;
&lt;li&gt;訂車&lt;/li&gt;
&lt;li&gt;偵測beacon提供coupon&lt;/li&gt;
&lt;li&gt;遠端控制家中的IoT設備澆水&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原本在App上處理的這些服務&lt;br&gt;
未來都有可能逐漸被Chat&amp;nbsp;Bot所取代&lt;/p&gt;
&lt;h3&gt;背後發生了什麼事&lt;/h3&gt;
&lt;p&gt;e.g.&amp;nbsp;預約餐廳&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User傳一個訊息給Bot的帳號&lt;/li&gt;
&lt;li&gt;Bot把訊息傳給服務提供者的Server&lt;/li&gt;
&lt;li&gt;服務提供者的Server把訊息，傳給指定的Server&lt;/li&gt;
&lt;li&gt;指定的Server做了適當的運算和判斷，把結果回傳給服務提供者Server&lt;/li&gt;
&lt;li&gt;服務提供者Server收到後，再傳給User的帳號&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;e.g. Line Chat Bot 架構&lt;br&gt;
&lt;img alt="Line Chat Bot Architect" src="https://developers.line.me/wp-content/uploads/2016/09/bottrial-fig1.png"&gt;&lt;/p&gt;
&lt;h2&gt;Why Chat&amp;nbsp;Bot?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;市面上App太多了，要開發使用者黏著度高的App很困難&lt;/li&gt;
&lt;li&gt;每一個App都有自己的介面，對使用者都是一次學習成本&lt;ul&gt;
&lt;li&gt;不如把服務嵌入現在使用者常用的App&lt;br&gt;
  (e.g. Facebook Messenger,&amp;nbsp;Line)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文字是人類相對直覺的溝通方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why not Chat&amp;nbsp;Bot?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;設計彈性不如App&lt;ul&gt;
&lt;li&gt;雖然Chat&amp;nbsp;Bot大多提供按鍵等功能，但使用上的彈性不像App那麼大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文字處理依然不夠好&lt;ul&gt;
&lt;li&gt;簡單的Bot，如果使用者一直無法對應到相對的關鍵字，就無法觸發功能 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to Design a&amp;nbsp;Bot?&lt;/h2&gt;
&lt;p&gt;那麼開發一個Bot需要什麼呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;選擇使用的Bot平台 (e.g. Facebook Messenger Platform, Line Messaging &lt;span class="caps"&gt;API&lt;/span&gt; and&amp;nbsp;etc.)&lt;/li&gt;
&lt;li&gt;寫一些服務 (e.g.&amp;nbsp;訂票、新聞推播)&lt;/li&gt;
&lt;li&gt;把服務架在一台https&amp;nbsp;server&lt;/li&gt;
&lt;li&gt;用Bot平台提供的sdk，把Server跟平台串起來&lt;/li&gt;
&lt;li&gt;用NLP判斷使用者的意思，串接到服務上&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Chatbot Platform - Line Messaging &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;既然看了Line&amp;nbsp;Bot的新功能&lt;/p&gt;
&lt;p&gt;接下來的幾篇文章會談要如何在Line平台上&lt;br&gt;
做一個最簡單只會Echo的Chat&amp;nbsp;Bot&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;這篇文章整理了相當多的相關資源&lt;br&gt;
&lt;a href="https://stanfy.com/blog/the-rise-of-chat-bots-useful-links-articles-libraries-and-platforms/"&gt;The Rise of Chat Bots: Useful Links, Articles, Libraries and Platforms&lt;/a&gt;&lt;br&gt;&amp;nbsp;相當推薦對ChatBot有興趣的人參考&lt;/p&gt;
&lt;h1&gt;Slide&lt;/h1&gt;
&lt;p&gt;如果有點不喜歡看文章的，也可以看看&lt;a href="https://hackmd.io/p/HkW8LjRfl#/"&gt;slide&lt;/a&gt;的版本&lt;/p&gt;</content><category term="Line"></category></entry><entry><title>COSCUP 2016 小啄如何實作的</title><link href="http://lee-w.github.io/posts/bot/2016/10/coscup-2016-how-to-implement-small-pecks" rel="alternate"></link><published>2016-10-01T11:50:00+08:00</published><updated>2016-10-01T11:50:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-10-01:/posts/bot/2016/10/coscup-2016-how-to-implement-small-pecks</id><summary type="html">&lt;p&gt;今年COSCUP的聊天機器人「小啄」&lt;br&gt;
終於在今天宣告退休了&lt;br&gt;
退休前他讓我們詢問了「你是如何實作的」&lt;br&gt;
這邊是我測試的所有結果&lt;br&gt;
跟大家分享一下XD&lt;br&gt;
</summary><content type="html">&lt;p&gt;今年COSCUP的聊天機器人「小啄」&lt;br&gt;
終於在今天宣告退休了&lt;br&gt;
退休前他讓我們詢問了「你是如何實作的」&lt;br&gt;
這邊是我測試的所有結果&lt;br&gt;
跟大家分享一下XD&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;總結&lt;/h2&gt;
&lt;h3&gt;技術相關&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主要用Python開發&lt;/li&gt;
&lt;li&gt;使用Flask + Gunicorn +&amp;nbsp;Nginx，達到系統輕量化與多執行緒&lt;/li&gt;
&lt;li&gt;用redis作為文本儲存，&lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;Injection無效&lt;/li&gt;
&lt;li&gt;後台文本管理使用google sheet&lt;ul&gt;
&lt;li&gt;使用python的&lt;a href="https://github.com/burnash/gspread"&gt;gspred&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文案編輯完後，對bot下同步指令，將google&amp;nbsp;sheet資料更新到後端資料庫&lt;/li&gt;
&lt;li&gt;跟吃飯喝水一樣簡單，連麻瓜劇本管理員都會用（？？？？？？）&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://wit.ai/home"&gt;wit.ai&lt;/a&gt;&amp;nbsp;（這是我直接問開發者的，不是小啄回答的）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;小啄回覆的原文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;小啄的後台文本管理使用 google sheet，透過 python 的 gspread 套件進行溝通；當文案編輯完畢後，對 bot 下同步指令，後端就會透過 gspread 將 google sheet&amp;nbsp;的資料同步到後端資料庫唷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄的後台文本管理使用 google sheet，python 有個套件叫 gspread，讓你存取 google sheet&amp;nbsp;跟吃飯喝水一樣簡單！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄的後台文本管理使用 google sheet，python 有個套件叫 gspread，讓你存取 google sheet 跟吃飯喝水一樣簡單！&lt;br&gt;&amp;nbsp;真的超簡單的，連麻瓜劇本管理員都會用！（麻瓜忍不住一定要再說一次）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄使用的佈署環境是 Flask + Gunicorn + Nginx&amp;nbsp;的組合，藉此達成系統輕量化與多執行緒的接收訊息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄使用 redis 作為文本儲存系統，因此不要再試著 &lt;span class="caps"&gt;SQL&lt;/span&gt; Injection&amp;nbsp;喇，這是沒用的!!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄是採用 Python 做為主要的程式語言開發喔，因應短暫兩個禮拜的開發時間，可以快速建置的 Python&amp;nbsp;成為最佳選項！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄開發團隊核心人物有4+1個：三個寫扣手，一個文案小編，一個文案小編的助理．我們白天都有正職！文案小編和文案小編的助理是程式麻瓜&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你知道後台文本管理的劇本是怎麼產生出來的嗎？是劇本管理員在夜深人靜、抱著電腦想著所有使用者可能在使用中遇到哪些問題，套用哪些回應可以又好笑又不無聊、絞盡腦汁想出來的；也因此好幾天發現窗外鳥兒演唱會都在清晨五點左右開唱。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你有選英文模式小啄嗎？真抱歉人力不足，沒有能力提供好笑有趣的回饋讓大家使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(舉起誠實樹)&amp;nbsp;因為缺乏英文小編寫幽默風趣的回饋，所以團隊人員最後放棄英文幽默版小啄。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄 @&lt;span class="caps"&gt;LINE&lt;/span&gt; 開發時程只有兩週，要申請正式帳號前須到 &lt;span class="caps"&gt;LINE&lt;/span&gt; 本部進行 &lt;span class="caps"&gt;DEMO&lt;/span&gt;，當時大會還有些 &lt;span class="caps"&gt;API&lt;/span&gt; 沒開好、攤位集點巔峰賽還沒有畫好圖。嚴格說起來是大會團隊在忙其他緊急事件延遲了BOT&amp;nbsp;開發時程，請大家多包容唷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄 @&lt;span class="caps"&gt;LINE&lt;/span&gt; 上線前需要經過 &lt;span class="caps"&gt;LINE&lt;/span&gt;&amp;nbsp;內部審核，然後才會投單到日本總部申請上限；內部審核當天其實有些功能還沒做完啊啊啊啊啊&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;很可惜今年閃電秀沒有 &lt;span class="caps"&gt;COSCUP&lt;/span&gt; &lt;span class="caps"&gt;LINE&lt;/span&gt; &lt;span class="caps"&gt;BOT&lt;/span&gt; 的分享；而實際上我們是有報名的，只是沒有被抽到 &lt;span class="caps"&gt;QQ&lt;/span&gt;，想在明年看到團隊在議程上分享秘辛，請用力回饋：明年想看 小啄@&lt;span class="caps"&gt;LINE&lt;/span&gt;&amp;nbsp;分享&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開發團隊有報名閃電秀，可惜沒有被抽到，想進一步鼓勵團隊明年投稿，歡迎用力回饋：明年想看 小啄@&lt;span class="caps"&gt;LINE&lt;/span&gt;&amp;nbsp;分享&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="COSCUP"></category></entry></feed>