<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Life Lies in Traveling - Develop</title><link href="http://lee-w.github.io/" rel="alternate"></link><link href="http://lee-w.github.io/feeds/develop.atom.xml" rel="self"></link><id>http://lee-w.github.io/</id><updated>2018-10-14T21:00:00+08:00</updated><entry><title>Blog 風格修正</title><link href="http://lee-w.github.io/posts/develop/2018/10/fix-blog-style" rel="alternate"></link><published>2018-10-14T21:00:00+08:00</published><updated>2018-10-14T21:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2018-10-14:/posts/develop/2018/10/fix-blog-style</id><summary type="html">&lt;p&gt;一直以來都有發現 Blog 的風格有點小問題&lt;br&gt;
但都懶得去好好地找出問題&lt;br&gt;
這次終於下定決定修好它&lt;/p&gt;
</summary><content type="html">&lt;p&gt;一直以來都有發現 Blog 的風格有點小問題&lt;br&gt;
但都懶得去好好地找出問題&lt;br&gt;
這次終於下定決定修好它&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;起源其實是我的上一篇文被嘴了 QAQ&lt;/p&gt;
&lt;p&gt;&lt;img alt="your style is bad" src="http://lee-w.github.io/images/posts-image/2018-10-14-fix-blog-style/15385701963828.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="problem 1" src="http://lee-w.github.io/images/posts-image/2018-10-14-fix-blog-style/15385699268490.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="problem 2" src="http://lee-w.github.io/images/posts-image/2018-10-14-fix-blog-style/15385700601798.jpg"&gt;&lt;/p&gt;
&lt;p&gt;整理下來大概有三個問題&lt;br&gt;
1. 大小標的 margin&lt;br&gt;
2. 英文前後也空一格&lt;br&gt;
3. 第二行縮了四分之一字元&lt;/p&gt;
&lt;h2&gt;1. 大小標的 margin&lt;/h2&gt;
&lt;p&gt;這應該是三個問題中最簡單的&lt;br&gt;
但我有點懶得動 CSS ，所以就先不修了 xD&lt;/p&gt;
&lt;h2&gt;2. 英文前後也空一格&lt;/h2&gt;
&lt;p&gt;剛好最近看到了&lt;a href="https://github.com/sparanoid/chinese-copywriting-guidelines#中文文案排版指北"&gt;中文文案排版指北&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;才發現原來&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「有研究顯示，打字的時候不喜歡在中文和英文之間加空格的人，感情路都走得很辛苦，有七成的比例會在 34 歲的時候跟自己不愛的人結婚，而其餘三成的人最後只能把遺產留給自己的貓。畢竟愛情跟書寫都需要適時地留白。與大家共勉之。」&lt;br&gt;
——vinta/paranoid-auto-spacing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;總之，這也不是特別難處理的問題&lt;br&gt;
只要透過 &lt;a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk"&gt;add-space-between-latin-and-cjk&lt;/a&gt; 再加上 &lt;code&gt;os.walk()&lt;/code&gt; 就能解決了&lt;br&gt;
不過還是會遇到一些不該加空格的地方，也被加空格了&lt;br&gt;
但也只要用 &lt;code&gt;git diff&lt;/code&gt; 再確認一下哪裡有被 script 修改過就可以了&lt;/p&gt;
&lt;h2&gt;3. 第二行縮了四分之一字元&lt;/h2&gt;
&lt;p&gt;這個問題就比較頭痛了&lt;br&gt;
因為我在模板找到這段的內容是&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{{ article.content }}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是説這個多的空白是 &lt;a href="https://github.com/getpelican/pelican"&gt;pelican&lt;/a&gt; (我用的 static blog generator) 所產生的&lt;br&gt;
我沒有辦法透過單純的修改 HTML, CSS 來修正這個問題&lt;br&gt;
必須要找到 pelican 是從哪產生出這個空白的&lt;br&gt;
於是就開始我的 trace pelican 的之旅&lt;/p&gt;
&lt;p&gt;接下來，就是一連串的 trace 過程&lt;br&gt;
不想看可以透過&lt;a href="#transport"&gt;傳送門&lt;/a&gt;直接跳到解法&lt;/p&gt;
&lt;h3&gt;pelican/readers.py (first try)&lt;/h3&gt;
&lt;p&gt;要找到 Markdown 是在哪被 parse 並產生內容的並不困難&lt;br&gt;
(&lt;code&gt;pelican/readers.py&lt;/code&gt; 的 &lt;a href="https://github.com/getpelican/pelican/blob/ee24ad1821774db2bfb199100eced17270a961d3/pelican/readers.py#L334"&gt;334行&lt;/a&gt;)&lt;br&gt;
透過一些測試，發現這段的行為是因為有了多的 &lt;code&gt;\n&lt;/code&gt; 造成了多的空白&lt;br&gt;
第一個猜想是某些情況下的 &lt;code&gt;\n&lt;/code&gt; 沒有成功的被移除掉&lt;br&gt;
所以只要加一行 &lt;code&gt;content.replace('\n', '')&lt;/code&gt; 確保全部的 &lt;code&gt;\n&lt;/code&gt; 都被移除，應該就可以了&lt;/p&gt;
&lt;p&gt;一開始問題也真的解決了&lt;br&gt;
直到我用到 markdown中的 ``` 語法才又出現問題&lt;br&gt;
在整個 code block 中的 code 全部都黏在一起沒有斷行&lt;br&gt;
看來這個做法是行不通...&lt;/p&gt;
&lt;p&gt;只好認命的從我平常產生文章的指令一步一步追回去&lt;br&gt;
trace 的過程還有踩到一個雷是「pip 裝的 pelican 並不是 master 上的版本」&lt;br&gt;
所以我還必須要切到 &lt;a href="https://github.com/getpelican/pelican/tree/3.7.1"&gt;3.7.1版&lt;/a&gt; 才能開始解決我遇到的問題&lt;/p&gt;
&lt;h4&gt;setup.py&lt;/h4&gt;
&lt;p&gt;平常我都是透過 &lt;code&gt;pelican -r -o output -s pelicanconf.py&lt;/code&gt;這個指令來產生文章&lt;br&gt;
所以第一步就是要從 &lt;a href="https://github.com/getpelican/pelican/blob/master/setup.py#L15"&gt;setup.py&lt;/a&gt; 找出 pelican 這個指令是哪裡來的&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pelican = pelican:main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;pelican/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/h4&gt;
&lt;p&gt;既然在 &lt;a href="https://github.com/getpelican/pelican/tree/3.7.1/pelican"&gt;pelican&lt;/a&gt; 這個 package 中沒有 &lt;code&gt;main.py&lt;/code&gt;&lt;br&gt;
那 Python 還能找到 &lt;code&gt;main&lt;/code&gt; 就只剩下 &lt;code&gt;__init__.py&lt;/code&gt; &lt;br&gt;
扣除掉一些 parse 指令參數的程式碼&lt;br&gt;
接下來最像是產生文章的程式碼就是&lt;a href="https://github.com/getpelican/pelican/blob/master/pelican/__init__.py#L147"&gt;147行&lt;/a&gt; 的 &lt;code&gt;run&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;generate_context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下一步就是要從 &lt;code&gt;generators&lt;/code&gt; 找出 &lt;code&gt;generate_context&lt;/code&gt; 這個函式&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelican.generators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArticlesGenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PagesGenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;SourceFileGenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StaticGenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;TemplatePagesGenerator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;pelican/generators.py&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;generators&lt;/code&gt;中看起來最有關的就是 &lt;code&gt;ArticlesGenerator&lt;/code&gt;&lt;br&gt;
這個 class 也找到了 &lt;code&gt;generate_context&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;article_or_draft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;base_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;preread_signal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_generator_preread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;preread_sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;context_signal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_generator_context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;context_sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡找到的是文章被產生的地方&lt;br&gt;
只要能在找到文章中的內容是在哪產生，應該就能解決我的問題&lt;br&gt;
所以下一步就是要再去找到 &lt;code&gt;Readers&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;pelican/reader.py&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Readers&lt;/code&gt; 在這個檔案的&lt;a href="https://github.com/getpelican/pelican/blob/3.7.1/pelican/readers.py#L486"&gt;486行&lt;/a&gt;&lt;br&gt;
接著 trace 這個 class 到&lt;a href="https://github.com/getpelican/pelican/blob/3.7.1/pelican/readers.py#L526"&gt;526行&lt;/a&gt;就真的是文章內容第一次被產生的地方&lt;br&gt;
到目前為止，文章的內容還是沒有多餘的空白&lt;br&gt;
所以順利的話只要從這繼續 trace 下去就能找出問題&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader_metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cached_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader_metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader_metadata&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後發現問題是出在 &lt;a href="https://github.com/getpelican/pelican/blob/3.7.1/pelican/readers.py#L555"&gt;555行&lt;/a&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typogrify_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要不對 &lt;code&gt;content&lt;/code&gt; 做 &lt;code&gt;typogrify_wrapper&lt;/code&gt;就不會產生多餘的空白&lt;/p&gt;
&lt;p&gt;&lt;a id='transport'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;typogrify&lt;/h4&gt;
&lt;p&gt;typogrify 是 &lt;code&gt;pelicanconf.py&lt;/code&gt; (pelican 的設定檔) 中的一個設定&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TYPOGRIFY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要關掉 typogrify 就不會再產生出多餘的空白&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mintchaos/typogrify"&gt;typogrify&lt;/a&gt; 看來是某種加強 HTML 的工具&lt;br&gt;
我試過要把 &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 跟 &lt;code&gt;&amp;amp;nbsp&lt;/code&gt; 加入 &lt;code&gt;TYPOGRIFY_IGNORE_TAGS&lt;/code&gt;&lt;br&gt;
不過看來還是沒辦法解決&lt;br&gt;
最後只好把 typogrify 整個關掉了&lt;/p&gt;
&lt;h2&gt;後記&lt;/h2&gt;
&lt;p&gt;其實這也只是個無傷大雅的小問題&lt;br&gt;
但真的是花了我不少時間才找到真正的問題所在&lt;/p&gt;
&lt;p&gt;前幾次都能透過 trace 原始碼，找到 library 的一些小問題&lt;br&gt;
也丟了幾個 Pull Request&lt;br&gt;
不過看來這次沒能再多貢獻什麼&lt;br&gt;
雖然好像有找到可能從 typogrify 解決掉這個 issue的方式&lt;br&gt;
但要再把它加入 pelican 變成一種 config 還是有些麻煩 xD&lt;/p&gt;</content></entry><entry><title>從 Andromoney 到 MOZE</title><link href="http://lee-w.github.io/posts/develop/2018/09/from-andromoney-to-moze" rel="alternate"></link><published>2018-09-09T16:00:00+08:00</published><updated>2018-09-09T16:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2018-09-09:/posts/develop/2018/09/from-andromoney-to-moze</id><summary type="html">&lt;p&gt;最近不小心被 &lt;a href="https://www.mozeapp.com"&gt;MOZE&lt;/a&gt; 的介面燒到&lt;br&gt;
一個衝動就從 &lt;a href="https://web.andromoney.com"&gt;AndroMoney&lt;/a&gt; 轉到 MOZE&lt;br&gt;
這篇算是來記錄從 AndroMoney 把資料轉換到 MOZE 的過程&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近不小心被 &lt;a href="https://www.mozeapp.com"&gt;MOZE&lt;/a&gt; 的介面燒到&lt;br&gt;
一個衝動就從 &lt;a href="https://web.andromoney.com"&gt;AndroMoney&lt;/a&gt; 轉到 MOZE&lt;br&gt;
這篇算是來記錄從 AndroMoney 把資料轉換到 MOZE 的過程&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;一些無關本文的前言&lt;/h2&gt;
&lt;p&gt;雖然 X-Village 暫時告一個段落，好像應該來寫個什麼&lt;br&gt;
但真的要寫起來還要再花一點時間&lt;/p&gt;
&lt;p&gt;上次 Blog 發文都已經是一年前的事了&lt;br&gt;
但點閱率竟然有一點在上升（雖然還是很低 QAQ）&lt;br&gt;
還有一些人看了我在 Logdown 的 LineBot 文跑來找我討論&lt;br&gt;
覺得蠻開心的 xD&lt;br&gt;
但這邊還是一直都沒辦法被找到 QQ&lt;br&gt;
以後考慮同步發到 Medium 好了&lt;/p&gt;
&lt;p&gt;不過好像該進入本文了 xD&lt;/p&gt;
&lt;h2&gt;為什麼換到 MOZE&lt;/h2&gt;
&lt;p&gt;當初在 Android 上使用 AndroMoney 就只是因為他免費，而且還算是好用&lt;br&gt;
剛好換到 iOS 的時候，這款 app 也在 App Store 有上架&lt;br&gt;
懶得轉換資料的情況下就繼續買了&lt;br&gt;
用下來覺得 AndroMoney 好像還是在 Android 上比較好用&lt;br&gt;
AndroMoney 的各種功能都很方便，只是介面上就比較普通 xD&lt;br&gt;
而且 AndroMoney 各個平台都有，就算哪天想換 Android 的手機也不怕轉換問題&lt;br&gt;
但是啊， MOZE 的介面就是好看 xD&lt;/p&gt;
&lt;p&gt;再來就要說說其他我喜歡 MOZE 的原因&lt;/p&gt;
&lt;h3&gt;AndroMoney 沒有 (或我不會用) 的功能&lt;/h3&gt;
&lt;h4&gt;借款事件&lt;/h4&gt;
&lt;p&gt;&lt;img alt="3-borrow.png" src="http://lee-w.github.io/images/posts-image/2018-09-09-andromoney-to-moze/3-borrow.png"&gt;&lt;/p&gt;
&lt;p&gt;MOZE 會幫我記住我借錢給誰，而且會一直提醒我誰跟我借了錢&lt;br&gt;
以前都還要特地記錄到其他 app&lt;/p&gt;
&lt;p&gt;&lt;img alt="4-borrow.png" src="http://lee-w.github.io/images/posts-image/2018-09-09-andromoney-to-moze/4-borrow.png"&gt;&lt;br&gt;
而且借出的錢，不會算在我的支出，所以也不會影響到我的預算&lt;br&gt;
算是蠻方便的功能&lt;/p&gt;
&lt;h4&gt;繳費事件&lt;/h4&gt;
&lt;p&gt;提醒我信用卡要繳費的時間&lt;br&gt;
也會有跟借款事件差不多的提醒&lt;/p&gt;
&lt;h4&gt;動態改變每天剩餘的預算&lt;/h4&gt;
&lt;p&gt;這是一個我還蠻需要的功能&lt;br&gt;
我會想知道前幾天花的錢如何影響我這個月剩下的日子的預算&lt;br&gt;
而不是一個從月初的預算直接除以 30 都不改變的數字&lt;/p&gt;
&lt;h4&gt;帳戶 icon&lt;/h4&gt;
&lt;p&gt;每個帳戶都能加入自己的 icon&lt;br&gt;
只要是付費版的 MOZE 就會有各家銀行的 icon&lt;br&gt;
&lt;img alt="5-icon.jpeg" src="http://lee-w.github.io/images/posts-image/2018-09-09-andromoney-to-moze/5-icon.jpeg"&gt;&lt;br&gt;
雖然他說是付費圖示，但其實這幾個是免費的&lt;br&gt;
只有其他類別的彩色圖是要購買&lt;br&gt;
但我是覺得原本的我比較喜歡 xD&lt;br&gt;
另外，也可以自己製作想要的 icon 匯入 ~&lt;/p&gt;
&lt;h4&gt;電子發票載具&lt;/h4&gt;
&lt;p&gt;以前都沒有什麼要用電子載具的誘因&lt;br&gt;
就完全忘了這回事&lt;br&gt;
現在這個可以直接幫我記帳就很吸引我&lt;br&gt;
而且他也有支援 wideget ，給店家掃過後，馬上就能用 Apple Pay&lt;/p&gt;
&lt;p&gt;另外，我原本以為從雲端載下消費紀錄，一定會要再創一個紀錄&lt;br&gt;
但其實這是可以連結到某一筆過去的紀錄&lt;br&gt;
這對我也是蠻重要的功能&lt;/p&gt;
&lt;p&gt;只是目前好像還不能針對轉帳或借款事件歸帳&lt;br&gt;
希望這些能透過 MOZE 3.0 會有的分帳功能解決&lt;/p&gt;
&lt;h4&gt;拆帳 (MOZE 3.0 才有)&lt;/h4&gt;
&lt;p&gt;雖然目前還沒有，但這個功能我現在很期待&lt;br&gt;
所以還是想列一下 xD&lt;/p&gt;
&lt;h3&gt;MOZE 沒有 (或我不會用) 的功能&lt;/h3&gt;
&lt;h4&gt;專案不能跨幣別&lt;/h4&gt;
&lt;p&gt;我之前去歐洲的那些紀錄就因為這樣，必須用標籤來分類 QQ&lt;br&gt;
不過聽說 MOZE 3.0 會新增就是&lt;/p&gt;
&lt;h4&gt;不能將單一紀錄不計算在花費中&lt;/h4&gt;
&lt;p&gt;主要是有些特別的花費我不會想要扣在我的預算中&lt;br&gt;
這樣那個月剩下的天數的預算就都會是 0，好像也不太對 ...&lt;/p&gt;
&lt;h4&gt;【AndroMoney 功能教學目錄】&lt;/h4&gt;
&lt;p&gt;這個我真的覺得超棒的&lt;br&gt;
他把目前能用他現有功能做到的事，全部整理起來&lt;br&gt;
現在 MOZE 還是比較需要去爬舊文翻，或直接問粉專&lt;br&gt;
但不得不說 MOZE 回復速度真的超快&lt;/p&gt;
&lt;h2&gt;AndroMoney to MOZE transformater&lt;/h2&gt;
&lt;p&gt;身為一個攻城獅，當然還是要寫自動化的程式來幫我轉換資料格式&lt;br&gt;
手動要處理 5、6000 筆帳務紀錄有點太累了&lt;br&gt;
btw MOZE 有說之後會提供 web 版的匯入工具&lt;/p&gt;
&lt;p&gt;在 MOZE 首頁 FAQ 可以找到要如何匯入資料 (&lt;a href="https://docs.google.com/spreadsheets/d/1OeVuhID8l_vhmjHbDKReAXcLkIi0NvDUDIAwD9I8AYQ/edit?usp=sharing"&gt;MOZE 格式&lt;/a&gt;)&lt;br&gt;
基本上就是照著他的格式就能轉換大部分的資料&lt;/p&gt;
&lt;p&gt;當然我也寫了一個小 script&lt;br&gt;
&lt;strong&gt;&lt;a href="https://github.com/Lee-W/AndroMoney_to_MOZE_transformater"&gt;AndroMoney_to_MOZE_transformater&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Script 使用方式&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python transformater.py --input_file &lt;span class="s2"&gt;&amp;quot;Your input filename&amp;quot;&lt;/span&gt; extract
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在轉換的過程中，會有一些資料還是要手動輸入的&lt;br&gt;
其實後來大多時間是花在這 ...&lt;/p&gt;
&lt;p&gt;會抓出的資料有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帳戶（以及其起始金額）&lt;/li&gt;
&lt;li&gt;專案&lt;/li&gt;
&lt;li&gt;主類別、次類別&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;後來發現還有另一個問題是不同幣別的轉帳， AndroMoney 匯出的資料不會有轉入的金額&lt;br&gt;
所以沒辦法自動化，這點倒是比較麻煩&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python transformater.py transformat --input_file &lt;span class="s2"&gt;&amp;quot;Your input filename&amp;quot;&lt;/span&gt; --output_file MOZE.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來就是要把原本 AndroMoney 的紀錄轉成 MOZE 的格式&lt;br&gt;
只要把這個 &lt;code&gt;MOZE.csv&lt;/code&gt; (一定要是這個檔名) 丟到 Dropbox 的 &lt;code&gt;應用程式/MOZE&lt;/code&gt;&lt;br&gt;
MOZE 就能找到，並能選擇匯入&lt;/p&gt;
&lt;h3&gt;踩到的一些坑&lt;/h3&gt;
&lt;p&gt;寫這個 script 的過程中，其實踩到蠻多坑的&lt;br&gt;
匯入了好幾次才成功&lt;/p&gt;
&lt;p&gt;一來這是我第一次從&lt;a href="https://docs.python.org/3/library/argparse.html"&gt;argparse&lt;/a&gt; 換到&lt;a href="http://click.pocoo.org"&gt;click&lt;/a&gt;&lt;br&gt;
原本想說 argparse 已經算是蠻好用的了&lt;br&gt;
click 真的又更直覺了一點，難怪這麼多人推薦&lt;/p&gt;
&lt;p&gt;第一個遇到的問題就是轉帳的「相關行數」&lt;br&gt;
一開始不知道這個行數是從多少開始&lt;br&gt;
以寫程式來說，我就直接去抓那個 row 的 index&lt;br&gt;
所以抓到的 index 是 0-based&lt;br&gt;
後來想到可以試試看 1-based，還是無法匯入成功&lt;br&gt;
最後才發現還要把標頭也考慮進去&lt;br&gt;
第一個 row 其實 index 是 2&lt;/p&gt;
&lt;p&gt;第二個問題是轉帳的類別&lt;br&gt;
文件其實只說不用「子類別」，沒說「主類別」要怎麼處理 xD&lt;br&gt;
我試了各種可能的類別後&lt;br&gt;
自己去匯出了一筆轉帳紀錄，才解決&lt;br&gt;
原來轉帳的主類別分別會是「轉入」跟「轉出」&lt;br&gt;
&lt;img alt="1-doc.png" src="http://lee-w.github.io/images/posts-image/2018-09-09-andromoney-to-moze/1-doc.png"&gt;&lt;/p&gt;
&lt;p&gt;後來弄完後有再去看一下文件，才發現下面其實有寫 ......&lt;br&gt;
&lt;img alt="2-doc.png" src="http://lee-w.github.io/images/posts-image/2018-09-09-andromoney-to-moze/2-doc.png"&gt;&lt;/p&gt;
&lt;p&gt;這些問題我都跟作者反應了，他都超快就回了&lt;br&gt;
他是說之後會透過 web 版的工具匯入&lt;/p&gt;
&lt;h2&gt;Future Improvement&lt;/h2&gt;
&lt;p&gt;其實我還是蠻喜歡 AndroMoney 的&lt;br&gt;
所以也許會找個時間寫怎麼把 MOZE 轉回 AndroMoney 的功能會寫個 MOZE to AndroMoney&lt;br&gt;
避免我哪天又想回到 Android 了 xD&lt;/p&gt;</content><category term="Utility"></category></entry></feed>