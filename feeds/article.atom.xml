<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Life Lies in Traveling - Article</title><link href="http://lee-w.github.io/" rel="alternate"></link><link href="http://lee-w.github.io/feeds/article.atom.xml" rel="self"></link><id>http://lee-w.github.io/</id><updated>2017-02-03T00:53:00+08:00</updated><entry><title>我如何更有效率的使用時間</title><link href="http://lee-w.github.io/posts/article/2017/02/how-do-i-manage-time" rel="alternate"></link><published>2017-02-03T00:53:00+08:00</published><updated>2017-02-03T00:53:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-02-03:/posts/article/2017/02/how-do-i-manage-time</id><summary type="html">&lt;p&gt;過年整理了好多以前的書摘&lt;br&gt;
好像該來發一點自己的東西了&lt;/p&gt;
&lt;p&gt;前一段時間被找回母系演講&lt;br&gt;
被問了，我是怎麼管理時間的&lt;br&gt;
</summary><content type="html">&lt;p&gt;過年整理了好多以前的書摘&lt;br&gt;
好像該來發一點自己的東西了&lt;/p&gt;
&lt;p&gt;前一段時間被找回母系演講&lt;br&gt;
被問了，我是怎麼管理時間的&lt;br&gt;
&lt;!--more--&gt;&lt;br&gt;
當下沒有回答的很好&lt;br&gt;
於是乎就有了這篇文章XD&lt;/p&gt;
&lt;h2&gt;如何達到一個目標&lt;/h2&gt;
&lt;p&gt;我們常常會給自己定一個很大的目標&lt;br&gt;
像是我要看完"Learning Python" (一本1400頁的Python教學書）&lt;br&gt;
嗯，聽起來好像也不太大&lt;br&gt;
不過至少這不太容易在一天內完成&lt;/p&gt;
&lt;p&gt;剛定下目標的時候，會很有衝勁的去做&lt;br&gt;
過了一段時間就會發現，怎麼離完成目標還是好遠&lt;br&gt;
再來我們就會去做一些比較容易達成的事，像是滑個FB、整理一下e-mail&lt;br&gt;
然後這個目標就會擺在這，等到很久以後再想起它&lt;br&gt;
恩，就像新年新希望一樣&lt;/p&gt;
&lt;h3&gt;怎麼樣才能達到目標呢？&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;每天做一點點
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我非常喜歡&lt;a href="https://youtu.be/by0tCDO36qQ"&gt;Act Small&lt;/a&gt;這支影片&lt;br&gt;
他把目標比喻成走完一千階的階梯&lt;br&gt;
光是看著這長長的階梯就會讓人感到挫折和疲憊&lt;br&gt;
這時候我們會先去吃個早餐、遛個狗，做些輕鬆可以達到的事&lt;br&gt;
想辦法拖延要爬上這個階梯這件苦差事&lt;br&gt;
但是，如果我們試著不要只專注在很遙遠的目標&lt;br&gt;
而是眼前的每一個小階梯&lt;br&gt;
走一個小階梯，並不會讓人感到壓力&lt;br&gt;
但是每天都走這簡單的一小步，最後就會達到甚至超過這一千階的階梯&lt;/p&gt;
&lt;p&gt;訂下目標後，要把目標拆解成一個個很小很明確的行動&lt;br&gt;
最好是可以小到不會讓人感受到壓力&lt;br&gt;
再來就是每天不斷地完成這些小小的行動&lt;/p&gt;
&lt;p&gt;這部影片是&lt;a href="http://dailysuccessweb.com"&gt;Daily Checklist&lt;/a&gt;的社群分享的&lt;br&gt;
這個App可以幫我們追蹤今天是不是完成了要達成的行動，到了凌晨12點就會重設Checklist&lt;br&gt;
接下來會提到這個App，如何幫我達成目標&lt;/p&gt;
&lt;h2&gt;如何養成習慣&lt;/h2&gt;
&lt;p&gt;那麼把目標拆解成很小的行動後&lt;br&gt;
要怎麼堅持每天都要走這一小步，而不會半途而廢呢？&lt;/p&gt;
&lt;p&gt;這裡非常推薦大家看「&lt;a href="http://lee-w-blog.logdown.com/posts/334155-the-power-of-habit"&gt;為什麼我們這樣生活，那樣工作?&lt;/a&gt;」（連結是我的書摘）&lt;/p&gt;
&lt;p&gt;裡面提到要養成一個習慣的條件有以下四個&lt;br&gt;
1. 提示&lt;br&gt;
2. 慣性行為 （習慣）&lt;br&gt;
3. 獎籌&lt;br&gt;
4. 創造渴望&lt;/p&gt;
&lt;p&gt;以我最前面說我要看完"Learning Python"為例&lt;br&gt;
我會定只要某個時間一到，我就得要看這本書&lt;br&gt;
只要我花了一個小時看它，我就會在Daily Checklist，按下check，表示我看完今天的進度了&lt;br&gt;
如果我突然怠惰不想看，就會中斷我連續達成這個行動的累績次數&lt;br&gt;
也會讓我今天的習慣達成率沒辦法達到100%&lt;br&gt;
這都會驅使我今天就算只做一點點，也要努力再前進一小步&lt;/p&gt;
&lt;p&gt;把這些敘述換成剛剛所提到的四個條件&lt;br&gt;
1. 提示 -&amp;gt; 時間到了&lt;br&gt;
2. 慣性行為 （習慣）-&amp;gt; 看Learning Python&lt;br&gt;
3. 獎酬 -&amp;gt; 在Checklist上打個勾&lt;br&gt;
4. 創造渴望 -&amp;gt; 我要讓Checklist上的達成率達到100%&lt;/p&gt;
&lt;p&gt;而且隨著達到的目標越來越多&lt;br&gt;
就會感到更有成就感&lt;br&gt;
越來越相信自己可以做到這些事情&lt;/p&gt;
&lt;p&gt;透過追蹤自己習慣和時間使用&lt;br&gt;
可以讓自己知道接下來要從哪裡修正起&lt;br&gt;
如果自己漸漸有進步，就會有成就感繼續堅持下去&lt;/p&gt;
&lt;p&gt;除了Daily Checklist，另外也推薦追蹤工作時間用的&lt;a href="https://www.toggl.com"&gt;Toggl&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;一天不做，不會怎樣啦&lt;/h3&gt;
&lt;p&gt;花了好久時間建立的習慣，還是會有想怠惰的時候&lt;/p&gt;
&lt;p&gt;我很喜歡「&lt;a href="http://lee-w-blog.logdown.com/posts/807950-how-will-you-measure-your-life"&gt;你如何衡量你的人生&lt;/a&gt;」的一句話&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;百分之百的堅持比百分之九十八容易
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦你放下了這個堅持，之後就會更容易放下&lt;br&gt;
反之，如果一直堅持，就會有力量讓自己一直堅持下去&lt;/p&gt;
&lt;h2&gt;時間有限，做出選擇&lt;/h2&gt;
&lt;p&gt;再來可能會再遇到下一個問題&lt;br&gt;
想完成的事情太多，能分配的時間太少&lt;/p&gt;
&lt;p&gt;這就是必須做出選擇的時候了&lt;br&gt;
那麼要怎麼決定那些事情是真的很重要，要留下來的呢？&lt;br&gt;
這裡我要推薦的書是「&lt;a href="http://lee-w-blog.logdown.com/posts/618655-essentialism"&gt;少，但是更好&lt;/a&gt;」&lt;br&gt;
不過如果要給一個最簡單的原則，那就是&lt;a href="https://www.youtube.com/watch?time_continue=60&amp;amp;v=1ehWlVeMrqw"&gt;No more yes. It's Either HELL YEAH! Or No&lt;/a&gt;&lt;br&gt;
&lt;code&gt;如果這件事不是「太棒了！我一定要去做！！！」，那麼就不要做了&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外一個更明確的做法是&lt;a href="http://www.artofmanliness.com/2017/01/09/work-deliberately-instead-reactively-rule-3/?utm_source=pocket&amp;amp;utm_medium=email&amp;amp;utm_campaign=pockethits"&gt;Rule of Three&lt;/a&gt;&lt;br&gt;
在一天結束前，為明天定下三件重要而且一定要完成的事&lt;br&gt;
只要三件，&lt;code&gt;可以少，但不可以多&lt;/code&gt;，就算只有一件也很好&lt;br&gt;
只要這三件事情還沒有達成就不能做其他的事&lt;br&gt;
這樣做的好處是可以明確的知道接下來要做什麼，大腦的負擔會比較小&lt;br&gt;
也不會讓自己因為有太多未完成的代辦事項而分心&lt;/p&gt;
&lt;h2&gt;意志力有限&lt;/h2&gt;
&lt;p&gt;人的意志力是非常有限的&lt;br&gt;
所以留給一點彈性給自己吧&lt;br&gt;
不要把整天都排滿工作，適時的排給自己一點休閒&lt;br&gt;
人畢竟不是機器，沒辦法不停的工作&lt;br&gt;
尤其到了越晚，意志力會越來越薄弱&lt;br&gt;
所以我會盡量把重要的習慣，擺在早上做完&lt;/p&gt;
&lt;p&gt;如果真的累了，就休息吧&lt;br&gt;
不論是體力上的疲憊，或只是意志力的消磨殆盡&lt;br&gt;
死撐著也只是無意義的消磨時間，而且還有可能導致工作出錯&lt;/p&gt;
&lt;p&gt;不過休息就真的休息，聽點音樂或什麼的都好&lt;br&gt;
去滑臉書、收信件、看新聞，這些往往會讓意志力恢復得更慢&lt;/p&gt;
&lt;h2&gt;後記&lt;/h2&gt;
&lt;p&gt;其實我一直想花時間，紀錄一下服役時間各種嘗試讓自己更有效率的方法&lt;br&gt;
今天終於下定決心好好的寫這篇文章&lt;/p&gt;
&lt;p&gt;大三、大四的那兩年，好像常常把自己搞得很忙&lt;br&gt;
雖然不算沒有做到事&lt;br&gt;
但總覺得自己好像有點是在瞎忙&lt;br&gt;
明明花這些時間應該可以做更多的事&lt;/p&gt;
&lt;p&gt;服役期間，剛好坐我隔壁的學長很喜歡看書&lt;br&gt;
就漸漸地養成一週至少會看一本書的習慣&lt;br&gt;
上面提到的這些書也都是這段時期看的&lt;br&gt;
後來就漸漸把這些應用在其他我想學想做的事情上&lt;br&gt;
第一次好好上完一個為期三個月的線上課程，其實蠻有成就感的&lt;/p&gt;
&lt;p&gt;再來遇到的問題就是，在這之後我排了太多的線上課程和想看的書&lt;br&gt;
有時候白天工作量比較多，回到宿舍還要持續好幾個小時的work&lt;br&gt;
實在太讓人吃不消&lt;br&gt;
所以我重新檢視了我的計劃和每天要達成的習慣&lt;br&gt;
哪些是真的重要的&lt;br&gt;
這些事又要怎麼拆解才能不會讓我太費力，或只要多花一點力，不會很容易半途而廢的&lt;/p&gt;
&lt;p&gt;這些只是我嘗試覺得有用的方法&lt;br&gt;
不見得適用於每個人&lt;br&gt;
不過也許都能去嘗試看看，相信總會有一些有幫助的部分&lt;/p&gt;</content><category term="productivity"></category></entry><entry><title>[Bot] More than Just Echo Bot</title><link href="http://lee-w.github.io/posts/article/2016/11/more-than-just-echo-bot" rel="alternate"></link><published>2016-11-29T01:57:00+08:00</published><updated>2016-11-29T01:57:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-29:/posts/article/2016/11/more-than-just-echo-bot</id><summary type="html">&lt;p&gt;知道怎麼實作一個會Echo的Bot後&lt;br&gt;
再來就要思考，開發一個Bot我們要提供什麼功能&lt;br&gt;
(e.g. 天氣查詢, 訂票, 推薦旅遊景點)&lt;/p&gt;
&lt;p&gt;不過這裡要討論的不是Bot的功能&lt;br&gt;
Bot的功能實作，跟一般網站或App的實作並沒有太大的差別&lt;/p&gt;
&lt;p&gt;接下來來談如何從使用者說的話來判斷，使用者要使用的功能&lt;/p&gt;
</summary><content type="html">&lt;p&gt;知道怎麼實作一個會Echo的Bot後&lt;br&gt;
再來就要思考，開發一個Bot我們要提供什麼功能&lt;br&gt;
(e.g. 天氣查詢, 訂票, 推薦旅遊景點)&lt;/p&gt;
&lt;p&gt;不過這裡要討論的不是Bot的功能&lt;br&gt;
Bot的功能實作，跟一般網站或App的實作並沒有太大的差別&lt;/p&gt;
&lt;p&gt;接下來來談如何從使用者說的話來判斷，使用者要使用的功能&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;如果使用者問：「今天天氣如何？」「天氣今天好嗎？」&lt;br&gt;
要如何知道，他都是要詢問今天的天氣狀況&lt;br&gt;
也就是使用者的「意圖」&lt;/p&gt;
&lt;h2&gt;Based on Keyword&lt;/h2&gt;
&lt;p&gt;上一篇文章，輸入關鍵字就能回傳template message的bot也是用這樣的方式實作的&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;button&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Send ButtonTemplate&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Send ConfirmTemplate&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;carousel&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Send CarouselTemplate&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Echo TextMessage&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;回歸到天氣的問題&lt;br&gt;
可以試著找出「天氣」是否有出現在使用者的問句中&lt;br&gt;
再來判斷「今天」, 「明天」這樣敘述時間的詞&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;天氣&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;今天&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;today_s_weather&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;明天&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tomorrow_s_weather&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不需要其他的背景知識，容易實作&lt;/li&gt;
&lt;li&gt;運算量小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;建立規則很麻煩&lt;/li&gt;
&lt;li&gt;規則很容易就會出現例外，很難定義得完整&lt;ul&gt;
&lt;li&gt;只要使用者無法觸發到關鍵字，就無法使用功能 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一堆if else造成程式冗長，不易擴充和維護&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;AIML&lt;/h2&gt;
&lt;p&gt;Artificial Intelligence Modelling Language&lt;br&gt;
它是一款基於XML的markup language&lt;/p&gt;
&lt;p&gt;這是最基本的AIML&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;aiml&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0.1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;encoding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;category&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt; HELLO ALICE &lt;span class="nt"&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
         Hello User!
      &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/aiml&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要符合特定的pattern，就回傳指定的template&lt;br&gt;
也能透過&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;這樣的tag，從多種回覆隨機丟一種回傳&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;random&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; response1 &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; response2 &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
   ...
&lt;span class="nt"&gt;&amp;lt;/random&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;比起只用if else更結構化，較易維護和擴充&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;依然很難包含所有的狀況&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other NLP Service&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wit.ai"&gt;Wit.ai&lt;/a&gt; (Facebook)&lt;ul&gt;
&lt;li&gt;COSCUP 2016的聊天機器人小啄，就是透過Wit.ai實作的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.luis.ai"&gt;LUIS&lt;/a&gt; (Microsoft)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.ai"&gt;API.ai&lt;/a&gt; (Google)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些服務能透過標記和訓練&lt;br&gt;
解析出這句話的每一個片段，所具有的意義&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. 「今天西雅圖天氣如何」&lt;ul&gt;
&lt;li&gt;時間：今天&lt;/li&gt;
&lt;li&gt;地點：西雅圖&lt;/li&gt;
&lt;li&gt;意圖：天氣如何&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Wit.ai&lt;/h3&gt;
&lt;p&gt;Wit.ai跟Luis, API.ai比較不同的地方是&lt;br&gt;
從Wit.ai得到的是，我們設定的回覆&lt;br&gt;
而不是一句話解析後的結果&lt;/p&gt;
&lt;h3&gt;LUIS&lt;/h3&gt;
&lt;p&gt;從&lt;a href="https://www.microsoft.com/cognitive-services/en-us/language-understanding-intelligent-service-luis"&gt;這裡&lt;/a&gt;可以測試兩個訓練過的範例機器人，看看從LUIS可以得到什麼&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;how is the weather in the Taipei
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;how is the weather in the Taipei&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;topScoringIntent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;intent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GetCurrentWeather&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.50119406&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;triggered&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GetCurrentWeather&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;parameters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;entities&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;dialog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;contextId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;80cd646a-d85d-4b40-873d-1b47fa49adc8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Question&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;prompt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Where would you like to get the current weather for?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;parameterName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;API.ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Hey Calendar, schedule lunch with 
Mary Johnson at 12 pm tomorrow.
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;meeting.create&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lunch with Mary Johnson&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;invitees&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mary Johnson&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2014-08-06T12:00:00-07:00&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Implement Through Powerful Libraries&lt;/h2&gt;
&lt;p&gt;不過這些服務，通常會有它的限制&lt;br&gt;
這時候就能用上Python強大的函式庫們，來實作自己的版本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.nltk.org"&gt;NLTK&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Python經典的NLP函式庫  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radimrehurek.com/gensim/"&gt;word2vec&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;透過詞向量，找出相似詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fxsjy/jieba"&gt;jieba&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;中文斷詞 &lt;/li&gt;
&lt;li&gt;判斷句子中的關鍵詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我在&lt;a href="https://gist.github.com/Lee-W/72f3a59b015cd67b3a939bf8a12680ac"&gt;NLP Libs Sample&lt;/a&gt;寫了這些函式庫的基本使用範例&lt;/p&gt;
&lt;p&gt;另外，也可以看&lt;a href="https://github.com/warmheartli/ChatBotCourse"&gt;自己动手做聊天机器人教程&lt;/a&gt;&lt;br&gt;
它是一系列聊天機器人教學，談這些做法背後的理論和實作&lt;/p&gt;
&lt;h2&gt;Beyond NLP&lt;/h2&gt;
&lt;p&gt;不過就算做了這些分詞、判斷意圖&lt;br&gt;
也不能保證使用者就會買單&lt;/p&gt;
&lt;p&gt;有人稱Chat Bot為下一代的UX Design&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fastcodesign.com/3054934/the-next-phase-of-ux-designing-chatbot-personalities"&gt;The Next Phase Of UX: Designing Chatbot Personalities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Issue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如何讓使用者，在機器人的Scope內不會碰壁&lt;/li&gt;
&lt;li&gt;如何讓機器人的判斷足夠robust，不會每次回答都是不明白&lt;/li&gt;
&lt;li&gt;如何讓使用者在最少的操作下，得到想得到的服務&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更進一步是&lt;br&gt;
如何設計一個有個性、有溫度的機器人&lt;br&gt;
這裡就可以再去研究NLP的情感分析&lt;/p&gt;
&lt;h3&gt;Read More&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.topbots.com/common-chatbot-ux-mistakes-in-bot-design/"&gt;WHEN BOTS GO BAD: COMMON UX MISTAKES IN CHATBOT DESIGN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smashingmagazine.com/2016/11/does-conversation-hurt-or-help-the-chatbot-ux/"&gt;Does Conversation Hurt Or Help The Chatbot UX?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/SyJUciYWg"&gt;Head First ChatBot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/aiml/index.htm"&gt;AIML Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.devdungeon.com/content/ai-chat-bot-python-aiml"&gt;AI Chat Bot in Python with AIML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wit.ai/docs/quickstart"&gt;Wit.ai Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/warmheartli/ChatBotCourse"&gt;自己动手做聊天机器人教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/ideas/an-overview-of-the-bot-landscape?imm_mid=0eb199&amp;amp;cmp=em-data-na-na-newsltr_20161130"&gt;An overview of the bot landscape&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>[Bot] More About Line Messaging API - Template Messages</title><link href="http://lee-w.github.io/posts/article/2016/11/more-about-line-messaging-api-template-messages" rel="alternate"></link><published>2016-11-27T06:08:00+08:00</published><updated>2016-11-27T06:08:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-27:/posts/article/2016/11/more-about-line-messaging-api-template-messages</id><summary type="html">&lt;p&gt;除了傳送文字外，Line Bot還可以傳&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;圖片, 影像, 聲音, 地圖&lt;/li&gt;
&lt;li&gt;貼圖 (Line Bot所能使用的&lt;a href="https://devdocs.line.me/files/sticker_list.pdf"&gt;貼圖清單&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Imagemap&lt;/li&gt;
&lt;li&gt;Tempalte&lt;ul&gt;
&lt;li&gt;Button&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confirm&lt;/li&gt;
&lt;li&gt;Carousel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大部分使用上很直覺，可以直接參考&lt;a href="https://devdocs.line.me/en/"&gt;API Reference - Messaging API&lt;/a&gt;和&lt;a href="https://github.com/line/line-bot-sdk-python"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章主要談Template Messages的使用&lt;/p&gt;
</summary><content type="html">&lt;p&gt;除了傳送文字外，Line Bot還可以傳&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;圖片, 影像, 聲音, 地圖&lt;/li&gt;
&lt;li&gt;貼圖 (Line Bot所能使用的&lt;a href="https://devdocs.line.me/files/sticker_list.pdf"&gt;貼圖清單&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Imagemap&lt;/li&gt;
&lt;li&gt;Tempalte&lt;ul&gt;
&lt;li&gt;Button&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Confirm&lt;/li&gt;
&lt;li&gt;Carousel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大部分使用上很直覺，可以直接參考&lt;a href="https://devdocs.line.me/en/"&gt;API Reference - Messaging API&lt;/a&gt;和&lt;a href="https://github.com/line/line-bot-sdk-python"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章主要談Template Messages的使用&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;Template&lt;/h1&gt;
&lt;p&gt;Template分為Button, Confirm跟Carousel三種&lt;br&gt;
這些功能也是我認為從Line Bot Trail升級到Line Messaging API最好用的功能&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;以下的測試是bot收到關鍵字，回傳相對應的訊息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Button&lt;br&gt;
&lt;img alt="button_example" src="http://i.imgur.com/KYN6kDR.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confirm&lt;br&gt;
&lt;img alt="confirm_example" src="http://i.imgur.com/pUFboL5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Carousel (如果超出版面，則可以左右滑動)&lt;br&gt;
&lt;img alt="carousel_example" src="http://i.imgur.com/Pxvj6om.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外必須要注意的是，這些功能目前都只支援手機版&lt;br&gt;
在電腦版上的Line看到的訊息會是這樣&lt;br&gt;
&lt;img alt="template_message_on_pc" src="http://i.imgur.com/ZdGQjc6.png"&gt;&lt;br&gt;
這個文字內容可以透過template的alt_text參數設定&lt;/p&gt;
&lt;p&gt;上面的例子是&lt;a href="https://github.com/line/line-bot-sdk-python#templatesendmessage---buttonstemplaten"&gt;line-bot-sdk-python&lt;/a&gt;的使用範例&lt;br&gt;
(&lt;a href="https://github.com/Lee-W/line_echobot/tree/template-message"&gt;可以回傳template message的echo bot&lt;/a&gt;)&lt;br&gt;
大部分都能透過Code和Example比對，找到需要調整的參數&lt;/p&gt;
&lt;p&gt;接下來談的是那些按鍵的設定&lt;br&gt;
上面所看到的按鍵都是一個Action&lt;br&gt;
三種Template最大的不同，主要是這些action擺設的方式不同&lt;br&gt;
限制的數量也不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Button一次可以支援四個action&lt;/li&gt;
&lt;li&gt;Confirm支援三個action&lt;/li&gt;
&lt;li&gt;Carousel則可以用5個CarouselColumn，每一個Column支援3個Action&lt;ul&gt;
&lt;li&gt;另外需要注意的是Carousel中每一個Column的action數量必須是一樣的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Action&lt;/h1&gt;
&lt;p&gt;這些action的label參數，就是顯示在按鍵上的文字，必須在20字以內&lt;/p&gt;
&lt;p&gt;text參數則是按下這個按鍵，會由使用者回傳設定的文字&lt;br&gt;
e.g. 這是我按下上面Button的postback的效果&lt;br&gt;
&lt;img alt="text_example" src="http://i.imgur.com/ow2G8wU.png"&gt;&lt;br&gt;
而text就是設定為postback (注意並非label的'postback')&lt;/p&gt;
&lt;h2&gt;Postback&lt;/h2&gt;
&lt;p&gt;當使用者按了這個按鍵&lt;br&gt;
Line Server會傳一個postback event給我們，裡面包含著data參數中設定的字串 &lt;br&gt;
在收到event的時候，透過&lt;code&gt;event.postback.postback.data&lt;/code&gt;取出data&lt;/p&gt;
&lt;p&gt;Postback可以不給text參數&lt;/p&gt;
&lt;h2&gt;Message&lt;/h2&gt;
&lt;p&gt;text參數在Message Action是必須的，也不能給空字串&lt;br&gt;
如果希望這個按鍵，只有顯示但不會由使用者傳文字過來，可以給一串空白 (e.g. ' ')&lt;/p&gt;
&lt;h2&gt;URI&lt;/h2&gt;
&lt;p&gt;使用者按下這個按鍵就會用Line的瀏覽器跳到外部網頁&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devdocs.line.me/en/#template-messages"&gt;API Reference - Messaging API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/line/line-bot-sdk-python#templatesendmessage---buttonstemplate"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>[Bot] Deploy LineBot on Heroku</title><link href="http://lee-w.github.io/posts/article/2016/11/deploy-linebot-on-heroku" rel="alternate"></link><published>2016-11-27T06:05:00+08:00</published><updated>2016-11-27T06:05:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-27:/posts/article/2016/11/deploy-linebot-on-heroku</id><summary type="html">&lt;p&gt;上一篇提到如何用ngrok&lt;br&gt;
讓我們可以不用架Https Server，直接在本地端測試Bot&lt;/p&gt;
&lt;p&gt;再來要談的是如何把Bot部署到Heroku上&lt;/p&gt;
</summary><content type="html">&lt;p&gt;上一篇提到如何用ngrok&lt;br&gt;
讓我們可以不用架Https Server，直接在本地端測試Bot&lt;/p&gt;
&lt;p&gt;再來要談的是如何把Bot部署到Heroku上&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;Why not ngrok&lt;/h1&gt;
&lt;p&gt;使用ngrok必須要讓你的本地端一直開著才能收到訊息&lt;br&gt;
而且免費版的ngrok每次都會更改url&lt;br&gt;
所以我們需要一個可以讓其他人較長時間測試的Server&lt;/p&gt;
&lt;p&gt;以我自己的開發習慣&lt;br&gt;
我會使用ngrok，來做Bot的基本除錯&lt;br&gt;
Heroku則是用來讓其他人測試功能&lt;br&gt;
真的要上線的時候才會自己架一個Https Server&lt;/p&gt;
&lt;p&gt;Line的帳號也是ngrok, heroku跟上線需要的各申請一個&lt;br&gt;
不過ngrok可以好幾個Line Bot專案共用一個即可&lt;/p&gt;
&lt;h1&gt;Heroku&lt;/h1&gt;
&lt;h2&gt;Create App&lt;/h2&gt;
&lt;p&gt;先上&lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt;辦個帳號&lt;/p&gt;
&lt;p&gt;到個人的dashboard&lt;br&gt;
&lt;code&gt;New&lt;/code&gt; -&amp;gt; &lt;code&gt;Create New App&lt;/code&gt;&lt;br&gt;
選一個名字，就創好App了&lt;/p&gt;
&lt;h2&gt;Deploy&lt;/h2&gt;
&lt;h3&gt;Add Remote&lt;/h3&gt;
&lt;p&gt;在部署之前要先安裝&lt;a href="https://devcenter.heroku.com/articles/heroku-command-line"&gt;Heroku CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再來我們要到原本line-echobot，將heroku加入這個專案的remote&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;heroku login
heroku git:remote -a leewbot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著用&lt;code&gt;git remote -v&lt;/code&gt;就能看到&lt;code&gt;heroku&lt;/code&gt;已經被加入remote了&lt;br&gt;
以後只要&lt;code&gt;git push heroku master&lt;/code&gt;，就能部署到Heroku&lt;br&gt;
不過我們還必須要多做一些設定才能讓Bot順利的部署&lt;/p&gt;
&lt;h3&gt;Environment Variables&lt;/h3&gt;
&lt;p&gt;首先是我們原先設定的環境變數&lt;br&gt;
Heroku是透過這個指令來做設定&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;heroku config:set &lt;span class="s2"&gt;&amp;quot;env key&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;env value&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者也能到dashboard的&lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Config Variables&lt;/code&gt; -&amp;gt; &lt;code&gt;Reveal Config Vars&lt;/code&gt;做設定&lt;/p&gt;
&lt;h3&gt;Python Envrionments&lt;/h3&gt;
&lt;p&gt;因為Heroku支援多種不同的語言&lt;br&gt;
所以要讓Heroku知道我們使用的是Python&lt;/p&gt;
&lt;p&gt;Heroku可過專案中是否有&lt;code&gt;requirements.txt&lt;/code&gt;來判斷這個專案是否為Python專案&lt;br&gt;
並且安裝&lt;code&gt;requirements.txt&lt;/code&gt;內的函式庫&lt;br&gt;
名稱如果打錯，可能會讓Heroku不知道這是Python專案，導致部署失敗&lt;/p&gt;
&lt;p&gt;另外可以透過&lt;code&gt;runtime.txt&lt;/code&gt;來指定Python的版本&lt;br&gt;
目前支援這兩種版本&lt;br&gt;
- &lt;code&gt;python-2.7.12&lt;/code&gt;&lt;br&gt;
- &lt;code&gt;python-3.5.2&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Deploy Settings - Procfile&lt;/h3&gt;
&lt;p&gt;再來必須要讓Heroku知道我們執行專案的指令是什麼&lt;br&gt;
這個指令就是寫在&lt;code&gt;Profile&lt;/code&gt;中&lt;/p&gt;
&lt;p&gt;這裡使用的部署套件是gunicorn&lt;br&gt;
先在&lt;code&gt;requirements.txt&lt;/code&gt;加入&lt;code&gt;gunicorn==19.0.0&lt;/code&gt;&lt;br&gt;
再來創一個&lt;code&gt;Profile&lt;/code&gt;，內容是&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gunicorn&lt;/span&gt; &lt;span class="n"&gt;line_echobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wsgi&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果用其他的部署套件，則需要修改web後面的指令&lt;/p&gt;
&lt;p&gt;到了這裡就做好所有的設定了&lt;br&gt;
最後只要&lt;code&gt;git push heroku master&lt;/code&gt;就會部署到Heroku上&lt;/p&gt;
&lt;p&gt;透過&lt;code&gt;heroku open&lt;/code&gt;能看到剛剛部署上去的專案&lt;br&gt;
接著把專案的網址加上我們先前設定的callback url &lt;code&gt;echobot/callback&lt;/code&gt;&lt;br&gt;
設定到Line Bot的Webhook URL，就完成了&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/getting-started-with-python#introduction"&gt;Getting Started on Heroku with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/deploying-python"&gt;Deploying Python and Django Apps on Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>[Bot] Line Echo Bot on Django</title><link href="http://lee-w.github.io/posts/article/2016/11/line-echo-bot-on-django" rel="alternate"></link><published>2016-11-24T03:26:00+08:00</published><updated>2016-11-24T03:26:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-24:/posts/article/2016/11/line-echo-bot-on-django</id><summary type="html">&lt;p&gt;單純要寫一個只會Echo的Line Chat Bot&lt;br&gt;
用flask只要85行的code就能解決&lt;br&gt;
官方已經有提供相當清楚的範例[flask-echo]&lt;br&gt;
(https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-echo)了&lt;/p&gt;
&lt;p&gt;這篇文章則是提供了django的做法&lt;br&gt;
想直接看code也可以參考&lt;a href="https://github.com/Lee-W/line_echobot"&gt;line_echobot&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;單純要寫一個只會Echo的Line Chat Bot&lt;br&gt;
用flask只要85行的code就能解決&lt;br&gt;
官方已經有提供相當清楚的範例[flask-echo]&lt;br&gt;
(https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-echo)了&lt;/p&gt;
&lt;p&gt;這篇文章則是提供了django的做法&lt;br&gt;
想直接看code也可以參考&lt;a href="https://github.com/Lee-W/line_echobot"&gt;line_echobot&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;Line Messaging API (line-bot-sdk-python)&lt;/h1&gt;
&lt;p&gt;詳細的Line Bot提供哪些功能，該如何使用&lt;br&gt;
可以在&lt;a href="https://devdocs.line.me/en/"&gt;API Reference - Messaging API&lt;/a&gt;找到&lt;br&gt;
之後的文章，會談如何使用文字以外的功能&lt;/p&gt;
&lt;p&gt;這裡直接使用官方提供的&lt;a href="https://github.com/line/line-bot-sdk-python"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install line-bot-sdk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外官方也提供&lt;a href="https://github.com/line/line-bot-sdk-java"&gt;java&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-go"&gt;go&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-php"&gt;php&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-ruby"&gt;ruby&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-perl"&gt;perl&lt;/a&gt;的版本&lt;/p&gt;
&lt;h1&gt;Start Project&lt;/h1&gt;
&lt;h2&gt;Create Project&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a line_echobot project&lt;/span&gt;
django-admin startproject line_echobot

&lt;span class="c1"&gt;# Create an echobot app&lt;/span&gt;
python3 manage.py startapp echobot
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Setup Line Secrets&lt;/h2&gt;
&lt;p&gt;接著設定Line Bot的&lt;code&gt;Channel Secret&lt;/code&gt;, &lt;code&gt;Channel Access Token&lt;/code&gt;&lt;br&gt;
(可以在Line Bot的&lt;code&gt;Line Deverloper&lt;/code&gt;頁面取得)&lt;/p&gt;
&lt;p&gt;不過這些值不該被git記錄，所以不該被寫死在&lt;code&gt;settings.py&lt;/code&gt;中&lt;br&gt;
建議將這些值寫入環境變數&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your django secret key&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your line channel access token&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your line channel secret&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行時，讓設定檔先去讀取這些環境變數&lt;br&gt;
下面的&lt;code&gt;get_env_variable&lt;/code&gt;函式是用來取得環境變數&lt;br&gt;
只要有少設定，就會丟出ImproperlyConfigured的例外事件中斷執行&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# line_echobot/settings.py&lt;/span&gt;

&lt;span class="o"&gt;......&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;error_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Set the {} environment variable&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ImproperlyConfigured&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error_msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LINE_CHANNEL_ACCESS_TOKEN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LINE_CHANNEL_SECRET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;......&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="o"&gt;......&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;echobot&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過如果只是單純測試用，這些值也可以直接寫死在settings.py中&lt;/p&gt;
&lt;p&gt;另外也不要忘了在&lt;code&gt;INSTLLED_APPS&lt;/code&gt;加入echobot&lt;/p&gt;
&lt;p&gt;一般來說，django產生project時&lt;br&gt;
&lt;code&gt;settings.py&lt;/code&gt;裡面就會有secret key&lt;br&gt;
這裡的做法是把預設的secret key刪掉&lt;br&gt;
設定到環境變數中，避免被git記錄下來&lt;br&gt;
如果還需要另外還要重新產生可以透過&lt;a href="https://gist.github.com/mattseymour/9205591"&gt;django-secret-keygen.py&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Setup Line Webhook URL&lt;/h2&gt;
&lt;p&gt;再來要設定一個Webhook URL&lt;br&gt;
讓Line可以把Bot收到的訊息傳給我們&lt;/p&gt;
&lt;p&gt;先在project的&lt;code&gt;urls.py&lt;/code&gt;設定&lt;br&gt;
讓project可以找到echobot這個app的&lt;code&gt;urls.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# line_echobot/urls.py&lt;/span&gt;
&lt;span class="o"&gt;......&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;echobot&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^echobot/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echobot.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著在echobot內，創一個&lt;code&gt;urls.py&lt;/code&gt;&lt;br&gt;
並將url再導到&lt;code&gt;callback&lt;/code&gt;，呼叫&lt;code&gt;views.py&lt;/code&gt;裡面的&lt;code&gt;callback&lt;/code&gt;函式(接下來才會實作)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# echobot/urls.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^callback/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這些都設定完後，要在Line那邊設定的Webhook Url就是&lt;code&gt;https://"your domain name"/echobot/callback/&lt;/code&gt;&lt;br&gt;
(&lt;code&gt;your domain name&lt;/code&gt;要設定什麼，會在這篇文章的&lt;a href="#https-server"&gt;最後&lt;/a&gt;說明)&lt;/p&gt;
&lt;h2&gt;Implement Callback Funtion&lt;/h2&gt;
&lt;p&gt;接下來就是要在&lt;code&gt;echobot/views.py&lt;/code&gt;實作&lt;code&gt;callback&lt;/code&gt;了&lt;/p&gt;
&lt;h3&gt;Initial&lt;/h3&gt;
&lt;p&gt;先import相關的函式庫&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csrf_exempt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookHanlder&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;透過line_bot_api傳訊息給Line，讓Line轉傳給使用者&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;line_bot_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Callback Function&lt;/h3&gt;
&lt;p&gt;有兩種方法可以處理Line Server送過來的訊息&lt;br&gt;
這裡先用Todo記著，待會再來補上&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# TODO: Define Receiver&lt;/span&gt;


&lt;span class="nd"&gt;@csrf_exempt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# TODO: Handler when receiver Line Message&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Validate Signature&lt;/h3&gt;
&lt;p&gt;處理訊息之前&lt;br&gt;
先確認這個request是不是真的是從Line Server傳來的&lt;br&gt;
要確認這件事，需要&lt;br&gt;
- request的body&lt;br&gt;
- request header中的X-Line-Signature&lt;/p&gt;
&lt;p&gt;也就是上面的&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Handle Recevied Message&lt;/h3&gt;
&lt;p&gt;取得body跟signature後&lt;br&gt;
Line Bot API會在處理訊息的同時，確認這個訊息是否來自Line&lt;/p&gt;
&lt;p&gt;而處理Line傳過來給我們的訊息，有兩種不同的做法&lt;/p&gt;
&lt;h4&gt;WebhookParser&lt;/h4&gt;
&lt;p&gt;WebhookParser會Parse這個訊息的所有欄位&lt;br&gt;
讓我們針對各種不同型別的訊息做個別的處理&lt;br&gt;
e.g.&lt;br&gt;
- UserID&lt;br&gt;
- Event Type&lt;br&gt;
- Message Content&lt;br&gt;
- and etc.&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://github.com/line/line-bot-sdk-python#webhook-event-object"&gt;這裡&lt;/a&gt;可以找到有哪些欄位&lt;/p&gt;
&lt;p&gt;這段code要取代上面的&lt;code&gt;# TODO: Define Receiver&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面三段code則要取代&lt;code&gt;# TODO: Handler when receiver Line Message&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;parser會parse所有的event跟各個event中的所有欄位&lt;br&gt;
如果request不是從Line Server來的，就會丟出InvalidSignatureError&lt;br&gt;
其他使用錯誤，或Line Server的問題都會是丟出LineBotApiError&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來要判斷收到的事件是什麼事件&lt;br&gt;
這個Bot只需要echo純文字訊息&lt;br&gt;
所以先判斷這個事件是不是訊息事件，而這個訊息是不是文字訊息&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後的&lt;code&gt;reply_message&lt;/code&gt;函式，讓我們傳訊息給Line Server&lt;br&gt;
第一個參數是要回傳要用的reply_token，可以從事件中取得 （&lt;code&gt;event.reply_token&lt;/code&gt;）&lt;br&gt;
使用這個reply_token做回覆，是不用收費的&lt;br&gt;
不過同一個reply_token只能使用一次，而且在一定的時間內就會失效&lt;/p&gt;
&lt;p&gt;第二個參數是這次要回傳的訊息&lt;br&gt;
&lt;a href="https://github.com/line/line-bot-sdk-python#send-message-object"&gt;這裡&lt;/a&gt;有所有能回傳的訊息&lt;br&gt;
也可以傳一個都是訊息的list或tuple&lt;br&gt;
不過一次最多只能傳5個&lt;br&gt;
只要超過就會有LineBotApiError&lt;/p&gt;
&lt;h4&gt;WebhookHandler&lt;/h4&gt;
&lt;p&gt;WebhookHandler是針對每一種不同的訊息型態註冊一個處理器&lt;br&gt;
只要收到這樣的訊息，就會丟給對應的處理器&lt;br&gt;
如果確定每一類訊息，在任何情況下都會有相似的處理方式，就很適合這樣的設計&lt;/p&gt;
&lt;p&gt;接下來的三段code要取代&lt;code&gt;# TODO: Define Receiver&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先為handler加入，TextMessage的處理器&lt;br&gt;
參數是接收到的event&lt;br&gt;
這裡做的也是讀取到原本event中的文字，並回傳回去&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@handler.add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_text_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為沒有要處理其他訊息&lt;br&gt;
如果收到其他訊息(e.g. 貼圖, 照片)或訊息以外的事件&lt;br&gt;
使用default來回傳"Currently Not Support None Text Message"的文字訊息&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@handler.default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Currently Not Support None Text Message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面的這段code是要取代&lt;code&gt;# TODO: Handler when receiver Line Message&lt;/code&gt;&lt;br&gt;
handler判斷完這個訊息，應該被哪個處理器處理，就會傳給那個函式處理&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Full Code&lt;/h4&gt;
&lt;p&gt;由於上面的code說明比較分散&lt;br&gt;
這裡附上兩個版本各自的完整版&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WebhookParser&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# line_echobot/echobot/views.py&lt;/span&gt;
&lt;span class="c1"&gt;# WebhookParser version&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csrf_exempt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;

&lt;span class="n"&gt;line_bot_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@csrf_exempt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;WebhookHandler&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# line_echobot/echobot/views.py&lt;/span&gt;
&lt;span class="c1"&gt;# WebhookHandler version&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csrf_exempt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;

&lt;span class="n"&gt;line_bot_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@handler.add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_text_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@handler.default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Currently Not Support None Text Message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@csrf_exempt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到了這裡，echo bot實作的部分就完成了&lt;/p&gt;
&lt;h2&gt;&lt;a name='https-server'&gt;&lt;/a&gt; Https Server (Setup 'your domain name')&lt;/h2&gt;
&lt;p&gt;使用這些Bot的服務時，大多會要求我們一定要先有一個Https Server&lt;br&gt;
除了自己架Http Server外，還透過其他服務，更方便我們做測試&lt;br&gt;
接下來我會分享兩種做法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;架在&lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt; (由於篇幅的關係，Heroku會在接下來的文章談)&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://ngrok.com"&gt;ngrok&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ngrok&lt;/h3&gt;
&lt;p&gt;ngrok提供的服務是&lt;br&gt;
讓外部的訊息先經過ngrok的server，ngrok再將這個訊息傳給你的server&lt;br&gt;
回傳時也是從你的server傳給ngrok的server，再把訊息傳出去&lt;br&gt;
所以外部都只會看到ngrok的server&lt;/p&gt;
&lt;p&gt;&lt;img alt="ngrok" src="https://ngrok.com/static/img/demo.png"&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Install ngrok on mac&lt;/span&gt;
brew cask install ngrok
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先把django的server run起來&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3  manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;預設django的port是8000&lt;br&gt;
這裡並不需要使用0.0.0.0:8000，讓外部可以連到這個django server&lt;br&gt;
ngrok會把request傳到local端相對應的port&lt;/p&gt;
&lt;p&gt;接著就要用ngrok將request導到本地端的port 8000&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ngrok http &lt;span class="m"&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="1_ngrok_example" src="http://i.imgur.com/r525wEI.png"&gt;&lt;/p&gt;
&lt;p&gt;再來到Line Bot的&lt;code&gt;Line Developer&lt;/code&gt;頁面設定Webhook URL&lt;br&gt;
這時候填上ngrok後的https那串url，再加上&lt;code&gt;echobot/callback/&lt;/code&gt;(我們設定的callback url)&lt;br&gt;
(e.g. &lt;code&gt;https://2.....f.ngrok.io/echobot/callback/&lt;/code&gt;)&lt;br&gt;
&lt;img alt="2_webhook_url" src="http://i.imgur.com/qVWlwoK.png"&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是我的Webhook URL下面有一個&lt;code&gt;Read timeout.&lt;/code&gt;&lt;br&gt;
如果按了後面的Verify，Line Server會傳一些測試訊息過來&lt;br&gt;
但是那個reply_token 是無法被回覆的&lt;br&gt;
這時候在Server就會丟出LineBotApiError&lt;br&gt;
不過沒關係，這只是給我們檢查用的&lt;br&gt;
並沒有一定要通過才能使用Line Bot&lt;/p&gt;
&lt;p&gt;這時候加Bot為好友，就可以開始跟它聊天了&lt;br&gt;
&lt;img alt="3_message_sample" src="http://i.imgur.com/boxeHoG.png"&gt;&lt;/p&gt;
&lt;p&gt;如果你發現除了echo訊息外，還有其他的訊息&lt;br&gt;
可能就是沒有把Atuo Reply Message關掉&lt;br&gt;
這時候就可以去Line Bot的&lt;code&gt;LINE@ Manger&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Bot Settings&lt;/code&gt;把它關掉&lt;br&gt;
或者到&lt;code&gt;Messages&lt;/code&gt; -&amp;gt; &lt;code&gt;Auto Reply Message&lt;/code&gt;做修改訊息內容&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://studyhost.blogspot.tw/2016/10/line-messaging-api-line-bot-v2.html"&gt;新版Line@ Messaging API使用心得 (Line Bot v2)&lt;br&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jiunjiun.logdown.com/posts/2016/10/06/linebot-with-sinatra"&gt;LineBot - Sinatra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ngrok.com"&gt;ngrok&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="django"></category></entry><entry><title>[Bot] Apply Line Messaging API</title><link href="http://lee-w.github.io/posts/article/2016/11/apply-line-messaging-api" rel="alternate"></link><published>2016-11-22T12:43:00+08:00</published><updated>2016-11-22T12:43:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-22:/posts/article/2016/11/apply-line-messaging-api</id><summary type="html">&lt;p&gt;先到&lt;a href="https://business.line.me/zh-hant/services/bot"&gt;Messaging API&lt;/a&gt;申請帳號&lt;/p&gt;
&lt;p&gt;&lt;code&gt;開始使用Messaging API&lt;/code&gt;和&lt;code&gt;開始使用Developer Trial&lt;/code&gt;申請到的帳號是不同的&lt;br&gt;
之後不能互換，所以一開始就要根據需求來決定申請哪種帳號&lt;/p&gt;
</summary><content type="html">&lt;p&gt;先到&lt;a href="https://business.line.me/zh-hant/services/bot"&gt;Messaging API&lt;/a&gt;申請帳號&lt;/p&gt;
&lt;p&gt;&lt;code&gt;開始使用Messaging API&lt;/code&gt;和&lt;code&gt;開始使用Developer Trial&lt;/code&gt;申請到的帳號是不同的&lt;br&gt;
之後不能互換，所以一開始就要根據需求來決定申請哪種帳號&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;img alt="1_messaging_api" src="http://i.imgur.com/3i3O1wO.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;開始使用Messaging API&lt;/code&gt;會申請免費版的帳號&lt;br&gt;
  之後可以選擇付費升級為入門版等更多功能的版本&lt;br&gt;
  主要拿來做正式發佈用的帳號&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;開始使用Developer Trial&lt;/code&gt;則是Developer的帳號&lt;br&gt;
  雖然一開始就能使用Push API，但好友人數只有50人&lt;br&gt;
  如果還在開發階段，就適合辦這個帳號來測試&lt;br&gt;
  不過需要注意的是developer帳號，並不能接升級成一般帳號&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="2_price" src="http://i.imgur.com/FmTjOBH.png"&gt;&lt;/p&gt;
&lt;p&gt;再來會詢問業務類別，跟要求設定Bot名稱和照片&lt;br&gt;
&lt;img alt="3_apply_account" src="http://i.imgur.com/VdCT8JX.png"&gt;&lt;/p&gt;
&lt;p&gt;回到&lt;a href="https://business.line.me/zh-hant/"&gt;Line Bussiness Center&lt;/a&gt;的帳號清單&lt;br&gt;
就能看到帳號已經創好了&lt;br&gt;
&lt;img alt="4_success_apply" src="http://i.imgur.com/4ViJbIR.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;進入剛剛創好的帳號的&lt;code&gt;LINE@ Manager&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;頁面左上方，Bot名稱下方&lt;br&gt;
@開頭的就是這個Bot的id&lt;br&gt;
可以從Line輸入這個id加Bot為好友 （需加上@）&lt;/p&gt;
&lt;p&gt;&lt;img alt="5_bot_page" src="http://i.imgur.com/8DC4TSG.png"&gt;&lt;/p&gt;
&lt;p&gt;接著到設定頁面左下方，找到&lt;code&gt;Settings&lt;/code&gt;-&amp;gt;&lt;code&gt;Bot Settings&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;進入以下的畫面開啟Messaging API&lt;br&gt;
&lt;img alt="6_bot_setting" src="http://i.imgur.com/BtaSwa5.png"&gt;&lt;/p&gt;
&lt;p&gt;開啟Bot API後，就會不能用以下三個功能&lt;br&gt;
- 1-on-1 Chat&lt;br&gt;
- LINE@ app&lt;br&gt;
- Store Chat&lt;/p&gt;
&lt;p&gt;之後會進到以下畫面&lt;br&gt;
記得要把&lt;code&gt;Use webhooks&lt;/code&gt;調成&lt;code&gt;Allow&lt;/code&gt;&lt;br&gt;
才能把這個Line Bot串到自己的server上&lt;br&gt;
&lt;img alt="7_bot_webhook" src="http://i.imgur.com/yqpw3x7.png"&gt;&lt;/p&gt;
&lt;p&gt;往下拉可以看到更多的選項&lt;br&gt;
&lt;img alt="8_bot_detail" src="http://i.imgur.com/nKegbk6.png"&gt;&lt;br&gt;
如果不想要Line每次收到訊息都自動幫你回覆&lt;br&gt;
就要把&lt;code&gt;Auto Reply Message&lt;/code&gt;調成&lt;code&gt;Don't Allow&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Greeting Message&lt;/code&gt;則是，剛加Bot為好友時的歡迎詞&lt;/p&gt;
&lt;p&gt;如果有需要對這些訊息做設定&lt;br&gt;
都可以在左手邊選單的&lt;code&gt;Messages&lt;/code&gt;找到&lt;/p&gt;
&lt;p&gt;再回到帳號清單就會看到，帳號已經開通Messaging API了&lt;br&gt;
&lt;img alt="9_finish_all_setting" src="http://i.imgur.com/io9LuHs.png"&gt;&lt;/p&gt;
&lt;p&gt;進到&lt;code&gt;LINE Developers&lt;/code&gt;就能取得你的Channel Secret和Channel Access Token了&lt;br&gt;
（這些都是運用Line Messaging API會用到的）&lt;/p&gt;
&lt;p&gt;&lt;img alt="10_line_developers_page" src="http://i.imgur.com/cl8k3Mh.png"&gt;&lt;/p&gt;
&lt;p&gt;除了前面提到可以用ID加好友，也能透過這裡的QR code&lt;/p&gt;
&lt;p&gt;另外要注意的是&lt;code&gt;Webhook URL&lt;/code&gt;&lt;br&gt;
這裡之後要填的就是你的Server的Webhook url&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://developers.line.me/messaging-api/getting-started#apply_messagingapi"&gt;Enable the Messaging API for your LINE@ account&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>[Bot] Introduction to Chatbot</title><link href="http://lee-w.github.io/posts/article/2016/11/introduction-to-chatbot" rel="alternate"></link><published>2016-11-21T08:18:00+08:00</published><updated>2016-11-21T08:18:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-21:/posts/article/2016/11/introduction-to-chatbot</id><summary type="html">&lt;p&gt;有人說聊天機器人Chat Bot將要取代APP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://venturebeat.com/2016/08/02/why-chatbots-are-replacing-apps/"&gt;Why chatbots are replacing apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chatbotslife.com/this-is-how-chatbots-will-kill-99-of-apps-2fd938a22c99#.tdfugot4m"&gt;This is how Chatbots will Kill 99% of Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各大軟體公司也爭相提供Bot的服務&lt;br&gt;
</summary><content type="html">&lt;p&gt;有人說聊天機器人Chat Bot將要取代APP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://venturebeat.com/2016/08/02/why-chatbots-are-replacing-apps/"&gt;Why chatbots are replacing apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chatbotslife.com/this-is-how-chatbots-will-kill-99-of-apps-2fd938a22c99#.tdfugot4m"&gt;This is how Chatbots will Kill 99% of Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各大軟體公司也爭相提供Bot的服務&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://messengerplatform.fb.com"&gt;Facebook Messenger Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.line.me/messaging-api/overview"&gt;Line Messaging API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.slack.com"&gt;Slack API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://core.telegram.org/bots/api"&gt;Telegram Bot Platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What can Bot Do?&lt;/h2&gt;
&lt;p&gt;那Chat Bot究竟能幹嘛呢?&lt;/p&gt;
&lt;p&gt;先來看段影片吧&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=C7ZuzJe24y4"&gt;【公式】BOT &amp;amp; THE NEW WORLD by LINE&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;影片中出現了什麼？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;預約餐廳&lt;/li&gt;
&lt;li&gt;訂車&lt;/li&gt;
&lt;li&gt;偵測beacon提供coupon&lt;/li&gt;
&lt;li&gt;遠端控制家中的IoT設備澆水&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原本在App上處理的這些服務&lt;br&gt;
未來都有可能逐漸被Chat Bot所取代&lt;/p&gt;
&lt;h3&gt;背後發生了什麼事&lt;/h3&gt;
&lt;p&gt;e.g. 預約餐廳&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User傳一個訊息給Bot的帳號&lt;/li&gt;
&lt;li&gt;Bot把訊息傳給服務提供者的Server&lt;/li&gt;
&lt;li&gt;服務提供者的Server把訊息，傳給指定的Server&lt;/li&gt;
&lt;li&gt;指定的Server做了適當的運算和判斷，把結果回傳給服務提供者Server&lt;/li&gt;
&lt;li&gt;服務提供者Server收到後，再傳給User的帳號&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;e.g. Line Chat Bot 架構&lt;br&gt;
&lt;img alt="Line Chat Bot Architect" src="https://developers.line.me/wp-content/uploads/2016/09/bottrial-fig1.png"&gt;&lt;/p&gt;
&lt;h2&gt;Why Chat Bot?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;市面上App太多了，要開發使用者黏著度高的App很困難&lt;/li&gt;
&lt;li&gt;每一個App都有自己的介面，對使用者都是一次學習成本&lt;ul&gt;
&lt;li&gt;不如把服務嵌入現在使用者常用的App&lt;br&gt;
  (e.g. Facebook Messenger, Line)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文字是人類相對直覺的溝通方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why not Chat Bot?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;設計彈性不如App&lt;ul&gt;
&lt;li&gt;雖然Chat Bot大多提供按鍵等功能，但使用上的彈性不像App那麼大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文字處理依然不夠好&lt;ul&gt;
&lt;li&gt;簡單的Bot，如果使用者一直無法對應到相對的關鍵字，就無法觸發功能 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to Design a Bot?&lt;/h2&gt;
&lt;p&gt;那麼開發一個Bot需要什麼呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;選擇使用的Bot平台 (e.g. Facebook Messenger Platform, Line Messaging API and etc.)&lt;/li&gt;
&lt;li&gt;寫一些服務 (e.g. 訂票、新聞推播)&lt;/li&gt;
&lt;li&gt;把服務架在一台https server&lt;/li&gt;
&lt;li&gt;用Bot平台提供的sdk，把Server跟平台串起來&lt;/li&gt;
&lt;li&gt;用NLP判斷使用者的意思，串接到服務上&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Chatbot Platform - Line Messaging API&lt;/h2&gt;
&lt;p&gt;既然看了Line Bot的新功能&lt;/p&gt;
&lt;p&gt;接下來的幾篇文章會談要如何在Line平台上&lt;br&gt;
做一個最簡單只會Echo的Chat Bot&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;這篇文章整理了相當多的相關資源&lt;br&gt;
&lt;a href="https://stanfy.com/blog/the-rise-of-chat-bots-useful-links-articles-libraries-and-platforms/"&gt;The Rise of Chat Bots: Useful Links, Articles, Libraries and Platforms&lt;/a&gt;&lt;br&gt;
相當推薦對ChatBot有興趣的人參考&lt;/p&gt;</content></entry><entry><title>TEDx Tainan 2016 - 0到1</title><link href="http://lee-w.github.io/posts/article/2016/11/tedx-tainan-2016" rel="alternate"></link><published>2016-11-21T03:27:00+08:00</published><updated>2016-11-21T03:27:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-21:/posts/article/2016/11/tedx-tainan-2016</id><summary type="html">&lt;p&gt;趁著昨天才剛結束&lt;br&gt;
把一些感受記錄下來&lt;/p&gt;
</summary><content type="html">&lt;p&gt;趁著昨天才剛結束&lt;br&gt;
把一些感受記錄下來&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;第一次來現場聽TED&lt;br&gt;
感受真的跟看影片很不同&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;劉致昕&lt;/h3&gt;
&lt;p&gt;這場的主題是敘利亞戰事&lt;br&gt;
談ISIS和敘利亞難民到歐洲避難過的生活&lt;br&gt;
而這些都是在台灣不會接受到的訊息&lt;br&gt;
雖然平常有在看CNN，多少有接觸到這樣的訊息&lt;br&gt;
但不同的情境不同的講者，同樣的故事還是有很不同的溫度&lt;/p&gt;
&lt;p&gt;最後講者阿富汗朋友的一句話，讓我印象很深刻&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;雖然現在是黑夜
但在黑夜中期待光
很美
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h3&gt;貓不&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;當一個溫柔的人，也要當一個有原則的人
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;赫然發現google一下找得到講者在其他地方講的&lt;br&gt;
大概就是&lt;a href="https://m.facebook.com/story.php?story_fbid=1198442380183468&amp;amp;substory_index=0&amp;amp;id=1117359298291777&amp;amp;_ft_=top_level_post_id.1198442380183468%3Atl_objid.1198442380183468%3Athid.1117359298291777%3A306061129499414%3A69%3A0%3A1454313599%3A-3981313943175971342&amp;amp;__tn__=*s"&gt;原文&lt;/a&gt;的第5, 6點吧XD&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;張獻忠&lt;/h3&gt;
&lt;p&gt;這場主要談的是街友議題&lt;br&gt;
講者分享遇到的各個街友的故事&lt;br&gt;
顛覆一些人認為街友總是好吃懶做的印象&lt;/p&gt;
&lt;p&gt;最後結尾時的這句話，才讓我去反思，這場說了這麼多街友的故事，背後想帶出的意義&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果今天換作是我們遇到同樣的處境

我們真的能處理得更好嗎？
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>COSCUP 2016 小啄如何實作的</title><link href="http://lee-w.github.io/posts/article/2016/10/coscup-2016-how-to-implement-small-pecks" rel="alternate"></link><published>2016-10-01T11:50:00+08:00</published><updated>2016-10-01T11:50:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-10-01:/posts/article/2016/10/coscup-2016-how-to-implement-small-pecks</id><summary type="html">&lt;p&gt;今年COSCUP的聊天機器人「小啄」&lt;br&gt;
終於在今天宣告退休了&lt;br&gt;
退休前他讓我們詢問了「你是如何實作的」&lt;br&gt;
這邊是我測試的所有結果&lt;br&gt;
跟大家分享一下XD&lt;br&gt;
</summary><content type="html">&lt;p&gt;今年COSCUP的聊天機器人「小啄」&lt;br&gt;
終於在今天宣告退休了&lt;br&gt;
退休前他讓我們詢問了「你是如何實作的」&lt;br&gt;
這邊是我測試的所有結果&lt;br&gt;
跟大家分享一下XD&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;總結&lt;/h2&gt;
&lt;h3&gt;技術相關&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主要用Python開發&lt;/li&gt;
&lt;li&gt;使用Flask + Gunicorn + Nginx，達到系統輕量化與多執行緒&lt;/li&gt;
&lt;li&gt;用redis作為文本儲存，SQL Injection無效&lt;/li&gt;
&lt;li&gt;後台文本管理使用google sheet&lt;ul&gt;
&lt;li&gt;使用python的&lt;a href="https://github.com/burnash/gspread"&gt;gspred&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文案編輯完後，對bot下同步指令，將google sheet資料更新到後端資料庫&lt;/li&gt;
&lt;li&gt;跟吃飯喝水一樣簡單，連麻瓜劇本管理員都會用（？？？？？？）&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://wit.ai/home"&gt;wit.ai&lt;/a&gt; （這是我直接問開發者的，不是小啄回答的）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;小啄回覆的原文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;小啄的後台文本管理使用 google sheet，透過 python 的 gspread 套件進行溝通；當文案編輯完畢後，對 bot 下同步指令，後端就會透過 gspread 將 google sheet 的資料同步到後端資料庫唷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄的後台文本管理使用 google sheet，python 有個套件叫 gspread，讓你存取 google sheet 跟吃飯喝水一樣簡單！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄的後台文本管理使用 google sheet，python 有個套件叫 gspread，讓你存取 google sheet 跟吃飯喝水一樣簡單！&lt;br&gt;
    真的超簡單的，連麻瓜劇本管理員都會用！（麻瓜忍不住一定要再說一次）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄使用的佈署環境是 Flask + Gunicorn + Nginx 的組合，藉此達成系統輕量化與多執行緒的接收訊息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄使用 redis 作為文本儲存系統，因此不要再試著 SQL Injection 喇，這是沒用的!!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄是採用 Python 做為主要的程式語言開發喔，因應短暫兩個禮拜的開發時間，可以快速建置的 Python 成為最佳選項！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄開發團隊核心人物有4+1個：三個寫扣手，一個文案小編，一個文案小編的助理．我們白天都有正職！文案小編和文案小編的助理是程式麻瓜&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你知道後台文本管理的劇本是怎麼產生出來的嗎？是劇本管理員在夜深人靜、抱著電腦想著所有使用者可能在使用中遇到哪些問題，套用哪些回應可以又好笑又不無聊、絞盡腦汁想出來的；也因此好幾天發現窗外鳥兒演唱會都在清晨五點左右開唱。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你有選英文模式小啄嗎？真抱歉人力不足，沒有能力提供好笑有趣的回饋讓大家使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(舉起誠實樹) 因為缺乏英文小編寫幽默風趣的回饋，所以團隊人員最後放棄英文幽默版小啄。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄 @LINE 開發時程只有兩週，要申請正式帳號前須到 LINE 本部進行 DEMO，當時大會還有些 API 沒開好、攤位集點巔峰賽還沒有畫好圖。嚴格說起來是大會團隊在忙其他緊急事件延遲了BOT 開發時程，請大家多包容唷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄 @LINE 上線前需要經過 LINE 內部審核，然後才會投單到日本總部申請上限；內部審核當天其實有些功能還沒做完啊啊啊啊啊&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;很可惜今年閃電秀沒有 COSCUP LINE BOT 的分享；而實際上我們是有報名的，只是沒有被抽到 QQ，想在明年看到團隊在議程上分享秘辛，請用力回饋：明年想看 小啄@LINE 分享&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開發團隊有報名閃電秀，可惜沒有被抽到，想進一步鼓勵團隊明年投稿，歡迎用力回饋：明年想看 小啄@LINE 分享&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Basic Git Tutorial</title><link href="http://lee-w.github.io/posts/article/2016/09/basic-git-tutorial" rel="alternate"></link><published>2016-09-16T15:41:00+08:00</published><updated>2016-09-16T15:41:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-09-16:/posts/article/2016/09/basic-git-tutorial</id><summary type="html">&lt;p&gt;最近終於下定決定把很久以前的這份&lt;a href="http://lee-w-blog.logdown.com/posts/180572-git-and-git-hub"&gt;Git and GitHub&lt;/a&gt;改版了&lt;br&gt;
聽說這份在我進實驗室前，就已經被不想教大家Git的學長拿去流傳...&lt;/p&gt;
&lt;p&gt;新版： &lt;a href="https://lee-w.github.io/git-tutorial/#/"&gt;Git Tutorial&lt;/a&gt;&lt;br&gt;
</summary><content type="html">&lt;p&gt;最近終於下定決定把很久以前的這份&lt;a href="http://lee-w-blog.logdown.com/posts/180572-git-and-git-hub"&gt;Git and GitHub&lt;/a&gt;改版了&lt;br&gt;
聽說這份在我進實驗室前，就已經被不想教大家Git的學長拿去流傳...&lt;/p&gt;
&lt;p&gt;新版： &lt;a href="https://lee-w.github.io/git-tutorial/#/"&gt;Git Tutorial&lt;/a&gt;&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;新版主要加了&lt;br&gt;
- 如何寫好commit&lt;br&gt;
- tag&lt;br&gt;
- stash&lt;br&gt;
- rebase&lt;br&gt;
- submodule&lt;/p&gt;
&lt;p&gt;還有各種我這些年開發上有用到的Git功能&lt;br&gt;
順便來練習一直想學的reveal.js&lt;/p&gt;
&lt;p&gt;因為用了exteral.js，一開始load的時間會稍微久一點&lt;/p&gt;</content></entry><entry><title>Using GitHub to Develop Software Collaboratively</title><link href="http://lee-w.github.io/posts/article/2016/09/using-github-to-develop-software-collaboratively" rel="alternate"></link><published>2016-09-15T01:26:00+08:00</published><updated>2016-09-15T01:26:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-09-15:/posts/article/2016/09/using-github-to-develop-software-collaboratively</id><summary type="html">&lt;p&gt;這是兩年前Github來成大教育課程的筆記&lt;br&gt;
最近在整理git的筆記才翻出來&lt;br&gt;
因為當時是以英文進行，課程筆記就也用英文做了&lt;br&gt;
這篇的內容可能比較雜亂，之後還會再整理進另一篇git的筆記&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這是兩年前Github來成大教育課程的筆記&lt;br&gt;
最近在整理git的筆記才翻出來&lt;br&gt;
因為當時是以英文進行，課程筆記就也用英文做了&lt;br&gt;
這篇的內容可能比較雜亂，之後還會再整理進另一篇git的筆記&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;Introduction to Git Hub (Company)&lt;/h1&gt;
&lt;p&gt;There are around 2600 staffs in GitHub and 40% of them live in San Fransisco.&lt;br&gt;
Among them, there is one Taiwanese.&lt;/p&gt;
&lt;h1&gt;Git&lt;/h1&gt;
&lt;p&gt;Wrote by Linus Torvalds.&lt;/p&gt;
&lt;h2&gt;Why version control?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Historical propose&lt;/li&gt;
&lt;li&gt;Collaboration&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Tutorial&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git init &amp;quot;path&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;.git is just a folder with normal file&lt;br&gt;
There is no daemon or background progress&lt;br&gt;
Everything is operated in file&lt;br&gt;
Never &lt;code&gt;rm -rf .git&lt;/code&gt; XD&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git stauts
touch REAMDE.mdd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are three main stages&lt;br&gt;
1. working&lt;br&gt;
2. staging&lt;br&gt;
3. repo  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Stage&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Stage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;working&lt;/td&gt;
&lt;td&gt;&lt;code&gt;add&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;td&gt;&lt;code&gt;commit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;td&gt;repo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;working&lt;/td&gt;
&lt;td&gt;&amp;lt;-&lt;/td&gt;
&lt;td&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repo&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add REAMDE.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we're ready&lt;br&gt;
&lt;code&gt;git commit -m "add a blank commit"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After README.md is modified&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add REAMDE.md
git status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now this file is in staging area  &lt;/p&gt;
&lt;p&gt;So, how to go back to history?&lt;br&gt;
&lt;code&gt;git reset REAMDE.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Take a look at our history&lt;br&gt;
&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Go back to history&lt;br&gt;
&lt;code&gt;git checkout "SHA1"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;br&gt;
Everything comes back&lt;/p&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt; is the default branch name of git. It is a default word but not reserved.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout -b "branch_name"&lt;/code&gt; create a branch and checkout to it&lt;/p&gt;
&lt;h2&gt;diff&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt;: View the difference between working and staging&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff --staged&lt;/code&gt;: Difference between staging and repo&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff "SHA1"&lt;/code&gt;: Difference between current version and SHA1&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff master~1&lt;/code&gt;: difference between current and the one before master&lt;br&gt;
&lt;code&gt;git diff master^&lt;/code&gt; -&amp;gt; master~1&lt;br&gt;
&lt;code&gt;git diff master^^&lt;/code&gt; -&amp;gt; master~2  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff a b&lt;/code&gt;: Show the change from a to b  &lt;/p&gt;
&lt;h2&gt;branch&lt;/h2&gt;
&lt;p&gt;In git, branch is not copy. It's like bookmark&lt;br&gt;
Actually &lt;code&gt;git branch -d "name"&lt;/code&gt; just delete the pointer but not the entry.&lt;/p&gt;
&lt;p&gt;HEAD: the pointer points to current entry&lt;/p&gt;
&lt;h3&gt;detach error&lt;/h3&gt;
&lt;p&gt;If you go back to a entry not in certain branch, a detach error might occur.&lt;br&gt;
For example, checkout to a commit that is parent of more than one branch and then append a new commit to it.&lt;br&gt;
In such case, this new appended commit might not be able to be referenced.&lt;br&gt;
&lt;em&gt;The solution to this problem is to create a new branch for it.&lt;/em&gt;  &lt;/p&gt;
&lt;h2&gt;log&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git log --decorate&lt;/code&gt;: Show also branch info&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log --all&lt;/code&gt;: Show all branch&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log --graph&lt;/code&gt;: Show graph&lt;/p&gt;
&lt;h3&gt;The difference between log and show&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;: Only the first line&lt;br&gt;
&lt;code&gt;git show&lt;/code&gt;: All the message, not only the first line&lt;/p&gt;
&lt;h1&gt;GitHub&lt;/h1&gt;
&lt;h2&gt;push&lt;/h2&gt;
&lt;p&gt;origin is a short hand name of that remote url. In other word, your repo.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;br&gt;
- upload &lt;em&gt;master&lt;/em&gt; to &lt;em&gt;origin&lt;/em&gt;&lt;br&gt;
- -u tell git the default url to push for that branch(master) is origin, it would also make &lt;code&gt;git pull&lt;/code&gt; remember&lt;br&gt;
    - Do -u and after that you can just use &lt;code&gt;git push&lt;/code&gt;  &lt;/p&gt;
&lt;h2&gt;pull&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git push --all&lt;/code&gt;: push all branch&lt;br&gt;
&lt;code&gt;git pull --prune&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;difference between fetch and pull&lt;/h2&gt;
&lt;p&gt;git fetch : go to remote and copy it&lt;br&gt;
git pull -&amp;gt; fetch + merge&lt;/p&gt;
&lt;h2&gt;on-site&lt;/h2&gt;
&lt;p&gt;pull request on GitHub&lt;br&gt;
&lt;code&gt;@person-name&lt;/code&gt; -&amp;gt; notification&lt;br&gt;
Have a conversation with the whole team  &lt;/p&gt;
&lt;p&gt;Write "fix #2 ...." in git commit -&amp;gt; special meaning -&amp;gt; specify the bug in issue on GitHub&lt;br&gt;
Wiki -&amp;gt; documentation&lt;/p&gt;
&lt;h1&gt;How to write a good git commit&lt;/h1&gt;
&lt;h2&gt;Principle&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Separate each commit&lt;/li&gt;
&lt;li&gt;Let the commit tell a story  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;More specific&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;One line 80 character  &lt;/li&gt;
&lt;li&gt;Use present tense instead of past tense  &lt;/li&gt;
&lt;li&gt;Don't repeat what can be found in &lt;code&gt;git diff&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;If more detail is to be written, left the second line to be blank.&lt;/li&gt;
&lt;li&gt;Write more detail about why this change happened after the third line.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other issue&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git config --global -e&lt;/code&gt;: Edit your .gitconfig file.&lt;/p&gt;
&lt;p&gt;Not include binary files and executable&lt;br&gt;
Don't version control these kinds of files.&lt;br&gt;
Also, large files are not recommended to add to git.&lt;br&gt;
If it's needed, try &lt;code&gt;git-annex&lt;/code&gt;(web-site).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git revert "SHA1"&lt;/code&gt; -&amp;gt; save another entry of undo&lt;/p&gt;
&lt;p&gt;If you commit the password -&amp;gt; &lt;code&gt;git rebase&lt;/code&gt; can change commit, but it is not that recommended.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git submodule&lt;/code&gt; create a sub-module&lt;/p&gt;</content></entry><entry><title>COSCUP 2016</title><link href="http://lee-w.github.io/posts/article/2016/08/coscup-2016" rel="alternate"></link><published>2016-08-22T15:36:00+08:00</published><updated>2016-08-22T15:36:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-08-22:/posts/article/2016/08/coscup-2016</id><summary type="html">&lt;p&gt;&lt;a href="http://beta.hackfoldr.org/coscup2016/"&gt;hackholder共筆&lt;/a&gt;&lt;br&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="http://beta.hackfoldr.org/coscup2016/"&gt;hackholder共筆&lt;/a&gt;&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;h1&gt;Day1&lt;/h1&gt;
&lt;h2&gt;R語言翻轉教室簡介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why R？&lt;ul&gt;
&lt;li&gt;統計人多用R，所以最新的統計演算法，最可能最早被實作在R上&lt;/li&gt;
&lt;li&gt;R套件的易開發性&lt;/li&gt;
&lt;li&gt;易讓非工程背景者上手&lt;/li&gt;
&lt;li&gt;先進的視覺化 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;教 or 學R的挑戰&lt;ul&gt;
&lt;li&gt;函數名稱不一致&lt;/li&gt;
&lt;li&gt;同樣的方法可以用太多方式達成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/R_Language/index.html"&gt;PTT R版&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;聽說對新手很友善&lt;br&gt;
&lt;a href="http://datascienceandr.org"&gt;R語言翻轉教室&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;開源軟硬體實做全套電子鼓(python + RPi)&lt;/h2&gt;
&lt;p&gt;第一場在中研院的演場會(?)&lt;br&gt;
我到的時候就差不多在&lt;a href="https://www.youtube.com/watch?v=WZMPEVGUpgg&amp;amp;t=29m50s"&gt;live demo&lt;/a&gt;了&lt;br&gt;
算是剛好沒錯過精彩的部份XD&lt;/p&gt;
&lt;h2&gt;商業公司如何建立開發者生態系統&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B2D(Business to Developere)  &lt;/li&gt;
&lt;li&gt;Open Source跟Open API，對於商業公司來說有什麼價值  &lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Open Source&lt;/th&gt;
&lt;th&gt;OpenAPI&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;開放程式碼&lt;/td&gt;
&lt;td&gt;開放呼叫功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read/Write model&lt;/td&gt;
&lt;td&gt;Read-Only model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;貢獻者社群&lt;/td&gt;
&lt;td&gt;使用者社群&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;產業聯盟 -&amp;gt; 產業標準&lt;/td&gt;
&lt;td&gt;相互競爭 -&amp;gt; 寡佔市場&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;另外比較有趣的是&lt;br&gt;
華為有個部門就是專門在預測未來哪種Open Source會火&lt;br&gt;
作為下一個貢獻的Open Source專案&lt;br&gt;
早期投入那項技術&lt;/p&gt;
&lt;h2&gt;自己的樂器自己做：第一把開放硬體設計的電烏克麗麗&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ukulele.design/tw/"&gt;閃電麗麗&lt;/a&gt;&lt;br&gt;
之所以閃電麗麗這麼不像一般的烏克麗麗&lt;br&gt;
是因為一般3D印表機，印不了那麼長&lt;br&gt;
講者有提到他如何去構思該做出怎樣的改變，才有辦法符合3D印表機的限制&lt;br&gt;
好像是弦要到那樣的長度才能剛好發出烏克麗麗的聲音&lt;br&gt;
其他的部分就能改用不同的方式取代，不用受限於制式的樣式&lt;br&gt;
於是閃電麗麗就誕生了&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Day2&lt;/h1&gt;
&lt;h2&gt;Opensource將如何對第五代行動通訊(5G)造成革命性的改變&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;4G到5G的改變&lt;ul&gt;
&lt;li&gt;使網路能以軟體的速度成長，而非硬體的速度&lt;ul&gt;
&lt;li&gt;將以往綁在硬體商的部分虛擬化&lt;ul&gt;
&lt;li&gt;SDN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NFV&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;讓各種不同的服務可以有各自不同需求的網路特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/ChiahanWu/opensource5g?ref=http://www.slideshare.net/ChiahanWu/slideshelf"&gt;講者的slideshare&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Debater 辯論家：網路筆戰大亂鬥&lt;/h2&gt;
&lt;p&gt;講者直接在hackpad寫她不會脫稿演出，可以直接看&lt;a href="https://docs.google.com/presentation/d/1RxJxZ_HAWZkDNIy9y2UZPZ3M7oNIxcdLJd6UzIO9egc/edit"&gt;投影片+Note&lt;/a&gt;&lt;br&gt;
所以我就也放她的連結就好XD&lt;/p&gt;
&lt;p&gt;講者有提到&lt;a href="https://hackmd.io"&gt;HackMD&lt;/a&gt;&lt;br&gt;
主要是用來Markdown協作&lt;br&gt;
之前一直覺得hackpad的markdown support沒有很好&lt;br&gt;
終於有人做出這個東西了XD&lt;/p&gt;
&lt;h2&gt;開放公司文化之下的軟體開發 / 如何用開源軟體賺錢？&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;找到使用者的痛，解決他  
如果其中部份剛好有開源軟體可用，算你撿到的  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;我們如何用開源軟體&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;觀察客戶要甚麼&lt;/li&gt;
&lt;li&gt;加上重要功能，甚至比原來的軟體還大&lt;/li&gt;
&lt;li&gt;願意自己重寫&lt;/li&gt;
&lt;li&gt;甚至徹底改變商業模式&lt;/li&gt;
&lt;li&gt;建置世界級的大系統&lt;/li&gt;
&lt;li&gt;注重使用者體驗&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lightening&lt;/h2&gt;
&lt;p&gt;今年lightening也有很多有趣的主題&lt;br&gt;
- MRT &amp;amp; GIT&lt;br&gt;
    - 用git branch來畫台北捷運的路線圖&lt;br&gt;
        - 不要亂玩git branch啊XD&lt;br&gt;
    - https://github.com/othree/taipei-mrt/network&lt;br&gt;
- 徵音梅林新歌發表&lt;br&gt;
    - 講者完全沒說到話，真的就是新歌發表到三分鐘結束XD&lt;br&gt;
  - https://www.youtube.com/watch?v=daAI2agxzs0&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今年的&lt;a href="http://beta.hackfoldr.org/coscup2016/https%253A%252F%252Fhackpad.com%252FCOSCUP2016-5wENY4uxqSX"&gt;COSCUP2016梗全集&lt;/a&gt;，還蠻有趣的XD&lt;/p&gt;</content></entry><entry><title>Scrollable RISE</title><link href="http://lee-w.github.io/posts/article/2016/08/scrollable-rise" rel="alternate"></link><published>2016-08-15T03:22:00+08:00</published><updated>2016-08-15T03:22:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-08-15:/posts/article/2016/08/scrollable-rise</id><summary type="html">&lt;p&gt;RISE是一套結合&lt;a href="http://jupyter.org"&gt;jupyter-notebook&lt;/a&gt;和&lt;a href="http://lab.hakim.se/reveal-js/#/"&gt;reveal.js&lt;/a&gt;的專案&lt;br&gt;
讓我們能在jupyter notebook直接開啟如同reveal.js的slide&lt;br&gt;
</summary><content type="html">&lt;p&gt;RISE是一套結合&lt;a href="http://jupyter.org"&gt;jupyter-notebook&lt;/a&gt;和&lt;a href="http://lab.hakim.se/reveal-js/#/"&gt;reveal.js&lt;/a&gt;的專案&lt;br&gt;
讓我們能在jupyter notebook直接開啟如同reveal.js的slide&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;不過如過notebook cell中的內容太長&lt;br&gt;
在播放的時候就會導致內容被裁剪&lt;br&gt;
而RISE預設是無法用滑鼠滾動的&lt;br&gt;
所以這裡記錄該如何讓RISE可以滾動&lt;/p&gt;
&lt;p&gt;進入jupyter notebook的任一個notebook後&lt;br&gt;
在上方工具列點選&lt;code&gt;Edit&lt;/code&gt; -&amp;gt; &lt;code&gt;Edit Notebook Metadata&lt;/code&gt;&lt;br&gt;
接著在裡面加入livereveal的設定&lt;br&gt;
如下 （只需加入livereveal的部分）&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;kernelspec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;livereveal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;scroll&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;不過開發者其實有說，開啟滾動會造成不少問題&lt;br&gt;
所以預設上才會設定為不能滾動&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;damianavila commented on Jul 12&lt;/strong&gt;&lt;br&gt;
After several and long discussions with a lot of people, we have arrived to the conclusion that scrolling on reveal.js based slideshows brings more problems than benefits, so I will not add the scrolling as a default option BUT we should clearly document how to get scrolling slides with the config option available. I will mark this as a docs issue and prioritize properly.&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/damianavila/RISE/issues/185"&gt;scrolling vertically #185&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>解決更新gcc找不到libgfortran.3.dylib (Octave,R)</title><link href="http://lee-w.github.io/posts/article/2016/06/solve-libgfortran3dylib-not-found" rel="alternate"></link><published>2016-06-11T03:13:00+08:00</published><updated>2016-06-11T03:13:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-06-11:/posts/article/2016/06/solve-libgfortran3dylib-not-found</id><summary type="html">&lt;p&gt;最近在mac上更新了gcc 6後，不管是開Octave還是R&lt;br&gt;
都會出現以下的錯誤訊息&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dyld: Library not loaded: /usr/local/lib/gcc/5/libgfortran.3.dylib
  Referenced from: /usr/local/Cellar/r/3.3.0/R.framework/Versions/3.2/Resources/lib/libR.dylib
  Reason: image not found
Trace/BPT trap: &lt;span class="m"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;p&gt;最近在mac上更新了gcc 6後，不管是開Octave還是R&lt;br&gt;
都會出現以下的錯誤訊息&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dyld: Library not loaded: /usr/local/lib/gcc/5/libgfortran.3.dylib
  Referenced from: /usr/local/Cellar/r/3.3.0/R.framework/Versions/3.2/Resources/lib/libR.dylib
  Reason: image not found
Trace/BPT trap: &lt;span class="m"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;p&gt;這是因為原本的lib會去找/usr/local/lib/gcc/5/下的lib&lt;br&gt;
但是更新過後已經被變成/usr/local/lib/gcc/6/了&lt;br&gt;
所以只要從&lt;code&gt;/usr/local/lib/gcc/5/&lt;/code&gt;建立soft link到&lt;code&gt;/usr/local/lib/gcc/6/&lt;/code&gt;即可&lt;br&gt;
(版本號則要根據自身gcc的版本來做修改)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln -s /usr/local/lib/gcc/5/ /usr/local/lib/gcc/6/
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/Homebrew/legacy-homebrew/issues/39929"&gt;R and julia won't start after upgrade (perhaps gcc 5.1, Xcode 6.3.2, or Command Line Tools 6.3)&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>[Book] 隨機騙局</title><link href="http://lee-w.github.io/posts/article/2016/04/fooled-by-randomness" rel="alternate"></link><published>2016-04-05T14:02:00+08:00</published><updated>2016-04-05T14:02:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-04-05:/posts/article/2016/04/fooled-by-randomness</id><summary type="html">&lt;p&gt;&lt;img alt="fooled by randomness" src="http://pic.eslite.com/Upload/Product/201405/m/635359124106127500.jpg"&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="fooled by randomness" src="http://pic.eslite.com/Upload/Product/201405/m/635359124106127500.jpg"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;序：不必把知識看得那麼重&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「有錢人想的跟你不一樣」點出百萬富翁跟一般人不同的一些特質&lt;ul&gt;
&lt;li&gt;韌性和勤勞&lt;ul&gt;
&lt;li&gt;就算所有的百萬富翁都是這樣的人，並不會使韌性跟勤勞的人變成百萬富翁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;百萬富翁共同的特質可能還有冒險犯難&lt;ul&gt;
&lt;li&gt;這是大獲成功的必要條件，也是失敗的必要條件&lt;/li&gt;
&lt;li&gt;要是對破產公民做出相同的研究，他們肯定也是喜愛冒險犯難&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;前言：雲中的清真寺&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所謂的「勇氣」可能是來自低估隨機性在某些事物佔有的份量&lt;ul&gt;
&lt;li&gt;經濟「冒險者」比較像是某種錯覺的受害者，他們低估可能的不利結果，結果過度樂觀和自信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;怪異的會計衡量方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;現實遠比俄羅斯輪盤惡毒&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，它射出致命子彈的次數相當少。如果把現實比喻為左輪手槍，那麼它的彈夾能裝上千發，而不是六發。&lt;/li&gt;
&lt;li&gt;試射了實際次都沒問題後，我們便會&lt;strong&gt;產生虛假的安全感&lt;/strong&gt;，忘了裡面還有一顆子彈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;副現象(epiphenomenalism): 看著你的風險，你能有效的降低風險?還是你因此給自己一種感覺，覺得你已經盡了本份?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;從組織的觀點來看，風險經理的存在，和為了實際降低風險比較沒有關係，和將低風險的印象比較有關係&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;用數學沈思歷史&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在短暫的時間增量內，我們觀察到的是投資組合的變異性，不是報酬率。換言之，我們看到的是變異。一個人觀察到的，頂多就是變異和報酬的組合，不只是報酬&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;隨機性、胡說八道和科學知識份子&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我們可能不需要什麼事都那麼理性和科學，只有在會傷害我們和威脅我們生存的狀況下，才需要&lt;ul&gt;
&lt;li&gt;有趣的是，現代生活卻要我們做相反的事&lt;/li&gt;
&lt;li&gt;談到宗教和個人行為等事物，我們變得極其實務和知性&lt;/li&gt;
&lt;li&gt;談到由隨機性主宰的事物（e.g. 投資組合或不動產投資），卻盡可能的不用理性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;最不適者生存-進化有可能被隨機性愚弄嗎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所謂的最適者，可能是適應了現在的這一個樣本路徑&lt;ul&gt;
&lt;li&gt;而這種生物生存的越久不曾遇到稀有事件，他們就越脆弱&lt;/li&gt;
&lt;li&gt;如果時間無限延長，那麼稀有事件就會發生，於是物種會滅絕&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;進化的意思說只是應一個時間序列，而不是適應所有可能環境的平均值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;歸納的問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;下面的一段話是單純解讀過去的資料所發生的問題&lt;ul&gt;
&lt;li&gt;我剛對布希總統的一生進行完整的統計檢視。從五十八年來，接近二萬一千次的觀察值，發現他不曾一次死掉。所以我可以宣稱他將萬壽無疆，而且統計顯著性很高 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當一個人使用的策略可能包含偏態，也就是大賠的機率低，小賺的機率高，則將贏的機率極大化，不會使競賽的期望值極大化&lt;ul&gt;
&lt;li&gt;如果你用的是俄羅斯輪盤式的策略，大賠的機率低，也就是每隔幾年才會使你破產，那麼幾乎所有樣本中，你都是贏家，除了你死掉的那年 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;維根斯坦的尺&lt;/h2&gt;
&lt;p&gt;除非你對尺的可靠度有信心，否則當你用尺去量桌子，你可能也同時用桌子在量尺&lt;/p&gt;
&lt;h2&gt;再談隨機性的好處&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一點小小的不確定性，可以讓我們當個足夠滿意者，而不是極大滿意者&lt;/li&gt;
&lt;li&gt;你的行為展現輕微的不可預測性，可以在發生衝突的情況保護自己&lt;ul&gt;
&lt;li&gt;如果你一定要被罵了十七次，才在第十八次生氣，這樣的行為就很容易被操縱 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>External.js - Load HTML in Reveal.js</title><link href="http://lee-w.github.io/posts/article/2016/03/external-js-load-html-in-reveal-js" rel="alternate"></link><published>2016-03-23T01:23:00+08:00</published><updated>2016-03-23T01:23:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-03-23:/posts/article/2016/03/external-js-load-html-in-reveal-js</id><summary type="html">&lt;p&gt;reavel.js提供了&lt;code&gt;data-markdown="example.md"&lt;/code&gt;這個tag可以載入外部的markdown&lt;br&gt;
卻沒提供可以載入html的tag&lt;br&gt;
於是就有人寫了這個&lt;a href="https://github.com/calevans/external"&gt;External.js&lt;/a&gt;&lt;br&gt;
</summary><content type="html">&lt;p&gt;reavel.js提供了&lt;code&gt;data-markdown="example.md"&lt;/code&gt;這個tag可以載入外部的markdown&lt;br&gt;
卻沒提供可以載入html的tag&lt;br&gt;
於是就有人寫了這個&lt;a href="https://github.com/calevans/external"&gt;External.js&lt;/a&gt;&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;有了External.js，就可以不用把所有的內容都寫在&lt;code&gt;index.html&lt;/code&gt;裡面&lt;/p&gt;
&lt;h1&gt;Install&lt;/h1&gt;
&lt;h2&gt;Method1: Download&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;到https://github.com/calevans/external下載&lt;/li&gt;
&lt;li&gt;把extneral裡面的external資料夾放到plugin裡面&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;index.html&lt;/code&gt;中的&lt;code&gt;Reveal.initalize&lt;/code&gt;這個block加入下面的內容&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;plugin/external/external.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="na"&gt;-external&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Method2: Submodule&lt;/h2&gt;
&lt;p&gt;不過為了讓他的更新也能被追蹤，我使用了git submodule&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git submodule&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule add https://github.com/calevans/external plugin/external
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;index.html&lt;/code&gt;中的&lt;code&gt;Reveal.initalize&lt;/code&gt;這個block加入下面的內容&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;plugin/external/external/external.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="na"&gt;-external&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(注意兩種方式加入的內容有些微的不同)&lt;/p&gt;
&lt;h1&gt;Usage&lt;/h1&gt;
&lt;p&gt;之後就能使用&lt;code&gt;data-external&lt;/code&gt;這個tag來載入外部的html&lt;/p&gt;
&lt;h2&gt;原本的index.html&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;data-external&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;module_01/index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;外部html&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- module_01/index.html --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; This is external &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;載入後的html&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;data-external&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;module_01/index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- module_01/index.html --&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; This is external &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;https://github.com/calevans/external&lt;/p&gt;</content></entry><entry><title>[Article] 男子漢理論</title><link href="http://lee-w.github.io/posts/article/2016/03/article-man-theory" rel="alternate"></link><published>2016-03-15T02:13:00+08:00</published><updated>2016-03-15T02:13:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-03-15:/posts/article/2016/03/article-man-theory</id><summary type="html">&lt;p&gt;這篇文實在太有趣了，還是該留下來做個紀錄XD&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這篇文實在太有趣了，還是該留下來做個紀錄XD&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;男子漢理論&lt;/h1&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;真正的男子漢 programmer 是不會用那些亂七八糟，花枝招展的，所謂整合開發環境。
真正的男子漢 programmer 就是直接用 emacs, 或是 vi 這些男子漢編輯器直接寫程式。
如果你不知道這是甚麼東東，簡單來說，就是男子漢用的”記事本”。
當然在花枝招展，看來很娘的 Wxxxxws下要找到這些男子漢編輯器有一定難度，
但這絕對難不倒一個真正的男子漢 programmer。

另外真正的男子漢也不會用那些亂七八糟，花枝招展的所謂應用程式寫網頁。
真正的男子漢就是直接用 emacs, 或是 vi 這些男子漢編輯器直接寫 HTML，
因為那些亂七八糟，花枝招展的所謂應用程式寫出來的網頁
加了一大堆亂七八糟的 tag 根本沒有人看得懂。

真正的男子漢也不會用那些亂七八糟，花枝招展的所謂應用程式寫論文。
真正的男子漢就是直接用 emacs, 或是 vi 這些男子漢編輯器直接寫 latex。
因為那些亂七八糟，花枝招展的所謂應用程式寫出來的論文，字型醜的要命，
圖還會亂跑，換一台電腦就換一個樣子，一點也不像男子漢做出來的東西。

最後你可以看出真正的男子漢 programmer 不管做什麼事，
都只用男子漢編輯器就能搞定，這就是成為男子漢 programmer 的重點。
當然最好還是用 ed 這種神物，只是現存看過 ed 的 programmer
可能比看過”真理”的煉金術士還少，在此就不苛求了。

--Re: 男子漢理論,pangfeng (P老師)@pangfeng, ptt2.cc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From &lt;a href="http://cpmarkchang.logdown.com/pages/about-me"&gt;MARK CHANG'S BLOG - About Me&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>Reveal.js 安裝錯誤</title><link href="http://lee-w.github.io/posts/article/2016/02/reveal-s-installation-error" rel="alternate"></link><published>2016-02-20T03:57:00+08:00</published><updated>2016-02-20T03:57:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-02-20:/posts/article/2016/02/reveal-s-installation-error</id><summary type="html">&lt;p&gt;當我安裝步驟執行到&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會跳出很多錯誤訊息&lt;br&gt;
</summary><content type="html">&lt;p&gt;當我安裝步驟執行到&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會跳出很多錯誤訊息&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;這才發現Reveal.js 要用python &amp;gt;= 2.5 and &amp;lt; 3.0.0&lt;br&gt;
而我預設的python是python3.5&lt;br&gt;
所以只要像下面的指令把python指到python2就可以了&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install --python&lt;span class="o"&gt;=&lt;/span&gt;python2.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;--python=&lt;/code&gt;後面是python2的執行擋，需要根據自己的設定做調整&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hakimel/reveal.js/"&gt;Reveal.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>解決安裝IRKernel缺少zmq.h</title><link href="http://lee-w.github.io/posts/article/2016/02/resolve-irkernel-missing-zmqh" rel="alternate"></link><published>2016-02-20T03:42:00+08:00</published><updated>2016-02-20T03:42:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-02-20:/posts/article/2016/02/resolve-irkernel-missing-zmqh</id><summary type="html"></summary><content type="html">&lt;!--more--&gt;

&lt;h2&gt;安裝IRKernel&lt;/h2&gt;
&lt;p&gt;進入R的命令列，輸入下面的指令&lt;br&gt;
就能安裝IRKernel，以後就能在jupyter中使用R&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;install.packages(c(&amp;#39;rzmq&amp;#39;,&amp;#39;repr&amp;#39;,&amp;#39;IRkernel&amp;#39;,&amp;#39;IRdisplay&amp;#39;),
                 repos = c(&amp;#39;http://irkernel.github.io/&amp;#39;, getOption(&amp;#39;repos&amp;#39;)))
IRkernel::installspec()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;錯誤訊息&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;cpp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fatal&lt;/span&gt; &lt;span class="nl"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;zmq.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
         &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;make&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;***&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nl"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;compilation&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;rzmq&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;h2&gt;解決&lt;/h2&gt;
&lt;p&gt;這時候就要將缺少的套件補齊&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install czmq zmq
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再執行一次最上面的安裝指令&lt;/p&gt;
&lt;p&gt;接著在指令列執行輸入下面的指令&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter qtconsole --kernel=ir
jupyter console --kernel=ir
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安裝成功後就可以看到&lt;br&gt;
&lt;img alt="R_in_jupyter" src="http://i.imgur.com/pWf6j0q.png"&gt;&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/IRkernel/IRkernel/issues/50"&gt;Failed to install rzmq #50&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/IRkernel/IRkernel"&gt;IRkernel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="jupiter"></category></entry><entry><title>在mac上安裝gcc</title><link href="http://lee-w.github.io/posts/article/2016/01/install-gcc-on-mac" rel="alternate"></link><published>2016-01-06T06:40:00+08:00</published><updated>2016-01-06T06:40:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-01-06:/posts/article/2016/01/install-gcc-on-mac</id><summary type="html">&lt;p&gt;最近用brew來安裝gcc 5.3，一直卡在&lt;code&gt;make --bootstrap&lt;/code&gt;&lt;br&gt;
放了幾個小時還是停在這&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近用brew來安裝gcc 5.3，一直卡在&lt;code&gt;make --bootstrap&lt;/code&gt;&lt;br&gt;
放了幾個小時還是停在這&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;之後才查到，要用xcode的命令來安裝&lt;br&gt;
&lt;code&gt;xcode-select --install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;主要是因為homebrew下載的是還沒compile過的版本&lt;br&gt;
而compile gcc需要非常長的時間&lt;br&gt;
根據Reference中的文章，至少要超過45分鐘 (雖然我放了一天還是沒好)&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/24966404/brew-install-gcc-too-time-consuming"&gt;brew install gcc too time consuming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/788256/brew-install-gcc-mac-os-10-9-mavericks"&gt;brew install gcc /Mac OS 10.9 Mavericks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>在jupyter中同時使用Python2 Python3</title><link href="http://lee-w.github.io/posts/article/2015/11/used-in-the-jupyter-python2-python3" rel="alternate"></link><published>2015-11-02T15:12:00+08:00</published><updated>2015-11-02T15:12:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-11-02:/posts/article/2015/11/used-in-the-jupyter-python2-python3</id><summary type="html">&lt;p&gt;先安裝Python2和Python3的ipython notebook&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip2 install ipython notebook
pip3 install ipython notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分別用各自的ipython執行下面的指令&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipython2 kernelspec install-self
ipython3 kernelspec install-self
&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;p&gt;先安裝Python2和Python3的ipython notebook&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip2 install ipython notebook
pip3 install ipython notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分別用各自的ipython執行下面的指令&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipython2 kernelspec install-self
ipython3 kernelspec install-self
&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;p&gt;就能在ipython notebook裡面同時使用兩種版本的Python了&lt;br&gt;
&lt;img alt="1_jupyter" src="http://i.imgur.com/IxopQfG.png"&gt;&lt;br&gt;
Python2上面是另一個也被jupyter notebook支援的語言julia&lt;br&gt;
最近才剛開始碰，有機會再來分享julia的心得&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/30492623/using-both-python-2-x-and-python-3-x-in-ipython-notebook"&gt;Using both Python 2.x and Python 3.x in IPython Notebook&lt;/a&gt;&lt;/p&gt;</content><category term="jupiter"></category></entry><entry><title>[Article] No More Zero Day</title><link href="http://lee-w.github.io/posts/article/2015/10/no-more-zero-day" rel="alternate"></link><published>2015-10-27T06:53:00+08:00</published><updated>2015-10-27T06:53:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-10-27:/posts/article/2015/10/no-more-zero-day</id><summary type="html">&lt;p&gt;決定開始來寫些程式以外的內容&lt;br&gt;
整理之前看過的書或文章，跟大家分享心得或書摘&lt;br&gt;
反正都寫了，不分享一下也是蠻可惜的(?)&lt;/p&gt;
</summary><content type="html">&lt;p&gt;決定開始來寫些程式以外的內容&lt;br&gt;
整理之前看過的書或文章，跟大家分享心得或書摘&lt;br&gt;
反正都寫了，不分享一下也是蠻可惜的(?)&lt;/p&gt;
&lt;!--more--&gt;

&lt;hr&gt;
&lt;p&gt;https://www.ptt.cc/bbs/t-management/M.1399297547.A.A5E.html&lt;br&gt;
這是在PTT上看到一篇還不錯的文章&lt;br&gt;
原作者還做了這麼一張圖激勵大家&lt;br&gt;
&lt;img alt="No More Zero Day" src="http://i.imgur.com/Eqf9wO1.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;1. 從今天開始不再有「零成就日」&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;零成就日&lt;ul&gt;
&lt;li&gt;一整天什麼事情都沒做的日子&lt;/li&gt;
&lt;li&gt;一整天都沒有任何對於你的目標而努力的日子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;今天一整天啥都沒做，而現在已經是23:58了？&lt;ul&gt;
&lt;li&gt;寫一個句子。做一下伏地挺身。讀完課本一章節的其中一頁。&lt;/li&gt;
&lt;li&gt;每天只要這樣做下去就有很大的差別&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生產力來自於持續每天都維持在「非零狀態」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. 對三個「我」心存感激&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;過去我、現在我、未來我&lt;/li&gt;
&lt;li&gt;對「過去我」所做過任何正面的事情心存感激&lt;ul&gt;
&lt;li&gt;昨天不是「零成就日」因為你寫了兩百（不過，這是你最大的能力了嗎？）字？謝謝過去的自己。存了一點錢而可以買你想要的好東西？謝謝過去的自己。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把「未來我」當作你最好的朋友，現在做任何事都要像是為你最好的朋友付出一樣拼命&lt;ul&gt;
&lt;li&gt;你必須幫「未來我」一個忙，就像幫你最好的朋友一個忙一樣&lt;/li&gt;
&lt;li&gt;累得要死但還是無法放下網路和電玩嗎？去你的，「現在我」，我現在要替「未來我」做點事了。&lt;/li&gt;
&lt;li&gt;鬧鐘響了但是床太舒服？去你的，「現在我」，我現在要替我最好的朋友「未來我」做點事了，我要起來跑個5公里（或是25尺，無所謂，只要不是0就好）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你現在能過的一點好生活都源自於過去的努力。這樣子「努力」和「感謝」的循環模式就是讓你維持生產力和感恩之心的源頭&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. 原諒自己&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;責備自己只會讓你更沒有生產力。&lt;ul&gt;
&lt;li&gt;昨天試著想避免「零成就日」卻失敗了嗎？那又怎樣！&lt;/li&gt;
&lt;li&gt;過去的自己。我原諒你！&lt;/li&gt;
&lt;li&gt;但是今天呢？今天是要盡你最大的能力發揮「非零成就日」的威力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. 書和運動&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每天持續運動真的會讓你更聰明。當你運動時身體會釋放讓你快樂的物質&lt;/li&gt;
&lt;li&gt;至於書？所有我們能想得到的想法，或是感受、經驗、體驗、欲望、或是想知道怎麼做某件事，不管是什麼東西，都已經被某個人想出來了&lt;/li&gt;
&lt;li&gt;讀網路上關於減重的文章並將他納入你的運動準則中&lt;/li&gt;
&lt;li&gt;閱讀就像是瑪莉歐電玩中的水管快速通道，他是你到達下一個層級的快速捷徑。&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>解決django-admin在mac找不到django.core</title><link href="http://lee-w.github.io/posts/article/2015/05/solve-django-admin-cant-find-the-djangocore-on-mac" rel="alternate"></link><published>2015-05-10T23:42:00+08:00</published><updated>2015-05-10T23:42:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-05-10:/posts/article/2015/05/solve-django-admin-cant-find-the-djangocore-on-mac</id><summary type="html">&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;在mac上，用pip3安裝完django 1.8.1後&lt;br&gt;
執行&lt;code&gt;django-admin&lt;/code&gt;出現了以下的錯誤訊息&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/bin/django-admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;management&lt;/span&gt;
&lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;在mac上，用pip3安裝完django 1.8.1後&lt;br&gt;
執行&lt;code&gt;django-admin&lt;/code&gt;出現了以下的錯誤訊息&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/bin/django-admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;management&lt;/span&gt;
&lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;h2&gt;解決&lt;/h2&gt;
&lt;p&gt;找到&lt;code&gt;/usr/local/lib/python3.4/site-packages/django/bin/django-admin.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;把第一行的&lt;code&gt;#!/usr/bin/env python&lt;/code&gt;改成Python的路徑&lt;br&gt;
以我為例，我改成&lt;code&gt;#!/usr/local/bin/python3.4&lt;/code&gt;&lt;br&gt;
之後就可以執行了&lt;/p&gt;</content><category term="django"></category></entry><entry><title>rename - 批次更改檔名</title><link href="http://lee-w.github.io/posts/article/2015/02/rename" rel="alternate"></link><published>2015-02-22T15:06:00+08:00</published><updated>2015-02-22T15:06:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-02-22:/posts/article/2015/02/rename</id><summary type="html">&lt;p&gt;只是要改變一兩個檔案的檔名，只要&lt;code&gt;mv&lt;/code&gt;就很夠用了&lt;br&gt;
但如果要一次改很多相似的檔名就用到&lt;code&gt;rename&lt;/code&gt;指令就會更有效率&lt;br&gt;
</summary><content type="html">&lt;p&gt;只是要改變一兩個檔案的檔名，只要&lt;code&gt;mv&lt;/code&gt;就很夠用了&lt;br&gt;
但如果要一次改很多相似的檔名就用到&lt;code&gt;rename&lt;/code&gt;指令就會更有效率&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;h1&gt;安裝&lt;/h1&gt;
&lt;h3&gt;Ubuntu, Linux Mint&lt;/h3&gt;
&lt;p&gt;預設就已經安裝好了&lt;/p&gt;
&lt;h3&gt;Mac&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install rename
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用&lt;/h1&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rename s/pattern1/pattern2/ files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把files中的檔案符合pattern1替代成pattern2&lt;br&gt;
files要使用萬用字元，pattern則是使用regular expression&lt;/p&gt;
&lt;p&gt;在改檔名之前，會想先看會改成什麼樣子&lt;br&gt;
這時候就要加上參數&lt;code&gt;-n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;需要特別注意要跳脫的字元&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
可以參考下面這篇文章整理需要跳脫的保留字&lt;br&gt;
&lt;a href="http://awei791129.pixnet.net/blog/post/53319618-%5Bregular-expression%5D-使用正規表達時需要-escape-的"&gt;[Regular Expression] 使用正規表達時需要 escape 的保留字&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;保留原本檔名的片段&lt;/h2&gt;
&lt;p&gt;而在批量更改檔名時，常常會需要保留pattern1的某些片段&lt;br&gt;
這就需要用到regular expression的group&lt;/p&gt;
&lt;p&gt;例如，我們希望把檔名從01~05這五個檔案改成01A~05A&lt;br&gt;
我們如果只用&lt;code&gt;rename -n s/\[0-\9]{2}/\[0-9\]{2}A/ *&lt;/code&gt;就會錯誤&lt;br&gt;
必須要改成像下面這樣&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rename -n s/&lt;span class="se"&gt;\(\[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;-&lt;span class="se"&gt;\9&lt;/span&gt;&lt;span class="o"&gt;]{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\)&lt;/span&gt;/&lt;span class="se"&gt;\$&lt;/span&gt;1A/ *
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;扣除跳脫用的&lt;code&gt;\&lt;/code&gt;&lt;br&gt;
這個例子在&lt;code&gt;[0-9]{2}&lt;/code&gt;外面加上&lt;code&gt;()&lt;/code&gt;，將他們視為群組&lt;br&gt;
在pattern2用&lt;code&gt;$1&lt;/code&gt;，代替第一個group&lt;/p&gt;
&lt;p&gt;&lt;img alt="1_mac_rename" src="http://i.imgur.com/h1NV6ro.png"&gt;&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mix.bruceli.net/2011/01/ubuntu-linuxrename.html"&gt;ubuntu linux用rename指令批次改檔名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/20718/substitute-text-with-sed-and-keep-part-of-the-original-text"&gt;regular expression - Substitute text with sed and keep part of the original text - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>vimspell - vim檢查英文文法的套件</title><link href="http://lee-w.github.io/posts/article/2015/02/vim-spell-check" rel="alternate"></link><published>2015-02-14T09:59:00+08:00</published><updated>2015-02-14T09:59:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-02-14:/posts/article/2015/02/vim-spell-check</id><summary type="html">&lt;p&gt;&lt;a href="http://www.vim.org/scripts/script.php?script_id=465"&gt;vimspell&lt;/a&gt;是一套提供vim根據字典來檢查文法的套件&lt;br&gt;
有了vimsepll，寫markdown或latex的時候，就不用再怕拼錯字了&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="http://www.vim.org/scripts/script.php?script_id=465"&gt;vimspell&lt;/a&gt;是一套提供vim根據字典來檢查文法的套件&lt;br&gt;
有了vimsepll，寫markdown或latex的時候，就不用再怕拼錯字了&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;用vundle安裝&lt;/h1&gt;
&lt;p&gt;在vimrc中加入下面這行&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle &amp;#39;vimspell&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著用&lt;code&gt;:BundleInstall&lt;/code&gt;安裝&lt;/p&gt;
&lt;h1&gt;字典檔&lt;/h1&gt;
&lt;p&gt;到下面的網站下載字典檔&lt;br&gt;
http://archive.services.openoffice.org/pub/mirror/OpenOffice.org/contrib/dictionaries/&lt;/p&gt;
&lt;p&gt;我下載的是&lt;code&gt;en_US.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解壓縮完後，用vim開啟街壓縮完的資料夾&lt;br&gt;
應該會看到下面這樣&lt;br&gt;
&lt;img alt="1_directory" src="http://i.imgur.com/gLWMnmW.png"&gt;&lt;/p&gt;
&lt;p&gt;接著進入vim在normal mode輸入&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:mkspell en en_US
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;en&lt;/code&gt;可以自己定義，&lt;code&gt;en\_US&lt;/code&gt;必須是.aff 和.dic的檔名&lt;br&gt;
檢查一下vim資料夾下的spell資料夾有沒有新增字典檔，確定有了後就新增完成了&lt;/p&gt;
&lt;h1&gt;設定&lt;/h1&gt;
&lt;p&gt;首先要先定義要根據哪個字典檔&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:set spelllang=en
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;en就是剛剛所定義的名稱&lt;/p&gt;
&lt;p&gt;接著&lt;code&gt;:set spell&lt;/code&gt;就可以開啟了&lt;br&gt;
&lt;code&gt;:set nospell&lt;/code&gt;則是關閉&lt;/p&gt;
&lt;p&gt;如果每次都要設定一次，就太麻煩了&lt;br&gt;
我在vimrc加入了下面這些&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;spelllang&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;en&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F7&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;spell&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
autocmd &lt;span class="nb"&gt;BufRead&lt;/span&gt; *.txt&lt;span class="p"&gt;,&lt;/span&gt;*.md&lt;span class="p"&gt;,&lt;/span&gt;*.tex &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;spell&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二行是每次按F7就能開啟或關閉vimspell，也可以換成自己想要的快捷鍵&lt;br&gt;
第三行則是每次遇到副檔名是txt, md, tex時就自動開啟vimspell&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;vimspell被開啟後，就會自動把拼錯的字反白起來&lt;br&gt;
如果有其他的語言一樣會被反白起來&lt;br&gt;
&lt;img alt="2_vimspell_sample" src="http://i.imgur.com/MGjdAoq.png"&gt;&lt;/p&gt;
&lt;h2&gt;指令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;]s&lt;/code&gt; : 跳到下一個錯字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[s&lt;/code&gt; : 跳到上一個錯字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;z=&lt;/code&gt; : 開啟建議，可以參考下面的圖，選擇完按enter後，就會替換原本的字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zg&lt;/code&gt; : 將目前游標上的字加入字典&lt;br&gt;
    新增的字都會被加到&lt;code&gt;~/.vim/spell/en.utf-8.add&lt;/code&gt;(根據語言不同，檔名會不同)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zug&lt;/code&gt;: 復原加入字典的字(刪除)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zw&lt;/code&gt; : 加入壞字字典，壞字也會被加入同樣的檔案中，最後面會另外加上&lt;code&gt;/!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zuw&lt;/code&gt;: 復原加入壞字字典的字(刪除)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="3_choose_word" src="http://i.imgur.com/NWHCakj.png"&gt;&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vimdoc.sourceforge.net/htmldoc/spell.html"&gt;Vim documentation: spell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.go2linux.org/linux/2010/10/how-use-spell-check-vim-795"&gt;How to use spell check with vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ithelp.ithome.com.tw/question/10055602"&gt;[Reply] 如何在vim裡用拼字檢查 - iT邦幫忙::IT知識分享社群&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://henry.precheur.org/vim/create_spell_file_for_vim"&gt;Create a spell file for VIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7286207/automatically-enabling-spell-checking-in-vimrc"&gt;vim - Automatically enabling spell checking in vimrc - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="plugin"></category></entry><entry><title>gitignore.io</title><link href="http://lee-w.github.io/posts/article/2015/02/gitignoreio" rel="alternate"></link><published>2015-02-03T05:58:00+08:00</published><updated>2015-02-03T05:58:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-02-03:/posts/article/2015/02/gitignoreio</id><summary type="html">&lt;p&gt;每次開一個git專案，要為它找適當的.gitignore，都要上網找模板蠻麻煩的&lt;br&gt;
能不能有個簡單的方法，我開什麼專案就產生怎樣的.gitignore&lt;br&gt;
然後我就發現了&lt;a href="https://www.gitignore.io"&gt;gitignore.io&lt;/a&gt;&lt;br&gt;
</summary><content type="html">&lt;p&gt;每次開一個git專案，要為它找適當的.gitignore，都要上網找模板蠻麻煩的&lt;br&gt;
能不能有個簡單的方法，我開什麼專案就產生怎樣的.gitignore&lt;br&gt;
然後我就發現了&lt;a href="https://www.gitignore.io"&gt;gitignore.io&lt;/a&gt;&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;簡單來說gitignore.io提供各式各樣的gitignore，而且可以自動合併成一個file&lt;br&gt;
最棒的是它有提供api讓我們在command line上使用&lt;/p&gt;
&lt;h1&gt;gitignore.io on command&lt;/h1&gt;
&lt;p&gt;這是gitignore.io的官方文件&lt;br&gt;
https://www.gitignore.io/docs&lt;/p&gt;
&lt;h2&gt;設定&lt;/h2&gt;
&lt;p&gt;以mac的zsh的使用者為例，只要在執行下面這段&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;zshrc&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nt"&gt;source&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;zshrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者在~/.zshrc加入下面這段後，執行&lt;code&gt;source ~/.zshrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;gi() {&lt;/span&gt; &lt;span class="nx"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.gitignore.io/api/$@ ;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定完成後就可以使用gi的功能&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;基本上只有兩種用法&lt;br&gt;
首先當然要先看gi支援哪些.gitignore&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行完會看到一長串的結果&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;actionscript,ada,agda,android...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著在gi後面輸入想產生的.gitignore的types&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi &amp;quot;types&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果有超過一個必須用,隔開&lt;br&gt;
e.g.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi vim,osx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過這樣還不會產生.gitignore，只會顯示在螢幕上&lt;br&gt;
還要再使用output redirection才會有.gitignore&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi vim,osx &amp;gt;&amp;gt; .gitignore
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;My Custom gi&lt;/h1&gt;
&lt;p&gt;但用起來還是有點小小的不順手&lt;br&gt;
尤其每次要看list都要重新連上網抓一次，挺浪費時間&lt;br&gt;
所以就自己寫了一個新的gi&lt;br&gt;
我把它放在我的Git Hub上&lt;br&gt;
https://github.com/Lee-W/gi_extension&lt;/p&gt;
&lt;p&gt;那我的Custom gi到底多支援了什麼呢？&lt;br&gt;
1. 線下查看gitignore.io支援的類型，用更適合閱讀當方式印出&lt;br&gt;
2. 將output redirection寫成一個option&lt;br&gt;
3. 支援以空格作為類型的分隔(逗號依然支援)&lt;br&gt;
   e.g. &lt;code&gt;vim,osx&lt;/code&gt; -&amp;gt; &lt;code&gt;vim osx&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;安裝&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/Lee-W/gi_extension &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; gi_extension
sudo cp gi_extension.sh /usr/bin/gi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果之前有在shell的設定檔中，設定過gitignore.io提供的gi&lt;br&gt;
記得要把它註解掉，不然那個gi會蓋過我的gi&lt;/p&gt;
&lt;p&gt;如果想移除掉&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/Lee-W/gi_extension &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; gi_extension
sudo rm gi_extension.sh /usr/bin/gi
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;第一次使用的時候要先下&lt;code&gt;gi -u&lt;/code&gt;&lt;br&gt;
將原本&lt;code&gt;gi list&lt;/code&gt;的output，儲存到&lt;code&gt;~/.gi_list&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;顯示支援類型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;以表格的方式輸出支援的類型&lt;br&gt;
目前設定一個row容納5個column，每個column長度為25  &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi -l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="1_gi_l.png" src="https://i0.wp.com/f6daa3706f14a40c04cb86aa98ffd752d68309b0.googledrive.com/host/0BzTRBX34Y857ZDZxM3dNYm9VcDg/gitignore_io/1_gi_l.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以字母的順序輸出&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi -L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="2_gi_L.png" src="https://i0.wp.com/f6daa3706f14a40c04cb86aa98ffd752d68309b0.googledrive.com/host/0BzTRBX34Y857ZDZxM3dNYm9VcDg/gitignore_io/2_gi_L.png"&gt;&lt;/p&gt;
&lt;h3&gt;顯示.gitignore的內容&lt;/h3&gt;
&lt;p&gt;跟原本的gi一樣，只是多支援了以空白作為分隔&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi &amp;quot;types&amp;quot;
# e.g. gi vim osx 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;輸出.gitignore&lt;/h3&gt;
&lt;p&gt;將結果加入目前資料夾下的.gitignore&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi -a &amp;quot;types&amp;quot;
# e.g. gi -a vim osx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在目前的資料夾產生一份新的.gitignore取代舊有的&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi -e &amp;quot;types&amp;quot;
# e.g. gi -e vim osx
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;更新本地端的支援列表&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gi -u
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其實每次gi被執行的時候，都會在backgroud更新列表&lt;br&gt;
但是這次的更新，下次才能被使用&lt;br&gt;
所以如果想要強制更新就可以用上這個指令&lt;/p&gt;</content></entry><entry><title>驅動BCM43228網卡在Linux的無線功能</title><link href="http://lee-w.github.io/posts/article/2015/01/enable-bcm43228-wifi-on-linux" rel="alternate"></link><published>2015-01-28T08:52:00+08:00</published><updated>2015-01-28T08:52:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-01-28:/posts/article/2015/01/enable-bcm43228-wifi-on-linux</id><summary type="html">&lt;p&gt;最近本來下定決心要來玩arch linux&lt;br&gt;
結果竟然被筆電的網卡搞死了&lt;br&gt;
抓了官網的驅動竟然不能build...&lt;/p&gt;
&lt;p&gt;沒想到改成灌Linux mint 17，依然有問題＝＝&lt;br&gt;
最後找到一個解決的辦法&lt;br&gt;
</summary><content type="html">&lt;p&gt;最近本來下定決心要來玩arch linux&lt;br&gt;
結果竟然被筆電的網卡搞死了&lt;br&gt;
抓了官網的驅動竟然不能build...&lt;/p&gt;
&lt;p&gt;沒想到改成灌Linux mint 17，依然有問題＝＝&lt;br&gt;
最後找到一個解決的辦法&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;先確定你的網卡是不是BC43228&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lspci &lt;span class="p"&gt;|&lt;/span&gt; grep Network
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果是的話就能開始進行安裝了&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install linux-headers-generic
sudo apt-get install --reinstall bcmwl-kernel-source
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果成功的話，Wifi應該馬上就能用了&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://wiki.beyondlogic.org/index.php?title=Ubuntu14.04_Acer_Aspire_V5_571_Broadcom_BCM43228_WiFi"&gt;Ubuntu14.04 Acer Aspire V5 571 Broadcom BCM43228 WiFi - BeyondLogic&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>Gitbook on Command Line</title><link href="http://lee-w.github.io/posts/article/2015/01/gitbook-on-command-line" rel="alternate"></link><published>2015-01-23T07:34:00+08:00</published><updated>2015-01-23T07:34:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-01-23:/posts/article/2015/01/gitbook-on-command-line</id><summary type="html">&lt;p&gt;最近比較認真在寫Gitbook，順便記錄一下該怎麼用&lt;br&gt;
簡單來說Gitbook就是可以使用markdown來寫書的平台，可以轉成各種電子書的格式&lt;br&gt;
目前已經支援的有html, pdf, ePUB, MOBI&lt;br&gt;
</summary><content type="html">&lt;p&gt;最近比較認真在寫Gitbook，順便記錄一下該怎麼用&lt;br&gt;
簡單來說Gitbook就是可以使用markdown來寫書的平台，可以轉成各種電子書的格式&lt;br&gt;
目前已經支援的有html, pdf, ePUB, MOBI&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;之前寫了一本Clean Code的筆記&lt;br&gt;
最近又開始寫一本FreeBSD和網管相關的Gitbook&lt;br&gt;
如果有興趣可以到&lt;a href="https://www.gitbook.com/@lee-w"&gt;我的Gitbook&lt;/a&gt;上看看XD&lt;/p&gt;
&lt;p&gt;目前Gitbook主要支援網站上的Editor，不過我比較習慣在本地端進行編輯&lt;br&gt;
雖然有Gitbook編輯器，但有時候用起來還是會出點問題&lt;br&gt;
所以最後還是決定來學如何用command line + sublime寫Gitbook&lt;/p&gt;
&lt;h2&gt;安裝Gitbook&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install gitbook -g
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;開始撰寫Gitbook&lt;/h2&gt;
&lt;p&gt;一本Gitbook一般都會包含&lt;code&gt;SUMMARY.md&lt;/code&gt;, &lt;code&gt;README.md&lt;/code&gt;, &lt;code&gt;package.json&lt;/code&gt;, &lt;code&gt;book.json&lt;/code&gt;&lt;br&gt;
像我的Learning Python筆記的檔案架構大概長的是這樣&lt;br&gt;
&lt;img alt="1_learning_python_project_structure" src="http://i.imgur.com/6RDgdVZ.png"&gt;&lt;/p&gt;
&lt;p&gt;README.md是這本書的簡介&lt;br&gt;
package.json是額外使用的package的定義和設定&lt;br&gt;
book.json是這本書的額外設定&lt;br&gt;
這裡不會多做介紹，可以參考&lt;a href="#Reference"&gt;Reference&lt;/a&gt;的網站，裡面有很詳細的介紹&lt;/p&gt;
&lt;p&gt;最重要的是SUMMARY.md，它會定義整本gitbook的架構&lt;br&gt;
每個章節下面都還可以給予更多的小節&lt;br&gt;
下面是我Learning Python的SUMMARY.md&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;# Summary&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Introduction&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;README&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Getting&lt;/span&gt; &lt;span class="n"&gt;Started&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;_getting_started&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;README&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;_getting_started&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a_python_q&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a_session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Runs&lt;/span&gt; &lt;span class="n"&gt;Programs&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;_getting_started&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;how_python_runs_programs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;Run&lt;/span&gt; &lt;span class="n"&gt;Programs&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;_getting_started&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;how_you_run_programs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Types&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Operations&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_types_and_operations&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;README&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Introducing&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_types_and_operations&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;introducing_python_object_types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt; &lt;span class="n"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_types_and_operations&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numeric_types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;Typing&lt;/span&gt; &lt;span class="n"&gt;Interlude&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_types_and_operations&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;the_dynamic_typing_interlude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這是預覽的結果&lt;br&gt;
&lt;img alt="2_learning_python_web" src="http://i.imgur.com/d3NP0xi.png"&gt;&lt;/p&gt;
&lt;p&gt;下了這個指令後就會根據SUMMARY.md的定義，自動產生相對應資料夾和檔案&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gitbook init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著就可以開始編輯裡面的檔案了&lt;/p&gt;
&lt;h2&gt;預覽&lt;/h2&gt;
&lt;p&gt;寫完之後當然預覽一下&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gitbook serve 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用了這個指令後就會為目前的目錄開一個預覽HTML的port&lt;br&gt;
只要在瀏覽器上輸入&lt;code&gt;http://localhost:4000&lt;/code&gt;&lt;br&gt;
就可以預覽剛剛寫的Gitbook&lt;br&gt;
只要有更新後存擋，重新整理就能看到更新後的結果&lt;/p&gt;
&lt;h2&gt;輸出&lt;/h2&gt;
&lt;p&gt;在export前，需要為pdf, epub, mobi三種格式多安裝程式才能使用&lt;br&gt;
先到的官網下載Calibre&lt;br&gt;
http://calibre-ebook.com/download&lt;/p&gt;
&lt;p&gt;以mac為例&lt;br&gt;
需要下面這個指令，為ebook-covert建立一個捷徑，讓gitbook可以找到這個功能&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/local/bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下的四個指令依序可以產生html, pdf, epub, mobi&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gitbook build ./ 
gitbook pdf ./
gitbook epub ./
gitbook mobi ./
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;後面可以多指定一個參數&lt;code&gt;--output="Directory"&lt;/code&gt;&lt;br&gt;
"Directory"換成你要的位置或檔名&lt;br&gt;
如果不指定，預設html會export到_book裡面，其他檔案則會以book命名&lt;/p&gt;
&lt;h2&gt;Publish到Gitbook.com上&lt;/h2&gt;
&lt;p&gt;先到&lt;a href="https://www.gitbook.com"&gt;Gitbook官網&lt;/a&gt;上註冊帳號&lt;br&gt;
接著create a new book，到setting頁面往下拉，就會看到一個URL&lt;/p&gt;
&lt;p&gt;接下來的操作就跟git基本上是一樣的，init, add, commit ...等&lt;br&gt;
只有在remote的設定有點不同&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add gitbook &amp;quot;URL&amp;quot;
git push -u gitbook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡要輸入的帳號、密碼是gitbook上的，不是與其連結的帳號的&lt;br&gt;
如果還沒設定就要再去自己的profile內設定&lt;/p&gt;
&lt;p&gt;&lt;a name="reference"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GitbookIO/gitbook"&gt;Gitbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://help.gitbook.io/index.html"&gt;GitBook Documentaion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codedata.com.tw/social-coding/gitbook-self-publishing/"&gt;深入淺出 GitBook 寫作與自助出版，電子書也能多人協作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>MacBook Pro Retina 開箱</title><link href="http://lee-w.github.io/posts/article/2015/01/mbpr-out-of-the-box" rel="alternate"></link><published>2015-01-02T04:14:00+08:00</published><updated>2015-01-02T04:14:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-01-02:/posts/article/2015/01/mbpr-out-of-the-box</id><summary type="html">&lt;p&gt;這篇只是想給自己換mbpr留下一個紀念&lt;br&gt;
順便紀錄一些從Ubuntu轉過來不習慣的地方&lt;br&gt;
想要看更專業的開箱文就要再去翻別篇囉ＸＤ&lt;br&gt;
</summary><content type="html">&lt;p&gt;這篇只是想給自己換mbpr留下一個紀念&lt;br&gt;
順便紀錄一些從Ubuntu轉過來不習慣的地方&lt;br&gt;
想要看更專業的開箱文就要再去翻別篇囉ＸＤ&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;先附上幾張照片&lt;br&gt;
&lt;img alt="1_mac" src="http://i.imgur.com/cZp8mpJ.jpg"&gt;&lt;br&gt;
&lt;img alt="2_mac" src="http://i.imgur.com/NgvObR9.jpg"&gt;&lt;br&gt;
&lt;img alt="3_mac" src="http://i.imgur.com/vc6HXcm.jpg"&gt;&lt;/p&gt;
&lt;p&gt;從Ubuntu轉過來mac，不用一天就上手了&lt;br&gt;
不過也可能是我常常把Ubuntu改得很像mac吧ＸＤ&lt;br&gt;
轉過來mac最大的好處就是超強大的觸控板&lt;/p&gt;
&lt;p&gt;不過還是有一些比較不習慣的地方&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;沒有guake terminal&lt;br&gt;
guake terminal實在太好用了啊ＸＤ&lt;br&gt;
雖然可以用iterm2做出類似的效果，但感覺還是不太對&lt;br&gt;
&lt;a href="http://ivanvillareal.com/osx/setup-iterm2-to-behave-like-guake/"&gt;SETUP ITERM2 TO BEHAVE LIKE GUAKE&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不支援NTFS寫入&lt;br&gt;
下面這裡提供一個在PPT找到的解決方案&lt;br&gt;
不過寫入速度好像只有USB 2.0&lt;br&gt;
&lt;a href="https://www.ptt.cc/bbs/MAC/M.1419789197.A.546.html"&gt;[軟體] NTFS for Mac OSX Yosemite 10.10&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;無法直接讀到Android手機的檔案&lt;br&gt;
雖然可以用Android File Transfer解決，但不知道為什麼遇到我的手機很容易死當＝＝&lt;br&gt;
&lt;a href="https://www.android.com/filetransfer/"&gt;Android File Transfer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;總之我現在也是個mac user了lol&lt;/p&gt;</content></entry><entry><title>Android Studio+Genymotion安裝(12/29更新)</title><link href="http://lee-w.github.io/posts/article/2014/11/android-studio-and-genymotion-installation" rel="alternate"></link><published>2014-11-23T09:26:00+08:00</published><updated>2014-11-23T09:26:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-11-23:/posts/article/2014/11/android-studio-and-genymotion-installation</id><summary type="html">&lt;h1&gt;What is Android Studio?&lt;/h1&gt;
&lt;p&gt;最近Google在推行的Android IDE，前身是IntelliJ IDEA&lt;br&gt;
</summary><content type="html">&lt;h1&gt;What is Android Studio?&lt;/h1&gt;
&lt;p&gt;最近Google在推行的Android IDE，前身是IntelliJ IDEA&lt;br&gt;
&lt;!--more--&gt;&lt;br&gt;
它的檔案架構跟eclipse差蠻多的，所以用不同的IDE來協作會有點麻煩&lt;br&gt;
就我的經驗Android Studio比eclipse來得穩定一些&lt;br&gt;
反正現在還有Google在背後支持它，就來試試看吧XD&lt;/p&gt;
&lt;h3&gt;2014/11/23更新&lt;/h3&gt;
&lt;p&gt;&lt;a href="#1123 update 1"&gt;Install SDK&lt;/a&gt;: 更新了Android Studio 0.8.14後需要的額外設定&lt;br&gt;
&lt;a href="#1123 update 2"&gt;Setup SDK&lt;/a&gt;: SDK版本更新至API21(Android 5.0)&lt;/p&gt;
&lt;h3&gt;2014/12/29更新&lt;/h3&gt;
&lt;p&gt;Android Studio 正式版已經發布了，現在好像完全無法把sdk放在Android Studio資料夾內&lt;br&gt;
所以之前沒有把sdk獨立出來的，記得要獨立出來，不然可能會發生無法更新的問題&lt;/p&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;h2&gt;Download Android Studio&lt;/h2&gt;
&lt;p&gt;先到官網下載Android Studio (這篇文以Windows為例)&lt;br&gt;
https://developer.android.com/sdk/installing/studio.html&lt;br&gt;
&lt;img alt="1_download" src="http://i.imgur.com/iFQ6JJY.png"&gt;&lt;/p&gt;
&lt;p&gt;下載後會進入到下面的教學頁面&lt;br&gt;
其實寫得還蠻清楚的，所以如果可以接受就可以跳過以下的教學了XD&lt;br&gt;
&lt;img alt="2_Installation_Guide" src="http://i.imgur.com/gkttlS9.png"&gt;&lt;/p&gt;
&lt;h2&gt;Install JDK&lt;/h2&gt;
&lt;p&gt;在安裝Android Studio前，要先安裝好JDK&lt;br&gt;
現在最新的版本是JDK 8，可以到下面的連結下載&lt;br&gt;
http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;br&gt;
&lt;img alt="3_jdk1" src="http://i.imgur.com/0om5D2M.png"&gt;&lt;br&gt;
選好自己的作業系統&lt;br&gt;
&lt;img alt="4_jdk2" src="http://i.imgur.com/D0G7XLq.png"&gt;&lt;br&gt;
再來就是一直下一步囉XD&lt;/p&gt;
&lt;h3&gt;設定環境變數&lt;/h3&gt;
&lt;p&gt;安裝完JDK後，我們還需要設定環境變數&lt;br&gt;
以Win7為例&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;電腦-&amp;gt; 內容 -&amp;gt; 進階系統設定 -&amp;gt; 進階 -&amp;gt; 環境變數&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接著在 &lt;code&gt;系統變數&lt;/code&gt; 這個欄位按下 &lt;code&gt;新增&lt;/code&gt; &lt;br&gt;
變數名稱 輸入 &lt;code&gt;JAVA_HOME&lt;/code&gt; (可能會因為Android Studio的版本而不同)&lt;br&gt;
變數值 輸入 你安裝JDK的路徑 (e.g. &lt;code&gt;C:\Program Files\Java\jdk1.8.0_20&lt;/code&gt;)&lt;br&gt;
&lt;img alt="5_env_var" src="http://i.imgur.com/KYG8pBO.png"&gt;&lt;/p&gt;
&lt;h2&gt;Install Android Studio&lt;/h2&gt;
&lt;p&gt;安裝過程中會問要讓&lt;strong&gt;目前使用者&lt;/strong&gt;使用還是&lt;strong&gt;所有使用者&lt;/strong&gt;使用&lt;br&gt;
再來會要你選安裝目錄&lt;br&gt;
如果不想理它，就一直下一步吧&lt;br&gt;
除了Android Studio外，可能還會安裝一些Dependent的套件&lt;br&gt;
不過就放著讓他跑就可以了&lt;/p&gt;
&lt;p&gt;&lt;a name="1123 update 1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Install SDK manager&lt;/h2&gt;
&lt;p&gt;自從0.8.14版之後，SDK Manager就不會再跟Android Studio綁在一起&lt;br&gt;
所以要額外&lt;a href="https://developer.android.com/sdk/index.html?hl=i"&gt;下載SDK tools&lt;/a&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果是在0.8.14版前安裝的也不用擔心，更新後需要多做設定
Android Studio會自動幫你把SDK的路徑設定到原本的位置
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把網頁往下拉會看到SDK Tools Only&lt;br&gt;
&lt;img alt="18_sdk_download" src="http://i.imgur.com/TctIzTa.png"&gt;&lt;br&gt;
下載完解壓縮到你要的路徑&lt;br&gt;
之後設定SDK manager設定到這個路徑就可以了&lt;/p&gt;
&lt;p&gt;開始Android Studio&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Configure -&amp;gt; Project Default -&amp;gt; Project Structure&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="20_set_sdk_1" src="http://i.imgur.com/Tj82hvs.png"&gt;&lt;/p&gt;
&lt;p&gt;記得要把SDK的路徑改成剛剛安裝的路徑&lt;br&gt;
&lt;img alt="21_set_sdk_2" src="http://i.imgur.com/ETqkNhX.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="1123 update 1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;SDK setup&lt;/h2&gt;
&lt;p&gt;接著我們要設定SDK&lt;br&gt;
現在最新的版本是Android 5.0 (API 21)&lt;/p&gt;
&lt;p&gt;先開啟Android Studio，進入&lt;code&gt;Configure&lt;/code&gt;&lt;br&gt;
&lt;img alt="6_SDK1" src="http://i.imgur.com/c8rDZxZ.png"&gt;&lt;br&gt;
進入&lt;code&gt;SDK Manager&lt;/code&gt;&lt;br&gt;
&lt;img alt="7_SDK2" src="http://i.imgur.com/pBVHp7S.png"&gt;&lt;br&gt;
把選單拉到API 21選起來&lt;br&gt;
&lt;img alt="19_sdk_21" src="http://i.imgur.com/3lytBi2.png"&gt;&lt;/p&gt;
&lt;p&gt;接著把選單拉到最後選&lt;br&gt;
- &lt;strong&gt;Android Support Repository&lt;/strong&gt;&lt;br&gt;
- &lt;strong&gt;Android support Libarary&lt;/strong&gt;&lt;br&gt;
- &lt;strong&gt;Coogle Play services&lt;/strong&gt;&lt;br&gt;
- &lt;strong&gt;Google Repository&lt;/strong&gt;&lt;br&gt;
- &lt;strong&gt;Google USB Driver&lt;/strong&gt;&lt;br&gt;
- &lt;strong&gt;Intel X86 Emulator Accelerator(HAXM installer)&lt;/strong&gt;&lt;br&gt;
    最後的這個HAXM是為了讓模擬器加速用的，從SDK manager下載完之後，還有另外的安裝步驟&lt;br&gt;
&lt;img alt="9_SDK4" src="http://i.imgur.com/UM8w30n.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安裝到這裡Android Studio已經可以使用了&lt;/strong&gt;，不過還可以再做一些設定讓手機模擬器跑得更快&lt;/p&gt;
&lt;h2&gt;Emulator Accelerator&lt;/h2&gt;
&lt;p&gt;在安裝HAXM前要先確定Intel VT-x是否有在你的bios被啟用&lt;br&gt;
我沒遇到這個問題，所以我也不知道怎麼解決＠＠&lt;br&gt;
可以在cmd下&lt;code&gt;sc query intelhaxm&lt;/code&gt;來看有沒有開啓，只要有看到Running應該就是沒問題了&lt;/p&gt;
&lt;p&gt;再來到Android Studio的目錄下找到HAXM的安裝檔&lt;br&gt;
它被放在&lt;code&gt;...\android-studio\sdk\extras\intel\Hardware_Accelerated_Execution_Manager&lt;/code&gt;&lt;br&gt;
...指的是安裝的目錄&lt;/p&gt;
&lt;p&gt;看到&lt;code&gt;intelhaxm&lt;/code&gt;按下去!&lt;br&gt;
&lt;img alt="10_Intel_accelator" src="http://i.imgur.com/NX8lULd.png"&gt;&lt;br&gt;
一直按下一步就大功告成了&lt;/p&gt;
&lt;p&gt;不過...&lt;br&gt;
這樣還是不夠快，我們需要更快的模擬器！&lt;br&gt;
Genymotion！！！&lt;/p&gt;
&lt;h1&gt;Genymotion&lt;/h1&gt;
&lt;p&gt;安裝Genymotion的模擬器前，我們必須先註冊&lt;br&gt;
http://www.genymotion.com/&lt;/p&gt;
&lt;h2&gt;Download&lt;/h2&gt;
&lt;p&gt;進入下載頁面後，往下拉會看到Windows，mac 和 Liunx版&lt;/p&gt;
&lt;p&gt;Windows只要直接安裝就可以了，它會連Oracle Virtual Box一起安裝&lt;br&gt;
&lt;img alt="11_genymotiong_win" src="http://i.imgur.com/4oUXeea.png"&gt;&lt;/p&gt;
&lt;p&gt;mac 和 Linux還要額外先安裝 &lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;Oracle Virtual Box&lt;/a&gt;&lt;br&gt;
&lt;img alt="12_genymotion_Unix" src="http://i.imgur.com/NMQD2Jc.png"&gt;&lt;/p&gt;
&lt;h2&gt;Install IDE plug-in&lt;/h2&gt;
&lt;p&gt;在下載頁面往下拉會看到genymotion在IDE上的plugin，可以讓我們從IDE內直接開啟Genymothion&lt;br&gt;
Android Studio屬於IntelliJ IDEA，所以我們就照著他上面的指示設定&lt;br&gt;
&lt;img alt="13_genymotion_plug in" src="http://i.imgur.com/7C0d8aU.png"&gt;&lt;/p&gt;
&lt;p&gt;開啟 Android Studio&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;File -&amp;gt; Settings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="14_plug-in" src="http://i.imgur.com/vemudkb.png"&gt;&lt;/p&gt;
&lt;p&gt;找到Plungins ，接著點Browse repositories&lt;br&gt;
&lt;img alt="15_plug-in2" src="http://i.imgur.com/UnP1hiQ.png"&gt;&lt;/p&gt;
&lt;p&gt;上方輸入Genymotion就可找到，接著就安裝它吧&lt;br&gt;
&lt;img alt="16_plug-in3" src="http://i.imgur.com/xzjsTmz.png"&gt;&lt;/p&gt;
&lt;p&gt;安裝完記得重新啟動Android Studio，就會在工具列看到多一個按鈕，Genymotion就安裝完成囉&lt;br&gt;
&lt;img alt="17_plug-in4" src="http://i.imgur.com/I2RbFEG.png"&gt;&lt;/p&gt;
&lt;p&gt;第一次使用會要求設定Genymotion安裝的資料夾 (e.g. &lt;code&gt;C:\Program Files\Genymobile\Genymotion&lt;/code&gt;)&lt;br&gt;
設定完就可以開始使用Genymotion了&lt;/p&gt;
&lt;h2&gt;Plugins&lt;/h2&gt;
&lt;p&gt;IdeaVim: 如果你是重度Vim狂熱者，這絕對是你不能不裝的plugin!!!&lt;br&gt;
MarkDown: 這個Plugin提供直接在Android Studio中，Preview Markdown的功能&lt;/p&gt;</content></entry><entry><title>Dual Boot FreeBSD Using GRUB2</title><link href="http://lee-w.github.io/posts/article/2014/10/dual-boot-freebsd-using-grub2" rel="alternate"></link><published>2014-10-21T08:56:00+08:00</published><updated>2014-10-21T08:56:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-10-21:/posts/article/2014/10/dual-boot-freebsd-using-grub2</id><summary type="html">&lt;p&gt;其實原本的標題是&lt;code&gt;Dual Boot FreeBsd with Ubuntu&lt;/code&gt;&lt;br&gt;
這篇文章寫的都是用Ubuntu測試的&lt;br&gt;
不過我想只要是grub2應該都差不多吧XD&lt;br&gt;
</summary><content type="html">&lt;p&gt;其實原本的標題是&lt;code&gt;Dual Boot FreeBsd with Ubuntu&lt;/code&gt;&lt;br&gt;
這篇文章寫的都是用Ubuntu測試的&lt;br&gt;
不過我想只要是grub2應該都差不多吧XD&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;加入freeBSD到grub開機選單&lt;/h2&gt;
&lt;h3&gt;更改grub的設定檔&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi /etc/grub.d/40_Custom
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;加入下面這幾行&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;menuentry &amp;quot;FreeBSD (/boot/loader)&amp;quot; {
    insmod ufs2
    set root=(hd0,1,a)
    kfreebsd /boot/loader
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;FreeBSD (/boot/loader)&lt;/code&gt;是在開機時顯示的名稱&lt;br&gt;
&lt;code&gt;(hd0,1,a)&lt;/code&gt;要根據你的freeBSD灌在磁碟的哪一塊決定&lt;/p&gt;
&lt;h3&gt;更新grub設定檔&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo update-grub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就會在開機選單上看到freeBSD了&lt;/p&gt;
&lt;p&gt;其實還有一些其他的設定方法&lt;br&gt;
可以參考&lt;a href="http://unix.stackexchange.com/questions/16886/set-up-grub2-to-boot-freebsd-using-either-ubuntu-tools-or-liveusb-to-find-what-p"&gt;Set up Grub2 to boot Freebsd&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;換grub開機順序&lt;/h2&gt;
&lt;p&gt;如果希望改變預設的開機順序，就必須要修改下面的檔案&lt;code&gt;/etc/default/grub&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi /etc/default/grub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會看到下面這串&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GRUB_DEFAULT=0
#GRUB_HIDDEN_TIMEOUT=0
GRUB_HIDDEN_TIMEOUT_QUIET=true
GRUB_TIMEOUT=10
GRUB_DISTRIBUTOR=`lsb_release -i -s 2&amp;gt; /dev/null || echo Debian`
GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash&amp;quot;
GRUB_CMDLINE_LINUX=&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把第1行設定為多少(注意是從0開始)，就會預設從那裡開機&lt;/p&gt;
&lt;h2&gt;在ubuntu mount FreeBSD&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mount -t ufs -r -o ufstype=ufs2 /dev/sda4 ~/freebsd
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>powerline on zsh, vim, tmux</title><link href="http://lee-w.github.io/posts/article/2014/07/powerline-on-zsh-vim-tmux" rel="alternate"></link><published>2014-07-30T15:01:00+08:00</published><updated>2014-07-30T15:01:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-07-30:/posts/article/2014/07/powerline-on-zsh-vim-tmux</id><summary type="html">&lt;p&gt;用了vim的powerline後覺得很酷，就找了很多的powerline來玩&lt;br&gt;
於是這篇文章產生了XDD&lt;br&gt;
</summary><content type="html">&lt;p&gt;用了vim的powerline後覺得很酷，就找了很多的powerline來玩&lt;br&gt;
於是這篇文章產生了XDD&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;這是各個powerline的預覽圖&lt;br&gt;
1. vim&lt;br&gt;
&lt;img alt="1_vim" src="http://i.imgur.com/VTM4866.png"&gt;&lt;br&gt;
2. tmux&lt;br&gt;
&lt;img alt="2_tmux" src="http://i.imgur.com/LLJ9xjk.png"&gt;&lt;br&gt;
3. zsh&lt;br&gt;
&lt;a href="http://i.imgur.com/tOvzhK3.png"&gt;3_zsh&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;powerline 字體&lt;/h2&gt;
&lt;p&gt;安裝這些powerline之前要先下載powerline字體&lt;br&gt;
不然可能會無法正常顯示&lt;br&gt;
在https://github.com/Lokaltog/powerline-fonts下載後，之後安裝就完成了&lt;br&gt;
&lt;em&gt;記得要把終端機的字體條成這些有powerline結尾的字體，我當初就是沒用這個卡了很久= =&lt;/em&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/Lokaltog/powerline-fonts /tmp/git/clone
sudo mv /tmp/git-clone/powerline-fonts /usr/share/fonts/powerline-fonts
sudo fc-cache -v -f
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;zsh&lt;/h2&gt;
&lt;p&gt;其實oh-my-zsh本身就有agnoster了&lt;br&gt;
但我更推薦下面這個https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme&lt;br&gt;
安裝完之後記得再zshrc中加入&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ZSH_THEME="powerline"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果要更多客制化設定可以參考repo內的設定&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme /tmp/oh-my-zsh-powerline-theme
/tmp/oh-my-zsh-powerline-theme/oh-my-zsh-powerline-theme/install_in_omz.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;vim&lt;/h2&gt;
&lt;p&gt;其實我也不是用vim-powerline&lt;br&gt;
而是vim-airline&lt;br&gt;
不過基本上好像是差不多的東西，而且vim-airline比較輕量化&lt;br&gt;
建議直接用vundle 這類的套件管理安裝比較方便&lt;/p&gt;
&lt;p&gt;https://github.com/bling/vim-airline&lt;/p&gt;
&lt;h2&gt;tmux&lt;/h2&gt;
&lt;p&gt;tmux有非常多的東西可以客製化設定&lt;br&gt;
在各系統也有不同的安裝方式，就自己看repo的readme文件吧XD&lt;/p&gt;
&lt;p&gt;https://github.com/erikw/tmux-powerline&lt;/p&gt;</content><category term="utility"></category></entry><entry><title>解決Win 8、Ubuntu雙系統無法掛載NTFS分割區問題</title><link href="http://lee-w.github.io/posts/article/2014/02/solution-to-win-8-ubuntu-dual-system-cannot-mount-ntfs-parition-problem" rel="alternate"></link><published>2014-02-25T15:40:00+08:00</published><updated>2014-02-25T15:40:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-02-25:/posts/article/2014/02/solution-to-win-8-ubuntu-dual-system-cannot-mount-ntfs-parition-problem</id><summary type="html">&lt;p&gt;現在安裝了Win8 和 Ubuntu雙系統&lt;br&gt;
每次只要開Win 8 ，再重新開機進到Ubuntu就會出現file system 無法掛載的問題&lt;br&gt;
然後我在兩個系統間共同的data 分割區就會無法掛載&lt;br&gt;
可是再重開一次Win 8，問題就神祕的解決了@@&lt;br&gt;
後來才發現原來是因為Win 8 的 &lt;strong&gt;Fast Boot&lt;/strong&gt;  造成的&lt;/p&gt;
</summary><content type="html">&lt;p&gt;現在安裝了Win8 和 Ubuntu雙系統&lt;br&gt;
每次只要開Win 8 ，再重新開機進到Ubuntu就會出現file system 無法掛載的問題&lt;br&gt;
然後我在兩個系統間共同的data 分割區就會無法掛載&lt;br&gt;
可是再重開一次Win 8，問題就神祕的解決了@@&lt;br&gt;
後來才發現原來是因為Win 8 的 &lt;strong&gt;Fast Boot&lt;/strong&gt;  造成的&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;解決&lt;/h2&gt;
&lt;p&gt;&lt;img alt="win8_start_up" src="http://i.imgur.com/ohEfCkR.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;控制台\硬體和音效\電源選項\系統設定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只要把&lt;code&gt;開啟快速啟動&lt;/code&gt;取消掉就可以了&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;[Cannot mount NTFS partition in Ubuntu 13.04 [duplicate]] (http://askubuntu.com/questions/291864/cannot-mount-ntfs-partition-in-ubuntu-13-04)&lt;/p&gt;</content></entry><entry><title>Git and Git Hub</title><link href="http://lee-w.github.io/posts/article/2014/02/git-and-git-hub" rel="alternate"></link><published>2014-02-22T16:18:00+08:00</published><updated>2014-02-22T16:18:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-02-22:/posts/article/2014/02/git-and-git-hub</id><summary type="html"></summary><content type="html">&lt;p&gt;這份筆記已經是舊的版本了&lt;br&gt;
請參考&lt;a href="https://lee-w.github.io/git-tutorial/#/"&gt;新版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近因為專題需要，所以寫了一份簡單的Git筆記&lt;br&gt;
裡面大概就是我常用的指令&lt;br&gt;
因為我也只是剛開始使用git沒多久，內容不會太深入&lt;/p&gt;
&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/31515684" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/ssuser5e1963/git-and-git-hub-31515684" title="Git and git hub" target="_blank"&gt;Git and git hub&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/ssuser5e1963" target="_blank"&gt;唯 李&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;</content></entry><entry><title>Guake terminal</title><link href="http://lee-w.github.io/posts/article/2014/02/guake-terminal" rel="alternate"></link><published>2014-02-09T07:02:00+08:00</published><updated>2014-02-09T07:02:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-02-09:/posts/article/2014/02/guake-terminal</id><summary type="html">&lt;h1&gt;什麼是guake termianl&lt;/h1&gt;
&lt;p&gt;隱藏在背景的terminal&lt;br&gt;
並且可以隨時呼叫(預設是F12)&lt;/p&gt;
</summary><content type="html">&lt;h1&gt;什麼是guake termianl&lt;/h1&gt;
&lt;p&gt;隱藏在背景的terminal&lt;br&gt;
並且可以隨時呼叫(預設是F12)&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;img alt="1_guake" src="http://i.imgur.com/0L95Qtg.png"&gt;&lt;/p&gt;
&lt;h1&gt;安裝 Guake Terminal&lt;/h1&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install guake
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;設定&lt;/h1&gt;
&lt;h2&gt;滑鼠一移開就自動隱藏&lt;/h2&gt;
&lt;p&gt;從「偏好設定 （Preferences)」勾選「Hide on lost focus」&lt;br&gt;
&lt;img alt="2_hide on focus" src="http://i.imgur.com/Ibp8MX0.png"&gt;&lt;/p&gt;
&lt;h1&gt;開機就啟動Guake Terminal&lt;/h1&gt;
&lt;p&gt;在「初始應用程式 （Startup Applications) 」把guake terminal加上去&lt;br&gt;
&lt;img alt="3_guake start up" src="http://i.imgur.com/sYQ6Klw.png"&gt;&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;[Ubuntu 安裝 Guake Terminal] (http://www.arthurtoday.com/2012/08/ubuntu-install-guake-terminal.html#.UvcpWx9KiXo)&lt;/p&gt;</content><category term="utility"></category></entry><entry><title>Linux開機自動掛載分割區</title><link href="http://lee-w.github.io/posts/article/2014/02/auto-mount-disk-after-boot" rel="alternate"></link><published>2014-02-01T16:44:00+08:00</published><updated>2014-02-01T16:44:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-02-01:/posts/article/2014/02/auto-mount-disk-after-boot</id><summary type="html">&lt;p&gt;分割區的掛載資訊，存在 /etc/fstab中，所以需要自動掛載分割區時可以針對此檔案做修改&lt;br&gt;
需要注意的是，如果設定不好，可能會沒辦法開機的！！！&lt;br&gt;
</summary><content type="html">&lt;p&gt;分割區的掛載資訊，存在 /etc/fstab中，所以需要自動掛載分割區時可以針對此檔案做修改&lt;br&gt;
需要注意的是，如果設定不好，可能會沒辦法開機的！！！&lt;br&gt;
&lt;!--more--&gt;&lt;br&gt;
我們先來看一下/etc/fstab內的東西&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cat /etc/fstab
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# /etc/fstab: static file system information.
#
# Use &amp;#39;blkid&amp;#39; to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# &amp;lt;file system&amp;gt; &amp;lt;mount point&amp;gt;   &amp;lt;type&amp;gt;  &amp;lt;options&amp;gt;       &amp;lt;dump&amp;gt;  &amp;lt;pass&amp;gt;
# / was on /dev/sda1 during installation
UUID=c5744283-f105-47e9-8a2e-21f477d895b7 /               ext4    errors=remount-ro 0       1
# swap was on /dev/sda5 during installation
UUID=72b6a10a-f0b6-43ef-927d-0d74673febe7 none            swap    sw              0       0
#data
UUID=571F168F3D98D759 /media/lee/data ntfs auto,rw 0 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;#是註解&lt;br&gt;
最後六行是比較重要的&lt;br&gt;
1~2是root的掛載&lt;br&gt;
3~4是swap的掛載&lt;br&gt;
5~6是我自己的data的掛載&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#data
UUID=571F168F3D98D759 /media/lee/data ntfs auto,rw 0 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;總共有6個欄位&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;掛載硬碟的標籤&lt;ul&gt;
&lt;li&gt;掛載硬碟的標籤我用的是UUID的標籤，可以用下面的指令查詢&lt;br&gt;
&lt;code&gt;ls -l /dev/disk/by-uuid/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;也可以直接使用/dev/sda1這樣的格式，只是如果硬碟的代號改變，就要再去手動改變比較麻煩 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;掛載位置&lt;ul&gt;
&lt;li&gt;掛載的位置要是一個已經存在的位置，建議是一個空的資料夾&lt;/li&gt;
&lt;li&gt;如果不是空的，裏面的東西應該都會被清空&lt;/li&gt;
&lt;li&gt;另外，一個掛載點只能掛載一個disk&lt;/li&gt;
&lt;li&gt;另外，注意在Linux中大小寫是不同的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分隔區格式&lt;ul&gt;
&lt;li&gt;而一般的檔案朝的分割驅格式都是都是ntfs，不過也可以用指令來查詢&lt;br&gt;
&lt;code&gt;df&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選項&lt;/li&gt;
&lt;li&gt;是否被 dump 備份指令作用&lt;/li&gt;
&lt;li&gt;是否以 fsck 檢驗磁區&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本上4 5 6我也沒去研究，如果有興趣的話可以在我最後面附上的參考資料中找到&lt;br&gt;
&lt;/br&gt;&lt;br&gt;
&lt;/br&gt;&lt;/p&gt;
&lt;h1&gt;測試&lt;/h1&gt;
&lt;p&gt;先看一下是否有掛載成功&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;df
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;檔案系統         1K-區段      已用      可用 已用% 掛載點
/dev/sda1      103081248   9259936  88562048   10% /
none                   4         0         4    0% /sys/fs/cgroup
udev             3992780         4   3992776    1% /dev
tmpfs             801368      1168    800200    1% /run
none                5120         0      5120    0% /run/lock
none             4006840      1032   4005808    1% /run/shm
none              102400        44    102356    1% /run/user
/dev/sda6      459942908 229176172 230766736   50% /media/lee/data
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;像我的最後面就出現了data&lt;/p&gt;
&lt;p&gt;之後暫時將它卸載 (若&lt;code&gt;df&lt;/code&gt;之後，分割區沒有出現，那就不用做這步了)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo umount /dev/sda6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(/dev/sda6要取代成你自己的位置)&lt;br&gt;
接著再執行一次&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;df
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;剛剛的分割區應該會不見，然後執行&lt;br&gt;
開機自動掛載分割區&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mount -a
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果沒有錯誤訊息，就在執行一次&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;df
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果掛載的分隔驅再裡面就是成功了&lt;/p&gt;
&lt;p&gt;如果有任何異常，就去看一下/etc/fstab是不是有哪裡寫錯了&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;[巴特的微花盆： 筆記： Linux 中設定開機時自動掛載分割區 ] (http://255121.blogspot.tw/2010/05/linux.html)&lt;/p&gt;</content></entry><entry><title>autojump - 在terminal中快速跳轉資料夾</title><link href="http://lee-w.github.io/posts/article/2014/02/autojump" rel="alternate"></link><published>2014-02-01T13:11:00+08:00</published><updated>2014-02-01T13:11:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-02-01:/posts/article/2014/02/autojump</id><summary type="html">&lt;h1&gt;什麼是autojump&lt;/h1&gt;
&lt;p&gt;可以快速跳轉資料夾的工具&lt;/p&gt;
</summary><content type="html">&lt;h1&gt;什麼是autojump&lt;/h1&gt;
&lt;p&gt;可以快速跳轉資料夾的工具&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;e.g.&lt;br&gt;
有個資料夾是/a/b/c/d/e/f/g/h&lt;br&gt;
原本要輸入&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /a/b/c/d/e/f/g/h
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可是現在有了autojump，而且你也去過這個h資料夾，你就可以&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;j h
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很方便吧！！！&lt;/p&gt;
&lt;h1&gt;安裝&lt;/h1&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
git clone https://github.com/joelthelion/autojump
&lt;span class="nb"&gt;cd&lt;/span&gt; autojump
chmod +x install.py
./install.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後把下面這行加入shell的設定檔(e.g. ~/.bashrc  ,  ~/.zshrc)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;amp;&amp;amp; . ~/.autojump/etc/profile.d/autojump.sh &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最後只要重開shell就完成了&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;最基本的功能當然就是跳轉囉&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;j word
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果有重複的名稱 (e.g. worda, wordb)，就在打一次同樣的指令，就會跳到下一個
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;strong text&lt;/strong&gt;&lt;br&gt;
2. list現在autojump可以跳到的資料夾&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;j -s 
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;刪除已經背改變路徑或刪除的紀錄&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; j --purge
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;[autojump readme] (https://github.com/joelthelion/autojump/blob/master/README.md)&lt;/p&gt;</content><category term="utility"></category></entry><entry><title>[C++] 如何create thread</title><link href="http://lee-w.github.io/posts/article/2013/12/how-to-create-thread-in-c-plus-plus" rel="alternate"></link><published>2013-12-11T00:56:00+08:00</published><updated>2013-12-11T00:56:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2013-12-11:/posts/article/2013/12/how-to-create-thread-in-c-plus-plus</id><summary type="html">&lt;p&gt;之前因為作業需要使用到multi-thread，就留下了這篇紀錄&lt;br&gt;
這篇會稍微介紹C++11 的&lt;code&gt;thread&lt;/code&gt;函式庫，還有一點點和&lt;code&gt;pthread&lt;/code&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;之前因為作業需要使用到multi-thread，就留下了這篇紀錄&lt;br&gt;
這篇會稍微介紹C++11 的&lt;code&gt;thread&lt;/code&gt;函式庫，還有一點點和&lt;code&gt;pthread&lt;/code&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;要使用C++11的&lt;code&gt;thread&lt;/code&gt;在編譯時要加上 &lt;code&gt;-std=c++11 -pthread&lt;/code&gt; (&lt;code&gt;-std=c++ -lphread&lt;/code&gt;好像也可以)&lt;br&gt;
ex: &lt;code&gt;g++ -o t thread.cpp -std=c++11 -pthread&lt;/code&gt;&lt;br&gt;
&lt;code&gt;-std=c++11&lt;/code&gt; :  是指定c++的版本&lt;br&gt;
&lt;code&gt;-pthread&lt;/code&gt; (或 &lt;code&gt;-lpthread&lt;/code&gt;)：使用thread的liberary&lt;/p&gt;
&lt;p&gt;下面有寫到join的部份&lt;br&gt;
join是開啟這個thread的上層程式必須等待到這個thread的工作結束了，才可以繼續下面的工作&lt;br&gt;
也就是join以上的程式會與thread搶CPU，join以後的程式就會等待到thread結束才開始&lt;/p&gt;
&lt;p&gt;那就直接來看code吧&lt;br&gt;
&lt;/br&gt;&lt;br&gt;
&lt;/br&gt;&lt;br&gt;
&lt;/br&gt;&lt;/p&gt;
&lt;h2&gt;C++ 11 thread&lt;/h2&gt;
&lt;h3&gt;在main裡面直接開啟thread&lt;/h3&gt;
&lt;p&gt;直接宣告thread型態的變數&lt;br&gt;
thread的constructor的第一個參數是函數名稱，第二個以後就是原本函數的參數&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is funtion1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is function2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="nf"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就可以產生兩個thread，他們會彼此搶CPU的資源&lt;br&gt;
cout似乎是每一個&amp;lt;&amp;lt;會去搶一次，所以如果想要一次印完全部，可能可以考慮使用printf或者是thread的lock功能&lt;/p&gt;
&lt;h3&gt;在class內開啟thread&lt;/h3&gt;
&lt;p&gt;用上面的方法直接呼叫同個class的function會出現錯誤&lt;br&gt;
所以就必須用下面的方法&lt;br&gt;
在宣告thread的時候&lt;br&gt;
第1個參數必須是這個function的完整reference&lt;br&gt;
第2個用this&lt;br&gt;
第3個以後才是原本function的參數&lt;br&gt;
p.s.如果fun1是static，則不用this&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is funtion1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後是如何呼叫其他class的function，這裡包含兩個例子(main, class B)&lt;br&gt;
想法跟上面那種很接近，只是第2個參數改成那個物件的實體&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is funtion1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is function2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="nf"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/br&gt;&lt;br&gt;
&lt;/br&gt;&lt;/p&gt;
&lt;h2&gt;基本的pthread使用&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argumentForFun1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;argumentForFun1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;pthread_t&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;pthread_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;argumentForFun1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;pthread_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至於pthread如何用在class的function上&lt;br&gt;
可以將function加上static&lt;br&gt;
同樣第3個參數也要改成&amp;amp;A::fun1&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;[資訊小兵的胡言亂語: [C++] Thread Function相關測試] (http://programmingpaul.blogspot.tw/2013/08/c-thread-function.html)&lt;/li&gt;
&lt;li&gt;[解析Linux中多線程編程並傳遞多個參數實例] (http://17089349.blog.hexun.com.tw/65836836_d.html)&lt;/li&gt;
&lt;li&gt;[linux下C/C++,多线程pthread] (http://www.cnblogs.com/xianghang123/archive/2011/08/11/2134927.html)&lt;/li&gt;
&lt;/ul&gt;</content><category term="thread"></category></entry></feed>