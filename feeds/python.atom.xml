<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Life Lies in Traveling - Python</title><link href="http://lee-w.github.io/" rel="alternate"></link><link href="http://lee-w.github.io/feeds/python.atom.xml" rel="self"></link><id>http://lee-w.github.io/</id><updated>2017-06-22T22:10:00+08:00</updated><entry><title>Python@Instagram</title><link href="http://lee-w.github.io/posts/python/2017/06/Python-at-IG" rel="alternate"></link><published>2017-06-22T22:10:00+08:00</published><updated>2017-06-22T22:10:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-06-22:/posts/python/2017/06/Python-at-IG</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;Lisa Guo, Hui Ding Keynote PyCon 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2017/keynote-lisa-guo-and-hui-ding-python-at-instagram"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;終於好好花個時間看完今年 IG 在 PyCon US 的 Talk 了&lt;br&gt;
的確蠻值得大家花這個時間去看的&lt;/p&gt;
</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;Lisa Guo, Hui Ding Keynote PyCon 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2017/keynote-lisa-guo-and-hui-ding-python-at-instagram"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;終於好好花個時間看完今年 IG 在 PyCon US 的 Talk 了&lt;br&gt;
的確蠻值得大家花這個時間去看的&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;如果要看懶人包&lt;br&gt;
Google 一下「PyCon」、「Instagram」有很多很清楚地整理&lt;br&gt;
我也整理了一點點我覺得特別有意思的&lt;/p&gt;
&lt;h2&gt;Why Python?&lt;/h2&gt;
&lt;p&gt;(一開始主要是歷史因素，因為當初的創辦人就這麼用了 XD)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use Proven Technology&lt;ul&gt;
&lt;li&gt;Users do not care what database Instagram runs on. They certainly don't care what language Instagram develop in.&lt;/li&gt;
&lt;li&gt;Focus on scoping and solve real problems rather than getting stuck on language detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;But Python is still slow, right?&lt;/h2&gt;
&lt;p&gt;At instagram, our bottlenecck is development velocity, not pure code execution&lt;/p&gt;
&lt;p&gt;The conclusion is that you can get to a few hundred million users with Python before worrying about the performance of framework and language &lt;/p&gt;
&lt;h2&gt;Python Efficiency Strategy&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Build extensive tools to profile and understand performance bottleneck&lt;/li&gt;
&lt;li&gt;Moving stable, citical compenents to C/C++&lt;/li&gt;
&lt;li&gt;Cythonization&lt;/li&gt;
&lt;li&gt;Async? New Pyton runtime?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Road to Python3&lt;/h2&gt;
&lt;p&gt;這一段講到 Instragram 如何從 Python2 轉到 Python3 的過程&lt;br&gt;
我覺得很精彩，所以大家就自己去看吧 XD&lt;/p&gt;
&lt;p&gt;我只紀錄一個我覺得特別有趣的東西&lt;br&gt;
如同大家所知道的 Python2 跟 Python3 一個很大的不同點，就是對於 byte 跟 str 的處理&lt;br&gt;
這就會導致我們必須先確認他的型態是否符合預期&lt;br&gt;
如果不符合就要在做 encode 或 decode&lt;/p&gt;
&lt;p&gt;可能就會像下面這樣&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;six&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mymac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hamc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instagram 處理這種問題的功能實作成 &lt;code&gt;ensure_binary&lt;/code&gt;, &lt;code&gt;ensure_str&lt;/code&gt;, &lt;code&gt;ensure_text&lt;/code&gt; 這類的 helper functon&lt;/p&gt;
&lt;p&gt;這也是我之前在 trace &lt;a href="https://github.com/pytransitions/transitions"&gt;transitions&lt;/a&gt; 的 source code&lt;br&gt;
發現有一個&lt;a href="https://github.com/pytransitions/transitions/blob/2cb42916affe167a8d94cdfdf56ab08b41ccd05c/transitions/core.py#L25"&gt;listify&lt;/a&gt; 的 function&lt;br&gt;
雖然是蠻簡單的小技巧，不過還算蠻實用的&lt;/p&gt;</content><category term="PyCon"></category></entry><entry><title>PyCon TW 2017 - Sprint</title><link href="http://lee-w.github.io/posts/python/2017/06/PyCon-TW-2017-Sprint" rel="alternate"></link><published>2017-06-17T16:07:00+08:00</published><updated>2017-06-17T16:07:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-06-17:/posts/python/2017/06/PyCon-TW-2017-Sprint</id><summary type="html">&lt;p&gt;這天的 Sprint 是由今年的 Keynote Speaker - Russell Keith-Magee 帶來他的開源專案&lt;a href="https://pybee.org"&gt;BeeWare&lt;/a&gt;&lt;br&gt;
讓大家一起來貢獻&lt;br&gt;
這個專案還蠻有趣的&lt;br&gt;
主要就是要讓 Python 能在各平台上跑 (i.e. web, mobile)&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這天的 Sprint 是由今年的 Keynote Speaker - Russell Keith-Magee 帶來他的開源專案&lt;a href="https://pybee.org"&gt;BeeWare&lt;/a&gt;&lt;br&gt;
讓大家一起來貢獻&lt;br&gt;
這個專案還蠻有趣的&lt;br&gt;
主要就是要讓 Python 能在各平台上跑 (i.e. web, mobile)&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;而且這個專案對新手還蠻友善的，文件中就有提供&lt;a href="https://pybee.org/contributing/how/first-time/what/"&gt;First Time Contributor&lt;/a&gt;&lt;br&gt;
第一次貢獻的人建議貢獻的專案是&lt;a href="https://github.com/pybee/voc"&gt;voc&lt;/a&gt;(Android) 和&lt;a href="https://github.com/pybee/batavia"&gt;batavia&lt;/a&gt;(JavaScript)&lt;br&gt;
而且在裡面的 issue 還會標注 first timer only&lt;br&gt;
&lt;img alt="first-timer-only" src="http://lee-w.github.io/images/posts-image/2017-06-12-PyCon-TW-2017-Sprint/1-new-comer.png"&gt;&lt;/p&gt;
&lt;p&gt;雖然我其實對 Java 跟 JavaScript 都不熟&lt;br&gt;
但比起來還是對 JavaScript 多了一點愛&lt;br&gt;
所以我就來貢獻 batavia 了&lt;/p&gt;
&lt;p&gt;雖然其實我的貢獻大多就是文件上少寫跟一些錯誤&lt;br&gt;
最後還有幫 Python 的 list 轉成 js 加了幾個小 method&lt;br&gt;
原本想解決 args 跟 kwargs 的 issue，但果然還是對 JS 太不熟了ＱＱ&lt;br&gt;
不過覺得整體來說是蠻好玩的&lt;/p&gt;
&lt;p&gt;Russell 都會很友善地回答問題&lt;br&gt;
像我一開始採的雷就是 batavia 還沒支援到 Python3.6，他也很熱心幫我解決&lt;br&gt;
我問了好幾個專案的小問題，Russell 都會說 "That's can be a pull request"&lt;br&gt;
只要送了 PR 就可以得到&lt;a href="https://pybee.org/contributing/challenge-coins/"&gt;Challenge Coins&lt;/a&gt;&lt;br&gt;
拿到這個 challenge coin 其實還蠻開心的 xd&lt;/p&gt;
&lt;p&gt;&lt;img src="http://lee-w.github.io/images/posts-image/2017-06-12-PyCon-TW-2017-Sprint/2-challenge-coin.jpg" alt="Challenge Coin" width="30%"&gt;&lt;/p&gt;
&lt;p&gt;最後再附上在 twitter 上，這次參與 spinrt 的大合照&lt;br&gt;
&lt;img src="http://lee-w.github.io/images/posts-image/2017-06-12-PyCon-TW-2017-Sprint/3-all.jpg" alt="all" width="50%"&gt;&lt;/p&gt;
&lt;p&gt;2017/6/22&lt;br&gt;
折騰了許久，我的&lt;a href="https://github.com/pybee/batavia/pull/569"&gt;PR&lt;/a&gt; 終於被 merge 回 batavia 了 xd&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這次的 PyCon 2017 大致就到這裡結束了&lt;br&gt;
這幾篇文章大概先整理了，當時做的筆記&lt;br&gt;
也許之後有時間，再好好看一次影片跟 Slide，重新整理一下所有的內容&lt;/p&gt;</content><category term="PyCon"></category></entry><entry><title>PyCon TW 2017 - Day 3</title><link href="http://lee-w.github.io/posts/python/2017/06/PyCon-TW-2017-Day3" rel="alternate"></link><published>2017-06-11T09:00:00+08:00</published><updated>2017-06-18T14:08:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-06-11:/posts/python/2017/06/PyCon-TW-2017-Day3</id><summary type="html">&lt;p&gt;這天就是 PyCon 的最後一天了&lt;br&gt;
聽說這是 PyCon 第一次引入 Unconference&lt;br&gt;
今年 Unconf 都還蠻有趣的，讓我一直猶豫到底要一般議程還是 Unconference&lt;br&gt;
不過 Unconference 那邊聲音就有點糊聽不太清楚&lt;br&gt;
不知道是不是 R4 場地的關係&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這天就是 PyCon 的最後一天了&lt;br&gt;
聽說這是 PyCon 第一次引入 Unconference&lt;br&gt;
今年 Unconf 都還蠻有趣的，讓我一直猶豫到底要一般議程還是 Unconference&lt;br&gt;
不過 Unconference 那邊聲音就有點糊聽不太清楚&lt;br&gt;
不知道是不是 R4 場地的關係&lt;/p&gt;
&lt;!--more--&gt;

&lt;hr&gt;
&lt;h2&gt;議程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;[Keynote] From Little Things, Big Things Grow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;比美麗的湯更美麗：pyquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;Write Elegant Concurrent Code in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;enjoy type hinting and its benefits ( 我很想聽這場，不過還是先跑去聽 Unconference 了 xd)&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/masahitojp/the-benefits-of-type-hintss"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHkqR2Dvkb"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coding test-driven Python package with CI and cloud&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;Unconference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;Lightning Talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='1'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;[Keynote] From Little Things, Big things grow.&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Chinese Intro" src="http://lee-w.github.io/images/posts-image/2017-06-11-PyCon-TW-2017-Day3/1-Keynote-Chineses.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Russell 開場就講了一串中文，引來如雷的掌聲 xd&lt;/p&gt;
&lt;p&gt;他在 PyCon 官網的介紹也很有趣 xd&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;他剩下兩洲就能完成 Python 會議基調演講全大洲制霸；
只要企鵝們願意舉辦 PyCon 南極洲，他很樂意提供演說。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同時，他也在這次 PyCon 的 Sprint 帶來專案跟大家分享&lt;/p&gt;
&lt;p&gt;不過 Russell 的英文語速就真的有點快，超過我能好好做筆記的語速了ＱＱ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FryvqnPv1-"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Technical issues are often social&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Backward Compatibility matters&lt;ul&gt;
&lt;li&gt;But it also has a price&lt;ul&gt;
&lt;li&gt;Hard to introduce new features&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Timing matters&lt;/li&gt;
&lt;li&gt;Messaging matters&lt;/li&gt;
&lt;li&gt;Reading the tea leaves (Trend?)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://headrush.typepad.com/creating_passionate_users/2005/10/getting_users_p.html"&gt;The Kick Ass Curve&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tool and ecosystem&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Community matters&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Accessibility&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Toxic shock&lt;/li&gt;
&lt;li&gt;Denial is not a river in Egypt&lt;ul&gt;
&lt;li&gt;Complaining matters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Codes of Conduct in practice&lt;/li&gt;
&lt;li&gt;Outreach is important&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Patches welcome&lt;/h3&gt;
&lt;h3&gt;Develop a funding culture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Make it easy to&lt;ul&gt;
&lt;li&gt;spend money and receive money&lt;/li&gt;
&lt;li&gt;do the right things&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Don't assume resources are free&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Q &amp;amp; A&lt;/h3&gt;
&lt;p&gt;這好像是我第一次在 R0 舉手提問&lt;br&gt;
最後因為時間關係沒被叫到ＱＱ&lt;br&gt;
不過我還是跑到前面去問 Russell，如何在 Backward Compatibility 和 New Fatures 中取捨&lt;br&gt;
Russell 的回答是如果專案已經持續很長的一段時間，並且有一定的使用者&lt;br&gt;
Backward Compatibility 就是一件很重要的事&lt;br&gt;
因為我們並不會希望以前的使用者不能在使用&lt;br&gt;
不過如果是新開始的專案，那就從新的開始就好&lt;br&gt;
像他現在的&lt;a href="https://pybee.org"&gt;Bee Ware&lt;/a&gt; 就是全用 Python3&lt;/p&gt;
&lt;p&gt;下午 Russell 會給一場跟 Bee Ware 有關的 Talk - &lt;a href="https://hackmd.io/s/HkqR2Dvkb#1300-1345talk-stranger-in-a-strange-land"&gt;Stranger in Strange Land&lt;/a&gt;&lt;br&gt;
不過因為標了很高的難度，想說我應該也聽不懂，也先沒去聽了 xd&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='2'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;比美麗的湯更美麗：pyquery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aji.tw/slides/pycon2017/#/"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://github.com/gawel/pyquery"&gt;pyquery&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用 jquery 的方式來做 parsing&lt;/li&gt;
&lt;li&gt;可以做 crawling ( 一個 lib 就做了 requests + bs4 的事啊！ )&lt;/li&gt;
&lt;li&gt;可以拿 selenium 當 opener&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;裝不起來的問題，通常是因為 lxml 沒裝好&lt;/p&gt;
&lt;p&gt;感覺是一個很值得期待的 library&lt;br&gt;
下次要寫爬蟲，再拿它來試試看&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='3'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Write Elegant Concurrent Code in Python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/mosky/elegant-concurrency"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/HkqR2Dvkb#1115-1200-talk-write-elegant-concurrent-code-in-python"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/moskytw/elegant-concurrency-lab"&gt;Sample Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Concurreny: 一段時間內同時跑&lt;br&gt;
Parallel: 一個時間點同時跑&lt;/p&gt;
&lt;h3&gt;Why Concurrency?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Get the machine into full play! 不要讓 CPU 空轉！&lt;/li&gt;
&lt;li&gt;通常不會用 Python 解 CPU Bound 的問題，而是 I/O Bound 的問題&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;聽完這場，感嘆自己真的對 Concurrent 還是不太懂＠＠&lt;br&gt;
雖然我沒記什麼筆記&lt;br&gt;
不過 Slide 很清楚，共筆也記了很多&lt;br&gt;
還附上 Sample Code 了&lt;br&gt;
哪天比較懂 Concurrent 的時候再回來看應該會比較有感覺吧&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='5'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Unconference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FrkMXWDTyb"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;大會遊戲 line chatbot 黑白亂做&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/adrianliaw/quizbot-2017"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;懶得答題？寫個 bot 來幫你刷榜&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aweimeow/PyConTW2017-UnConf-Slide"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aweimeow/PyConTW2017-Quiz-Solver"&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;跟著上面那一個 Unconference 做的大會 chat bot&lt;br&gt;
就有會眾分享如何寫一個 bot 自動去達大會的題目 xdd&lt;br&gt;
覺得很有趣&lt;/p&gt;
&lt;h3&gt;What Steve Jobs Taught Me about Software Development and Life in General&lt;/h3&gt;
&lt;p&gt;這就是 Carosell 待過 Apple 的 VP&lt;br&gt;
大致上覺得跟&lt;a href="http://lee-w.github.io/posts/book/2016/03/essentialism/#essentialism"&gt;少，但是更好&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Saying, "No!" enables focus, flow, success.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to decide when to say "yes"?&lt;ul&gt;
&lt;li&gt;The one that changes your life would be a good one. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='6'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Lightning Talk&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHJu2JvTyW"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lightning Talk 大概是 PyCon 最歡樂的時候了&lt;br&gt;
因為只有 5 分鐘，不然就要被拔線了&lt;br&gt;
大家都得講得很快&lt;/p&gt;
&lt;p&gt;今年的 PyCon 金句大概就是 Hisahiro Ohmura 推坑 PyCon JP 的&lt;/p&gt;
&lt;p&gt;&lt;img alt="Buy First, Consider Second" src="http://lee-w.github.io/images/posts-image/2017-06-11-PyCon-TW-2017-Day3/2-buy-first.jpg"&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;聽不懂日文？
沒關係
我也聽不太懂中文
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外，就像 jserv 的 slide 上說的&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;每年的 pycon 好像都有其他語言的東西混進來，像是 15 年有人根本是在講 d3.js
只是用 python 幫忙準備資料 ;
今年是有人全部都在講 Rust，只是我們用 Rust 寫了個 python module XDDD
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lightning Talk 馬上就出現一個 julia 了 xddd&lt;br&gt;
記得兩年前的 PyCon 超多 Julia 的&lt;/p&gt;</content><category term="PyCon"></category></entry><entry><title>PyCon TW 2017 - Day 2</title><link href="http://lee-w.github.io/posts/python/2017/06/PyCon-TW-2017-Day2" rel="alternate"></link><published>2017-06-10T09:00:00+08:00</published><updated>2017-06-18T12:37:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-06-10:/posts/python/2017/06/PyCon-TW-2017-Day2</id><summary type="html">&lt;p&gt;第二天有一整個時段的 Job Fair，可以出去晃晃到各個攤販聊天&lt;br&gt;
最有印象的大概就是 Carousel，跟他們聊得還蠻開心的&lt;br&gt;
還多玩了幾次他們的大家來找碴 XD&lt;br&gt;
在 conf 看到他們這麼多次，第一次知道他們來自新加坡&lt;br&gt;
隔天還會有一位待過 Apple 的 VP 會來 Unconf 分享&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第二天有一整個時段的 Job Fair，可以出去晃晃到各個攤販聊天&lt;br&gt;
最有印象的大概就是 Carousel，跟他們聊得還蠻開心的&lt;br&gt;
還多玩了幾次他們的大家來找碴 XD&lt;br&gt;
在 conf 看到他們這麼多次，第一次知道他們來自新加坡&lt;br&gt;
隔天還會有一位待過 Apple 的 VP 會來 Unconf 分享&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;今年還有音樂會呢，覺得還蠻有趣的&lt;br&gt;
雖然聽完有點晚才去吃晚餐，剩的東西都不多了ＱＱ&lt;/p&gt;
&lt;p&gt;&lt;img src="http://lee-w.github.io/images/posts-image/2017-06-10-PyCon-TW-2017-Day2/1-piano.jpg" alt="Piano" width="50%"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://lee-w.github.io/images/posts-image/2017-06-10-PyCon-TW-2017-Day2/2-symphony.jpg" alt="Symphony" width="50%"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;議程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;[Keynote] Building for Failure: Leraning Lessons from Aviation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[自py系列2] 投資策略驗證系統&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1i5PwAHxXZQ2fewn194_gRU3kMG5s-04s1Pil0yJREHQ/edit#slide=id.g1ce6af9da4_1_8"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FBkMVJwTy-"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;對話機器人的腦子與靈魂 Bot's Brain and Soul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;鄉民教我做的聊天機器人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Why do projects fail?&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/ssuser2cbb78/pycon-tw-2017-why-do-projects-fail-lets-talk-about-the-story-of-sinonpy"&gt;Slide&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;利用 Python 與人工智慧快速打造人性化聊天機器人 (IBM)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;Chatbot @ E.Sun Bank – 玉山小i隨身金融顧問的兩三事 (玉山)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='1'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;[Keynote] Building for Failure: Learning Lessons from Aviation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/andrewgodwin/building-for-failure-learning-lessons-from-aviation"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FBk3_mwakZ"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Warnings&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Soft Failure&lt;/th&gt;
&lt;th&gt;Hard Failure&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Obscure errors and try to carry on&lt;/td&gt;
&lt;td&gt;Quit at the first error and log it&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Noisy Warnings&lt;ul&gt;
&lt;li&gt;Engineers ignore logs/notifications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Precise Warnings&lt;ul&gt;
&lt;li&gt;Alert on actionable things, then fix them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Raise clear, verbose exception&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://api.com/user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;RequestError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;APIFetchError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Could not get user list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;100% Coverage Fallacy&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Too many tests that are fragile so you ignore them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Checklist&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The step between manual and automation&lt;/li&gt;
&lt;li&gt;Cheap and very effective&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Find the limits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The Load Testing&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Netflix/chaosmonkey"&gt;Chaos Monkey&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;測試 server 復原能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Restore from backups&lt;/li&gt;
&lt;li&gt;The "Red Team"&lt;ul&gt;
&lt;li&gt;攻擊系統的工程師們&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Trade off between Redundancy &amp;amp; Acceptable Loss&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Redundancy&lt;/th&gt;
&lt;th&gt;Acceptable Loss&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;What do you fall back to?&lt;/td&gt;
&lt;td&gt;Quantify the loss, and recovery&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Team&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No Single Cause → No Blame Culture&lt;ul&gt;
&lt;li&gt;Not someone's mistake&lt;/li&gt;
&lt;li&gt;Systematic Problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clear command chains&lt;ul&gt;
&lt;li&gt;Who makes decisions?&lt;/li&gt;
&lt;li&gt;Who does the fixing?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Leadership can blind&lt;ul&gt;
&lt;li&gt;Debate for what is right&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Crew Resource Management&lt;/li&gt;
&lt;li&gt;Increase your "bus factor"&lt;ul&gt;
&lt;li&gt;People get ill → 一個專案至少要 2 個以上的人懂 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Good engineering is not just code&lt;ul&gt;
&lt;li&gt;Communication matters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Slower can be faster&lt;ul&gt;
&lt;li&gt;Testing, Writing Documents make a project slower in short term, but faster in long term&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Speakers Advice&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Checklists&lt;/li&gt;
&lt;li&gt;Restore your backups&lt;/li&gt;
&lt;li&gt;Work out roughly what happens for every part of a system failing, and if you care&lt;/li&gt;
&lt;li&gt;Reward people whose code quietly works, not those who firefight and take the glory&lt;/li&gt;
&lt;li&gt;Checklists&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='3'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;對話機器人的腦子與靈魂 Bot's Brain and Soul&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/Hyt_yvak-#1130-1215-talk- 對話機器人的腦子與靈魂-bot’s-brain-and-soul"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這場人太多了，連坐下來的位置都沒有ＱＱ&lt;br&gt;
不過共筆寫得很清楚了&lt;br&gt;
我這裡記錄的是會後跟講者討論的一些問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Q: Language Generation 要怎麼做 Evaluation，怎樣才算是符合文法？怎樣算是合理的回答？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判定很主觀&lt;/li&gt;
&lt;li&gt;很多研究會導入 Human Evalutaion&lt;/li&gt;
&lt;li&gt;目前還是一個 Open Question&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: 目前關於情緒判斷，是否已經到了 Production 了？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尚未到 Production&lt;/li&gt;
&lt;li&gt;這樣的問題很難做，其中一個原因在於資料很難收集&lt;/li&gt;
&lt;li&gt;另一個原因是，就算沒有辦法判斷情緒，通常也不會造成太大的問題。不像意圖如果判斷錯誤，就會提供錯誤的服務&lt;/li&gt;
&lt;li&gt;香港科技大學目前有一個可以判斷人格的 Bot( 我找不太到＠＠ )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='4'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;鄉民教我做的聊天機器人&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/RyanChao3/pycon2017-chatbot"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/Hyt_yvak-#1325-1355-talk-鄉民教我做的聊天機器人"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://line.me/R/ti/p/%40nlj2850e"&gt;Line Bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Chinese Conversation Data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Movie subtitle&lt;ul&gt;
&lt;li&gt;主題發散，不太容易收斂&lt;ul&gt;
&lt;li&gt;先過去出資料用語&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Seq2seq&lt;ul&gt;
&lt;li&gt;只能回應簡單的問題&lt;/li&gt;
&lt;li&gt;大部分回答都是「我不知道」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PTT&lt;ul&gt;
&lt;li&gt;八卦版標題和推文有應對關係 → 問答&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Backend &amp;amp; Platform&lt;/h3&gt;
&lt;p&gt;~48 萬篇文章&lt;/p&gt;
&lt;h3&gt;Information Retrieval&lt;/h3&gt;
&lt;p&gt;找出文章標題符合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jaccard Similarity&lt;ul&gt;
&lt;li&gt;不能處理介系詞 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modified BM25&lt;ul&gt;
&lt;li&gt;針對重要的字給予較大的權重&lt;/li&gt;
&lt;li&gt;TF 對短句比較不好用 → 用詞性作為權重&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Tried Improvements&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tokenizer Improvement&lt;ul&gt;
&lt;li&gt;Emoji icon pre-processing&lt;/li&gt;
&lt;li&gt;Improve tokenizer accuracy&lt;/li&gt;
&lt;li&gt;把 jieba 換成用繁體中文字典，並加入 PTT 會用的常見詞彙&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keyword Extraction &amp;amp; Association&lt;ul&gt;
&lt;li&gt;Word2Vec → Query associative term if the original one doesn't exist&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Evaluate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Represent for document with vector&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Doc2Vec (gensim)&lt;/li&gt;
&lt;li&gt;RNN-encoder (arXiv: 1506.08909v3)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NDCG&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;量化標注&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讓那篇文章的回應當作 ground truth&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;來評斷機器人產生的結果好不好    &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='6'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;利用 Python 與人工智慧快速打造人性化聊天機器人 (IBM)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.ng.bluemix.net/tommywu/pyconbot2017/blob/master/run.py"&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;有溫度的聊天機器人&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;輔助性答案 ( 互動性 )&lt;ul&gt;
&lt;li&gt;引導性回饋 - 開放話題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不定時提醒 - 貼近使用者&lt;/li&gt;
&lt;li&gt;隨機答案 - 提高趣味   &lt;/li&gt;
&lt;li&gt;學習與進化&lt;/li&gt;
&lt;li&gt;Multi-channel ( 多渠道互動 )&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Watson&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NP, ML 的語意理解&lt;/li&gt;
&lt;li&gt;Zero Downtime&lt;/li&gt;
&lt;li&gt;擴充&lt;/li&gt;
&lt;li&gt;可訓練&lt;/li&gt;
&lt;li&gt;搜尋引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Watson AI Flow&lt;/h3&gt;
&lt;p&gt;Intent, Parameter, Entity Type&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='7'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Chatbot @ E.Sun Bank – 玉山小i隨身金融顧問的兩三事 (玉山)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B8hlay_yY5e7QTE0U3JDUXloeXM/view"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Q &amp;amp; A&lt;/h3&gt;
&lt;p&gt;還有沒有其他的 &lt;del&gt;客訴&lt;/del&gt; 問題呢&lt;/p&gt;</content><category term="PyCon"></category></entry><entry><title>PyCon TW 2017 - Day 1</title><link href="http://lee-w.github.io/posts/python/2017/06/PyCon-TW-2017-Day1" rel="alternate"></link><published>2017-06-09T09:00:00+08:00</published><updated>2017-06-18T11:41:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-06-09:/posts/python/2017/06/PyCon-TW-2017-Day1</id><summary type="html">&lt;p&gt;今年 PyCon 終於比起上次聽得懂多了！&lt;br&gt;
看來這兩年來，還是有點進步的 XD&lt;/p&gt;
&lt;p&gt;先放上今年的&lt;a href="https://hackfoldr.org/pycontw2017/"&gt;共筆&lt;/a&gt;&lt;br&gt;
這幾篇記錄我參加議程的筆記&lt;br&gt;
有些投影片跟共筆就很清楚的，就直接放連結了&lt;/p&gt;
</summary><content type="html">&lt;p&gt;今年 PyCon 終於比起上次聽得懂多了！&lt;br&gt;
看來這兩年來，還是有點進步的 XD&lt;/p&gt;
&lt;p&gt;先放上今年的&lt;a href="https://hackfoldr.org/pycontw2017/"&gt;共筆&lt;/a&gt;&lt;br&gt;
這幾篇記錄我參加議程的筆記&lt;br&gt;
有些投影片跟共筆就很清楚的，就直接放連結了&lt;/p&gt;
&lt;!--more--&gt;

&lt;hr&gt;
&lt;h2&gt;議程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;[Keynote] Choices for Smarter AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;Python 開源軟體考古 - 以Viper為例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;整合 Slack 與 Docker 搭建 Jupyter 線上程式面試系統&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;[Keynote] The State of Python for &lt;s&gt;Education&lt;/s&gt; Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Building Microservices in Python 個案分享&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/jonascheng3/building-microservices-in-python-pycon2017"&gt;Slide&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/Sk5LNzQke#1455-1540-talk-building-microservices-in-python-個案分享"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;Understanding Serverless Architecture&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;同場加映：&lt;a href="https://drive.google.com/file/d/0Bz8Kfu_94VuJcVo1a1drQjhReU0/view"&gt;Don't Reinvent Sandwich&lt;/a&gt; (本議程沒供餐 XD)  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;Tensorflow &amp;amp; Python: Fault Detection System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='1'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;[Keynote] Choices for Smarter AI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHywa7M7Jx"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Better AI&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Traditional: 更像人類&lt;/li&gt;
&lt;li&gt;New: 更好用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Choice[0]: What Language for AI?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;現場會眾一致通過是 Python (Bias Sampling XD)&lt;/li&gt;
&lt;li&gt;Useful libs&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dmlc/xgboost"&gt;xgboost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ntucllab/libact"&gt;libact&lt;/a&gt;: Active Learning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Choice[1]: What Application Should AI Help?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;AI Starts From Problem Solving&lt;ul&gt;
&lt;li&gt;Motivation&lt;ul&gt;
&lt;li&gt;Publishable (academia), Profitable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feasibility&lt;ul&gt;
&lt;li&gt;Modeling, Timeline, Budge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Big Problems from Big Data&lt;ul&gt;
&lt;li&gt;Velocity: Evolving data, Evolving problems&lt;/li&gt;
&lt;li&gt;Volume: Computational Bottleneck&lt;/li&gt;
&lt;li&gt;Veracity: Modeling with non-textbook data → Noise, Bias&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Choice[2]; What Route for AI&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Human-er&lt;/th&gt;
&lt;th&gt;Machine-er&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Subjective&lt;/td&gt;
&lt;td&gt;Objective&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Domain Knowledge&lt;/td&gt;
&lt;td&gt;Computing Power&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fast Basic Solution&lt;/td&gt;
&lt;td&gt;Continuous Improvement&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Tip: As much human as possible before going to machine&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Choice[3]: How to Measure AI Goal?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Tip: Start with reasonable, measurable and prioritized goals for AI&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Choice[4]: What Data to (or not to) Use?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Choice factors for data&lt;ul&gt;
&lt;li&gt;Utility: Relationship with goal&lt;/li&gt;
&lt;li&gt;Necessity: Uniqueness to goal&lt;/li&gt;
&lt;li&gt;Quality: Noise, Freshness&lt;/li&gt;
&lt;li&gt;Cost&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tip: Start with "minimum viable data"&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Choice[5]: What Model to Start?&lt;/h3&gt;
&lt;p&gt;Linear (Simpler) Model First&lt;/p&gt;
&lt;h3&gt;Choice[6]: What Improvement Steps to Take?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lose Reason&lt;ul&gt;
&lt;li&gt;Overfitting&lt;/li&gt;
&lt;li&gt;Misfitting&lt;/li&gt;
&lt;li&gt;Over-reusing&lt;ul&gt;
&lt;li&gt;Keep data fresh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Choice[-1]: How to verify and Deploy?&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code Deployment Workflow&lt;/th&gt;
&lt;th&gt;AI Deployment Workflow&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Development → Staging → Production&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Offline → Online → Production&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Human Trust matters&lt;ul&gt;
&lt;li&gt;Need a baseline to be compared&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Misc[0]: No Choice is a Choice&lt;/h3&gt;
&lt;h3&gt;Misc[1]: Learning from Mistake&lt;/h3&gt;
&lt;h3&gt;Misc[2]: ???&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='2'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Python 開源軟體考古 - 以 &lt;a href="https://github.com/viper-framework/viper"&gt;Viper&lt;/a&gt; 為例&lt;/h2&gt;
&lt;p&gt;這場很實用，slide 也很清楚&lt;br&gt;
蠻推薦影片出來可以看一下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1HwBrETgmEz6-igEVaPAtQPWyuBljyFyvXtKzHLSVaMk/edit#slide=id.p"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/CYYw7ARgjFBsCsBaMAGYAWR6DMIBMiAnABx7aLzGH4QCmUwxAZiEA===?view#1050-1120-talk-python-開源軟體考古-以-viper-為例"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/18z/viper-research"&gt;viper-research&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;從開源專案學習寫 code&lt;/p&gt;
&lt;h3&gt;讀 code 技巧&lt;/h3&gt;
&lt;h4&gt;降低專案複雜度&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;從早期版本追&lt;ul&gt;
&lt;li&gt;如何挑版本？ ( 搭配 tig 服用 )&lt;ul&gt;
&lt;li&gt;重大版本號&lt;/li&gt;
&lt;li&gt;簡單、可運作之版本 (e.g. viper 的 commit hash: &lt;a href="https://github.com/viper-framework/viper/tree/46a2a"&gt;46a2a&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;感覺太複雜？&lt;ul&gt;
&lt;li&gt;砍！&lt;/li&gt;
&lt;li&gt;鎖定特定功能，移除其他雜質&lt;/li&gt;
&lt;li&gt;測試，能動就可以&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;專案程式邏輯架構&lt;/h4&gt;
&lt;p&gt;模組相依性 → 一直 trace 到沒有 import 專案自己寫的 code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/ronaldoussoren/modulegraph"&gt;modulegraph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tarind.com/depgraph.html"&gt;pydegraph (py2degraph)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://furius.ca/snakefood/"&gt;snackfood&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;數據分析&lt;ul&gt;
&lt;li&gt;e.g. 被用最多的反而不是核心 → 這些程式碼好用、易用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;走訪專案&lt;ul&gt;
&lt;li&gt;建立專案整體架構邏輯&lt;/li&gt;
&lt;li&gt;深度走訪&lt;ul&gt;
&lt;li&gt;由下往上&lt;/li&gt;
&lt;li&gt;仔細閱讀單一程式 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;廣度走訪&lt;ul&gt;
&lt;li&gt;由上往下 &lt;/li&gt;
&lt;li&gt;解釋特定組合的程式的意義&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;系統化讀 code&lt;/li&gt;
&lt;li&gt;從 Commit 學習&lt;ul&gt;
&lt;li&gt;架構變化&lt;/li&gt;
&lt;li&gt;Commit Message 規則&lt;/li&gt;
&lt;li&gt;Branching Model&lt;/li&gt;
&lt;li&gt;Issue Handling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='3'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;整合 Slack 與 Docker 搭建 Jupyter 線上程式面試系統&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/KevinShyu/slack-docker-jupyter"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kkshyu/pnp-interview"&gt;pnp-interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/CYYw7ARgjFBsCsBaMAGYAWR6DMIBMiAnABx7aLzGH4QCmUwxAZiEA===?view#1145-1230-talk-整合-slack-與-docker-搭建-jupyter-線上程式面試系統"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這場最重要的大概就是 slide &lt;del&gt;第 12 頁&lt;/del&gt; 第 11 頁的架構圖&lt;/p&gt;
&lt;h3&gt;Tools Used&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Flask&lt;ul&gt;
&lt;li&gt;Python 中最簡單使用的 web framework&lt;/li&gt;
&lt;li&gt;做小型 web 應用非常適合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Docker&lt;ul&gt;
&lt;li&gt;容器化&lt;/li&gt;
&lt;li&gt;一鍵部署 &lt;/li&gt;
&lt;li&gt;限制容器耗費的 CPU, GPU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Slack&lt;ul&gt;
&lt;li&gt;Integration 很好 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bugs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pull Image First&lt;ul&gt;
&lt;li&gt;So it can be fast&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Try except for any case&lt;ul&gt;
&lt;li&gt;dockerpy 的雷 xd   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;File Permission&lt;ul&gt;
&lt;li&gt;要採 docker 坑，這很重要 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='4'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;[Keynote] The State of Python for &lt;s&gt;Education&lt;/s&gt; Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/willingc/the-state-of-python-for-education"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHk-NVGXke"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這場 Talk 主要講學習、推廣和社群&lt;/p&gt;
&lt;p&gt;Carol 有提到幾個學習 Python 很棒的資源&lt;br&gt;
其中我覺得最有用的大概就是&lt;a href="http://pyvideo.org"&gt;pyvideo.org&lt;/a&gt; 了&lt;br&gt;
之前回去聽工資管系系友演講，趨勢的學長就有提到看 Talk 是很快的學習方式&lt;/p&gt;
&lt;p&gt;另外，Carol 強力推薦今年 PyCon US，Instagram 給的 Talk&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;Lisa Guo, Hui Ding Keynote PyCon 2017&lt;/a&gt;&lt;br&gt;
之後，應該也會找個時間來看一下&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='6'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href="#6"&gt;Understanding Serverless Architecture&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/dawny33/understanding-serverless-architectures"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/Sk5LNzQke#1610-1655-talk-understanding-serverless-architecture"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Serverless&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Function as a service (FaaS)&lt;ul&gt;
&lt;li&gt;e.g. AWS lambda&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advantage&lt;ul&gt;
&lt;li&gt;Don't need to maintain servers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disadvantages&lt;ul&gt;
&lt;li&gt;Functions are allowed to run for only a limited amount of time&lt;/li&gt;
&lt;li&gt;Heavy workloads cannot be run&lt;/li&gt;
&lt;li&gt;No control over containers&lt;/li&gt;
&lt;li&gt;Hard to monitor&lt;/li&gt;
&lt;li&gt;Hard to scale up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It's awesome but not the best choice for everyone.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='7'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Tensorflow &amp;amp; Python: Fault Detection System&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/EricAhn/tensorflow-and-python-fault-detection-system-pycon-taiwan-2017"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/BJqH4M7kl#1720-1750-talk-tensorflow-amp-python-fault-detection-system"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fault: An abnormal condition or defect at the component&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logs&lt;ul&gt;
&lt;li&gt;Usage of CPU&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;Disk I/O&lt;/li&gt;
&lt;li&gt;Network Bandwidth&lt;/li&gt;
&lt;li&gt;System Log&lt;/li&gt;
&lt;li&gt;Application Log&lt;/li&gt;
&lt;li&gt;and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Log is also natural language.&lt;br&gt;
The sequence of words and expression is important sequential data.&lt;/p&gt;
&lt;p&gt;這場我真的就有點聽不太懂了＠＠&lt;/p&gt;</content><category term="PyCon"></category></entry><entry><title>Tool for Checking Python Coding Style</title><link href="http://lee-w.github.io/posts/python/2017/03/tools-for-checking-python-coding-style" rel="alternate"></link><published>2017-03-15T19:13:00+08:00</published><updated>2017-03-15T19:13:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-03-15:/posts/python/2017/03/tools-for-checking-python-coding-style</id><summary type="html">&lt;p&gt;&lt;a href="https://www.pylint.org"&gt;Pylint&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pylint
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Usage&lt;/h2&gt;
&lt;h3&gt;Generate a code quality report&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pylint your_code.py
&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;p&gt;&lt;a href="https://www.pylint.org"&gt;Pylint&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pylint
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Usage&lt;/h2&gt;
&lt;h3&gt;Generate a code quality report&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pylint your_code.py
&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;h3&gt;Customize your pylint settings&lt;/h3&gt;
&lt;p&gt;Some rules in default settings might be too trivial.&lt;br&gt;
(e.g. PEP8 E501: line too long error (no more than 79 characters) )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate &lt;code&gt;pylintrc&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pylint --generate-rcfile &amp;gt; ~/.pylintrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This generate a common used &lt;code&gt;pylintrc&lt;/code&gt;.&lt;br&gt;
For further customization, you'll have to change this file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate a code quality report using you &lt;code&gt;pylintrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pylint --rcfile ~/.pylintrc you_code.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Integrate with Vim&lt;/h2&gt;
&lt;h3&gt;1. &lt;a href="https://github.com/w0rp/ale"&gt;ale&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="ale-screenshot" src="https://i.imgur.com/vwpqY4G.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ale&lt;/code&gt; also supports other linters in other languages.&lt;br&gt;
It uses the new async feature in vim 8.&lt;br&gt;
Thus, it checks your code when you are typing. (You can disable it.)&lt;/p&gt;
&lt;p&gt;The following settings are for pylint in &lt;code&gt;~/.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# The default value is pytlinh&lt;/span&gt;
&lt;span class="c1"&gt;# If your pylint executable is not pylint, it should be set &lt;/span&gt;
&lt;span class="nb"&gt;let&lt;/span&gt; g:ale_python_pylint_executable &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pylint&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# options of your pylint command&lt;/span&gt;
&lt;span class="nb"&gt;let&lt;/span&gt; g:ale_python_pylint_options &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--rcfile ~/.pylintrc&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the available linters are enabled by default.&lt;br&gt;
For Python, &lt;code&gt;flake8&lt;/code&gt;, &lt;code&gt;mypy&lt;/code&gt; are also used.&lt;br&gt;
Thus, you might find that even if you ignore some rules in &lt;code&gt;pylintc&lt;/code&gt;, you are still notified.&lt;/p&gt;
&lt;p&gt;In this case, add the following setting in &lt;code&gt;~/.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;let&lt;/span&gt; g:ale_linters &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="se"&gt;\ &lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pylint&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="se"&gt;\}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This enables &lt;code&gt;pylint&lt;/code&gt; as the only linter for Python&lt;/p&gt;
&lt;p&gt;p.s. &lt;code&gt;mypy&lt;/code&gt;, &lt;code&gt;flake8&lt;/code&gt; are also great linters. I'm just not familiar with it&lt;/p&gt;
&lt;h3&gt;2. &lt;a href="https://github.com/python-mode/python-mode"&gt;python-mode&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It's a powerful package supports not only linters but also plenty of useful features a python programer would need.&lt;/p&gt;
&lt;p&gt;&lt;img alt="python-mode-screenshot" src="https://i.imgur.com/5FffIqN.png"&gt;&lt;br&gt;
Unlike &lt;code&gt;ale&lt;/code&gt;, &lt;code&gt;python-mode&lt;/code&gt; check your code only when you save or open your python file (You can set this in your &lt;code&gt;~/.vimrc&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Add these lines in &lt;code&gt;~/.vimrc&lt;/code&gt;  to enable &lt;code&gt;pylint&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let g:pymode_lint_checkers = [&amp;#39;pyflakes&amp;#39;, &amp;#39;pylint&amp;#39;, &amp;#39;pep8&amp;#39;]
let g:pymode_lint_ignore = &amp;quot;C0111,W0621,E501,F0002&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that space cannot appear in &lt;code&gt;pymode_lint_ignore&lt;/code&gt;&lt;/p&gt;</content><category term="Code Quality"></category><category term="Vim"></category></entry><entry><title>Scrollable RISE</title><link href="http://lee-w.github.io/posts/python/2016/08/scrollable-rise" rel="alternate"></link><published>2016-08-15T03:22:00+08:00</published><updated>2016-08-15T03:22:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-08-15:/posts/python/2016/08/scrollable-rise</id><summary type="html">&lt;p&gt;RISE 是一套結合&lt;a href="http://jupyter.org"&gt;jupyter-notebook&lt;/a&gt; 和&lt;a href="http://lab.hakim.se/reveal-js/#/"&gt;reveal.js&lt;/a&gt; 的專案&lt;br&gt;
讓我們能在 jupyter notebook 直接開啟如同 reveal.js 的 slide&lt;/p&gt;
</summary><content type="html">&lt;p&gt;RISE 是一套結合&lt;a href="http://jupyter.org"&gt;jupyter-notebook&lt;/a&gt; 和&lt;a href="http://lab.hakim.se/reveal-js/#/"&gt;reveal.js&lt;/a&gt; 的專案&lt;br&gt;
讓我們能在 jupyter notebook 直接開啟如同 reveal.js 的 slide&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;不過如過 notebook cell 中的內容太長&lt;br&gt;
在播放的時候就會導致內容被裁剪&lt;br&gt;
而 RISE 預設是無法用滑鼠滾動的&lt;br&gt;
所以這裡記錄該如何讓 RISE 可以滾動&lt;/p&gt;
&lt;p&gt;進入 jupyter notebook 的任一個 notebook 後&lt;br&gt;
在上方工具列點選 &lt;code&gt;Edit&lt;/code&gt; -&amp;gt; &lt;code&gt;Edit Notebook Metadata&lt;/code&gt;&lt;br&gt;
接著在裡面加入 livereveal 的設定&lt;br&gt;
如下 （只需加入 livereveal 的部分）&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;kernelspec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;livereveal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;scroll&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;不過開發者其實有說，開啟滾動會造成不少問題&lt;br&gt;
所以預設上才會設定為不能滾動&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;damianavila commented on Jul 12&lt;/strong&gt;&lt;br&gt;
After several and long discussions with a lot of people, we have arrived to the conclusion that scrolling on reveal.js based slideshows brings more problems than benefits, so I will not add the scrolling as a default option BUT we should clearly document how to get scrolling slides with the config option available. I will mark this as a docs issue and prioritize properly.&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/damianavila/RISE/issues/185"&gt;scrolling vertically #185&lt;/a&gt;&lt;/p&gt;</content><category term="Jupyter"></category><category term="reveal.js"></category></entry><entry><title>在 jupyter 中同時使用 Python2 Python3</title><link href="http://lee-w.github.io/posts/python/2015/11/used-in-the-jupyter-python2-python3" rel="alternate"></link><published>2015-11-02T15:12:00+08:00</published><updated>2015-11-02T15:12:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-11-02:/posts/python/2015/11/used-in-the-jupyter-python2-python3</id><summary type="html">&lt;p&gt;先安裝 Python2 和 Python3 的 ipython notebook&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip2 install ipython notebook
pip3 install ipython notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分別用各自的 ipython 執行下面的指令&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipython2 kernelspec install-self
ipython3 kernelspec install-self
&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;p&gt;先安裝 Python2 和 Python3 的 ipython notebook&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip2 install ipython notebook
pip3 install ipython notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分別用各自的 ipython 執行下面的指令&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipython2 kernelspec install-self
ipython3 kernelspec install-self
&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;p&gt;就能在 ipython notebook 裡面同時使用兩種版本的 Python 了&lt;br&gt;
&lt;img alt="1_jupyter" src="http://i.imgur.com/IxopQfG.png"&gt;&lt;br&gt;
Python2 上面是另一個也被 jupyter notebook 支援的語言 julia&lt;br&gt;
最近才剛開始碰，有機會再來分享 julia 的心得&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/30492623/using-both-python-2-x-and-python-3-x-in-ipython-notebook"&gt;Using both Python 2.x and Python 3.x in IPython Notebook&lt;/a&gt;&lt;/p&gt;</content><category term="Jupyter"></category></entry><entry><title>解決 django-admin 在 mac 找不到 django.core</title><link href="http://lee-w.github.io/posts/python/2015/05/solve-django-admin-cant-find-the-djangocore-on-mac" rel="alternate"></link><published>2015-05-10T23:42:00+08:00</published><updated>2015-05-10T23:42:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-05-10:/posts/python/2015/05/solve-django-admin-cant-find-the-djangocore-on-mac</id><summary type="html">&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;在 mac 上，用 pip3 安裝完 django 1.8.1 後&lt;br&gt;
執行 &lt;code&gt;django-admin&lt;/code&gt; 出現了以下的錯誤訊息&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/bin/django-admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;management&lt;/span&gt;
&lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;在 mac 上，用 pip3 安裝完 django 1.8.1 後&lt;br&gt;
執行 &lt;code&gt;django-admin&lt;/code&gt; 出現了以下的錯誤訊息&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/bin/django-admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;management&lt;/span&gt;
&lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;h2&gt;解決&lt;/h2&gt;
&lt;p&gt;找到 &lt;code&gt;/usr/local/lib/python3.4/site-packages/django/bin/django-admin.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;把第一行的 &lt;code&gt;#!/usr/bin/env python&lt;/code&gt; 改成 Python 的路徑&lt;br&gt;
以我為例，我改成 &lt;code&gt;#!/usr/local/bin/python3.4&lt;/code&gt;&lt;br&gt;
之後就可以執行了&lt;/p&gt;</content><category term="django"></category><category term="mac"></category></entry></feed>