<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Laziness makes Great Engineer</title><link href="https://lee-w.github.io/" rel="alternate"></link><link href="https://lee-w.github.io/feeds/all.atom.xml" rel="self"></link><id>https://lee-w.github.io/</id><updated>2020-11-20T23:15:00+08:00</updated><entry><title>[Book] Deep Work深度工作力</title><link href="https://lee-w.github.io/posts/book/2020/11/deep-work" rel="alternate"></link><published>2020-11-20T23:15:00+08:00</published><updated>2020-11-20T23:15:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-11-20:/posts/book/2020/11/deep-work</id><summary type="html">&lt;p&gt;最近覺得自己的工作效率開始下降了&lt;br/&gt;
剛好在 MOPCON 聽到大大推薦這本書，就下訂了&lt;br/&gt;
看看能不能提升自己的生產力&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近覺得自己的工作效率開始下降了&lt;br/&gt;
剛好在 MOPCON 聽到大大推薦這本書，就下訂了&lt;br/&gt;
看看能不能提升自己的生產力&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;這是我近期最快看完的書，但我對它的評價蠻微妙的&lt;br/&gt;
我認同它所提到的「深度工作」這個概念&lt;br/&gt;
認同部分它所提出的做法&lt;br/&gt;
但關於為什麼這些做法有用跟深度工作有用的論點卻沒有很說服我&lt;br/&gt;
不過如果想參考它提供的做法的話，還是有幫助的&lt;/p&gt;
&lt;p&gt;看完這本書讓我想起以前看過的&lt;a href="https://lee-w.github.io/posts/book/2016/06/willpower"&gt;增強你的意志力&lt;/a&gt;&lt;br/&gt;
諸如頻繁收訊息、電子郵件、滑臉書、玩手遊可能都是會讓自己養成想分心的習慣&lt;br/&gt;
反之，長時間做高專注的事情（不一定要是工作），對於深度工作能力都能有所提升&lt;/p&gt;
&lt;p&gt;最近在工作時有更積極地開啟 Do not disturb&lt;br/&gt;
雖然有時候還是會想分心，但效率有比之前又提升了不少&lt;/p&gt;

&lt;h2 id="1-"&gt;概念 1 -　深度工作力，創造價值的關鍵能力&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;轉換任務時造成的注意力殘留可能導致下一個任務表現不佳&lt;ul&gt;
&lt;li&gt;e.g., 每隔十分鐘瀏覽收件匣，看起來沒什麼害處&lt;ul&gt;
&lt;li&gt;留下未完結的次要任務造成的注意力殘留，無法專注&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-"&gt;概念 2 - 當「深度」越稀有，就越值得你投入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分心的原因&lt;ol&gt;
&lt;li&gt;度量黑洞： 破壞深度工作造成的影響不易測量&lt;/li&gt;
&lt;li&gt;最小阻力原則： 缺乏對產出的即時反饋，因此傾向採取當時最容易的行動&lt;/li&gt;
&lt;li&gt;以忙碌代表生產力： 沒有明確指標證明工作有生產力，最簡單的方式就是以明顯可見的方式做很多事，但它們不見得有價值&lt;/li&gt;
&lt;li&gt;網際網路狂熱教派&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3-"&gt;概念 3 - 深度工作力，美好生活的必要條件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;這章很沒有說服我... 就不做筆記了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="1-_1"&gt;原則 1 - 培養深度工作力&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;策略1： 確立工作哲學&lt;ol&gt;
&lt;li&gt;雙模式的深度工作時間安排&lt;ul&gt;
&lt;li&gt;深度時段： 尋求高度且不被打斷的專注&lt;/li&gt;
&lt;li&gt;淺薄時段： 處理次要事務&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;節奏式的深度工作時間安排&lt;ul&gt;
&lt;li&gt;把進行深度工作變成簡單而規律的習慣（e.g., 固定在某個時段全力工作）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;策略2： 建立深度工作的儀式&lt;ul&gt;
&lt;li&gt;在何處工作，工作多久？&lt;ul&gt;
&lt;li&gt;指定一個進行深度工作的地點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一旦開始工作，怎麼做？&lt;ul&gt;
&lt;li&gt;規範和程序，讓努力有架構&lt;ul&gt;
&lt;li&gt;e.g., 禁止使用網際網路，或設定每二十分鐘寫作的字數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果缺少架構，容易把意志力消耗在思考這個時段該做什麼，並且評估自己是否夠努力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何支持深度工作？&lt;ul&gt;
&lt;li&gt;確保大腦獲得必要的支持，以保持高水準的運作&lt;ul&gt;
&lt;li&gt;e.g., 喝杯好咖啡、合適的食物以維持精力、納入散步等緩和的運動以保持頭腦清晰&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;策略3： 大動作投入深度工作&lt;ul&gt;
&lt;li&gt;由激進的改變平常的環境，加上大手筆投資金錢或精力，提高任務的重要感&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;策略5： 像經營企業般執行&lt;ol&gt;
&lt;li&gt;專注在最重要的事情&lt;/li&gt;
&lt;li&gt;根據領先指標行動&lt;ul&gt;
&lt;li&gt;以如何讓未來更好，而不是如何改善過去失誤的角度來思考&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;設置醒目的計分板&lt;/li&gt;
&lt;li&gt;定期檢討成效&lt;ul&gt;
&lt;li&gt;養成每週檢討的習慣，並事先計畫好一週的工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;策略6： 在職業生活中安排充足的休閒時間&lt;ul&gt;
&lt;li&gt;在工作日結束時，停止思考工作上的問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高度專注的能力是訓練出來的技術&lt;ul&gt;
&lt;li&gt;&lt;del&gt;只要有足夠的動機，就能在一夜之間把工作生活從分心轉變成專注&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;反之，一旦大腦習慣隨時回應，習慣分心，即使在需要專注時也會難以抗拒分心的誘惑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-_1"&gt;原則 2 - 學會擁抱無聊&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;策略1： 安排分心的時間&lt;ul&gt;
&lt;li&gt;讓大腦自如的抗拒分心，並不表示必須斷絕分心，只要有能力抵擋這類行為綁架注意力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;策略2： 像老羅斯福那樣工作&lt;ol&gt;
&lt;li&gt;確認一項排在優先清單前面的深度任務&lt;/li&gt;
&lt;li&gt;估計正常情況需要的時間，然後給自己比這個時間短很多的時限&lt;/li&gt;
&lt;li&gt;可能的話，公開承諾會在時限前完成&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;策略3： 練習生產性冥想&lt;ul&gt;
&lt;li&gt;目標: 花一段會用上體力、但不用腦力的時間 (e.g., 散步、慢跑、淋浴)，並集中注意力在單一而明確的工作問題上&lt;/li&gt;
&lt;li&gt;目的並非為了生產效益，而是改善深度思考的能力&lt;ul&gt;
&lt;li&gt;不斷抗拒分心和把注意力拉回明確的問題，強化抗拒分心的能力&lt;/li&gt;
&lt;li&gt;把注意力推向單一問題的更深處，磨利專注力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;策略4： 練習記憶一副牌&lt;ul&gt;
&lt;li&gt;記憶力訓練可以附帶增強專注力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3-_1"&gt;原則3 - 拒絕任何好處心態&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;策略2: 利用「斷線實驗」篩選社群媒體&lt;ul&gt;
&lt;li&gt;斷線三十天後，問自己&lt;ol&gt;
&lt;li&gt;過去三十天，如果我使用這項服務，我的生活會明顯更好嗎？&lt;/li&gt;
&lt;li&gt;人們在乎我不使用這項服務嗎？&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;如果這兩個問題的答案都是「不」，那就永遠放棄那項服務&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;策略3: 別用網際網路來娛樂自己&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;休閒時，先想好如何利用晚上和週末的時間，別自動把時間花在吸引注意的東西&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="4-"&gt;原則4 - 排除淺薄事務&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;策略1: 安排工作日的每一分鐘&lt;ul&gt;
&lt;li&gt;把工作日切出數個時段，指定每個時段的工作&lt;/li&gt;
&lt;li&gt;如果時間表被打亂，應該一有機會就更新&lt;ol&gt;
&lt;li&gt;先認清「你永遠會在一開始低估大部分事情需要花的時間」&lt;/li&gt;
&lt;li&gt;溢位方塊： 如果不確定要花多少時間，先畫上預期的時間方塊，再增添一個額外的方塊&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;時間表不但容許、還鼓勵即興的改變&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;策略2: 量化每一種活動的深度&lt;ul&gt;
&lt;li&gt;淺薄工作: 非高認知需求、偏向後勤的工作，往往在注意力分散中執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;策略3: 確認淺薄工作的時間比率&lt;/li&gt;
&lt;li&gt;策略4: 在五點半前結束你的工作&lt;ul&gt;
&lt;li&gt;固定時間表: 在某個時間以後就不工作，然後以回溯的方式，尋找可以達成這個目標的生產力策略&lt;/li&gt;
&lt;li&gt;如何避免過度使用危險用語：「好」&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;明確的拒絕，但模糊的解釋拒絕的原因&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;避免提供太多細節，讓對方有機會化解它&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;策略5: 讓自己難以連絡&lt;ul&gt;
&lt;li&gt;要訣2：在寄發或回覆電子郵件時多下點工夫&lt;ul&gt;
&lt;li&gt;回信應該描述最有效的流程，指出目前的步驟，並強調下一個步驟&lt;/li&gt;
&lt;li&gt;如果擔心流程導向郵件太正式，可以在信件中增添較長的談話式開場白&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要訣3：別回信&lt;ul&gt;
&lt;li&gt;如果符合下列任何一種情況，就別回信&lt;ol&gt;
&lt;li&gt;內容模稜兩可，難以回覆&lt;/li&gt;
&lt;li&gt;不是你感興趣的問題或提議&lt;/li&gt;
&lt;li&gt;回覆對你不會有好處，或不回覆不會對你有壞處&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;這些情況中，會有許多明顯的例外，例如，一封模稜兩可的信，談論的是你不感興趣的專案，但來自你公司的執行長，你就必須回覆&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Productivity"></category></entry><entry><title>[Book] 為什麼要睡覺</title><link href="https://lee-w.github.io/posts/book/2020/10/why-we-sleep" rel="alternate"></link><published>2020-10-31T10:54:00+08:00</published><updated>2020-10-31T10:54:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-10-31:/posts/book/2020/10/why-we-sleep</id><summary type="html">&lt;p&gt;這本書除了提供關於有用的睡眠建議外，它也是一本相當有趣的書&lt;br/&gt;
探討各種人類跟睡眠有關的行爲、迷思&lt;br/&gt;
讓人會不禁想一直看下去（雖然我還是看得有點慢... 但這應該是我今年看最快的書了）&lt;br/&gt;
睡前喝酒真的有用嗎？&lt;br/&gt;
睡覺真的需要睡滿八小時嗎？&lt;br/&gt;
咖啡因又會如何影響我們的睡眠？&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這本書除了提供關於有用的睡眠建議外，它也是一本相當有趣的書&lt;br/&gt;
探討各種人類跟睡眠有關的行爲、迷思&lt;br/&gt;
讓人會不禁想一直看下去（雖然我還是看得有點慢... 但這應該是我今年看最快的書了）&lt;br/&gt;
睡前喝酒真的有用嗎？&lt;br/&gt;
睡覺真的需要睡滿八小時嗎？&lt;br/&gt;
咖啡因又會如何影響我們的睡眠？&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;作者透過各種睡眠相關研究，討論這些行為背後可能的原因&lt;br/&gt;
並提出在這個睡眠不友善的社會中，該怎麼透過增進有效的睡眠來增加生產力&lt;br/&gt;
某種程度上看起來有點像是研究報告，但又不會無聊&lt;br/&gt;
調性跟&lt;a href="https://lee-w.github.io/posts/book/2015/11/the-power-of-habit"&gt;為什麼我們這樣生活，那樣工作 ?&lt;/a&gt;接近，但更加的平易近人&lt;/p&gt;
&lt;p&gt;如果沒有時間看完整本書，想直接看結論的話，我推薦看閱讀前哨站的書摘&lt;a href="https://readingoutpost.com/why-we-sleep/"&gt;《為什麼要睡覺》讀書心得：殿堂級睡眠寶典打破11個迷思&lt;/a&gt;&lt;br/&gt;
這篇文章紀錄了書中附錄 1 的健康睡眠的12項守則，造著它執行應該就能對睡眠有所改善&lt;/p&gt;
&lt;p&gt;整個筆記整理完，覺得我在 kindle 上少畫了不少重點&lt;br/&gt;
像是快速眼動睡眠對創意所帶來的好處，且它們只集中在睡眠的後期（e.g., 第 6 ~ 8 小時）&lt;br/&gt;
所以損失了 1 小時的睡眠並非損失 1/8 睡眠的價值，很可能是損失掉將近一半的價值&lt;br/&gt;
或者是做夢能對情緒所帶來的修復效果&lt;br/&gt;
也許等下次有機會再重看的時候，可以把這部分再補充到筆記中&lt;/p&gt;

&lt;h2 id="_1"&gt;睡眠是什麼？&lt;/h2&gt;
&lt;h3 id="ch-1-"&gt;Ch 1 - 睡吧……&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;睡眠不足，保證體重增加&lt;/li&gt;
&lt;li&gt;人類是唯一會在無益的情況下故意剝奪自己睡眠的生物&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ch-2-"&gt;Ch 2 -  咖啡因、時差、褪黑激素&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;近日節律&lt;ul&gt;
&lt;li&gt;當移除外在的日光影響時，每個人內在產生的「一天」並不是正好二十四小時，而是比二十四小時稍微長一點&lt;/li&gt;
&lt;li&gt;生物有近日節律的可能理由&lt;ul&gt;
&lt;li&gt;與地球每天自轉的機制同步，不管是內在活動（如體溫）或外在活動（如攝食），都能協調於地球自轉造成的規律明亮（面對太陽）與黑暗（背對太陽）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;晨型人 vs 夜型人&lt;ul&gt;
&lt;li&gt;晨型人（占人口比例約40%）： 清醒的高峰在早上，睏倦則在入夜不久後&lt;/li&gt;
&lt;li&gt;夜型人（30%）： 偏好晚睡，也因此第二天會晚起，甚至過了中午才醒來&lt;/li&gt;
&lt;li&gt;剩下（30%）： 介於之間的不同地帶，稍微往夜型人的方向偏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;往東飛比往西飛的時差更難調適&lt;ul&gt;
&lt;li&gt;往東時必須提前睡覺，在生物學上來說是非常艱巨的任務&lt;/li&gt;
&lt;li&gt;頻繁經歷時差可能會傷腦&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;咖啡因會遮蓋睡眠訊號&lt;ul&gt;
&lt;li&gt;咖啡因的作用在於搶奪了腦中本該接收腺苷的位置（受體）&lt;ul&gt;
&lt;li&gt;一旦占據受體後，咖啡因擋住這些受體，使受體不活躍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;喝下咖啡後的三十分鐘左右，在體內循環的咖啡因濃度達到高峰&lt;ul&gt;
&lt;li&gt;咖啡因的半衰期平均為五到七小時&lt;/li&gt;
&lt;li&gt;假設你在晚餐後喝了一杯咖啡，時間約為晚間七點半，這表示到了凌晨一點半，還有約50%的咖啡因在你的腦部組織中循環作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;年紀愈大，要從身體裡去除咖啡因愈花時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼熬夜後精神會更好？&lt;ul&gt;
&lt;li&gt;在原本應該清醒的時段，近日節奏會讓你有比較好的精神，但實際上你並沒有休息到&lt;ul&gt;
&lt;li&gt;和睡眠壓力不同，近日節律並不理會實際上有沒有睡覺&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我的睡眠足夠嗎？&lt;ul&gt;
&lt;li&gt;早上起床後，你是否能在上午十點或十一點左右回頭繼續睡覺？&lt;ul&gt;
&lt;li&gt;是 → 很可能睡不夠或睡眠品質不佳，或兩種都有&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你是否可以在沒有咖啡因的情況下，在中午前以理想狀態運作？&lt;ul&gt;
&lt;li&gt;否 → 很可能是靠著咖啡因之類的藥物，來應付自己長期睡眠不足的狀態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果不設鬧鐘，你會睡過頭嗎？&lt;ul&gt;
&lt;li&gt;是 → 你需要更多的睡眠量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你發現自己坐在電腦螢幕前，會重讀或甚至再三讀過同一個句子嗎？&lt;ul&gt;
&lt;li&gt;是 → 腦部疲勞、睡眠不足&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;睡不夠的後果&lt;ul&gt;
&lt;li&gt;腺苷濃度仍然太高&lt;ul&gt;
&lt;li&gt;昨天的腺苷還有部分留著，於是帶著這份想睡的債務度過一整天，和拖欠金錢債款一樣，這筆睡眠債會持續累積&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ch-3-"&gt;Ch 3 - 在你睡著時，大腦依然忙碌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;怎麼判斷自己睡過覺了？&lt;ul&gt;
&lt;li&gt;對外界失去覺察力 → 停止接收外在世界的訊息&lt;/li&gt;
&lt;li&gt;時間扭曲的感覺&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非快速動眼睡眠（non-rapid eye movement sleep，簡稱為NREM睡眠）&lt;/li&gt;
&lt;li&gt;快速動眼睡眠（rapid eye movement sleep，簡稱為REM睡眠）&lt;ul&gt;
&lt;li&gt;快速動眼睡眠又稱作矛盾睡眠（paradoxical sleep）：腦像是清醒著，然而身體卻很明顯是在睡覺&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ch-4-"&gt;Ch 4 - 誰會睡覺？我們該怎麼睡？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我們該怎麼睡覺？&lt;ul&gt;
&lt;li&gt;現況： 已開發國家，多數成人採「一段式」睡眠且平均長度少於七小時&lt;/li&gt;
&lt;li&gt;正確： &lt;strong&gt;兩段式睡眠模式，是一段連續長時間的夜間睡眠，加上一段較短的午睡&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;人類天生適合「兩段式睡眠」: 兩段式睡眠並非源自文化，而根植於生物特性&lt;ul&gt;
&lt;li&gt;不管文化背景或地理位置，每個人在下午都有一個清醒度低落的時段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果你需要上臺報告時，盡可能避免下午的中段時段 → 避免你和聽眾注意力渙散的時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;好的快速動眼睡眠 → 辨識及理解能力更為敏銳 → 冷靜掌握情緒的能力&lt;ul&gt;
&lt;li&gt;如果你忽然想起不太冷靜的人，你可以合理懷疑與他們一天的睡眠時數有關，特別是有沒有獲得早晨時分富含快速動眼睡眠的階段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ch-5-"&gt;Ch 5 - 我們一生中的睡眠變化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;快速動眼睡眠在人類生命早期是必要的&lt;ul&gt;
&lt;li&gt;阻礙或減少新生動物的快速動眼睡眠，會妨礙和扭曲這些寶寶的腦部發育，導致成年後的社會關係異常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;迷思： 長者的睡眠需求較少&lt;ul&gt;
&lt;li&gt;年長者所需的睡眠應該與中年時差不多，只是較難產生同樣分量的睡眠&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;隨著年紀漸長，睡眠有三項主要的改變&lt;ol&gt;
&lt;li&gt;量與質的降低&lt;/li&gt;
&lt;li&gt;睡眠效率的降低&lt;/li&gt;
&lt;li&gt;睡眠的時機受干擾&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;為什麼我們該睡覺？&lt;/h2&gt;
&lt;h3 id="ch-6-"&gt;Ch 6 - 你媽媽和莎士比亞早就知道&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;睡覺時的大腦使用清醒大腦絕不會嘗試的方式，把完全不同的知識連結起來，產生出令人驚豔的問題解決能力。這發生在做夢的階段，也就是快速動眼睡眠&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ch-7-"&gt;Ch 7 - 超越金氏世界紀錄的極限&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;當你睡眠不足時，無法評估自己的狀況有多糟&lt;/li&gt;
&lt;li&gt;每晚睡六小時，連續十天之後，表現失常的程度就和連續二十四小時沒睡的人一樣&lt;ul&gt;
&lt;li&gt;四小時和六小時實驗組所累積的表現缺失也和完全沒睡組一樣，沒有趨於平緩的跡象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在一整段即將發生的睡眠剝奪的開端就小睡，可以有一些緩衝；儘管這種效果只是暫時的，也不完全，這段緩衝仍可保護大腦免於可能造成災難的專注力缺失&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果你發現開車時感到睏倦，請停下車，找地方過夜&lt;ul&gt;
&lt;li&gt;如果你真的一定得趕路，而且審慎考慮過，即使冒著生命危險也一定要繼續，那麼請把車子開到路邊安全的停車處，小睡片刻（二十到三十分鐘）&lt;/li&gt;
&lt;li&gt;醒來後，不要立刻開車，因為那時你會有睡眠慣性（sleep inertia），也就是剛醒來時覺得還沒完全清醒的效應。請再等二十到三十分鐘，如果需要，或許先喝杯咖啡，然後才上路&lt;/li&gt;
&lt;li&gt;這只能讓你維持到下一次需要休息的時候，而且效果會愈來愈差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ch-8-"&gt;Ch 8 - 癌症、心臟病，以及壽命變短&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不管你現在處於哪種免疫狀態，如果你正準備接受疫苗來提高免疫力，或正在動員強大的適應性免疫反應來對抗病毒攻擊，那麼你需要睡覺，而且是整晚充分的睡眠，這是不容妥協的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;為什麼會做夢？&lt;/h2&gt;
&lt;h3 id="ch-10-"&gt;Ch 10 - 做夢是一種夜間治療&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;只要去睡覺，或許就會得到療癒&lt;ul&gt;
&lt;li&gt;快速動眼睡眠的做夢狀態，以及反應出夢中腦內壓力化學物質降低的特定電活動模式，決定了每個人夜間治療的成功程度&lt;/li&gt;
&lt;li&gt;並非時間療癒了傷痛，而是花在做夢睡眠的時間提供了情緒修復&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;從安眠藥到翻轉社會&lt;/h2&gt;
&lt;h3 id="ch-12-"&gt;Ch 12 - 不安的夜晚&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;睡眠剝奪 vs 失眠症&lt;ul&gt;
&lt;li&gt;睡眠剝奪&lt;ol&gt;
&lt;li&gt;有適當的睡眠能力&lt;/li&gt;
&lt;li&gt;沒有給自己適當的睡眠機會&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;失眠症&lt;ol&gt;
&lt;li&gt;缺乏適當的睡眠能力&lt;/li&gt;
&lt;li&gt;有適當的睡眠機會。也就是說，失眠的人即使給自己足夠的時間（七到九小時），也無法產生足夠的睡眠量和睡眠品質&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;睡眠時間 vs 睡眠機會&lt;ul&gt;
&lt;li&gt;現代社會中有很多人只給自己 5 到 6.5 小時的睡眠機會，這通常表示實際上只得到 4.5 到 6 小時的睡眠&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;死亡風險和睡眠時間的關係有點像個鉤子，超過九小時後會往上勾&lt;ul&gt;
&lt;li&gt;疾病會促進睡眠，特別是引發活躍免疫反應的疾病&lt;ul&gt;
&lt;li&gt;因此病得愈重的人，應該睡得愈久，以利用睡眠提供的健康工具來對抗病症&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有些疾病的威力太強，不管睡多久也無法克服，例如癌症，結果造成睡太多導致早死的假象，而不是「更合理」的結論：某些病症太過嚴重，不管加長多少睡眠帶來的好處，都無法扭轉病情&lt;ul&gt;
&lt;li&gt;「更合理」而不是「同樣合理」 → 因為還沒發現任何生物機制顯示睡眠有任何壞處&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ch-13-"&gt;Ch 13 - 讓你無法睡覺的是……&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;五項重要的因子強烈影響我們睡眠的長度和品質：&lt;ol&gt;
&lt;li&gt;持續的燈光和LED光&lt;/li&gt;
&lt;li&gt;固定的室溫&lt;/li&gt;
&lt;li&gt;咖啡因（在第2章討論過）&lt;/li&gt;
&lt;li&gt;飲酒&lt;/li&gt;
&lt;li&gt;上班打卡的傳統&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;可能的解決方案&lt;ol&gt;
&lt;li&gt;光源&lt;ul&gt;
&lt;li&gt;在夜裡採用較暗的室內燈光&lt;ul&gt;
&lt;li&gt;比較堅持的人甚至會在下午和夜晚於室內戴上黃色眼鏡，濾除壓抑褪黑激素的有害藍光&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用完全遮光窗簾 → 整夜維持黑暗&lt;/li&gt;
&lt;li&gt;在電腦、手機和平板電腦等裝置上安裝軟體，夜晚時逐漸降低有害藍光LED的飽和度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;室溫&lt;ul&gt;
&lt;li&gt;在一般的寢具和睡衣條件下，大約攝氏18.3度的臥室溫度，對多數人來說是理想&lt;/li&gt;
&lt;li&gt;要成功啟動睡眠，你的核心體溫必須降低約攝氏一度&lt;ul&gt;
&lt;li&gt;人類演化出雙手捧水洗臉的習慣&lt;ul&gt;
&lt;li&gt;因為手和臉的表面都布滿血管，不管是冷水或熱水，都能幫助熱從皮膚表面散失，以降低體內溫度&lt;/li&gt;
&lt;li&gt;或許有人覺得臉上的潔淨感可以幫助睡眠，但臉部的乾淨與否對睡覺並沒有影響&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼我們有時會在夜裡把手或腳從棉被底下伸出去？&lt;ul&gt;
&lt;li&gt;透過四肢散熱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;睡前的熱水澡對健康成人來說，可以使深度非快速動眼睡眠增加，程度達10%到15%&lt;ul&gt;
&lt;li&gt;原因可能和想像的相反。會較快入睡的原因並不是因為全身暖呼呼的，而是因為泡過熱水後讓血液流到體表，這些擴張的體表血管會很快把體內的熱散發出去，於是你的核心體溫突然下墜，身體核心變得較冷，會讓你更快睡著&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;飲酒&lt;ul&gt;
&lt;li&gt;拒絕夜間小酌，酒精不能助眠&lt;/li&gt;
&lt;li&gt;酒精如何破壞睡眠？&lt;ol&gt;
&lt;li&gt;睡眠的片段化，讓人在夜裡醒來數次&lt;ul&gt;
&lt;li&gt;酒後的睡眠是不連續的，因此缺乏修復效果。且當事人通常不記得自己曾醒來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;酒精是已知抑制快速動眼睡眠最有力的物質之一&lt;ul&gt;
&lt;li&gt;當身體代謝酒精時，產生的副產品是醛類和酮類，醛類會阻礙腦產生快速動眼睡眠&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;即使只是在下午或晚上喝下不多的酒，也足以剝奪睡眠中的做夢階段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;鬧鐘&lt;ul&gt;
&lt;li&gt;如果恐嚇你的心臟（事實如此）還不夠糟，使用貪睡裝置，表示你每隔一小段時間還要一次又一次的恫嚇自己的心血管系統。同樣的做法在一週間至少發生五次，你就要開始體會，虐待心臟和神經系統的後果會延續一輩子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;如何改善睡眠品質？&lt;ul&gt;
&lt;li&gt;每天都在同樣的時間醒來，不管是週間或週末&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;補充知識： 為什麼冷色調的藍光會是調節褪黑激素釋放最有力的可見光？&lt;ul&gt;
&lt;li&gt;人類和目前所知的所有陸生生物一樣，是起源於海洋的。海洋的作用就像光的濾鏡，會濾掉大部分波長較長的黃光和紅光，留下來的是波長較短的藍光。這也是為什麼無論從海上或水面下看起來，大海都是藍色的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ch-14-"&gt;Ch 14 - 安眠藥真的能安眠嗎？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;反彈性失眠： 停止使用安眠藥後，常會發生睡得更差的狀況，有時甚至比決定開始吃安眠藥時的情況更糟&lt;/li&gt;
&lt;li&gt;目前最有效的睡眠治療： 失眠認知行為治療 （CBT-I，cognitive behavioral therapy for insomnia）&lt;ul&gt;
&lt;li&gt;容易理解的方法包含減少咖啡因和酒精的攝取、把電子螢幕移出臥室、讓臥室溫度較低。此外，病患必須&lt;ol&gt;
&lt;li&gt;建立固定的上床和起床時間，即使週末也一樣&lt;/li&gt;
&lt;li&gt;只有在要睡覺時才躺到床上，避免夜晚較早時在沙發上小憩&lt;/li&gt;
&lt;li&gt;不要睡不著卻一直躺在床上，此時要離開床鋪，做一些較舒緩放鬆的活動，直到睡意恢復&lt;/li&gt;
&lt;li&gt;如果晚上睡覺有困難，要避免白天的小睡&lt;/li&gt;
&lt;li&gt;學習在睡前放慢腦袋的運轉速度，減少引起焦慮和煩惱的想法產生&lt;/li&gt;
&lt;li&gt;不要在臥室裡視線所及的地方放置時鐘，避免半夜盯著時鐘看的焦慮&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最好在夜晚熄燈前二到三小時就結束運動&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;身體活動過後一至二小時內，體溫依然偏高，如果運動時間太接近睡覺時間，會因為代謝率提高，讓核心體溫來不及下降、有效啟動睡眠&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ch-16-"&gt;Ch 16 -  二十一世紀的睡眠新願景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;避免上床的時候過飽或過餓，並且避免過度偏向高碳水化合物的飲食（超過總熱量攝取的70%），尤其要避免糖的攝取&lt;/li&gt;
&lt;li&gt;光源調控系統可以在生物學上合理的範圍內，稍微改變一個人的睡眠節律（提前或延遲三十到四十分鐘以內），藉此逐漸把節律調得更早或更晚&lt;ul&gt;
&lt;li&gt;e.g., 如果在星期三有場特別早的會議，從星期一開始逐漸調移近日節律，把上床和起床時間稍微提前。如此一來，星期三特別早起時就不會那麼痛苦，也不會對你的大腦和身體造成那麼多生物學上的折磨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把健康的新習慣轉變為長久的生活方式： 紀錄自己的健康數據&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Health"></category></entry><entry><title>小林的程式會不會遇到 SQL Injection</title><link href="https://lee-w.github.io/posts/tech/2020/09/will-kobayashi-s-code-encounter-sql-injection" rel="alternate"></link><published>2020-09-22T12:50:00+08:00</published><updated>2020-09-22T12:50:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-09-22:/posts/tech/2020/09/will-kobayashi-s-code-encounter-sql-injection</id><summary type="html">&lt;p&gt;其實這篇文章應該一年前就該寫了...&lt;br/&gt;
今年為了在 PyCon TW 的 Lightning Talk 想個梗，就拿出來講 (&lt;a href="https://speakerdeck.com/leew/xiao-lin-de-cheng-shi-ma-hui-bu-hui-yu-dao-sql-injection"&gt;slide&lt;/a&gt;)&lt;br/&gt;
沒想到被投影機擺了一道......&lt;/p&gt;
</summary><content type="html">&lt;p&gt;其實這篇文章應該一年前就該寫了...&lt;br/&gt;
今年為了在 PyCon TW 的 Lightning Talk 想個梗，就拿出來講 (&lt;a href="https://speakerdeck.com/leew/xiao-lin-de-cheng-shi-ma-hui-bu-hui-yu-dao-sql-injection"&gt;slide&lt;/a&gt;)&lt;br/&gt;
沒想到被投影機擺了一道......&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;前言雜談&lt;/h2&gt;
&lt;p&gt;去年看了京阿尼的作品&lt;a href="https://zh.wikipedia.org/wiki/%E5%B0%8F%E6%9E%97%E5%AE%B6%E7%9A%84%E9%BE%8D%E5%A5%B3%E5%83%95"&gt;小林家的龍女僕&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一集就發現主角小林也是寫 Python 的工程師，就開心地分享了這個消息&lt;br/&gt;
&lt;img alt="del" src="/images/posts-image/2020-will-kobayashi-s-code-encounter-sql-injection/del.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;沒想到馬上就有朋友問我這段程式碼會不會有 SQL injection&lt;br/&gt;
&lt;img alt="will it encounter sql injection" src="/images/posts-image/2020-will-kobayashi-s-code-encounter-sql-injection/will it encounter sql injection.png"/&gt;&lt;/p&gt;
&lt;p&gt;單看這一段程式碼其實很難直接下定論&lt;br/&gt;
畢竟 key 根本就不會被帶入 &lt;code&gt;session_id=$key&lt;/code&gt;，誰知道 db 怎麼實作的&lt;/p&gt;
&lt;p&gt;當然，早就有人注意到這段程式碼了&lt;br/&gt;
它出自 &lt;a href="https://github.com/webpy/webpy/blob/webpy-0.39/web/session.py#L313"&gt;webpy/web/session.py&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/question/51933296/answer/143492909"&gt;如何评价京都动画2017年1月新作 小林家的龙女仆?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;除了找到程式碼外，它還列出了劇情的其他 Python 程式碼，並討論了京都動畫使用這段程式碼會不會有法律問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ygkn/items/6b3be1afa31e4092826e"&gt;小林さんちのメイドラゴンで出てきたコード（小林さんを探せ！）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;透過 &lt;code&gt;git blame&lt;/code&gt; 來找出「到底誰是小林！」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ponkatsu807462913.wordpress.com/tag/sql-injection/"&gt;Ponkatsu - Tag: sql injection&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;直接點出這段程式碼會遇到 SQL injection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但身為工程師還是要自己驗證一下到底會不會有 SQL injection&lt;/p&gt;
&lt;h2 id="sql-injection"&gt;什麼是 SQL injection&lt;/h2&gt;
&lt;p&gt;根據 &lt;a href="https://zh.wikipedia.org/wiki/SQL%E6%B3%A8%E5%85%A5"&gt;SQL注入&lt;/a&gt; 維基百科頁面的例子&lt;br/&gt;
假設有一段產生 SQL 字串的程式碼是這樣寫的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sql_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM users WHERE (name = '"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"') and (pw = '"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"');"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只要攻擊者輸入了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"1' OR '1'='1"&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"1' OR '1'='1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就會產生&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因為 1 一定等於 1，這段 SQL 就會產生跟 &lt;code&gt;SELECT * FROM user;&lt;/code&gt; 一樣的效果&lt;br/&gt;
也就是攻擊者在完全不知道帳號密碼的情況下，就可以取得所有 users 的帳號密碼&lt;/p&gt;
&lt;h2 id="webpy-sql-injection"&gt;web.py 到底會不會有 SQL injection？&lt;/h2&gt;
&lt;p&gt;因為小林家的龍女僕是在 2017 年的 1 月到 4 月播出&lt;br/&gt;
根據 web.py 的 &lt;a href="https://github.com/webpy/webpy/tags"&gt;tags&lt;/a&gt; 頁面，在那之後的第一個發佈是 &lt;code&gt;webpy-0.39&lt;/code&gt;&lt;br/&gt;
可以推測，這最有可能是第一個包含小林撰寫程式碼的發佈&lt;/p&gt;
&lt;p&gt;&lt;img alt="web.py release" src="/images/posts-image/2020-will-kobayashi-s-code-encounter-sql-injection/webpy tag.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;我們先從安裝 &lt;code&gt;web.py==0.39&lt;/code&gt; 到虛擬環境中開始&lt;br/&gt;
（p.s. web 跟 py 中間的 . 是必要的，因為真的有個套件叫 webpy）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;poetry add web.py&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.39
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很不幸，如果使用的是 Python 3，會遇到以下的錯誤訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Creating virtualenv kobayashi-pwI4Cysh-py3.8 in /Users/weilee/Library/Caches/pypoetry/virtualenvs

Updating dependencies
Resolving dependencies... (0.1s)

Writing lock file


Package operations: 1 install, 0 updates, 0 removals

  - Installing web.py (0.39)

[EnvCommandError]
Command ['/Users/weilee/Library/Caches/pypoetry/virtualenvs/kobayashi-pwI4Cysh-py3.8/bin/pip', 'install', '--no-deps', 'web.py==0.39'] errored with the following return code 1, and output:
Collecting web.py==0.39
  Using cached web.py-0.39.tar.gz (93 kB)
    ERROR: Command errored out with exit status 1:
     command: /Users/weilee/Library/Caches/pypoetry/virtualenvs/kobayashi-pwI4Cysh-py3.8/bin/python -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'/.../web.py/setup.py'"'"'; __file__='"'"'/.../web.py/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' egg_info --egg-base /...
         cwd: /.../web.py/
    Complete output (7 lines):
    Traceback (most recent call last):
      File "&amp;lt;string&amp;gt;", line 1, in &amp;lt;module&amp;gt;
      File "/.../web.py/setup.py", line 6, in &amp;lt;module&amp;gt;
        from web import __version__
      File "/.../web.py/web/__init__.py", line 14, in &amp;lt;module&amp;gt;
        import utils, db, net, wsgi, http, webapi, httpserver, debugerror
    ModuleNotFoundError: No module named 'utils'
    ----------------------------------------
ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.
WARNING: You are using pip version 20.1.1; however, version 20.2.3 is available.
You should consider upgrading via the '/Users/weilee/Library/Caches/pypoetry/virtualenvs/kobayashi-pwI4Cysh-py3.8/bin/python -m pip install --upgrade pip' command.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;web.py 要到 0.40 才支援 Python 3 (Ref: &lt;a href="https://github.com/webpy/webpy/issues/180"&gt;python3 ImportError: No module named utils #180&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;因為我不太想測試 Python 2，就假設小林的程式碼到 0.40 都沒什麼被改動到好了 😆&lt;/p&gt;
&lt;h3 id="_2"&gt;初始化資料庫&lt;/h3&gt;
&lt;p&gt;要實驗到底有沒有辦法取得資料庫的資料，總是要先有一個資料庫&lt;br/&gt;
這裡做了三件事&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用 &lt;code&gt;sqlite3&lt;/code&gt; 跟 "kobayashi.db" 建立連線&lt;/li&gt;
&lt;li&gt;建立 &lt;code&gt;USER&lt;/code&gt; 資料表&lt;/li&gt;
&lt;li&gt;將 "kobayashi", "tohru", "kanna", "elma" 新增到 &lt;code&gt;USER&lt;/code&gt; 資料表中&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# connect and create "kobayashi.db"&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"kobayashi.db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# create USER table&lt;/span&gt;
    &lt;span class="n"&gt;create_table_sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;    CREATE TABLE `USER` (&lt;/span&gt;
&lt;span class="s2"&gt;        `account`   TEXT NOT NULL UNIQUE,&lt;/span&gt;
&lt;span class="s2"&gt;        `password`  TEXT NOT NULL,&lt;/span&gt;
&lt;span class="s2"&gt;        PRIMARY KEY(`account`)&lt;/span&gt;
&lt;span class="s2"&gt;    );&lt;/span&gt;
&lt;span class="s2"&gt;    """&lt;/span&gt;

    &lt;span class="c1"&gt;# insert users into USER table&lt;/span&gt;
    &lt;span class="n"&gt;insert_user_sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;    INSERT INTO&lt;/span&gt;
&lt;span class="s2"&gt;        USER (account, password)&lt;/span&gt;
&lt;span class="s2"&gt;    VALUES&lt;/span&gt;
&lt;span class="s2"&gt;        ('kobayashi', '1'),&lt;/span&gt;
&lt;span class="s2"&gt;        ('tohru', '2'),&lt;/span&gt;
&lt;span class="s2"&gt;        ('kanna', '3'),&lt;/span&gt;
&lt;span class="s2"&gt;        ('elma', '3');&lt;/span&gt;
&lt;span class="s2"&gt;    """&lt;/span&gt;

    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_table_sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;insert_user_sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;init_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_3"&gt;實作登入功能&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;login&lt;/code&gt; 會把使用者輸入的 account 跟 password 帶入 &lt;code&gt;where&lt;/code&gt;&lt;br/&gt;
如果在資料庫找到正確的匹配，就會回傳找到的第一筆 user&lt;br/&gt;
如果找不到就回傳 &lt;code&gt;None&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;web&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;result_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"USER"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"account ='&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' AND password='&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"login succeeded"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"wrong username or password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這裡用三個案例來測試&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;錯誤的帳號密碼 → 不應該取得 user&lt;/li&gt;
&lt;li&gt;正確的帳號密碼 → 應該取得 user&lt;/li&gt;
&lt;li&gt;SQL injection → 理想上，也不該取得 user&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sqlite"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"kobayashi.db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"kobayashi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"kobayashi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"1' OR '1'='1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"1' OR '1'='1"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但這個世界始終不理想，包含了 SQL injection 的程式成功取得 user&lt;br/&gt;
之所以只取到一筆 user，是因為 &lt;code&gt;login&lt;/code&gt; 只會回傳第一個物件，但這段 SQL 是能取到整個資料庫的 user 的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;0.0 (1): SELECT * FROM USER WHERE account ='kobayashi' AND password=''
wrong username or password
None

0.0 (2): SELECT * FROM USER WHERE account ='kobayashi' AND password='1'
login succeeded
&amp;lt;Storage {'account': 'kobayashi', 'password': '1'}&amp;gt;

0.0 (3): SELECT * FROM USER WHERE account ='1' OR '1'='1' AND password='1' OR '1'='1'
login succeeded
&amp;lt;Storage {'account': 'kobayashi', 'password': '1'}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_4"&gt;該如何修正？&lt;/h3&gt;
&lt;p&gt;修正的方式很簡單，只要在呼叫 select 的時候用 &lt;code&gt;vars&lt;/code&gt; 將參數帶進 &lt;code&gt;where&lt;/code&gt; 即可&lt;br/&gt;
其實 web.py 的文件就有寫了 (Ref: &lt;a href="https://webpy.org/cookbook/query"&gt;db.query&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;result_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"USER"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"account=$account AND password=$password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"account"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"login succeeded"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"wrong username or password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這次就算用原本 SQL injetion 的作法，也取不到任何的資料&lt;br/&gt;
因為沒有 account 是 &lt;code&gt;"1' OR '1'='1"&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;0.0 (3): SELECT * FROM USER WHERE account ="1' OR '1'='1" AND password="1' OR '1'='1"
wrong username or password
None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_5"&gt;知其然還要知其所以然啊！&lt;/h2&gt;
&lt;p&gt;除了知道怎麼修正外，我還想知道 web.py 做了什麼&lt;br/&gt;
下面冗長的紀錄我追 web.py 原始碼的過程&lt;/p&gt;
&lt;h3 id="pdbpp"&gt;pdbpp&lt;/h3&gt;
&lt;p&gt;寫這篇文章最大的收穫，大概就是大幅的提升了我對 pdb 的熟悉度&lt;br/&gt;
剛好聽到廣播 &lt;a href="https://pythonbytes.fm/"&gt;Python Bytes&lt;/a&gt; 推薦的 &lt;a href="https://github.com/pdbpp/pdbpp"&gt;pdbpp&lt;/a&gt; 就順手玩了一下&lt;br/&gt;
pdbpp 在安裝後會取代原生的 pdb&lt;br/&gt;
主要有這兩個功能比 pdb 好用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;syntax highlight&lt;ul&gt;
&lt;li&gt;不過需要注意的是，如果要能客製化 highlight 風格，需要直接從 master branch 安裝的版本，目前還沒把這個修正釋出到 PyPI 上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sticky mode（在除錯器的上方一直顯示目前追到的程式碼）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="sticky mode example" src="/images/posts-image/2020-will-kobayashi-s-code-encounter-sql-injection/sticky mode.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;順便記錄一下常用到的 pdbpp 指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;: 下一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;: 進到函式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p [var]&lt;/code&gt; (e.g., &lt;code&gt;p locals()&lt;/code&gt;): 印出變數 var&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args&lt;/code&gt;: 印出參數&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ll&lt;/code&gt;: 顯示現在在原始碼的哪裡（原本 pdb 的 longlist）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="webpy"&gt;追 web.py 原始碼&lt;/h3&gt;
&lt;p&gt;這部分的紀錄方式會是每進到一次函式 (在 pdb 裡面使用 &lt;code&gt;s&lt;/code&gt;) 就會加一個四級標題&lt;br/&gt;
回到原本的函式，則會在標題後面加一個 back&lt;/p&gt;
&lt;p&gt;首先當然是從 &lt;code&gt;login&lt;/code&gt; 呼叫到 &lt;code&gt;db.select&lt;/code&gt; 函式開始追回去&lt;/p&gt;
&lt;h4&gt;web/db.py::DB::select&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L845"&gt;web/db.py#L845&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;跑完 874 行的 list comprehension 後，&lt;code&gt;clauses&lt;/code&gt; 會包含以下四個部分&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;(Pdb++) p clauses&lt;/span&gt;
&lt;span class="err"&gt;[&amp;lt;sql: 'SELECT *'&amp;gt;, &amp;lt;sql: 'FROM USER'&amp;gt;, &amp;lt;sql: 'WHERE account ="1\' OR \'1\'=\'1" AND password="1\' OR \'1\'=\'1"'&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看起來已經成功將特殊字元跳脫，解決 SQL injection&lt;br/&gt;
所以接下來要去追產生 &lt;code&gt;clause&lt;/code&gt; 的 &lt;code&gt;gen_clause&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;web/db.py::DB::gen_clause&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L934"&gt;web/db.py#L934&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;gen_clause&lt;/code&gt; 會被呼叫三次，當輸入的參數 sql 是 &lt;code&gt;WHERE&lt;/code&gt; 時，會執行到 948 行的 &lt;code&gt;nout = reparam(val, vars)&lt;/code&gt;&lt;br/&gt;
此時輸入的各個參數如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;
&lt;span class="s1"&gt;'WHERE'&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="s1"&gt;'account =$account AND password=$password'&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;vars&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'account'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"1' OR '1'='1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"1' OR '1'='1"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;web/db.py::reparam&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L344"&gt;web/db.py#L344&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;參數:&lt;ul&gt;
&lt;li&gt;val = &lt;code&gt;'account =$account AND password=$password'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;vars = &lt;code&gt;{'account': "1' OR '1'='1", 'password': "1' OR '1'='1"}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一進到 &lt;code&gt;reparm&lt;/code&gt; ，這些值就會繼續被傳到 &lt;code&gt;safteval&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;web/db.py::SafeEval::safeeval&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L1699"&gt;web/db.py#L1699&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;帶入參數&lt;ul&gt;
&lt;li&gt;text = &lt;code&gt;'account =$account AND password=$password'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;mapping = &lt;code&gt;{'account': "1' OR '1'='1", 'password': "1' OR '1'='1"}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1700 行的 &lt;code&gt;Parser&lt;/code&gt; 會將 text 分解成四個 SQL 的部分，並且將 nodes 連同 mapping 一個一個帶入 &lt;code&gt;eval_node&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;(Pdb++) p list(nodes)&lt;/span&gt;
&lt;span class="err"&gt;[Node('text', 'account =', None), Node('param', 'account', None), Node('text', ' AND password=', None), Node('param', 'password', None)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;web/db.py::SafeEval::eval_node&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L1703"&gt;web/db.py#L1703&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;self.eval_expr&lt;/code&gt; 的功用是在讓 &lt;code&gt;node[1]&lt;/code&gt; 能抓到 &lt;code&gt;"1' OR '1'='1"&lt;/code&gt;&lt;br/&gt;
抓到了字串 &lt;code&gt;"1' OR '1'='1"&lt;/code&gt; 後會丟到 &lt;code&gt;sqlquote&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;web/db.py::sqlquote&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L463"&gt;463行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;參數:&lt;ul&gt;
&lt;li&gt;a = &lt;code&gt;"1' OR '1'='1"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a 會在 475 行被初始化成 &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L93"&gt;SQLParam&lt;/a&gt; 物件 ，然後再產生 &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L142"&gt;SQLQuery&lt;/a&gt; 物件&lt;/p&gt;
&lt;h4&gt;web/db.py::SafeEval::eval_node (back)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L1703"&gt;web/db.py#L1703&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回到 &lt;code&gt;eval_node&lt;/code&gt; ，就會把剛剛的結果 &lt;code&gt;&amp;lt;sql: '"1\' OR \'1\'=\'1"'&amp;gt;&lt;/code&gt; (&lt;code&gt;SQLQuery&lt;/code&gt; 物件印出的形式) 回傳&lt;/p&gt;
&lt;h4&gt;web/db.py::SafeEval::safeeval (back)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L1699"&gt;web/db.py#L1699&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1701 行的 &lt;code&gt;[self.eval_node(node, mapping) for node in nodes]&lt;/code&gt; 會產生&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'account ='&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'"1&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt; OR &lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;1"'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' AND password='&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'"1&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt; OR &lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;=&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;1"'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這個 list 會接著被帶入 &lt;code&gt;SQLQuery.join&lt;/code&gt; 整合成一整個 SQL 的片段&lt;/p&gt;
&lt;h4&gt;web/db.py::SQLQuery::join&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L254"&gt;web/db.py#L254&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;277 ~ 285 行的 for loop 執行完會產生一個新的 target (&lt;code&gt;SQLQuery&lt;/code&gt; 物件)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'account ="1\'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s1"&gt;'1\'&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s1"&gt;'1" AND password="1\'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s1"&gt;'1\'&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s1"&gt;'1"'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'account ='&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;"1' OR '1'='1"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' AND password='&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;"1' OR '1'='1"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;"1' OR '1'='1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;"1' OR '1'='1"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pdb&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;'account =%s AND password=%s'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以發現這時候要回傳的 &lt;code&gt;SQLQuery&lt;/code&gt; 物件已經把查詢時跟要帶入的值分開儲存&lt;/p&gt;
&lt;h4&gt;web/db.py::reparam（back）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L344"&gt;web/db.py#L344&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;web/db.py::DB::gen_clause (back)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L948"&gt;web/db.py#L948&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 956 行，剛剛回傳的 &lt;code&gt;nout&lt;/code&gt; 會透過 &lt;code&gt;xjoin&lt;/code&gt; 跟字串 &lt;code&gt;WHERE&lt;/code&gt; 整合成一個新的 &lt;code&gt;SQLQuery&lt;/code&gt; 物件&lt;br/&gt;
字串跟 &lt;code&gt;SQLQuery&lt;/code&gt; 相加的行為被定義在 &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L196"&gt;196 行&lt;/a&gt; 的 &lt;code&gt;__radd__&lt;/code&gt;&lt;br/&gt;
但因為沒有什麼太意料之外的行為，這裡就不繼續追下去了&lt;/p&gt;
&lt;h4&gt;web/db.py::DB::select (back)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L874"&gt;web/db.py#L874&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;取得了回傳的 &lt;code&gt;clauses&lt;/code&gt; 後，它會在 879 行的 &lt;code&gt;SQLQuery.join&lt;/code&gt; 整合成一個 &lt;code&gt;SQLQuery&lt;/code&gt; 物件&lt;br/&gt;
產生 &lt;code&gt;qout&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;(Pdb++) p qout&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;sql: 'SELECT * FROM USER WHERE account ="1\' OR \'1\'=\'1" AND password="1\' OR \'1\'=\'1"'&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後就要看 884 行的 &lt;code&gt;self.query(qout, processed=True)&lt;/code&gt; 是不是真的會以參數化的方式執行這段 SQL&lt;/p&gt;
&lt;h4&gt;web/db.py::DB::query&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L807"&gt;web/db.py#L807&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;執行到 831 行 &lt;code&gt;self._db_execute(db_cursor, sql_query)&lt;/code&gt; 才會用到傳進來的 &lt;code&gt;sql_query&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;web/db.py::DB::_db_execute&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;位置: &lt;a href="https://github.com/webpy/webpy/blob/0.40/web/db.py#L750"&gt;web/db.py#L750&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 756 行的 &lt;code&gt;_process_query&lt;/code&gt; 產生要執行的 SQL query 跟它的參數，回傳的結果分別是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;query = &lt;code&gt;'SELECT * FROM USER WHERE account =? AND password=?'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;params = &lt;code&gt;["1' OR '1'='1", "1' OR '1'='1"])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再帶到 757 行的&lt;code&gt;out = cur.execute(query, params)&lt;/code&gt; 直接對資料庫作查詢，所以就不會遇到 SQL injection 了&lt;/p&gt;
&lt;h4&gt;原本好像是要追 delete 才對&lt;/h4&gt;
&lt;p&gt;顧著重現維基百科的例子，竟然忘記了原本要追的其實是另一段程式碼&lt;br/&gt;
不過我想本質應該還是相同的&lt;br/&gt;
有興趣的話，可以拿以下這段 SQL 來測測看 delete 的 SQL injection 是不是真的能清空整個資料表&lt;br/&gt;
&lt;strong&gt;disclaimer: 請不要拿它用在會影響到其他人的程式上 (e.g., production 環境)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;DELETE&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;USER&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="xkcd joke" src="https://imgs.xkcd.com/comics/exploits_of_a_mom.png"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你是不是真的把你的兒子取名為 &lt;code&gt;Rober'); DROP TABLE Students;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_6"&gt;結語&lt;/h2&gt;
&lt;p&gt;結論是「雖然小林的程式碼可能遇到 SQL injection，但也存在著很簡單的解決方案，只要使用者有讀文件，應該就不會遇到」&lt;br/&gt;
我完全不是資訊安全的專家，只是抱持著對京都動畫和 Python 的愛來追這段程式碼&lt;br/&gt;
如果有說錯或可以補充的部分，再麻煩留言讓我知道 🙏&lt;/p&gt;
&lt;p&gt;其實小林家的龍女僕，還有其他場景也有出現 Python&lt;br/&gt;
像是這裡說了小林自從開始寫 Python 後變得開朗了許多呢（誤&lt;/p&gt;
&lt;p&gt;&lt;img alt="kobayashi becomes hayppier" src="/images/posts-image/2020-will-kobayashi-s-code-encounter-sql-injection/kobayashi becomes hayppier.png"/&gt;&lt;/p&gt;
&lt;p&gt;我也是自從寫了 Python 後，每次考試都考 100 分呢（並沒有）&lt;br/&gt;
所以大家一起來寫 Python 吧 🐍&lt;br/&gt;
那寫 Python 的人最好的交流平台是什麼呢 🤔&lt;br/&gt;
當然是 &lt;a href="https://tw.pycon.org/"&gt;PyCon TW&lt;/a&gt; 啊 🤩&lt;br/&gt;
來當 PyCon TW 志工，跟大家交流 Python，變成一個開朗的人吧 💪&lt;/p&gt;
&lt;h2 id="one-more-thing"&gt;One more thing&lt;/h2&gt;
&lt;p&gt;去年七月一場不幸的縱火案，大大的重創了京都動畫&lt;br/&gt;
PyCon JP 2019 時，我也去了鷲宮神社留下我的祝福&lt;br/&gt;
不會日文的我，就只簡單的寫了 &lt;strong&gt;Pray for Kyoani&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pray for kyoani" src="/images/posts-image/2020-will-kobayashi-s-code-encounter-sql-injection/pray for kyoani.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;即便如此，京阿尼還是很快就站起來&lt;br/&gt;
一年過後的現在宣布「小林家的龍女僕將於 2021 年開播 」🎉&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p dir="ltr" lang="ja"&gt;TVアニメ第2期「小林さんちのメイドラゴンS」2021年放送決定！SuperでSupremeなSecond lifeがStartします！&lt;br/&gt;そして、メイドラゴンS(読み:エス)ティザービジュアル公開！ティザーサイトもぜひチェックお願いします！　&lt;a href="https://t.co/pKOgbEe3sL"&gt;https://t.co/pKOgbEe3sL&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/meidragon?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#meidragon&lt;/a&gt; &lt;a href="https://t.co/XoyiBPbnvt"&gt;pic.twitter.com/XoyiBPbnvt&lt;/a&gt;&lt;/p&gt;— TVアニメ「小林さんちのメイドラゴンS」公式 (@maidragon_anime) &lt;a href="https://twitter.com/maidragon_anime/status/1292838380187746305?ref_src=twsrc%5Etfw"&gt;August 10, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;script async="" charset="utf-8" src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Animate"></category></entry><entry><title>[Book] 學徒模式</title><link href="https://lee-w.github.io/posts/book/2020/09/apprenticeship-patterns" rel="alternate"></link><published>2020-09-17T11:30:00+08:00</published><updated>2020-09-17T11:30:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-09-17:/posts/book/2020/09/apprenticeship-patterns</id><summary type="html">&lt;p&gt;&lt;img alt="apprenticeship-patterns" src="/images/books/apprenticeships-pattern.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;學徒模式是由數十個在不同情境下可以用的模式所組成&lt;br/&gt;
每個模式都會分為&lt;em&gt;情境、問題、解決方案、行動&lt;/em&gt;四個部分&lt;br/&gt;
模式之間彼此可能有一些關聯，但並非順序性的&lt;br/&gt;
所以這本書並沒有必要照著順序閱讀&lt;/p&gt;
&lt;p&gt;讀起來的感覺跟 &lt;a href="https://lee-w.github.io/posts/tech/2018/11/the-clean-coder"&gt;The Clean Coder&lt;/a&gt; 有點像&lt;br/&gt;
在職涯的不同階段閱讀都可能有很不同的感受&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="apprenticeship-patterns" src="/images/books/apprenticeships-pattern.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;學徒模式是由數十個在不同情境下可以用的模式所組成&lt;br/&gt;
每個模式都會分為&lt;em&gt;情境、問題、解決方案、行動&lt;/em&gt;四個部分&lt;br/&gt;
模式之間彼此可能有一些關聯，但並非順序性的&lt;br/&gt;
所以這本書並沒有必要照著順序閱讀&lt;/p&gt;
&lt;p&gt;讀起來的感覺跟 &lt;a href="https://lee-w.github.io/posts/tech/2018/11/the-clean-coder"&gt;The Clean Coder&lt;/a&gt; 有點像&lt;br/&gt;
在職涯的不同階段閱讀都可能有很不同的感受&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;前言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有些讀者發現需要讀本書兩次&lt;ul&gt;
&lt;li&gt;第一次快速瀏覽，在腦中建構所有內容的印象&lt;/li&gt;
&lt;li&gt;第二次建立各模式間的互相連結&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;我覺得我自己就是幾乎什麼書都得讀兩次的人 XD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="ch2-"&gt;Ch2 - 倒空杯子&lt;/h2&gt;
&lt;h3 id="_2"&gt;你的第一個語言&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;選一個語言，&lt;strong&gt;精通&lt;/strong&gt;它&lt;ol&gt;
&lt;li&gt;和專家一起工作&lt;/li&gt;
&lt;li&gt;參加該語言愛好者舉辦的本地聚會（或網路論壇），評估自己是不是願意屬於這個社群&lt;/li&gt;
&lt;li&gt;盡快閱讀如 Effective Perl Programming, Effective Java 這類書籍，加速學習並減少犯下常見錯誤的機會&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;但不應該與任何特定的技術白頭到老，應該尋求廣泛而足夠的基礎知識與經驗，才能針對任何特殊的狀況挑選合適的方案&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;具體技能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;「如果我今天雇用你，下星期一你能對團隊帶來什麼好處？」&lt;ul&gt;
&lt;li&gt;對第一個語言的深入了解能幫你建立可靠度，證明對團隊的幫助&lt;/li&gt;
&lt;li&gt;變成工匠後，聲望、過去的工作經驗，以及對團隊帶來更深層的影響將更為重要&lt;ul&gt;
&lt;li&gt;到這個時間點之前，你必須盡可能地擁有更多技能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;收集你嚮往的人的履歷資料，從每份履歷中挑出五個不同的技能，評估是是否夠用在你想加入的團隊中，利用挑選出來的技能建立一個能夠展現你擁有這些技能的小專案&lt;/li&gt;
&lt;li&gt;養成定期維護個人履歷的習慣，將具體技能獨立為個別的清單&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch3-"&gt;Ch3 - 走在漫漫長路&lt;/h2&gt;
&lt;h3 id="_4"&gt;量身繪製地圖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;列出三個目前工作之後可以做的工作，之後再為每個工作列出三個後續的工作&lt;ul&gt;
&lt;li&gt;思考這些是否包含接下來幾年你生命中期望的職務&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch4-"&gt;Ch4 - 正確的自我認知&lt;/h2&gt;
&lt;h3 id="_5"&gt;成為菜鳥&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;問題： 學習的機會慢慢減少&lt;/li&gt;
&lt;li&gt;解決方案： 讓自己被比自己優秀的開發人員圍繞&lt;/li&gt;
&lt;li&gt;行動&lt;ul&gt;
&lt;li&gt;列出所有你知道的團隊（e.g., 開放原始碼專案、其他部分、以及其他公司）&lt;/li&gt;
&lt;li&gt;將這些團隊一技術能力好壞排列，然後找出其中正在找尋新成員加入的團隊&lt;ul&gt;
&lt;li&gt;可能得加入好幾個 mailing list ，向許多人詢問才能弄清楚這些團隊彼此的技術能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_6"&gt;打掃地面&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;問題： 不確定自己在團隊中的位置，團隊對你的認識也不多，你希望找到為團隊貢獻的方式，獲得團隊的信任，並成長成工匠&lt;/li&gt;
&lt;li&gt;解決方案&lt;ul&gt;
&lt;li&gt;自願去做簡單、枯燥、又非做不可的工作&lt;/li&gt;
&lt;li&gt;初期為團隊的成功做出貢獻，展現出即使在小事上也能維持高品質的成果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch5-"&gt;Ch5 - 終身學習&lt;/h2&gt;
&lt;h3 id="_7"&gt;拓展你的頻寬&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在 Twitter 上追蹤一些傑出軟體人員，持續關注他們在進行的工作&lt;/li&gt;
&lt;li&gt;訂閱高流量的 mailing list ，重新產生他人詢問的問題，並試著回答他們&lt;/li&gt;
&lt;li&gt;加入新成立、以最新科技為主題的本地使用者群組，向負責人自我介紹，並提供需要的幫助&lt;/li&gt;
&lt;li&gt;每讀完一本書，寄信給作者表達謝意與提問&lt;ul&gt;
&lt;li&gt;作者、講者與傑出人員也許看起來很嚇人或忙碌，但他們通常很樂意與讀者互動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;邊工作邊反省&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;情境&lt;ul&gt;
&lt;li&gt;有足夠能力的人，都會在幾年後爬上升職的階梯。如果你不為那個晉升準備，你會發現自己成為「彼得原理」的受害者，被晉升到不能勝任的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解決方案&lt;ul&gt;
&lt;li&gt;經常反省自己的工作方式&lt;/li&gt;
&lt;li&gt;建立 Personal Practices Map (Ref: &lt;a href="http://code-dojo.blogspot.com/2009/12/my-personal-practices-map.html"&gt;My Personal Practices Map&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;分享個人所學&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;這對初學者可能是不容易跨過的心理障礙，&lt;strong&gt;但正因為知道的不多，你的解釋會最簡單、直接，而不需要其他知識，這會讓他們成為更好的解釋&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;行動： 回想你上次學到重要知識的過程，寫一篇相關的文章，提供你當初希望已經存在的訊息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_10"&gt;建立回饋迴路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;情境： 你無法知道自己是否限於 unconscious incompetence&lt;/li&gt;
&lt;li&gt;解決方案&lt;ul&gt;
&lt;li&gt;定期取得關於自身表現的外部客觀資料&lt;/li&gt;
&lt;li&gt;學徒也許不該太早致力於減少錯誤，而是致力於如何辨認自己犯的錯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch6-"&gt;Ch6 - 安排自我課程&lt;/h2&gt;
&lt;h3 id="_11"&gt;閱讀清單&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;問題： 你需要閱讀的書籍大量增加，遠遠超過你的閱讀速度&lt;/li&gt;
&lt;li&gt;解決方案&lt;ul&gt;
&lt;li&gt;維護閱讀清單，紀錄你計畫要讀跟已經讀完的書&lt;ul&gt;
&lt;li&gt;考慮將閱讀清單公開出來，這能讓其他人也從你的學習受益 (Ref: &lt;a href="http://bookshelved.org/"&gt;BookShelved&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;反省過去的學習習慣&lt;/li&gt;
&lt;li&gt;你可能會發現有些書持續出現在參考書目中，應該將這些書移到前方&lt;ul&gt;
&lt;li&gt;閱讀清單應該要是一個 priority queue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Career Path"></category></entry><entry><title>[Book] 葛洛夫給經理人的第一課：從煮蛋、賣咖啡的早餐店談高效能管理之道</title><link href="https://lee-w.github.io/posts/book/2020/09/high-output-management" rel="alternate"></link><published>2020-09-10T12:53:00+08:00</published><updated>2020-09-10T12:53:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-09-10:/posts/book/2020/09/high-output-management</id><summary type="html">&lt;p&gt;&lt;img alt="high-output-management" src="/images/books/high-output-management.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="high-output-management" src="/images/books/high-output-management.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;blockquote&gt;
&lt;p&gt;放在那個位置上，做久了覺得自己做得來，就會接受這個位置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不過這樣的事情並沒有自然而然的發生&lt;br/&gt;
一年的 PyCon TW 2020 議程組長當下來，跟團隊的協調上還是會遇到不少難題&lt;br/&gt;
才覺得自己好像該多讀點書了&lt;br/&gt;
這本書在很多面向給我解決問題的方向，也包含了不少我踩了雷才形成的作法&lt;br/&gt;
有種相見恨晚的感覺（笑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做久了，就會想辦法讓自己有能力勝任這個位置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;改成這樣好像比較符合我今年下來的感受&lt;/p&gt;

&lt;h2 id="_1"&gt;前言&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;產出導向管理&lt;/li&gt;
&lt;li&gt;團隊意識： &lt;strong&gt;經理人的產出 = 他所管理或影響所及的部屬工作成效總和&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;管理槓桿率： 高槓桿率的管理活動 → 高產能&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="1"&gt;第1章：「生產」包含了些什麼？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;及早發現、及早治療&lt;ul&gt;
&lt;li&gt;原物料在流程中「愈變愈有價值」 → &lt;strong&gt;在「價值最低」的階段就修正問題&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;e.g., 校園徵才時便決定篩掉哪些人，便可以省下後來面試所花的時間和金錢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2"&gt;第2章：從早餐店的庫存談起&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;踏進辦公室，經理人得馬上知道的資訊&lt;ol&gt;
&lt;li&gt;當日銷售預測&lt;/li&gt;
&lt;li&gt;原料存貨&lt;/li&gt;
&lt;li&gt;設備狀況&lt;/li&gt;
&lt;li&gt;人力資源&lt;/li&gt;
&lt;li&gt;人力資源品質指標&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;任何管理都需要評估 → &lt;strong&gt;評估產出&lt;/strong&gt;，而不是產出前的生產活動&lt;/li&gt;
&lt;li&gt;好的指標 → 衡量具體且可計算的事情&lt;ol&gt;
&lt;li&gt;領先指標 (leading indicator)&lt;ul&gt;
&lt;li&gt;了解未來的概況來引導你注意黑箱中該注意的事情&lt;/li&gt;
&lt;li&gt;e.g., 機器故障紀錄、客戶滿意程度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;線性指標 (linearity indicator)&lt;ul&gt;
&lt;li&gt;e.g., 除了產出外，也衡量每一天的進度，再&lt;em&gt;將其與理想的線性進度相比&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;有可能出貨都擠在當月最後，一旦月底機器故障，進度會大大落後&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;趨勢指標 (trend indicator)&lt;ul&gt;
&lt;li&gt;以時間(這個月業績和過去數月相比)或其他設定的標準為基礎，衡量產出&lt;/li&gt;
&lt;li&gt;e.g., 早餐做幾份或是傳單做了幾張&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重覆印證表 (stagger chart)&lt;ul&gt;
&lt;li&gt;預測未來幾個月的產出&lt;/li&gt;
&lt;li&gt;每個月都更新資料並重新預測&lt;ul&gt;
&lt;li&gt;以實際銷售業績和上個月的預測，甚至前幾個月對本月的預測相比&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;出貨品質檢驗&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;海關與監視器&lt;ul&gt;
&lt;li&gt;海關： 產品沒通過測試，便會被打回前一關或廢棄&lt;/li&gt;
&lt;li&gt;監視器： 如果取樣到瑕疵品，就標上記號，並計算瑕疵率。如果瑕疵率，就該停止這條生產線&lt;/li&gt;
&lt;li&gt;&lt;em&gt;除非放過一個瑕疵品的損失過大，不然建議採用監視器的方式&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隨機檢驗&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;應用在管理上: 經理人對一個特定事件多花點精神&lt;/li&gt;
&lt;li&gt;應用在管理上的好處&lt;ul&gt;
&lt;li&gt;增加員工的責任感&lt;/li&gt;
&lt;li&gt;節省時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對部屬事必躬親的壞處&lt;ul&gt;
&lt;li&gt;過度干預&lt;/li&gt;
&lt;li&gt;浪費時間監督不會出錯的部屬&lt;/li&gt;
&lt;li&gt;養成部署依賴性&lt;ul&gt;
&lt;li&gt;反正什麼事到最後老闆都會檢查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;最近跟 KK 聊到「如果管理者必須事必躬親，代表的是管理者自己風險控管能力不足」&lt;br/&gt;
我也認同如果每件事都事必躬親，那就是我對自己的管理能力，投下了不信任票&lt;br/&gt;
更糟的是，這麼做還會讓自己的管理能力停滯不前&lt;br/&gt;
但有時候就是會忍不住啊（苦笑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_3"&gt;槓桿率&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;較高的槓桿率 → 同樣的投入下，這項活動會較槓桿率低者有較高的產出&lt;/li&gt;
&lt;li&gt;增加槓桿率的方式&lt;ul&gt;
&lt;li&gt;自動化&lt;/li&gt;
&lt;li&gt;工作簡單化&lt;ul&gt;
&lt;li&gt;步驟&lt;ol&gt;
&lt;li&gt;建立生產流程表（這個表必須詳盡）&lt;/li&gt;
&lt;li&gt;計算步驟 → 接下來才找得出比較的依據&lt;/li&gt;
&lt;li&gt;設定刪減的目標&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;先質疑每一個步驟存在的理由&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;很多步驟可能只是因為傳統或為了讓工作顯得正式，對實際的生產沒有幫助&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3"&gt;第3章：管理槓桿率&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;經理人的產出 ＝ 直接管轄的部門產出 ＋ 間接影響所及的部門產出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;經理人永遠有忙不完的事，永遠有更多的事要做、應該做，也永遠超過你所能負荷 😢&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;資訊收集&lt;ul&gt;
&lt;li&gt;最重要的資訊來源往往來自於簡短而且非正式的談話中&lt;/li&gt;
&lt;li&gt;有效的方式： 實際在公司走動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;資訊傳遞&lt;ul&gt;
&lt;li&gt;發出警訊&lt;ul&gt;
&lt;li&gt;e.g., 打個電話建議你的同事該怎麼做,  在口頭報告中提出你的意見&lt;/li&gt;
&lt;li&gt;除了傳遞資訊，同時將事情或人引導到你覺得對的方向上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;決策&lt;ol&gt;
&lt;li&gt;未雨綢繆型&lt;/li&gt;
&lt;li&gt;亡羊補牢型&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;當部屬表率&lt;ul&gt;
&lt;li&gt;價值觀和行事規範很難只用講的或是寫在紙上，最好的方法就「做」，還&lt;strong&gt;得做得「讓人看得到」！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「在資訊收集、資訊傳遞、決策制定、發出警訊以及為人表率這幾項管理活動中，有哪一項我可以不靠開會達成？」&lt;ul&gt;
&lt;li&gt;答案是「沒有」&lt;/li&gt;
&lt;li&gt;會議本身並非「活動」，它只是個「媒介」&lt;ul&gt;
&lt;li&gt;媒介可能是開會，可能是張小紙條，甚至可能是公司的擴音機&lt;/li&gt;
&lt;li&gt;目標： 找到最具「槓桿率」的活動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;經理人的產出 ＝ 組織產出的總和&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;組織產出的總和 ＝ 槓桿率A×管理活動A ＋ 槓桿率B×管理活動B……&lt;/li&gt;
&lt;li&gt;增進經理人的生產力&lt;ol&gt;
&lt;li&gt;加速活動進行的速度&lt;/li&gt;
&lt;li&gt;提高活動的槓桿率&lt;/li&gt;
&lt;li&gt;調整管理活動的組合： 用高槓桿率的活動取代低槓桿率的活動&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;達成高槓桿率&lt;ol&gt;
&lt;li&gt;當經理人可以同時影響很多人 （e.g., 對年度計劃先做仔細的考量）&lt;/li&gt;
&lt;li&gt;當經理人簡單的動作或簡短的話，可以對別人產生長遠的影響&lt;/li&gt;
&lt;li&gt;當經理人所提供的技術、知識或資訊，會對一群人的工作造成影響&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;「負」槓桿率&lt;ul&gt;
&lt;li&gt;舉棋不定: 經理人拖延決策，通常會影響到他人的工作&lt;/li&gt;
&lt;li&gt;上級干涉&lt;ul&gt;
&lt;li&gt;過度參與部屬工作 → 剝奪了部屬實際執行的機會&lt;/li&gt;
&lt;li&gt;用太多技能性的指令（不管是不是真的懂）&lt;ul&gt;
&lt;li&gt;如果發生得太頻繁，下屬會變得不再自己解決問題並轉而求助其上司&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;授權也是槓桿率&lt;ul&gt;
&lt;li&gt;「授權人」和「被授權人」的關係間有一個必要條件： &lt;em&gt;有相同的資訊基礎，而且工作進行和解決問題上一套彼此認同的方法&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;經理人除了告訴部署既成的事實外，經理人還必須告訴部屬他的目標、優先順序以及做事的方式&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;沒有完備監督計畫的授權等於是瀆職&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;即使經理人已經授權，依然得付成敗責任&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;監督原則&lt;ul&gt;
&lt;li&gt;在產品價值最低時便進行監督&lt;ul&gt;
&lt;li&gt;e.g., 若交待部屬寫報告，你應該在他草稿打好之後便拿來看&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;採用不定期抽查&lt;ul&gt;
&lt;li&gt;對不同的部屬進行不同的採樣方法&lt;/li&gt;
&lt;li&gt;抽查的頻率以員工對授權案子的熟悉度而定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;增進管理速度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;增進速度的作法&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;找出限制步驟&lt;/strong&gt; (Bottleneck)&lt;ul&gt;
&lt;li&gt;找出不做哪些事就會沒辦法繼續生產，再將其他活動繞著這些事來規劃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;類似的工作集中做&lt;/li&gt;
&lt;li&gt;管好行事曆&lt;ul&gt;
&lt;li&gt;先排「一定要在某個時間」的事，再排「很重要但時間上較有彈性」的事&lt;/li&gt;
&lt;li&gt;對於超過你工作量所能負荷的事，你必須說「不」！&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;必須安排一些閒置時間&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;如果有不速之客或是非預期的電話，就不會讓一天的行程大亂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立指標&lt;/li&gt;
&lt;li&gt;存貨法&lt;ul&gt;
&lt;li&gt;一個經理人必須要有一些「案子」的存貨&lt;/li&gt;
&lt;li&gt;e.g., 不急著完成的案子，像是用來增進部門長期生產力的方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;標準化&lt;ul&gt;
&lt;li&gt;生產流程一旦設定且經過試驗發現有效後，便不會任意改變&lt;/li&gt;
&lt;li&gt;建立標準化流程的同時，應該繼續找更好的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;應該有多少個部屬？&lt;ul&gt;
&lt;li&gt;根據經驗法則，如果「帶人」是經理人的主要任務，那麼他大約應有六到八個部屬，全職經理人大約在一星期內需要花半天的時間在一個部屬身上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;干擾與突發狀況的解決良方&lt;ul&gt;
&lt;li&gt;設法歸類出常見的問題，並備妥答案 → 更進一步授權給其他下屬來處理&lt;/li&gt;
&lt;li&gt;不緊急的問題留至部門會議或是「一對一」會議一起處理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="4"&gt;第4章：管理的必經之途：開會&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;你絕對無法避免開會，但你可以讓會議更有效率&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="_6"&gt;過程導向會議&lt;/h3&gt;
&lt;p&gt;用「規律化」提升效率： 讓與會者都明白會議運作的方式、需要討論的議題、需要達成的目標&lt;/p&gt;
&lt;h3 id="_7"&gt;一對一會議&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;互通資訊有無以及彼此學習&lt;ul&gt;
&lt;li&gt;上司將其技能以及經驗傳授給下屬，並建議切入問題的方式&lt;/li&gt;
&lt;li&gt;下屬對工作的進度中碰到的問題做回報&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一次「一對一」要開多久?&lt;ul&gt;
&lt;li&gt;看部屬對現正進行任務的熟悉度&lt;/li&gt;
&lt;li&gt;至少必須讓部屬覺得時間足夠到提出一些棘手的問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提升效率&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;兩方都該握有會議綱要，並且都在會議中做筆記&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;在會議中能專心，並消化資訊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;「寫下來」這個動作所象徵的意義&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;當部屬在經理人提出建議後動筆記下，這個動作表示的是一種承諾&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立存檔&lt;ul&gt;
&lt;li&gt;將重要但不太緊急的事項列入，留待下次討論&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;上司應該鼓勵部屬在會議中講些「內心話」&lt;/li&gt;
&lt;li&gt;會議後交換筆記&lt;ul&gt;
&lt;li&gt;彼此了解對方立下的一些行動承諾&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;會議結束前，應該計畫下一次開會的時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;部門會議&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;與會者: 部門主管及其部屬&lt;/li&gt;
&lt;li&gt;討論主題： 任何牽涉到兩個部屬以上的問題&lt;/li&gt;
&lt;li&gt;進行方式&lt;ul&gt;
&lt;li&gt;與會者應該事先知道要討論什麼，並在開會前做好準備&lt;/li&gt;
&lt;li&gt;開始保留一段開放時間，讓大家能談工作上的枝微末節，甚至提出還未成型的提案&lt;/li&gt;
&lt;li&gt;會議的議題應該讓部屬負責，而經理人的責任則是讓會議進行不要離題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;營運檢討會議&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;讓一群不常合作的同事能有互動的機會&lt;/li&gt;
&lt;li&gt;議程設計&lt;ul&gt;
&lt;li&gt;讓與會者有機會向同事介紹工作內容，讓大家更了解公司&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_10"&gt;任務導向會議&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目的： 用來應變，而且必須產生決策&lt;ul&gt;
&lt;li&gt;召開會議前，先問「我有什麼任務要藉這場會議達成？是不是有必要？」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建議人數： 不超過 8 人&lt;/li&gt;
&lt;li&gt;會議記錄&lt;ul&gt;
&lt;li&gt;記錄事項&lt;ul&gt;
&lt;li&gt;該做的事&lt;/li&gt;
&lt;li&gt;誰負責做&lt;/li&gt;
&lt;li&gt;什麼時候做&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;會議一結束就馬上發送會議記錄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「如果經理人花超過 25% 的時間在『應急的任務導向會議』上，這個組織一定有毛病。」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="5"&gt;第5章：不揮舞權杖的決策&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;決策是由離問題最近，最了解問題的人來制定&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;「參與決策的制定過程」是經理人例行工作中非常重要的一環&lt;/li&gt;
&lt;li&gt;理想的決策模式&lt;ol&gt;
&lt;li&gt;自由討論&lt;/li&gt;
&lt;li&gt;清楚的決策： 在討論階段有愈多不同的意見，愈有可能在此階段達成「清楚」的決策&lt;/li&gt;
&lt;li&gt;全員支持： 決策是由離問題最近、而且最了解問題的人來制定&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;同儕團體症候群&lt;ul&gt;
&lt;li&gt;「同儕團體再加一」（peer-plus-one）&lt;ul&gt;
&lt;li&gt;當職位相當的人要開會時，需要有個職位較高的人與會，他不見得最能幹或最具有專業知識，但他能夠掌控會議的進行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;制定決策前，經理人應有以下六項問題的答案&lt;ol&gt;
&lt;li&gt;決策的內容&lt;/li&gt;
&lt;li&gt;決策的時限&lt;/li&gt;
&lt;li&gt;決策人&lt;/li&gt;
&lt;li&gt;在制定決策前應先向誰請益&lt;/li&gt;
&lt;li&gt;誰對此決策一言九鼎，或是能全盤否定&lt;/li&gt;
&lt;li&gt;誰應該在決策制定後被告知&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="6"&gt;第6章：「規劃」是為了明天&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;有什麼事情我如果「今天」做了，可以讓「明天」更好，或者至少讓「明天」不會更糟&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目標管理&lt;ol&gt;
&lt;li&gt;我想要到哪裡？（目標）&lt;/li&gt;
&lt;li&gt;我要如何知道正朝著目標邁進？（該驗收的戰果）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;慎定目標： 目標協助你專注在需要注意的事項，因此目標數不能多&lt;/li&gt;
&lt;li&gt;即使下屬沒能達成所設定的目標，他的績效仍可能被評為卓越&lt;ul&gt;
&lt;li&gt;如果上司只用目標管理來決定下屬的升遷賞罰，以致下屬一心只放在訂好的目標上，錯失了其他可能，不免會見樹不見林&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="10"&gt;第10章：每個人都聽命的三個長官&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;工作上的行為，主要受這三項無形但極具效力的因素控制&lt;ol&gt;
&lt;li&gt;自由市場考量&lt;/li&gt;
&lt;li&gt;契約義務&lt;/li&gt;
&lt;li&gt;文化價值觀&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;經理階層負責發展出組織內共享的價值觀、目標以及行事準則，以建立個體對組織的信賴&lt;/li&gt;
&lt;li&gt;決定哪位長官該出場的兩項變數&lt;ul&gt;
&lt;li&gt;個體關心的是團體或是自身利益？&lt;/li&gt;
&lt;li&gt;個體所處的工作環境本質&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cua"&gt;衡量一個工作環境: CUA指標&lt;/h3&gt;
&lt;p&gt;complexity 複雜性&lt;br/&gt;
uncertainty 不確定性&lt;br/&gt;
ambiguity 指令模糊程度&lt;/p&gt;
&lt;p&gt;&lt;img alt="cua" src="/images/posts-image/2020-high-output-management/cua.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g., 某個剛進公司的新人身上&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;剛開始較關心自身的利益 → 給明確的工作架構，降低複雜性及不確定性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;過了一陣子表現不錯，較有歸屬感 → 晉升到複雜性及不確定性都變高的職位&lt;/li&gt;
&lt;li&gt;因此企業文化較強的公司較傾向於內部擢升&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="11"&gt;第11章：激勵部屬參加比賽&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;先確定部屬仍有需求尚未得到滿足&lt;ul&gt;
&lt;li&gt;基本生理需求、安全感與歸屬感、認同感 → 上班在公司裡露臉&lt;/li&gt;
&lt;li&gt;地位與尊重、自我實現 → 工作上追求更卓越&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目標應該制定在高於一般人的能力，即使非常賣力，可能只有一半的成功機會&lt;ul&gt;
&lt;li&gt;雖然個體可能失敗，但「靶定得遠，箭也射得遠」，實驗證明這種情況的產出大於「一蹴可幾」的目標&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;簡單測試一個人屬於哪個需求層級&lt;ul&gt;
&lt;li&gt;在乎的是薪水調升的絕對值 → 基本需求、安全感&lt;/li&gt;
&lt;li&gt;「相對於別人」調薪幅度是大是小 → 尊重、認同、自我實現&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="12"&gt;第12章：工作相關成熟度&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;部署工作成熟度&lt;/th&gt;
&lt;th&gt;有效地領到風格&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;干涉降至最低，彼此建立工作目標和監督系統&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;注重在個體本身，強調雙向溝通，給予情緒上的支援以及鼓勵&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;提供明確且詳細的指示（做什麼事、何時完成、如何著手）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;不管工作成熟度在哪個階段，經理人都應當隨時且適度地監視部屬的工作，以避免任何突發狀況&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果希望管理風格能夠由組織化進展到旁觀監督，必須先建立起共同的行事準則及決定優先順序&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="13"&gt;第13章：再難也得做：績效評估&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;績效評估&lt;ol&gt;
&lt;li&gt;檢視技能水準： 決定部屬缺少了哪些技能並且設法補足&lt;/li&gt;
&lt;li&gt;加強激勵來源： 讓具備適當技能的人創造出更高的績效&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_11"&gt;決定部屬的績效&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主管得事先搞清楚對部屬的期望&lt;/strong&gt;，再依此判斷部屬績效是否合乎期望&lt;ul&gt;
&lt;li&gt;評估最大的問題大多是經理人並沒有列明對部屬的期望&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;產出評估與流程評估&lt;ul&gt;
&lt;li&gt;產出評估: 黑盒子的產出&lt;/li&gt;
&lt;li&gt;流程評估: 包括黑盒子中所有的活動&lt;ul&gt;
&lt;li&gt;有些活動產出可能在年度內，有些則可能是為未來鋪路&lt;/li&gt;
&lt;li&gt;避免達成目前的生產目標，而對未來造成傷害&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;遠程及近程績效&lt;ul&gt;
&lt;li&gt;這件遠程活動最後能幫我們賺進多少錢？然後將此換算成現值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;產出與時間的因素&lt;/li&gt;
&lt;li&gt;個人、部門兩者兼顧&lt;/li&gt;
&lt;li&gt;避免落入潛力陷阱&lt;ul&gt;
&lt;li&gt;評估績效而非部屬的潛力（這裡的「潛力」指只有形式而沒有實質的事）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_12"&gt;告知績效&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;三L原則&lt;ul&gt;
&lt;li&gt;坦誠 (level)&lt;/li&gt;
&lt;li&gt;傾聽 (listen)&lt;ul&gt;
&lt;li&gt;動用所有的感官確保部屬真正了解你的意思&lt;ul&gt;
&lt;li&gt;沒做到這點，所有的績效評估就都是浪費時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每個好老師都個共通點： 他們知道學生到底懂不懂他在講什麼&lt;ul&gt;
&lt;li&gt;如果學生不懂，他會再逐步解釋，或者換個角度舉個例子&lt;/li&gt;
&lt;li&gt;我們都曾經碰過只對著黑板自言自語的教授，而且他們常能很有技巧地躲避學生的眼光&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;忘了你自己 (leave yourself out)&lt;ul&gt;
&lt;li&gt;擺開你的不安全感、焦慮以及罪惡感&lt;/li&gt;
&lt;li&gt;你要處理的是部屬的問題而不是你自己，這是部屬「上法庭」的時候呢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正反兩面俱陳&lt;ul&gt;
&lt;li&gt;「多」並不就代表「好」&lt;/li&gt;
&lt;li&gt;整理資訊&lt;ul&gt;
&lt;li&gt;資訊來源&lt;ul&gt;
&lt;li&gt;進度達成率&lt;/li&gt;
&lt;li&gt;每季目標達成率&lt;/li&gt;
&lt;li&gt;一對一會議的筆記&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;找出資料之間的的關係&lt;ul&gt;
&lt;li&gt;也許有些項目是「同一個問題以不同面貌呈現」&lt;/li&gt;
&lt;li&gt;也許能歸納出部屬弱點或是長處的指標&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_13"&gt;衝突性評估&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;解決問題的不同階段&lt;ul&gt;
&lt;li&gt;從怪罪別人到擔負責任 →「心理上的障礙」&lt;/li&gt;
&lt;li&gt;由擔負責任到尋找解決方案 → 「能力智識能解決」（較容易解決）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;只要部屬願意採取行動改進就「可以接受」，人在複雜的事情上很難有相同的意見&lt;ul&gt;
&lt;li&gt;為了完成任務，你最需要的是部屬願意採行你決定的行動方案，至於他同不同意與你抱持同樣的想法則是其次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;評估明日巨星&lt;ul&gt;
&lt;li&gt;常會發生的狀況&lt;ul&gt;
&lt;li&gt;努力找明日之星做得好的證據，而不是如何增進績效；對表現不佳的部屬，則能寫出很多改進方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們是把優先順序完全弄反了！&lt;ul&gt;
&lt;li&gt;在明日巨星身上多花點心力才會得到較高的管理槓桿率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="14"&gt;第14章：找人與留人&lt;/h2&gt;
&lt;h3 id="_14"&gt;找人&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提出問題以收集資訊&lt;ul&gt;
&lt;li&gt;職能智識&lt;ul&gt;
&lt;li&gt;描述曾經負責而上司很滿意的案子，特別是直屬主管的上司也滿意的&lt;/li&gt;
&lt;li&gt;弱點或短處為何？如何改進？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;運用職能的能力&lt;ul&gt;
&lt;li&gt;過往有那些成就？&lt;/li&gt;
&lt;li&gt;遭受過什麼失敗或挫折？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;知與用之間的差異&lt;ul&gt;
&lt;li&gt;從以前的失敗中學過什麼教訓？&lt;/li&gt;
&lt;li&gt;目前職務上碰到哪些問題？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工作價值觀&lt;ul&gt;
&lt;li&gt;為什麼覺得能勝任工作？&lt;/li&gt;
&lt;li&gt;為什麼應該錄用你？&lt;/li&gt;
&lt;li&gt;為什麼應該用有工程背景的人擔任行銷職務？(隨招募內容改變問題)&lt;/li&gt;
&lt;li&gt;大學時修過最重要的課與專案計畫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;降低徵才的風險&lt;ul&gt;
&lt;li&gt;假設性問題&lt;/li&gt;
&lt;li&gt;讓應徵者發問&lt;/li&gt;
&lt;li&gt;詢問關係人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;無論你再如何小心謹慎，面試也無法保證些什麼，它唯一能做的只是增加你的運氣&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_15"&gt;留才大作戰&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;馬上放下手上的事情，請他到辦公室坐下來談，問他為什麼要辭職，讓他暢所欲言，千萬不要起任何爭辯&lt;/li&gt;
&lt;li&gt;爭取時間，而不是想馬上變對方的想法&lt;ul&gt;
&lt;li&gt;在他吐完了苦水後，問他能否給你一些時間想想&lt;/li&gt;
&lt;li&gt;利用這些時間，你必須準備下一回合，並且做到在第一回合時承諾的事項&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="15"&gt;第15章：報酬的誘惑&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;回饋的多種考量&lt;ul&gt;
&lt;li&gt;發放績效獎金必須在時間上&lt;em&gt;盡量接近工作完成&lt;/em&gt;之時 → 記得為何受到獎勵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;關於升遷&lt;ul&gt;
&lt;li&gt;彼得原理 (Peter's Principle): 當一個人做好工作，他受到上司提拔，一直往上爬直到無法勝任，他便停在那個位置上&lt;/li&gt;
&lt;li&gt;別怕再回收&lt;ul&gt;
&lt;li&gt;「再回收」： 放回之前他表現優異的工作上&lt;ul&gt;
&lt;li&gt;一個人可能被晉升到超出他能力太多的職位，因此有很長的時間他都達不到及格邊緣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Peter's Principle" src="/images/posts-image/2020-high-output-management/peter's principle.png"/&gt;&lt;/p&gt;
&lt;h2 id="16"&gt;第16章：別等火燒眉毛才訓練&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;經理人應該扛起訓練員工的責任 → 部門產出即經理人產出&lt;ol&gt;
&lt;li&gt;增進工作的動力，使他們盡力把工作做好&lt;/li&gt;
&lt;li&gt;增進部屬的工作能力&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Management"></category></entry><entry><title>COSCUP 2020 / SITCON 2020</title><link href="https://lee-w.github.io/posts/tech/2020/08/coscup-2020-sitcon-2020" rel="alternate"></link><published>2020-08-21T15:21:00+08:00</published><updated>2020-08-21T15:21:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-08-21:/posts/tech/2020/08/coscup-2020-sitcon-2020</id><summary type="html">&lt;p&gt;因為這次 COSCUP 跟 SITCON 只隔了一週，就順手寫在一起了&lt;/p&gt;
</summary><content type="html">&lt;p&gt;因為這次 COSCUP 跟 SITCON 只隔了一週，就順手寫在一起了&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;img alt="vip" src="/images/posts-image/2020-coscup-2020-sitcon-2020/vip.jpg"/&gt;&lt;/p&gt;

&lt;h2 id="coscup-2020"&gt;COSCUP 2020&lt;/h2&gt;
&lt;p&gt;看了今年的議程表才發現很多 Python 的議程，而且還跟 PyCon TW 稿件的重複性很高（笑&lt;br/&gt;
早知道今年就該來投一下 COSCUP&lt;/p&gt;
&lt;p&gt;不得不說，在全世界都受疫情所苦，實體研討會紛紛取消&lt;br/&gt;
能舉辦一場累計 2800 人次的會議，真的是很厲害 😲😲😲&lt;/p&gt;
&lt;p&gt;&lt;img alt="2800" src="/images/posts-image/2020-coscup-2020-sitcon-2020/2800.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;前夜派對&lt;/h3&gt;
&lt;p&gt;去年收到前夜派對的訊息時，票早就已經賣光了 😢&lt;br/&gt;
今年除了把大會的售票亭拆掉，前夜派對的也一起拆了&lt;br/&gt;
憑著健康申明書就能入場&lt;/p&gt;
&lt;p&gt;再來之前，好像跟誰聊到天，就會問要不要來喝酒&lt;br/&gt;
不小心就揪了不少人來&lt;br/&gt;
主要的時間都在跟老朋友聚，沒認識到太多的新朋友&lt;br/&gt;
但也還是玩的蠻開心的&lt;/p&gt;
&lt;h3 id="_2"&gt;演講&lt;/h3&gt;
&lt;p&gt;今年就真的是佛係聽講&lt;br/&gt;
因為也沒特別提早去搶位置，大家都搶著去的演講&lt;br/&gt;
我都是走到門口才看到排不進去了 XDD&lt;/p&gt;
&lt;p&gt;COSCUP 的主題相對算是廣泛&lt;br/&gt;
大概有一半都是跟我不太有關，我可能也不感興趣的&lt;br/&gt;
技術深度太深的，可能是我連基礎都沒碰過的東西，去聽也聽不懂&lt;br/&gt;
較為基礎的技術，也會讓我覺得好像回去看個文件就夠了&lt;br/&gt;
所以我比較傾向去聽軟性議題（e.g., &lt;a href="https://hackmd.io/@joeangeltw/HybA7gGgD#/"&gt;溝通的藝術，專案經理與工程師的二三事&lt;/a&gt;) 或是技術如何被應用到不那麼常見的領域（聽不懂細節沒關係，只是想知道講者者思考的方式）&lt;/p&gt;
&lt;p&gt;倒是 COSCUP 幾乎每場演講都「像極了愛情」...&lt;/p&gt;
&lt;h3 id="bof"&gt;BoF&lt;/h3&gt;
&lt;p&gt;想說都要來 COSCUP ，就接受推坑來主持一個 BoF&lt;br/&gt;
反正大概跟 Open Space 一樣...吧？&lt;br/&gt;
來的人數還算是不少（2/3 是 PyCon TW 老朋友， 1/3 的新朋友）&lt;br/&gt;
原本想說既然 PyCon TW 2020 辦在台南，我們就來聊聊要去台南吃什麼美食吧（？&lt;br/&gt;
但沒有好好規劃的結果，就是一陣尷尬 XDDD&lt;/p&gt;
&lt;p&gt;如果以「討論要吃什麼台南美食」作為成功與否的指標的話，應該是蠻失敗的 XD&lt;br/&gt;
但以「連結對 Python 有興趣的人」為指標的話，倒是蠻成功的&lt;br/&gt;
連結到一些 PyCon TW 老朋友，也招募到幾位有淺力，合作愉快的夥伴 🤩&lt;/p&gt;
&lt;h3 id="lightning-talk"&gt;閃電秀（Lightning Talk）&lt;/h3&gt;
&lt;p&gt;最近參加的會議，我都會順手投個閃電秀推廣一下 &lt;a href="https://github.com/commitizen-tools"&gt;commitizen-tools&lt;/a&gt;&lt;br/&gt;
但到了第二天被通知有抽到的時候，我才想起來前一天有投...&lt;br/&gt;
所以我轉接頭沒帶，投影片也還沒做（雖然閃電秀半小時前做應該也還好）&lt;br/&gt;
還好不是現場抽上台的那種，不然就太刺激了 XD&lt;/p&gt;
&lt;p&gt;比起之前在 EuroPython 2020 即興的閃電秀，果然用自己的母語還是有差&lt;br/&gt;
大致上，我的閃電秀得到的回饋還算熱烈（？）&lt;br/&gt;
像是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;真的沒在寫 js， Java Script...&lt;/li&gt;
&lt;li&gt;COSCUP 全大寫啊啊&lt;/li&gt;
&lt;li&gt;中文的 git 好不習慣XD&lt;/li&gt;
&lt;li&gt;根提交...&lt;/li&gt;
&lt;li&gt;啊 打錯了&lt;/li&gt;
&lt;li&gt;哎呀 怎麼會沒有時間了呢&lt;/li&gt;
&lt;li&gt;「先要買，再考慮好..」&lt;br/&gt;
  - Pycon 2017&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其實我也很不習慣中文的 git ，但要改他實在有點麻煩 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="java script" src="/images/posts-image/2020-coscup-2020-sitcon-2020/java script.jpg"/&gt;&lt;br/&gt;
&lt;img alt="no space inside javascript" src="/images/posts-image/2020-coscup-2020-sitcon-2020/no space inside javascript.jpg"/&gt;&lt;br/&gt;
&lt;img alt="upper case coscup" src="/images/posts-image/2020-coscup-2020-sitcon-2020/upper case coscup.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;啊，然後附上我的&lt;a href="https://speakerdeck.com/leew/coscup-2020-lightning-talk"&gt;閃電秀投影片&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="sitcon-2020"&gt;SITCON 2020&lt;/h2&gt;
&lt;p&gt;當初會想來 SITCON 就只是想支持 Pochun / Rain Wu 的演講&lt;br/&gt;
雖然 Pochun 跟去年的我都是在講 X-Village 相關的東西&lt;br/&gt;
他講的就是比我精彩很多，座無虛席啊&lt;br/&gt;
明顯看得出準備的用心程度就是不同 XD&lt;/p&gt;
&lt;p&gt;除此之外，還想聽聽「臉書資料探勘－鯉魚教の教主崇拜分析」&lt;br/&gt;
但不小心在攤位聊得太開心，只趕上感謝教主&lt;br/&gt;
&lt;img alt="liyu" src="/images/posts-image/2020-coscup-2020-sitcon-2020/liyu.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;最不友善贊助商&lt;/h3&gt;
&lt;p&gt;今年其實我是以贊助商（社群？）的身份來的&lt;br/&gt;
除了回饋學生社群外，還有一個很大的目的是招募對 PyCon TW 有興趣的夥伴&lt;br/&gt;
但今年因為疫情從三月延期到八月&lt;br/&gt;
對離大會只剩一個月的我們來說，其實是有點晚了&lt;br/&gt;
所以我們就修改了這次的攤位方針&lt;br/&gt;
只針對主動對 Python / PyCon TW 有興趣的人講解，沒有的話就直接掃 QR Code&lt;br/&gt;
雙方都不浪費彼此的時間，仔細想想其實真的蠻不錯的 😆&lt;/p&gt;
&lt;h3 id="lightning-talks"&gt;&lt;del&gt;道歉大會&lt;/del&gt; 閃電秀（Lightning Talks）&lt;/h3&gt;
&lt;p&gt;如同前面所提到的， COSCUP 的閃電秀中，我犯了很多的錯誤&lt;br/&gt;
身為一個負責任的人，必須要為自己錯誤的行為道歉&lt;br/&gt;
所以只好在 SITCON 公開道歉了（？？？）&lt;/p&gt;
&lt;p&gt;影片很快就出來了，所以想看我道歉的可以直接看&lt;a href="https://www.youtube.com/watch?v=M36UlGbO-mE&amp;amp;feature=youtu.be&amp;amp;t=454"&gt;道歉大會影片&lt;/a&gt;（到底是誰會想看這種東西？？？）&lt;br/&gt;
順便附上&lt;a href="https://speakerdeck.com/leew/sitcon-2020-ligthning-talk"&gt;投影片&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;倒是會後有聽到也在 SITCON 幫忙的夥伴說，在閃電秀中，大家對我的最有印象...&lt;/p&gt;
&lt;p&gt;這兩場閃電秀，我大致上的分配是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;讓人覺得有趣的點 → 像極了愛情（並沒有）、道歉大會&lt;/li&gt;
&lt;li&gt;想要傳達的知識 → commitizen-tools 很好用&lt;/li&gt;
&lt;li&gt;想要業配的訊息 → PyCon TW 售票&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在我撰寫這段文字的時候 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen-tools&lt;/a&gt;，比起 COSCUP 前已經增加了 42 個 star&lt;br/&gt;
看來這個行銷策略很成功呢（？&lt;/p&gt;
&lt;p&gt;哦對了，如果看到這邊的你還沒買 PyCon TW 2020 的票&lt;br/&gt;
就快點買票吧 👉 &lt;a href="https://pycontw.kktix.cc/events/20200905-individual"&gt;PyCon Taiwan 2020 Registration&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="COSCUP"></category><category term="SITCON"></category></entry><entry><title>EuroPython 2020</title><link href="https://lee-w.github.io/posts/tech/2020/08/europython-2020" rel="alternate"></link><published>2020-08-06T15:15:00+08:00</published><updated>2020-08-06T15:15:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-08-06:/posts/tech/2020/08/europython-2020</id><summary type="html">&lt;p&gt;好不容易投稿上了 EuroPython&lt;br/&gt;
原本打算順便去愛爾蘭的 Skellig Michael&lt;br/&gt;
疫情一來就全都去不成了 😭&lt;/p&gt;
</summary><content type="html">&lt;p&gt;好不容易投稿上了 EuroPython&lt;br/&gt;
原本打算順便去愛爾蘭的 Skellig Michael&lt;br/&gt;
疫情一來就全都去不成了 😭&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;前言雜談&lt;/h2&gt;
&lt;p&gt;EuroPython 2020 在 3 月底的時候公佈轉成線上會議&lt;br/&gt;
比起 PyCon US，場地跟其他費用都還沒有支出，算是蠻幸運的&lt;br/&gt;
倒是今年線上會議要收票的問題，聽說在 Telegram 群組有一番爭論&lt;br/&gt;
一張一般票 EUR 95.00 的確不算很便宜&lt;br/&gt;
不過講者票今年不用錢就是了 XD&lt;/p&gt;
&lt;p&gt;今年有來自 69 個國家的會眾參與，比起 2019 多了 40 個國家&lt;br/&gt;
雖然大家抱怨歸抱怨，最後好像還是有 1000 人以上買票啊 XDDDD&lt;/p&gt;
&lt;p&gt;線上會議跟真人會議的體驗上會有差是無法避免&lt;br/&gt;
但我覺得已經算是盡可能把實體會議的一切搬到線上了&lt;br/&gt;
能在這麼短的時間內，完成那麼多規劃真的蠻厲害的&lt;br/&gt;
最棒的一點是，留了很多文件給大家參考 🤩
* &lt;a href="https://docs.google.com/document/d/1OAVtZnxVgmkDGvSV1vEzra7m5Nfjr-81kCrustzxAek/edit#"&gt;EuroPython 2020 Online Conference Tools&lt;/a&gt;
* &lt;a href="https://docs.google.com/document/d/1hno9PgvEViHBkmCXP6BkpAsL8-mTpm6Sb8S6A8lwVPs/edit#heading=h.b0yozxqx8i03"&gt;EuroPython 2020 Speaker Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以往 EuroPython 的演講影片都會公開，並放到 &lt;a href="https://pyvideo.org/"&gt;PyVideo&lt;/a&gt; 上&lt;br/&gt;
我原本蠻好奇今年打算怎麼在收費和不收費的會眾做出區別&lt;br/&gt;
畢竟以往購票參與會議一個很大的價值是跟其他的與會者互動&lt;br/&gt;
今年的互動雖然用 Discord 來彌補，但還是會打一些折扣&lt;/p&gt;
&lt;p&gt;最後的作法是會先還沒剪的影片傳到私有的 Youtube 頻道供購票會眾觀看，但兩週後就會公開&lt;br/&gt;
幾週後弄完就把修剪版放上去&lt;/p&gt;
&lt;p&gt;整體參加下來我覺得是很成功的線上會議，我也很享受跟會眾的線上互動&lt;br/&gt;
雖然少了實體的互動是可惜了點，但降低參與成本讓更多還自不同地區的人能一起來共襄盛舉&lt;br/&gt;
現在也還說不準預期疫情到底什麼時候會結束，不知道線上會議會不會是一個新的標準&lt;br/&gt;
又或者之後可以嘗試一下實體/虛擬混合的會議？&lt;/p&gt;
&lt;h2 id="discord"&gt;Discord 互動設計&lt;/h2&gt;
&lt;p&gt;EuroPython 設計了很完整的架構，讓會眾可以更快速的找到各個資訊在 Discord 的哪裡&lt;/p&gt;
&lt;h3 id="lobby"&gt;Lobby&lt;/h3&gt;
&lt;p&gt;&lt;img alt="lobby" src="/images/posts-image/2020-07-28-euro-python-2020/lobby.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Lobby 的 Channel Category 主要是註冊用跟大會公告&lt;br/&gt;
進到 &lt;code&gt;info-desk&lt;/code&gt; 輸入自己的票務資訊後，就會有機器人自動設定正確的權限&lt;br/&gt;
而且這個機器人也有開源 👉 &lt;a href="https://github.com/EuroPython/ep-regbot"&gt;ep-regbot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hallway&lt;/code&gt; 可以想像成大會的走廊，就是讓會眾隨意聊天的地方&lt;br/&gt;
好像有人問有沒有人要在 after party 的時段直播表演樂器&lt;br/&gt;
有點像是 PyCon TW 的 PyNight&lt;br/&gt;
但 after party 的時間，在台灣的凌晨，我就沒有參加到了&lt;/p&gt;
&lt;h3 id="conference-tracks"&gt;Conference Tracks&lt;/h3&gt;
&lt;p&gt;&lt;img alt="conference tracks" src="/images/posts-image/2020-07-28-euro-python-2020/conference-track.png"/&gt;&lt;/p&gt;
&lt;p&gt;註冊後最重要的是 Conference Tracks 這個 Channel Category&lt;br/&gt;
microsoft / brain/ ni /parrot 可以看成 PyCon TW 的 r0 / r1 /r2，總之就是不同的 track&lt;br/&gt;
除了 track 都有自己的討論頻道外，每個 track 還會有一個 &lt;code&gt;.*-peek&lt;/code&gt; 的頻道&lt;br/&gt;
機器人會截圖 track 中現在 Zoom 的畫面&lt;br/&gt;
供會眾參考要不要連進去現在的 Zoom 或是看 Youtube&lt;br/&gt;
我覺得這個功能真的超酷 XDD&lt;/p&gt;
&lt;p&gt;另外，每個 Track 都會有自己的 Channel Category&lt;br/&gt;
裡面會有每一個講者的頻道&lt;br/&gt;
身為講者，我覺得有一個自己的頻道可以繼續跟會眾互動真的蠻棒的 💯&lt;br/&gt;
還有兩個頻道是給 Open Space 用的，這次好像不算特別熱絡&lt;br/&gt;
一天大概只有兩、三場&lt;/p&gt;
&lt;h3 id="sponsor-exhibit"&gt;Sponsor Exhibit&lt;/h3&gt;
&lt;p&gt;&lt;img alt="sponsor exhibit" src="/images/posts-image/2020-07-28-euro-python-2020/sponsor.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;贊助商也會有各自的頻道&lt;br/&gt;
也會有各自的 Zoom ，可以跟跟會眾互動&lt;br/&gt;
我有稍微路過一下，但沒參與太多就跑去參加下一個演講了&lt;/p&gt;
&lt;p&gt;另外，在每一場演講的間隔，會播放贊助商的廣告影片&lt;br/&gt;
我覺得效果蠻不錯的&lt;br/&gt;
畢竟就是在等下一場演講，好像就還是得看完 XD&lt;/p&gt;
&lt;h3 id="attendee-rooms"&gt;Attendee Rooms&lt;/h3&gt;
&lt;p&gt;&lt;img alt="attendee rooms" src="/images/posts-image/2020-07-28-euro-python-2020/attendee-rooms.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;會眾有一整個 Channel Category&lt;br/&gt;
好像可以自己創主題式的討論&lt;br/&gt;
但這部分我就真的沒什麼參與到了&lt;/p&gt;
&lt;h3 id="backstage"&gt;Backstage&lt;/h3&gt;
&lt;p&gt;&lt;img alt="backstage" src="/images/posts-image/2020-07-28-euro-python-2020/speaker-backstage.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;講者後台的設計就真的有點複雜&lt;br/&gt;
在線上會議會遇到的一個問題是「怎麼提醒講者時間快到了」，直接在演講中打斷講者好像不太適合&lt;br/&gt;
他們的作法是講者會在演講開始前 15 分鐘加入 &lt;code&gt;.*-greenroom&lt;/code&gt;，讓 session manager 確定講者已經抵達&lt;br/&gt;
接著， session manager 會讓講者加入 Zoom 跟 &lt;code&gt;.*-talkback&lt;/code&gt;&lt;br/&gt;
用 Zoom 讓講者做演講並跟主持人做互動&lt;br/&gt;
session manager 則是透過 &lt;code&gt;.*-talkback&lt;/code&gt; 跟講者說剩下的時間&lt;/p&gt;
&lt;p&gt;在線上會議也有講者準備/休息室（greenroom）的概念真的蠻有趣的 XD&lt;/p&gt;
&lt;h2 id="_2"&gt;會期&lt;/h2&gt;
&lt;h3 id="day-1"&gt;Day 1&lt;/h3&gt;
&lt;p&gt;第一天開始時因為技術問題卡了十幾分鐘&lt;br/&gt;
倒是有會眾開始詢問，有沒有人有 vga-to-hdmi 轉接線&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's just like being there in person - "does someone have the correct vga-to-hdmi adaptor?" 🙂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;EuroPython 就連實體會議找不到轉接線都模擬了（誤&lt;br/&gt;
大家都在等有沒有會眾剛好有帶 HDMI 線現場救援（？？？&lt;br/&gt;
有跟上這段討論真的超有趣 😆&lt;/p&gt;
&lt;p&gt;開場結束後，馬上又遇到下一個問題&lt;br/&gt;
連接線找到了，但找不到講者 😱&lt;br/&gt;
第一場 Keynote Speaker 就直接 no show 了，真的有點尷尬 @@&lt;/p&gt;
&lt;p&gt;因為時差的關係，大概會有三分之一的演講完全沒機會聽到&lt;br/&gt;
晚上我又另外有事，第一天沒聽到什麼演講&lt;br/&gt;
這兩場是我還有時間做筆記覺得也蠻不錯的演講&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/europython-2020/2020/07/clean-architectures-in-python/"&gt;Clean Architectures in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/europython-2020/2020/07/practical-optimisations-for-pandas/"&gt;Practical Optimisations for Pandas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我超佩服 @ongchinhwee&lt;br/&gt;
她每個研討會都能在 twitter 上做超多超快的筆記&lt;br/&gt;
今年她在 PyCon Taiwan 演講完，要好好跟她請教怎麼辦到的 XD&lt;/p&gt;
&lt;h3 id="day-2"&gt;Day 2&lt;/h3&gt;
&lt;h4&gt;Community-oriented conference status during COVID-19&lt;/h4&gt;
&lt;p&gt;Noah 分享了亞太地區 PyCon 的近況&lt;br/&gt;
台灣是亞太地區唯一能辦實體 PyCon&lt;br/&gt;
搞不好有機會是 2020 疫情開始後，唯一一場能辦實體的 PyCon&lt;/p&gt;
&lt;h4&gt;How to Avoid Becoming a 10x Engineer&lt;/h4&gt;
&lt;p&gt;這場演講頻道的討論超熱鬧&lt;br/&gt;
看來大家應該都遇過了 10x Engineer&lt;br/&gt;
寫 code 是一般人的時倍快，製造的 bug 是十倍快&lt;/p&gt;
&lt;h4&gt;Live-coding a music synthesizer&lt;/h4&gt;
&lt;p&gt;原本應該要去聽 Advanced Infrastructure Management in Kubernetes using Python&lt;br/&gt;
但這場從 &lt;code&gt;ni-peek&lt;/code&gt; 看到的截圖實在太有趣了，就來看 Ram Rachum 如何現場完成合音器&lt;/p&gt;
&lt;p&gt;&lt;img alt="music" src="/images/posts-image/2020-07-28-euro-python-2020/music.png"/&gt;&lt;/p&gt;
&lt;h4&gt;Python Table Manners: Cut the Cookie Gracefully&lt;/h4&gt;
&lt;p&gt;這場是我自己的演講 XD&lt;br/&gt;
雖然講過幾次了，而且又是線上的&lt;br/&gt;
但老實說還是稍微會有點緊張&lt;/p&gt;
&lt;p&gt;不過在我的頻道中，討論算是還蠻熱烈的&lt;br/&gt;
也被問了蠻多問題的&lt;br/&gt;
其中一個問題是「為什麼要使用 invoke ，而不用可以跟 poetry 整合的 &lt;a href="https://github.com/illBeRoy/taskipy"&gt;taskipy&lt;/a&gt;」&lt;br/&gt;
恩...&lt;br/&gt;
就只是單純因為我不知道有這個東西 XD&lt;/p&gt;
&lt;p&gt;就會眾的反應來看，大致上這場演講是成功的&lt;br/&gt;
一開始構思這場演講的時候，也會擔心內容會不會不夠深入&lt;br/&gt;
但介紹了這麼多工具，總會有一兩個是會眾不知道吧！&lt;br/&gt;
不然帶走我的 &lt;a href="https://github.com/Lee-W/cookiecutter-python-template"&gt;cookiecutter template&lt;/a&gt; 還是能省下一些重造輪子的時間&lt;/p&gt;
&lt;h3 id="running-europython-2020-as-an-online-conference"&gt;Running EuroPython 2020 as an online conference&lt;/h3&gt;
&lt;p&gt;這場演講外，大會主席還給了 &lt;strong&gt;EuroPython 2021: Help us build the next edition!&lt;/strong&gt; 的演講&lt;br/&gt;
除了講今年線上會議遇到的困難，還招募了明年有意願來籌備會議的會眾&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ep2020.europython.eu/media/conference/slides/7tiTuRY-running-europython-2020-as-an-online-conference.pdf"&gt;slide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中有提到為什麼 2020 還是要收錢&lt;br/&gt;
因為如果今年不收錢了，以後如果突然要收錢就會變得很困難&lt;br/&gt;
大概就跟調降健保費就漲不回去的概念是一樣的&lt;br/&gt;
對於一個組織跟研討會的存續其實是不好的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you can handle free, that's fine, I still believe that the free for all is going in the wrong direction. It's likely that we will stay in this situation for a longer while and unless you plan for it longer term, running free events is going to create too much loss for the orgs behind the conference to stay alive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外，還有一個問題很有趣&lt;br/&gt;
如果開啟 Zoom 會議的主持人電腦當機怎麼辦？&lt;br/&gt;
這時候會不會講者的演講就突然中斷了&lt;br/&gt;
這還真的是我完全沒想過的問題&lt;br/&gt;
他們的解法是直接用雲端服務開 VM 來開 Zoom 的會議避免掉這樣的問題&lt;/p&gt;
&lt;h4&gt;Making Pandas Fly&lt;/h4&gt;
&lt;p&gt;講者 Ian Ozsvald 同時也是 High Performance Python 的作者&lt;br/&gt;
這場主要談如何讓 Pandas 更有效率，大多都是蠻泛用的技巧，算是蠻有收穫的&lt;br/&gt;
筆記我放在 &lt;a href="https://lee-w.github.io/pycon-note/posts/europython-2020/2020/07/making-pandas-fly/"&gt;Making Pandas Fly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果覺得這場演講對你有幫助，可以寄明信片給 Ian&lt;br/&gt;
Ian 很喜歡收明信片 XD&lt;/p&gt;
&lt;h4&gt;Lightning Talk&lt;/h4&gt;
&lt;p&gt;除了演講外，我也報名了 Lightning Talk&lt;br/&gt;
在一天開始的某一個時段，開放一個 Google Sheet 讓大家填，先搶先贏&lt;/p&gt;
&lt;p&gt;我的內容當然是繼續宣傳 &lt;a href="https://github.com/commitizen-tools"&gt;commitizen-tools&lt;/a&gt; XD&lt;br/&gt;
不過用英文演講又要 Live Demo 果然還是需要準備一下&lt;br/&gt;
即興上場還是會有點卡&lt;/p&gt;
&lt;h4&gt;Guido van Rossum Q&amp;amp;A&lt;/h4&gt;
&lt;p&gt;&lt;img alt="guido" src="/images/posts-image/2020-07-28-euro-python-2020/guido.png"/&gt;&lt;/p&gt;
&lt;p&gt;Guido 的訪談算是第二天的重頭戲，稍微紀錄一下我比較有印象的內容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python will always be dynamic language. Type needs to be optional.&lt;/li&gt;
&lt;li&gt;對於新進的軟體工程師，推薦可以看 &lt;a href="http://neopythonic.blogspot.com/2016/04/kings-day-speech.html"&gt;King's Day Speech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Q: 你能想到你最不喜歡 Python 哪嗎?&lt;ul&gt;
&lt;li&gt;A: 目前沒想法，抱歉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="developments-sprint"&gt;Developments Sprint&lt;/h3&gt;
&lt;p&gt;報名的方式很容易，只要到 &lt;a href="https://wiki.python.org/moin/EuroPython2020/Sprints"&gt;EuroPython 2020 Sprints&lt;/a&gt; 上面自己改文件就好&lt;br/&gt;
順帶一提，今年 PyCon TW 的 Sprint 也是採用相似的形式 👉 &lt;a href="https://hackmd.io/w5hh0hUNQr65k4ayG2128Q?view"&gt;PyCon TW 2020 衝刺開發 Development Sprints&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一天的開始會請各個專案的主辦人介紹自己的專案是什麼&lt;br/&gt;
除了專案以外，還有人帶初學者 session ，讓第一次參加的人可以更容易進入狀況&lt;br/&gt;
算是蠻好的設計，也許我們可以來學一下 🤔&lt;/p&gt;
&lt;p&gt;&lt;img alt="sprint" src="/images/posts-image/2020-07-28-euro-python-2020/sprint.jpeg"/&gt;&lt;/p&gt;
&lt;p&gt;今年線上的 Sprint 好像沒有很多人參與&lt;br/&gt;
也可能是 commitizen 的 Sprint 真的太邊緣了.....&lt;br/&gt;
從頭到尾就只有我跟作者 Santi 兩個人在寫&lt;br/&gt;
中間會有人突然跳進來，但他們都一語不發就又跳出去了 0.0&lt;/p&gt;
&lt;p&gt;雖然我們邊緣，我們還是解決了超多 issue！&lt;br/&gt;
這兩天把 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 1/3 的 open issue 解掉&lt;br/&gt;
而且釋出 2.0&lt;br/&gt;
邊緣歸邊緣，我們還是很有產出的！&lt;br/&gt;
&lt;img alt="commitizen result" src="/images/posts-image/2020-07-28-euro-python-2020/commitizen result.png"/&gt;&lt;/p&gt;
&lt;p&gt;Sprint 的中間還有個有趣的小插曲&lt;br/&gt;
因為大家很好奇怎麼做 &lt;a href="https://zh.wikipedia.org/wiki/%E7%91%AA%E9%BB%9B%E8%8C%B6"&gt;mate&lt;/a&gt;&lt;br/&gt;
第二天的晚上，就突然開了一個做瑪黛茶的 Open Space XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="mate annonucement" src="/images/posts-image/2020-07-28-euro-python-2020/mate annonucement.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="mate open space" src="/images/posts-image/2020-07-28-euro-python-2020/mate open space.png"/&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="PyCon"></category></entry><entry><title>[Book] 一週工作四小時</title><link href="https://lee-w.github.io/posts/book/2020/07/escape-9-5-live-anywhere-and-join-the-new-rich" rel="alternate"></link><published>2020-07-06T10:47:00+08:00</published><updated>2020-07-06T10:47:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-07-06:/posts/book/2020/07/escape-9-5-live-anywhere-and-join-the-new-rich</id><summary type="html">&lt;p&gt;隔了半年終於又看完一本新書...&lt;br/&gt;
看書速度實在有點慢&lt;/p&gt;
&lt;p&gt;&lt;img alt="escape-9-5-live-anywhere-and-join-the-new-rich" src="/images/books/escape-9-5-live-anywhere-and-join-the-new-rich.jpeg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;隔了半年終於又看完一本新書...&lt;br/&gt;
看書速度實在有點慢&lt;/p&gt;
&lt;p&gt;&lt;img alt="escape-9-5-live-anywhere-and-join-the-new-rich" src="/images/books/escape-9-5-live-anywhere-and-join-the-new-rich.jpeg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;這本書很重要的一個思想是「你如何衡量你的人生」&lt;br/&gt;
高工時高薪資和稍微低一點的薪資但自由，怎樣的人才是更加富有的？&lt;br/&gt;
你如何把時間放在重要的事情上，放下低產出的事&lt;br/&gt;
雖然你的總產出看似降低了，但這個決策給了你更多的自由&lt;/p&gt;
&lt;p&gt;它提到的部分嘗試都需要不少勇氣來能做到&lt;br/&gt;
但我覺得先看過，知道有人是這樣思考的，倒也沒什麼不好&lt;br/&gt;
我看完會馬上想來試試的是減少收電子郵件的頻率 XD&lt;/p&gt;

&lt;h2 id="1-definition"&gt;1. Definition 定義人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每週工作八十小時、年薪五十萬美金的投資銀行家，相較於工時僅有銀行家四分之、年薪四萬美金的新富族員工，其實是更沒力量的，因為新富族能自由掌控何時、在哪、如何生活&lt;/li&gt;
&lt;li&gt;本書的基本原則&lt;ol&gt;
&lt;li&gt;退休是為防後患的保險&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;興趣與精力都是週期性的&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;穿插工作與休息是生存的必需條件 → 迷你退休 （e.g., 每工作兩個月後，就到海外換個環境待一個月）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;做得少不代表偷懶&lt;ul&gt;
&lt;li&gt;少做沒意義的工作，好專注在對你而言更重要的事情上&lt;/li&gt;
&lt;li&gt;重新定義「懶惰」 → 忍受理想外的生活，讓外在環境或他人左右你的人生，或是累積大量財富，卻虛度人生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;時間點總是不對 ← 「總有一天」不會到來&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;請求原諒，而非許可&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;如果這麼做不會讓周遭的人心碎，那就儘管嘗試，再說明你的理由&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;強調優點，而非改進缺點&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;物極必反&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;光是錢不能解決問題&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;「如果我有更多錢」是不斷延遲的自我醒獅、下定決心營造人生的藉口 → 就是現在，別再等了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相對收入比絕對收入更重要&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;當然相對收入必須達到能實現目標的最低水準&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免惡性壓力 (distress)，樂於承受良性壓力 (eustress)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;如果你對採取行動猶豫不決，試著思考以下問題&lt;ol&gt;
&lt;li&gt;做了這件事，會發生的最恐怖狀況&lt;/li&gt;
&lt;li&gt;能採取什麼行動彌補，或讓事態暫時好轉&lt;/li&gt;
&lt;li&gt;在比較有可能的局面下，會出現什麼暫時和長久的結果或好處&lt;/li&gt;
&lt;li&gt;如果今年被開除，你會做什麼事，避免財務出狀況&lt;/li&gt;
&lt;li&gt;你因為恐懼拖延了什麼&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延後採取行動，對你造成什麼代價（e.g., 經濟、情緒、健康）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;你在等待什麼&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-elimination"&gt;2. Elimination&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;忙碌表象： &lt;strong&gt;一般人最常用忙碌當擋箭牌，避免去做幾樣很重要，卻會攘人不自在的行動&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;效率很重要，但如果沒用在正確的事上，等於徒勞無功&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生產力法則&lt;ul&gt;
&lt;li&gt;只做重要的事，縮短工作時間 （八十/二十法則）&lt;/li&gt;
&lt;li&gt;縮短工作時間，只做重要的事 （帕金森定律）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;「如果這是我今天唯一完成的事，我會對這天的表現感到滿意嗎」&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;低資訊飲食 in action&lt;ul&gt;
&lt;li&gt;[ ] 立即進食媒體大餐一週&lt;ul&gt;
&lt;li&gt;禁止報紙、雜誌、有聲書或非音樂廣播&lt;/li&gt;
&lt;li&gt;禁止新聞&lt;/li&gt;
&lt;li&gt;禁止電視，除了晚上一小時&lt;/li&gt;
&lt;li&gt;禁止讀書，除了晚上一小時的小說消遣&lt;/li&gt;
&lt;li&gt;禁止辦公瀏覽網站，除非辦公必須&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;「對我而言，這像資訊有立即、重要的用途嗎？」&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;[ ] 練習有始無終的藝術&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;打斷干擾與拒絕的藝術&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;每天檢查電子郵件兩次，一次在午餐前，另一次在下午四點&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;「小狗成交法」&lt;ul&gt;
&lt;li&gt;如果有人很喜歡一隻小狗，但遲遲未下決定，寵物店會提議讓客人先帶小狗回家試養，如果改變主意，可以把小狗帶回來&lt;/li&gt;
&lt;li&gt;讓他們「試試看」，給他們嘗試後反悔的機會，好讓你得寸進尺&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3-automation"&gt;3. Automation 自動入帳&lt;/h2&gt;
&lt;h2 id="4-liberation"&gt;4. Liberation 自由逍遙&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;爭取遠距工作&lt;ul&gt;
&lt;li&gt;概念&lt;ol&gt;
&lt;li&gt;顯示遠距工作對業績的注意&lt;/li&gt;
&lt;li&gt;讓老闆覺得回絕遠距工作的請求，代價昂貴或不值得&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;實例 1&lt;ol&gt;
&lt;li&gt;增加公司在自身的投資&lt;/li&gt;
&lt;li&gt;證明辦公室外的生產力高&lt;/li&gt;
&lt;li&gt;準備可量化呈現的績效&lt;/li&gt;
&lt;li&gt;提出可終止的適用期 &amp;lt;- 「小狗成交法」&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;實例 2 (沙漏法)&lt;ol&gt;
&lt;li&gt;使用預先計畫的緊急事件，任何需要你離開辦公室兩週處理的事&lt;/li&gt;
&lt;li&gt;告訴上司希望期間能繼續工作，而非請假&lt;/li&gt;
&lt;li&gt;提出遠距工作的方案，如果績效不加，可以斟酌扣薪資&lt;/li&gt;
&lt;li&gt;與主管研擬在家工作的方案，好讓對方參與過程&lt;/li&gt;
&lt;li&gt;讓兩週的「休假」成為最具生產力的兩週&lt;/li&gt;
&lt;li&gt;回到辦公室後，展示量化的成果，證明在家工作的效率&lt;/li&gt;
&lt;li&gt;提議每週在家工作兩到三天作為實驗&lt;/li&gt;
&lt;li&gt;生產力要在遠距工作的日子爆增&lt;/li&gt;
&lt;li&gt;提議每週只在辦公室一到兩天&lt;/li&gt;
&lt;li&gt;讓進辦公室成為每週生產力最低的日子&lt;/li&gt;
&lt;li&gt;提議全面性行動辦公&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如同所有領先時代的創新者，你會有猶豫的時刻，常見的疑慮或自我鞭策（在認清這些想法的本質後，大多數都能推翻：這些都是「多比較好」與「錢多就是成功」的比較心態作祟）&lt;ol&gt;
&lt;li&gt;這麼做真的是追求更多自由，過更好的生活，還是根本就瘋了？&lt;/li&gt;
&lt;li&gt;退出爭名逐利的生活，是因為這種生活不好，還是只是在逃避？&lt;/li&gt;
&lt;li&gt;這種生活真有這麼好嗎？或許我在當人下屬，忽視其他可能性時，還活得比較好，至少簡單多了。&lt;/li&gt;
&lt;li&gt;我真的很成功嘛？還是只是在自欺欺人？&lt;/li&gt;
&lt;li&gt;我是否降低成功的標準？我的朋友現在賺的錢比三年前多兩倍，他們走的路是不是才是正途？&lt;/li&gt;
&lt;li&gt;為什麼我這麼不快樂？我可以做任何事，但我不快樂。我真的適合過這種生活嗎？&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;新富族的十三大錯誤&lt;ol&gt;
&lt;li&gt;失去夢想，墮入為工作而工作的陳規&lt;/li&gt;
&lt;li&gt;事必躬親，時常檢查地電子郵件消磨時間&lt;/li&gt;
&lt;li&gt;回覆可以用問與答或自動回覆回答的電子郵件&lt;/li&gt;
&lt;li&gt;在你該過活、睡覺或放鬆時，卻還在工作&lt;/li&gt;
&lt;li&gt;沒有每二到四週，對你的事業和個人生活，進行周詳的八十/二十法則分析&lt;/li&gt;
&lt;li&gt;把不緊急的事看得十萬火急，合理化繼續工作的決定&lt;/li&gt;
&lt;li&gt;忽略人生寶貴的友誼與親情&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="last-but-not-least"&gt;Last but not least&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;六個達成高產出及啲壓力的配方&lt;ol&gt;
&lt;li&gt;為自己訂下規則，讓決策程序自動化&lt;/li&gt;
&lt;li&gt;無法採取實際行動時，不要開始掛心問題&lt;/li&gt;
&lt;li&gt;不要為了避免尷尬的對話，而遲遲不做決定&lt;/li&gt;
&lt;li&gt;若非人命關天或無法轉圜的情困，學著盡快做決定&lt;/li&gt;
&lt;li&gt;若非必要，不要追求變化，因而增加考慮各種選項的時間，習慣可以創造出最必要的創新&lt;/li&gt;
&lt;li&gt;後悔是事後諸葛的決策模式，減少抱怨以降低後悔的次數&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;不辦清單&lt;ol&gt;
&lt;li&gt;不要接聽陌生來電&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要一早或睡前收電子郵件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要答應出席沒有具體的議程或結束時間的會議&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要持續檢查信件 - 「批次化」並在固定時間收信&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;不要加班處理堆積如山的工作，排定優先順序&lt;/li&gt;
&lt;li&gt;不要無時無刻隨身攜帶手機或叫個不停的智慧型手機&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;書中建議的服務&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://freedom.to/features"&gt;Freedom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;低價網域註冊: &lt;a href="https://tw.godaddy.com/offers/domains"&gt;GoDaddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;相片庫: &lt;a href="https://www.istockphoto.com/"&gt;iStockphoto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Productivity"></category><category term="Business"></category></entry><entry><title>Remote Python Pizza 🍕 2020</title><link href="https://lee-w.github.io/posts/tech/2020/05/remote-python-pizza-2020" rel="alternate"></link><published>2020-05-03T16:52:00+08:00</published><updated>2020-05-03T16:52:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-05-03:/posts/tech/2020/05/remote-python-pizza-2020</id><summary type="html">&lt;p&gt;上週六參加了第一場遠端的 Python 研討會 &lt;a href="https://remote.python.pizza/"&gt;Remote Python Pizza&lt;/a&gt;&lt;br&gt;
由於疫情的關係，國外的 PyCon 大多轉往線上或取消&lt;br&gt;
雖然目前還不確定今年台灣的狀況會如何&lt;br&gt;
但先觀摩一下其他社群怎麼做的，對我們也很有幫助&lt;/p&gt;
</summary><content type="html">&lt;p&gt;上週六參加了第一場遠端的 Python 研討會 &lt;a href="https://remote.python.pizza/"&gt;Remote Python Pizza&lt;/a&gt;&lt;br&gt;
由於疫情的關係，國外的 PyCon 大多轉往線上或取消&lt;br&gt;
雖然目前還不確定今年台灣的狀況會如何&lt;br&gt;
但先觀摩一下其他社群怎麼做的，對我們也很有幫助&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;整體的體驗比我想像的好了不少，我還蠻享受 Remote Python Pizza 的&lt;br&gt;
雖然只是透過螢幕跟文字，還是能感受到整個社群的交流&lt;br&gt;
或許這在疫情趨緩後，也可以作為研討會的另一種標準&lt;br&gt;
雖然少了實體的交流，但不用長途跋涉就可以集結全世界的大大們，其實也很方便&lt;br&gt;
而針對時差這件事，他們也有在議程表上標上 UTC 跟使用者的當地時間，這在遠端研討會上就變得很必要&lt;/p&gt;
&lt;p&gt;會眾交流主要是透過 &lt;a href="https://discordapp.com/"&gt;Discord&lt;/a&gt;&lt;br&gt;
不管是要回報 CoC 、對講者提問、工作人員休息室...等，都有專屬的頻道&lt;br&gt;
盡可能將實體會議的元素都帶進來，其實還蠻有趣的&lt;/p&gt;
&lt;p&gt;演講則是給主辦人先給講者跟主持人 Zoom 的連結&lt;br&gt;
講者演講前的 30 分鐘，就先加入 Zoom 待命，接著把影片串到 Youtube 上讓會眾觀看&lt;/p&gt;
&lt;p&gt;Remote Python Pizza 的時間非常緊湊&lt;br&gt;
每一場演講只有十分鐘，演講之間的休息只有兩分鐘&lt;br&gt;
因為也沒有實際換場的必要，所以這段就很考驗主持人的技術了&lt;br&gt;
&lt;a href="https://pyjok.es/"&gt;pyjokes&lt;/a&gt; 對於英語系的會議，應該會很有幫助 XD&lt;/p&gt;
&lt;p&gt;因為時差的關係，開始的時候已經是下午四點&lt;br&gt;
大概聽到八點就開始覺得有點累了&lt;br&gt;
不過坐在客廳用電視投影演講是真的還蠻爽的 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="tv" src="/images/posts-image/2020-05-03-remote-python-pizza/tv.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;為了響應 Remote Python Pizza ，我當天的晚餐也是吃 Pizza&lt;br&gt;
而且 Discord 中就有一個 &lt;code&gt;#cafeteria&lt;/code&gt; 頻道，讓大家曬自己的 Pizza 照&lt;br&gt;
其實還蠻 High 的 XD&lt;br&gt;
我覺得這是線上會議&lt;strong&gt;鼓勵會眾互動非常棒的設計&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pizza" src="/images/posts-image/2020-05-03-remote-python-pizza/pizza.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;第一場 Hynek 的 &lt;em&gt;On the Meaning of Version Numbers&lt;/em&gt; 就先介紹了 &lt;a href="https://semver.org/"&gt;SemVar&lt;/a&gt;&lt;br&gt;
主要說大部分的專案都沒辦法用好 SemVar ，所以 SemVar 可能太難遵守，不見得是一個很好的作法&lt;br&gt;
可以改成使用 &lt;a href="https://calver.org/"&gt;CalVer&lt;/a&gt;&lt;br&gt;
在一開始我會提到的 SemVar 就好好的被打臉了一波 XDDD&lt;/p&gt;
&lt;p&gt;第二場講者沒來，所以就跳過直接換我，害我錯愕了一下&lt;br&gt;
一場演講只要十分鐘，完全是個適合推廣 &lt;a href="https://github.com/commitizen-tools"&gt;commitizen-tools&lt;/a&gt; 的好機會&lt;br&gt;
就毅然決然的投稿了 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="my-avatar" src="/images/posts-image/2020-05-03-remote-python-pizza/my-avatar.jpg"&gt;&lt;/p&gt;
&lt;p&gt;不過真的沒想到，官網會直接用我 Twitter 的大頭貼＠＠&lt;br&gt;
不過既然都被用了兵長的頭貼，我就順勢穿著調查兵團的披風來給演講了 XD&lt;br&gt;
有點久沒講英文，還是覺得稍微有點卡&lt;br&gt;
倒是我在演講中提到還是 beta 的自動產生變更日誌（changelog）功能&lt;br&gt;
剛好在今天正式釋出了，快點來試試看吧 🤩&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python -m pip install commitizen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Disconnect3d 給的 &lt;em&gt;sudo python is a trap, use isolate mode&lt;/em&gt; 是我印象最深刻的一場&lt;br&gt;
現場 demo 如果你使用了 &lt;code&gt;sudo python&lt;/code&gt;，駭客多輕鬆就可以駭入你的電腦&lt;br&gt;
所以不要使用 &lt;code&gt;sudo python&lt;/code&gt; 啊！&lt;br&gt;
&lt;img alt="sudo-python-is-a-trap" src="/images/posts-image/2020-05-03-remote-python-pizza/sudo-python-is-a-trap.jpg"&gt;&lt;/p&gt;
&lt;p&gt;整體節奏太緊湊，實在沒什麼時間好好做筆記&lt;br&gt;
之後再找個時間把比較有趣的內容補起來&lt;/p&gt;
&lt;p&gt;每一場演講結束後&lt;br&gt;
除了在 Zoom 中的主持人會拍手外，大家會在 &lt;code&gt;#question-answer&lt;/code&gt; 頻道洗一波 👏 的 emoji&lt;br&gt;
其實還蠻可愛 XD&lt;br&gt;
大家也能在這個頻道直接堆剛講完的講者提問&lt;br&gt;
另外也有 &lt;code&gt;#slide&lt;/code&gt; 頻道，讓大家快速找到講者的投影片&lt;br&gt;
講者也可以在結束後，創一個 &lt;code&gt;#talk-*.&lt;/code&gt; (e.g., &lt;code&gt;#talk-commitizen&lt;/code&gt;) 的頻道討論演講相關的內容&lt;br&gt;
以講者的角度來說，我覺得這裡的交流甚至有機會比實體會議更多，是個蠻好的作法&lt;/p&gt;
&lt;p&gt;中間倒是有個小插曲，直播到一半就被 Youtube 封鎖了......&lt;br&gt;
最後發現原因是直播時不能開 &lt;code&gt;Made for Kids&lt;/code&gt;，很容易被封鎖&lt;br&gt;
而且這還是預設值，要自己記得關掉＠＠&lt;br&gt;
這倒是可以作為一個警示，線上會議要多準備幾套備用的方案&lt;/p&gt;
&lt;p&gt;大概就是這樣&lt;br&gt;
因為時差的關係，我大概撐到 12 點就差不多了&lt;br&gt;
畢竟整個會議有 50 場演講，延續了 12 個小時&lt;br&gt;
要全部參加完實在太累了&lt;br&gt;
之後再來補帶吧&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="PyCon"></category></entry><entry><title>Python Table Manners - 文件</title><link href="https://lee-w.github.io/posts/tech/2020/04/python-table-manners-documentation" rel="alternate"></link><published>2020-04-15T19:13:00+08:00</published><updated>2020-10-04T16:49:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-04-15:/posts/tech/2020/04/python-table-manners-documentation</id><summary type="html">&lt;p&gt;Python 開源專案中，&lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; 是很常見的文件產生工具&lt;br/&gt;
它能將 &lt;a href="https://docutils.sourceforge.io/rst.html"&gt;reStructuredText&lt;/a&gt; 寫成的文件轉成網頁&lt;br/&gt;
&lt;a href="https://readthedocs.org/"&gt;Read the Docs&lt;/a&gt; 也直接支援 Sphinx 產生的網頁&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Python 開源專案中，&lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; 是很常見的文件產生工具&lt;br/&gt;
它能將 &lt;a href="https://docutils.sourceforge.io/rst.html"&gt;reStructuredText&lt;/a&gt; 寫成的文件轉成網頁&lt;br/&gt;
&lt;a href="https://readthedocs.org/"&gt;Read the Docs&lt;/a&gt; 也直接支援 Sphinx 產生的網頁&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;但我今天要介紹的工具是 &lt;a href="https://www.mkdocs.org/"&gt;mkdocs&lt;/a&gt;&lt;br/&gt;
最簡單的原因就是，我只會寫 Markdown 不會寫 reStructuredText XD&lt;br/&gt;
Guido 也說簡單一點的文件可以使用 Markdown 而不需使用 Shpinx&lt;br/&gt;
（我又要搬同一張截圖出來救援了 XD）&lt;/p&gt;
&lt;p&gt;&lt;img alt="because-guido-say-so" src="/images/posts-image/2020-02-22-python-table-manner-series/because-guido-say-so.png"/&gt;&lt;/p&gt;

&lt;h2 id="_1"&gt;安裝&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv install mkdocs --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_2"&gt;使用&lt;/h2&gt;
&lt;p&gt;這次依然是以將 mkdocs 運用到 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt; 為例子&lt;br/&gt;
在 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/commit/3fab5b9e7171d8302b012ad40ec1292d99c297a0"&gt;commit 3fab5b&lt;/a&gt; 版之後產生將文件從 &lt;code&gt;README.md&lt;/code&gt; 移動到 &lt;code&gt;docs&lt;/code&gt; 並產生 GitHub Page&lt;/p&gt;
&lt;h3 id="_3"&gt;初始化&lt;/h3&gt;
&lt;p&gt;首先進到專案資料夾中，初始化 mkdocs 需要的檔案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run mkdir new .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行後，資料夾會多出以下兩個檔案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdocs.yml&lt;/code&gt;: mkdocs 的設定檔&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doc/index.md&lt;/code&gt;: 空白的範例文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;透過這個指令在本機將伺服器跑起來&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run mkdocs serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打開瀏覽器，進入 &lt;code&gt;http://127.0.0.1:8000/&lt;/code&gt; 就能看到最初始的頁面&lt;/p&gt;
&lt;p&gt;&lt;img alt="initial document" src="/images/posts-image/2020-02-22-python-table-manner-series/initial document.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="_4"&gt;修改網站名稱&lt;/h3&gt;
&lt;p&gt;初始的 &lt;code&gt;mkdocs.yml&lt;/code&gt; 預設只會有這一行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;site_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;My Docs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指的是文件的頁面名稱，先把它改成專案的名稱&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;site_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;PyCon TW post-event report generator (rg-cli)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_5"&gt;增加頁面&lt;/h3&gt;
&lt;p&gt;因為 GitHub 也會讀 &lt;code&gt;docs/READMD.md&lt;/code&gt; 作為進入專案時看到的文件&lt;br/&gt;
為了減少維護文件的時間，可以將 &lt;code&gt;README.md&lt;/code&gt; 移動到 &lt;code&gt;docs&lt;/code&gt; ，並取代掉 &lt;code&gt;index.md&lt;/code&gt; 做為首頁&lt;/p&gt;
&lt;p&gt;因為原先在 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt; 中的 &lt;code&gt;README.md&lt;/code&gt; 有點長&lt;br/&gt;
我將 &lt;strong&gt;How to contribute&lt;/strong&gt; 的內容拆出來放到 &lt;code&gt;contributing.md&lt;/code&gt;&lt;br/&gt;
將檔案命名成 &lt;code&gt;contributing.md&lt;/code&gt; 在 GitHub 開 issue 時自動出現這個頁面的連結（See more 👉 &lt;a href="https://help.github.com/en/github/building-a-strong-community/setting-guidelines-for-repository-contributors"&gt;Setting guidelines for repository contributors&lt;/a&gt;）&lt;br/&gt;
至於要怎麼寫好 &lt;code&gt;contributing.md&lt;/code&gt; 則可以參考 &lt;a href="https://mozillascience.github.io/working-open-workshop/contributing/"&gt;Wrangling Web Contributions: How to Build a CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;├── docs
│   ├── README.md
│   └── contributing.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著在 &lt;code&gt;mkdocs.yml&lt;/code&gt; 加入 &lt;code&gt;nav&lt;/code&gt; 參數，指定不同頁面對應的檔案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;site_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;PyCon TW post-event report generator (rg-cli)&lt;/span&gt;
&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;index.md&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;Contributing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;contributing.md&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;位置是透過參數 &lt;code&gt;docs_dir&lt;/code&gt; 來決定相對路徑&lt;br/&gt;
如果沒有設定，預設是相對於 &lt;code&gt;docs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="separate page" src="/images/posts-image/2020-02-22-python-table-manner-series/separate page.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="_6"&gt;內部連結&lt;/h3&gt;
&lt;p&gt;撰寫文件時，為了讓使用者更容易找到其他頁面，會使用到內部連結&lt;br/&gt;
這時只要在文件中使用跟 &lt;code&gt;mkdocs.yml&lt;/code&gt; 一樣的相對路徑即可&lt;/p&gt;
&lt;p&gt;e.g., 在 &lt;code&gt;README.md&lt;/code&gt; 連結到 &lt;code&gt;contributing.md&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Please see the [&lt;span class="nt"&gt;Contributing&lt;/span&gt;](&lt;span class="na"&gt;contributing.md&lt;/span&gt;) for further details.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_7"&gt;更改主題&lt;/h3&gt;
&lt;p&gt;mkdocs 預設有 &lt;code&gt;mkdocs&lt;/code&gt;, &lt;code&gt;readthedocs&lt;/code&gt; 兩種主題&lt;br/&gt;
如果想嘗試其他主題則可以在 &lt;a href="https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes"&gt;MkDocs Themes&lt;/a&gt; 找到&lt;br/&gt;
以主題 &lt;a href="https://github.com/squidfunk/mkdocs-material"&gt;mkdocs-material&lt;/a&gt; 為例&lt;/p&gt;
&lt;p&gt;首先先將主題安裝到開發環境內&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv install mkdocs-material --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 &lt;code&gt;mkdocs.yml&lt;/code&gt; 加上 &lt;code&gt;theme&lt;/code&gt; 參數&lt;br/&gt;
需要注意的是這裡的 &lt;code&gt;name&lt;/code&gt; 不需要加上前綴的 &lt;code&gt;mkdocs-&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;site_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rg-cli&lt;/span&gt;
&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;index.md&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;Contributing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;contributing.md&lt;/span&gt;
&lt;span class="nt"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'material'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="material theme" src="/images/posts-image/2020-02-22-python-table-manner-series/material theme.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="_8"&gt;輸出靜態網頁&lt;/h3&gt;
&lt;p&gt;為了要能部署到其他服務 (e.g., GitHub Page）上，要先在本地將 Markdown 寫成的文件輸出成網頁&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run mkdocs build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著就可以在資料夾 &lt;code&gt;site&lt;/code&gt; 找到輸出的網頁&lt;br/&gt;
因為 &lt;code&gt;site&lt;/code&gt; 的內容都會跟著 &lt;code&gt;docs&lt;/code&gt; 改變，專案中只需要留有原始的 Markdown 文件就好&lt;br/&gt;
可以在 &lt;code&gt;.gitignore&lt;/code&gt; 加入 &lt;code&gt;site/&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"site/"&lt;/span&gt; &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下次輸出時，在指令後面加上 &lt;code&gt;--clean&lt;/code&gt; 就可以清空上次的內容，重新輸出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run mkdocs build --clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="github-page"&gt;部署至 GitHub Page&lt;/h3&gt;
&lt;p&gt;在開源專案中，將文件部署到 GitHub Page 上是相當常見的&lt;br/&gt;
mkdocs 也為我們考慮到這點&lt;/p&gt;
&lt;p&gt;只要在 &lt;code&gt;mkdocs.yml&lt;/code&gt; 加入專案的 remote 相關設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;repo_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/pycontw/pycontw-postevent-report-generator&lt;/span&gt;
&lt;span class="nt"&gt;remote_branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gh-pages&lt;/span&gt;
&lt;span class="nt"&gt;remote_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;origin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;並執行 &lt;code&gt;pipenv run mkdocs gh-deploy&lt;/code&gt; 就會自動將文件部署到 GitHub Page 上&lt;/p&gt;
&lt;p&gt;如果想更近一步透過 GitHub Action 來達到 push 原始碼，就自動產生 GitHub Page&lt;br/&gt;
可以參考我之前寫的 &lt;a href="https://lee-w.github.io/posts/tech/2020/01/automate-publish-pelican-through-github-action"&gt;透過 GitHub Action 自動發佈 Pelican 部落格文章&lt;/a&gt;&lt;br/&gt;
雖然裡面使用的例子是 Pelican ，但只要把建置頁面的指令換掉就可以了&lt;/p&gt;
&lt;h3 id="mkdocsyml"&gt;其他 mkdocs.yml 常用設定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;site_description, site_author, copyright&lt;/li&gt;
&lt;li&gt;google_analytics&lt;/li&gt;
&lt;li&gt;markdown_extensions&lt;ul&gt;
&lt;li&gt;mkdocs 解析 Markdown 文件時要使用 &lt;a href="https://python-markdown.github.io/"&gt;Python Markdown&lt;/a&gt; 的 &lt;a href="https://python-markdown.github.io/extensions/"&gt;extension&lt;/a&gt; 和其設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;plugins&lt;ul&gt;
&lt;li&gt;預設會使用 &lt;a href="https://github.com/mkdocs/mkdocs/wiki/MkDocs-Plugins#search--tables-of-content"&gt;search&lt;/a&gt; 套件，如果想使用其它套件可以在 &lt;a href="https://github.com/mkdocs/mkdocs/wiki/MkDocs-Plugins"&gt;MkDocs-Plugins&lt;/a&gt; 找到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bonus"&gt;Bonus: 徽章&lt;/h2&gt;
&lt;p&gt;在開源專案中，常常可以見到一些有趣的徽章&lt;br/&gt;
它們很可能就是用 &lt;a href="https://shields.io/"&gt;shields.io&lt;/a&gt; 產生的&lt;br/&gt;
除了常見的徽章外，也可以透過修改 url 製作客製化的徽章&lt;/p&gt;
&lt;p&gt;像是在 markdown 文件加入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;shields&lt;/span&gt; &lt;span class="n"&gt;badge&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//img.shields.io/badge/&amp;lt;LABEL&amp;gt;-&amp;lt;MESSAGE&amp;gt;-&amp;lt;COLOR&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就會出現&lt;/p&gt;
&lt;p&gt;&lt;img alt="shields badge" src="https://img.shields.io/badge/&amp;lt;LABEL&amp;gt;-&amp;lt;MESSAGE&amp;gt;-&amp;lt;COLOR&amp;gt;"/&gt;&lt;/p&gt;
&lt;h3 id="_9"&gt;自製測試覆蓋率徽章&lt;/h3&gt;
&lt;p&gt;最近發現另一個有趣的小工具 - &lt;a href="https://github.com/dbrgn/coverage-badge"&gt;coverage-badge&lt;/a&gt;&lt;br/&gt;
它可以不透過 &lt;a href="https://codecov.io/"&gt;codecov&lt;/a&gt; 直接去讀 &lt;a href="https://github.com/pytest-dev/pytest-cov"&gt;pytest-cov&lt;/a&gt; 產生的 &lt;code&gt;.coverage&lt;/code&gt;  產生測試覆蓋率徽章&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv install coverage-badge --dev
pipenv run coverage-badge -o docs/coverage.svg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/publish-a-perfetc-python-package-on-pypi/"&gt;Publish a (Perfect) Python Package on PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mkdocs.org/"&gt;MkDocs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/squidfunk/mkdocs-material"&gt;mkdocs-material&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shields.io/"&gt;shield.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Documentation"></category></entry><entry><title>Python Table Manners - 安全性檢查</title><link href="https://lee-w.github.io/posts/tech/2020/03/python-table-manners-security" rel="alternate"></link><published>2020-03-22T13:10:00+08:00</published><updated>2020-10-04T16:13:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-03-22:/posts/tech/2020/03/python-table-manners-security</id><summary type="html">&lt;p&gt;果然在沒有寫作松的督促下，馬上就拖稿了 XD&lt;br/&gt;
接下來要介紹在 Python 專案中做安全性檢查的工具&lt;/p&gt;
</summary><content type="html">&lt;p&gt;果然在沒有寫作松的督促下，馬上就拖稿了 XD&lt;br/&gt;
接下來要介紹在 Python 專案中做安全性檢查的工具&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="safety-"&gt;Safety - 檢查相依套件&lt;/h2&gt;
&lt;p&gt;&lt;img alt="depbot" src="/images/posts-image/2020-02-22-python-table-manner-series/depbot.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;不知道大家有沒有在 GitHub 上看過這樣的畫面&lt;br/&gt;
這個訊息告訴我們，專案的相依套件中可能有安全漏洞&lt;/p&gt;
&lt;p&gt;透過 &lt;a href="https://github.com/pyupio/safety"&gt;Safety&lt;/a&gt; 就能在本地做相依套件安全漏洞的檢查&lt;br/&gt;
它會到 &lt;a href="https://github.com/pyupio/safety-db"&gt;safety-db&lt;/a&gt; 去查找已知的安全性漏洞&lt;br/&gt;
這個資料庫則是從 &lt;a href="https://cve.mitre.org/"&gt;CVE&lt;/a&gt; (Common Vulnerabilities and Exposures) 整理出來的&lt;br/&gt;
如果是免費版，一個月會更新一次資料庫&lt;br/&gt;
付費版則可以達到即時更新&lt;/p&gt;
&lt;h3 id="_1"&gt;安裝&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv install safety --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_2"&gt;執行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run safety check
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="safety-not-found" src="/images/posts-image/2020-02-22-python-table-manner-series/safety-not-found.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/commit/128d271942099b94faca3693d6c146c879e3b414"&gt;pycontw-postevent-report-generator commit 128d&lt;/a&gt; ，透過 safety 不會找到任何安全漏洞&lt;/p&gt;
&lt;p&gt;如果想要測試 Safety 的功能可以安裝套件 &lt;a href="https://pypi.org/project/insecure-package/"&gt;insecure-package&lt;/a&gt; (&lt;strong&gt;這個套件是真的存在的，而且是不安全的，僅作為測試用途&lt;/strong&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv install insecure-package --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再試一次就能看到 Safety 將 insecure-package 列為不安全的套件&lt;/p&gt;
&lt;p&gt;&lt;img alt="safety-found-insecure" src="/images/posts-image/2020-02-22-python-table-manner-series/safety-found-insecure.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;另外需要注意的是 &lt;code&gt;safety check&lt;/code&gt; 是對當前環境做檢查&lt;br/&gt;
務必確定已經有進入專案的虛擬環境，不然 Safety 只會檢查到本機使用的套件有沒有漏洞&lt;/p&gt;
&lt;p&gt;如果想要對 &lt;code&gt;requriements.txt&lt;/code&gt; 做檢查，則可以加上參數 &lt;code&gt;-r&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 因為這個 case 不是針對 pipenv ，所以前面沒有加上 pipenv run&lt;/span&gt;
safety check -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;雖然 Safety 並不支援對 Pipfile 進行檢查 (Ref: &lt;a href="https://github.com/pyupio/safety/issues/47"&gt;Add Pipfile support #47&lt;/a&gt;)，但 pipenv 就內建有安全性檢查的指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv check
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="bandit-"&gt;bandit - 程式碼靜態分析&lt;/h2&gt;
&lt;p&gt;除了套件安全性的分析外，接著還能透過 &lt;a href="https://github.com/PyCQA/bandit"&gt;bandit&lt;/a&gt; 來對自己的程式碼做靜態分析找出常見的漏洞&lt;/p&gt;
&lt;h3 id="_3"&gt;安裝&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv install bandit --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_4"&gt;使用&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run bandit -r &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="bandit-result" src="/images/posts-image/2020-02-22-python-table-manner-series/bandit-result.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;執行後就會看到一個列表，整理出專案中可能有的安全性漏洞&lt;br/&gt;
每一個項目中會有以下五個欄位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Issue: 問題&lt;/li&gt;
&lt;li&gt;Severity: 嚴重性&lt;/li&gt;
&lt;li&gt;Confidence: 可信度&lt;/li&gt;
&lt;li&gt;Location: 位置（在程式碼的哪一行）&lt;/li&gt;
&lt;li&gt;More Info: 詳細的原因和可能的解決方案 （也可以從 &lt;a href="https://bandit.readthedocs.io/en/latest/plugins/#complete-test-plugin-listing"&gt;Complete Test Plugin Listing&lt;/a&gt; 找到全部的列表）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加上參數 &lt;code&gt;-i&lt;/code&gt; (可信度) 和 &lt;code&gt;-l&lt;/code&gt; （嚴重性），就可以讓 bandit 只回報特定程度的漏洞&lt;br/&gt;
越多的 i / l 代表程度越高&lt;br/&gt;
以下指令就是讓 bandit 只回報高嚴重性 (&lt;code&gt;-lll&lt;/code&gt;)、高可信度 (&lt;code&gt;-iii&lt;/code&gt;)的漏洞&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run bandit -iii -lll -r &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_5"&gt;局部跳過檢查&lt;/h3&gt;
&lt;p&gt;有時候 bandit 給的警告不會在所有狀況都適用&lt;br/&gt;
以 &lt;a href="https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html#module-bandit.plugins.asserts"&gt;B101: assert_used&lt;/a&gt; 為例&lt;br/&gt;
警告不該使用 &lt;code&gt;assert&lt;/code&gt;&lt;br/&gt;
在使用 &lt;code&gt;python -o&lt;/code&gt; 指令產生優化過的 byte code 時，會跳過 &lt;code&gt;assert&lt;/code&gt;&lt;br/&gt;
如果系統使用 &lt;code&gt;assert&lt;/code&gt; 來進行登入的檢查，就會讓使用者在完全沒驗證的情況下成功登入&lt;br/&gt;
但大部分的時候，我們不太會這麼實作&lt;br/&gt;
而 &lt;code&gt;assert&lt;/code&gt; 也是在測試中很常使用到的語法&lt;/p&gt;
&lt;p&gt;這時候就可以在專案的最上層加入設定檔 &lt;code&gt;.bandit&lt;/code&gt;&lt;br/&gt;
而它的格式會長這樣&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[bandit]
# 要執行 bandit 檢查的檔案或資料夾（逗號分隔）
targets:
# 跳過 bandit 檢查的檔案或資料夾（逗號分隔）
exclude:
# 要跳過的檢查種類 （逗號分隔）
skips:
# 要執行的檢查種類 （逗號分隔）
tests:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行 bandit 時要加上 &lt;code&gt;--ini .bandit&lt;/code&gt; 讓 bandit 知道要找這份設定檔&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bandit --ini .bandit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果不是整個檔案或種類要跳過，則可以在程式碼後面加上 &lt;code&gt;# nosec&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/10/python-security-tool/"&gt;Python Security Tool - PyCon US 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-au-2018/2019/08/watch-out-for-safety-bandits/"&gt;Watch out for Safety Bandits! - PyCon AU 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://myapollo.com.tw/zh-tw/secure-your-python-code-with-bandit/"&gt;用 Bandit 靜態掃描工具，掃描 Python 專案中的安全性問題&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Security"></category></entry><entry><title>Python Table Manners - Commitizen: 規格化 commit message</title><link href="https://lee-w.github.io/posts/tech/2020/03/python-table-manners-commitizen" rel="alternate"></link><published>2020-03-01T00:45:00+08:00</published><updated>2020-07-19T16:47:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-03-01:/posts/tech/2020/03/python-table-manners-commitizen</id><summary type="html">&lt;p&gt;接續著前一篇的 pre-commit ，繼續談 git 相關的工具&lt;br/&gt;
這篇來聊聊如何透過 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 規範 commit message&lt;br/&gt;
還有規範過的 commit message 能拿來做什麼&lt;/p&gt;
</summary><content type="html">&lt;p&gt;接續著前一篇的 pre-commit ，繼續談 git 相關的工具&lt;br/&gt;
這篇來聊聊如何透過 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 規範 commit message&lt;br/&gt;
還有規範過的 commit message 能拿來做什麼&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="commit-message"&gt;為什麼要好好寫 commit message&lt;/h2&gt;
&lt;p&gt;&lt;img alt="no-good-commit" src="/images/posts-image/2020-02-22-python-table-manner-series/no-good-commit.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;如果不好好寫有意義的 commit message，每次都只用 "update" 當訊息&lt;br/&gt;
當你下了 &lt;code&gt;git log&lt;/code&gt; 指令，就會看到一堆 "update"&lt;br/&gt;
然後哪天系統出錯的時候，你也會不知道要回朔到哪一個版本&lt;/p&gt;
&lt;p&gt;&lt;img alt="bad-commit" src="/images/posts-image/2020-02-22-python-table-manner-series/bad-commit.jpg"/&gt;&lt;br/&gt;
(from &lt;a href="https://github.com/hackjutsu/bad-commit-example/commits/master"&gt;hackjutsu/bad-commit-example&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;撰寫好的 commit message，除了讓未來的自己知道自己在幹嘛&lt;br/&gt;
也能讓團隊之間的溝通更順利&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;送 Pull Request / Merge Request 時，審核者能更快速地知道增加了哪些功能&lt;/li&gt;
&lt;li&gt;新進人員可以從過往的 commit message 找到整個專案發展的脈絡，更容易上手專案&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="commitizen"&gt;Commitizen&lt;/h2&gt;
&lt;p&gt;除了提供的 commit message 撰寫建議和規範 （👉 &lt;a href="https://commitizen-tools.github.io/commitizen/tutorials/writing_commits/"&gt;Writing commits&lt;/a&gt;）&lt;br/&gt;
&lt;a href="https://commitizen-tools.github.io/commitizen/"&gt;commitizen&lt;/a&gt; 更進一步提供互動式介面，讓使用者可以夠輕鬆地產生符合規範的 commit message&lt;br/&gt;
同時也整合了前一篇所提到的 pre-commit hook，避免使用者將不符合規範的 commit message 寫入&lt;br/&gt;
除了採用來自 Angular 社群的 &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits&lt;/a&gt; (約定式提交) 外， commitizen 提供了高度的客製化，讓每個團隊或專案都可以依照自己的需求，撰寫相對應的規範&lt;br/&gt;
規範了 commit message 後，除了增加可讀性增加外，也讓訊息有可以被解析做其他運用&lt;br/&gt;
e.g., 提升版本號, 產生更新日誌&lt;/p&gt;
&lt;h2 id="commitizen_1"&gt;安裝與設定 Commitizen&lt;/h2&gt;
&lt;p&gt;跟 invoke 一樣，我會把 commitizen 同時安裝在系統和虛擬環境&lt;br/&gt;
安裝在虛擬環境主要是為了能在 CI/CD 伺服器上自動升版&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 安裝 commitizen 到系統&lt;/span&gt;
pipx install commitizen

&lt;span class="c1"&gt;# 安裝 commitizen 到虛擬環境中&lt;/span&gt;
pipenv install commitizen --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在專案中第一次使用 commitizen 可以使用初始化指令來完成基本的設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cz init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一開始會先問想使用哪種設定檔&lt;/p&gt;
&lt;p&gt;&lt;img alt="cz-init-1" src="/images/posts-image/2020-02-22-python-table-manner-series/cz-init-1.png"/&gt;&lt;/p&gt;
&lt;p&gt;接著要選擇一套 commit 規範，預設有三種&lt;br/&gt;
如果有安裝其他的 commit 規範，它們也會出現在選項中（See more 👉 &lt;a href="https://commitizen-tools.github.io/commitizen/third-party-commitizen/"&gt;Third-Party Commitizen Templates&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img alt="cz-init-2" src="/images/posts-image/2020-02-22-python-table-manner-series/cz-init-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;再來會問最新的 git tag 是否為最新的版本號&lt;br/&gt;
如果不是，就會列出 &lt;code&gt;git tag&lt;/code&gt; 所有的結果&lt;br/&gt;
如果完全沒有用過 git tag，預設會是 &lt;code&gt;0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cz-init-3" src="/images/posts-image/2020-02-22-python-table-manner-series/cz-init-3.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;之後會詢問版本的格式要是如何&lt;br/&gt;
常用的格式有 &lt;code&gt;$version&lt;/code&gt; (e.g., &lt;code&gt;1.0.0&lt;/code&gt;) 或 &lt;code&gt;v$version&lt;/code&gt; (e.g., &lt;code&gt;v1.0.0&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="cz-init-4" src="/images/posts-image/2020-02-22-python-table-manner-series/cz-init-4.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;最後會確認要不要將驗證 commit message 的 pre-commit hook 設定好&lt;/p&gt;
&lt;p&gt;&lt;img alt="cz-init-5.jpg" src="/images/posts-image/2020-02-22-python-table-manner-series/cz-init-5.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;完成後就會看到以下畫面&lt;/p&gt;
&lt;p&gt;&lt;img alt="cz-init-6.jpg" src="/images/posts-image/2020-02-22-python-table-manner-series/cz-init-6.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;相對應的設定也會加入到設定檔 &lt;code&gt;pyproject.toml&lt;/code&gt; (或 &lt;code&gt;.cz.toml&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.commitizen]&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"cz_conventional_commits"&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.0.2"&lt;/span&gt;
&lt;span class="n"&gt;tag_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"$version"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="commitizen_2"&gt;使用 Commitizen&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 使用 commitizen 做 commit&lt;/span&gt;
&lt;span class="c1"&gt;# (也可以用簡短版的 cz c)&lt;/span&gt;
cz commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以 &lt;code&gt;cz_conventional_commits&lt;/code&gt; 這套規則為例&lt;br/&gt;
會先詢問這次的 commit 做了哪一種改動&lt;/p&gt;
&lt;p&gt;&lt;img alt="commitizen-1" src="/images/posts-image/2020-02-22-python-table-manner-series/commitizen-1.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;接著會要求輸入這次改動各項細節&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scope： 改動範圍&lt;/li&gt;
&lt;li&gt;Subject： 簡短敘述這次的改動&lt;/li&gt;
&lt;li&gt;Body： 詳細敘述這次的改動&lt;/li&gt;
&lt;li&gt;Is this a BREAKING CHANGE？： 這是否是一個重大改動&lt;/li&gt;
&lt;li&gt;Footer： 其他參考資訊，通常可以將 Issue 的編號寫在這&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="commitizen-2-w1024" src="/images/posts-image/2020-02-22-python-table-manner-series/commitizen-2.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;回答完，就會產生 commit message &lt;strong&gt;feat(blog-post): update python table manners series&lt;/strong&gt;&lt;br/&gt;
最下方則是 pre-commit hook 的 commit message 格式檢查通過&lt;/p&gt;
&lt;h2 id="commit-message_1"&gt;強制檢查 commit message&lt;/h2&gt;
&lt;p&gt;剛開始引入 commitizen 時，可能會常常忘記要使用它來做 commit&lt;br/&gt;
這時候就能使用到前一篇提到的 &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt;&lt;br/&gt;
雖然在 2.0.0 後可以透過 &lt;code&gt;cz init&lt;/code&gt; 初始設定好，但還是說明如果事後才想設定要怎麼做&lt;/p&gt;
&lt;p&gt;我在 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 中有加入 &lt;a href="https://github.com/commitizen-tools/commitizen/blob/master/.pre-commit-hooks.yaml"&gt;.pre-commit-hooks.yaml&lt;/a&gt;&lt;br/&gt;
因此只要在專案的 &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; 加入以下這段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;repos&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;- repo&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/commitizen-tools/commitizen&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rev&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1.23.1&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hooks&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;commitizen&lt;/span&gt;
        &lt;span class="nt"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;commit-msg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;並透過 pre-commit 設定 commit-msg 階段的 git hook&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run pre-commit install -t commit-msg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 commit 執行完，要進訊息寫入前&lt;br/&gt;
git 會執行 &lt;code&gt;cz check&lt;/code&gt; 來確認輸入的訊息是否符合規範&lt;br/&gt;
如果不符合規範就會拒絕這次的 commit&lt;/p&gt;
&lt;p&gt;需要注意的是檢查會在產生 commit message 後才能執行&lt;br/&gt;
因此要設定 commit-msg 階段的 git hook （i.e., &lt;code&gt;.git/hooks/commit-msg&lt;/code&gt;）&lt;br/&gt;
如果只下 &lt;code&gt;pipenv run pre-commit install&lt;/code&gt; 是不會成功的&lt;/p&gt;
&lt;p&gt;接著可以開始聊勞，這些 commit message 能做什麼應用了&lt;/p&gt;
&lt;h2 id="_1"&gt;自動提升版本號&lt;/h2&gt;
&lt;p&gt;與 commit message 規範可以做客製化不同&lt;br/&gt;
commitizen 目前並沒有提供不同版本表示方式的客製化&lt;br/&gt;
一律都會遵守 &lt;a href="https://semver.org/"&gt;Semantic Version&lt;/a&gt; （語意化版本）&lt;br/&gt;
這種版本號採用 &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; (e.g., &lt;code&gt;1.10.20&lt;/code&gt;) 的格式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MAJOR&lt;/code&gt;： 重大改動，不向後相容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MINOR&lt;/code&gt;： 新增功能，必須向後相容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt;： 修正功能，必須向後相容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以 commitizen 預設使用的 &lt;code&gt;cz_conventional_commits&lt;/code&gt; 來說，相對應的 commit 種類和應該提升的版本號如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MAJOR&lt;/code&gt;: BREAKING CHANGE (每次 commit 都會問的，這次是否為重大改動)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MINOR&lt;/code&gt;: feat&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt;: fix, refactor, perf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;p.s. conventional commit 可以有很多種延伸，這裡指的只是 commitizen 採用的版本&lt;/p&gt;
&lt;p&gt;每次提升版本號只會提升 1 ，而且以最前面的為主&lt;br/&gt;
e.g., 要 merge 回 master 的改動中出現 BREAKING CHANGE，不管其他有多少 feat 或 fix ，都只會讓 &lt;code&gt;MAJOR&lt;/code&gt; 提升 1&lt;/p&gt;
&lt;p&gt;目前只有 &lt;code&gt;cz_conventional_commits&lt;/code&gt; 有預設的版本對應&lt;br/&gt;
如果為 &lt;code&gt;cz_jira&lt;/code&gt;, &lt;code&gt;cz_customize&lt;/code&gt; 或自己客製化規則加上提升版本的功能，可以參考commitizen 文件中 &lt;a href="https://commitizen-tools.github.io/commitizen/customization/"&gt;customization&lt;/a&gt; ，並加上 &lt;code&gt;bump_pattern&lt;/code&gt;（比對 commit 是哪個種類） 和 &lt;code&gt;bump_map&lt;/code&gt; （哪個種類的 commit 要提升哪個版本號）&lt;/p&gt;
&lt;p&gt;稍微解釋了一下提升版本的規則，接下來要來講該如何使用了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cz bump
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一次提升版本的時候，會先確認目前在設定檔 (e.g., &lt;code&gt;pyproject.toml&lt;/code&gt;）中的版本是否已經有相對應的 git tag&lt;/p&gt;
&lt;p&gt;如果沒有則會確認這是否是第一次為這個專案加上 git tag&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Tag v0.0.1 could not be found.
Possible causes:
- version in configuration is not the current version
- tag_format is missing, check them using 'git tag --list'

? Is this the first tag created?  (Y/n)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果想跳過這個確認可以在後面加上參數 &lt;code&gt;--yes&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cz bump --yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接著 commitizen 就會新增一個相對應的 git tag 和更新設定檔中的版本號&lt;br/&gt;
因為要將設定檔中的改動儲存， commitizen 這時會再新增一個 commit&lt;br/&gt;
(e.g., &lt;code&gt;bump: version 0.0.1 → 0.0.2&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;除了設定檔中的版本號外，有時候專案本身也有其他地方會使用到版本號&lt;br/&gt;
如果每次透過 commitizen 提升版本號後，還要手動更新其他部分，就失去了自動的好處了&lt;br/&gt;
所以 commitizen 另外提供了 &lt;code&gt;version_files&lt;/code&gt; 這個設定，將需要改動的檔案也寫進來&lt;br/&gt;
commitizen 提升版本號時，就會一併更新檔案的內容&lt;br/&gt;
（Read More 👉 &lt;a href="https://commitizen-tools.github.io/commitizen/bump/"&gt;bump&lt;/a&gt; ）&lt;/p&gt;
&lt;p&gt;透過 &lt;code&gt;cz bump&lt;/code&gt; 指令雖然可以省下很多步驟&lt;br/&gt;
但更好的做法是將自動升版加入到加入到持續整合（Continuous Integration）&lt;br/&gt;
在 git repo 上將分支 merge 到 master 時，自動提升版本號&lt;br/&gt;
因為會牽涉到各個不同平台的做法，不會敘述太多&lt;br/&gt;
這裡附上 commitizen 文件中 &lt;a href="https://commitizen-tools.github.io/commitizen/tutorials/github_actions/"&gt;Github Actions&lt;/a&gt;, &lt;a href="https://commitizen-tools.github.io/commitizen/tutorials/gitlab_ci/"&gt;Gitlab CI&lt;/a&gt; 還有 &lt;a href="https://commitizen-tools.github.io/commitizen/tutorials/jenkins_pipeline/"&gt;Jenkins Pipeline&lt;/a&gt; 的做法&lt;/p&gt;
&lt;h2 id="commit"&gt;客製化 commit 規範&lt;/h2&gt;
&lt;p&gt;目前 commitizen 提供兩種方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接在設定檔設定 → 適合只需要改動問題，不需要使用到複雜的功能&lt;/li&gt;
&lt;li&gt;將 commit 規範寫成 Python 套件發佈 → 適合需要加入複雜的驗證&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_2"&gt;直接在設定檔設定&lt;/h3&gt;
&lt;p&gt;首先必須先將 name 指定到 &lt;code&gt;cz_customize&lt;/code&gt; 這套 commit 規範&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.commitizen]&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"cz_customize"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再來要設定下面的欄位&lt;br/&gt;
其中最重要的是 &lt;code&gt;message_template&lt;/code&gt;（支援&lt;a href="https://jinja.palletsprojects.com/en/2.11.x/"&gt;Jinja&lt;/a&gt;）&lt;br/&gt;
以 &lt;code&gt;"{{change_type}}:{% if show_message %} {{message}}{% endif %}"&lt;/code&gt; 這個例子來說&lt;br/&gt;
需要 &lt;code&gt;change_type&lt;/code&gt;, &lt;code&gt;show_message&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; 三個變數來產生 commit message&lt;/p&gt;
&lt;p&gt;（p.s. 如果想要使用驗證 commit message 的功能，則要更新 &lt;code&gt;schema_pattern&lt;/code&gt;）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.commitizen.customize]&lt;/span&gt;
&lt;span class="n"&gt;message_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"{{change_type}}:{% if show_message %} {{message}}{% endif %}"&lt;/span&gt;
&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"feature: this feature enable customize through config file"&lt;/span&gt;
&lt;span class="n"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;type&amp;gt;: &amp;lt;body&amp;gt;"&lt;/span&gt;
&lt;span class="n"&gt;schema_pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"(feature|bug fix):(\\s.*)"&lt;/span&gt;
&lt;span class="n"&gt;bump_pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"^(break|new|fix|hotfix)"&lt;/span&gt;
&lt;span class="n"&gt;bump_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"break"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"MAJOR"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"new"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"MINOR"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"fix"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"PATCH"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hotfix"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"PATCH"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;info_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"cz_customize_info.txt"&lt;/span&gt;
&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""&lt;/span&gt;
&lt;span class="s"&gt;This is customized info&lt;/span&gt;
&lt;span class="s"&gt;"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;變數要在 &lt;code&gt;[[tool.commitizen.customize.questions]]&lt;/code&gt; 的區段作定義&lt;br/&gt;
背後所使用的套件是 &lt;a href="https://github.com/tmbo/questionary"&gt;questionary&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;： 必須跟前面 &lt;code&gt;message_template&lt;/code&gt; 定義的一模一樣，而且裡面用到的變數都要有對應的問題能取得值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt;： 顯示給使用者的問題&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;： &lt;a href="https://github.com/tmbo/questionary"&gt;questionary&lt;/a&gt; 中的問題型態&lt;/li&gt;
&lt;li&gt;其他欄位 (e.g., &lt;code&gt;choice&lt;/code&gt;) 則是靠 &lt;code&gt;type&lt;/code&gt; 來決定是否需要&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[[tool.commitizen.customize.questions]]&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"list"&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"change_type"&lt;/span&gt;
&lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;["feature", "bug fix"]&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Select the type of change you are committing"&lt;/span&gt;

&lt;span class="k"&gt;[[tool.commitizen.customize.questions]]&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"input"&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"message"&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Body."&lt;/span&gt;

&lt;span class="k"&gt;[[tool.commitizen.customize.questions]]&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"confirm"&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"show_message"&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Do you want to add body message in commit?"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;設定完之後，再使用 &lt;code&gt;cz commit&lt;/code&gt; 就可以看到客製化過後的問題了&lt;br/&gt;
&lt;img alt="customize" src="/images/posts-image/2020-02-22-python-table-manner-series/customize.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="commit-python"&gt;將客製化的 commit 規範寫成 Python 套件發佈&lt;/h3&gt;
&lt;p&gt;這個做法比較複雜，也比較不常會用到，所以我只會概略地講&lt;br/&gt;
（Read More 👉 &lt;a href="https://commitizen-tools.github.io/commitizen/customization/"&gt;Customization&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;我已經先將套件的架構驟寫成一個 &lt;a href="https://cookiecutter.readthedocs.io/en/1.7.0/"&gt;cookiecutter&lt;/a&gt; 範本&lt;br/&gt;
透過以下指令，可以進入 cookiecutter 的互動式介面，並初始化專案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cookiecutter gh:Lee-W/commitizen_cz_template
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最主要需要實作的函式有 &lt;code&gt;questions&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt;&lt;br/&gt;
實作完成後，必須在要使用這個 commit 規範的環境安裝這個套件&lt;br/&gt;
安裝之後會在 &lt;code&gt;cz ls&lt;/code&gt; 看到這個新的 commit 規範&lt;br/&gt;
在設定檔中設定 &lt;code&gt;name&lt;/code&gt; 或在指令列加上參數 &lt;code&gt;-n name&lt;/code&gt; (e.g., &lt;code&gt;cz -n cz_test commit&lt;/code&gt;) 就可以開始使用&lt;/p&gt;
&lt;h2 id="changelog"&gt;自動產生更新日誌（Changelog）&lt;/h2&gt;
&lt;p&gt;commitizen 可以透過過往的 commit message 產生 &lt;a href="https://keepachangelog.com/en/1.1.0/"&gt;keep a changelog&lt;/a&gt; 格式的更新日誌&lt;/p&gt;
&lt;p&gt;透過以下指令，就能從最舊到最新的 commit message 產生更新日誌（預設是 &lt;code&gt;CHANGELOG.md&lt;/code&gt;）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cz changelog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果已經有現成的 &lt;code&gt;CHANGELOG.md&lt;/code&gt;， 則可以使用 &lt;code&gt;cz changelog --incremental&lt;/code&gt; 指令&lt;/p&gt;
&lt;p&gt;commitizen 會試著找出文件中最新釋出版本 (e.g., &lt;code&gt;1.0.5&lt;/code&gt;) 的位置，將最新釋出版本以後的 commit 加入到更新日誌的最頂端&lt;/p&gt;
&lt;p&gt;例如目前有一個專案，最新的版本是 1.0.5，之後有 2 個 commit&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feat: cool new features&lt;/li&gt;
&lt;li&gt;ci: update jenkins file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原本的更新日誌&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;## 1.0.5&lt;/span&gt;
&lt;span class="err"&gt;### Feat&lt;/span&gt;
&lt;span class="err"&gt;- old features&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;則 commitizen 在釋出 1.1.0 時，就會產生如下的更新日誌&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;###&lt;/span&gt; &lt;span class="n"&gt;Feat&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;cool&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt;

&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;###&lt;/span&gt; &lt;span class="n"&gt;Feat&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;some&lt;/span&gt; &lt;span class="k"&gt;old&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因為產生更新日誌，通常適合在升版後執行&lt;br/&gt;
在 &lt;code&gt;cz bump&lt;/code&gt; 加上 &lt;code&gt;--changelog&lt;/code&gt; 參數就可以提升版本的同時，產生更新日誌&lt;/p&gt;
&lt;h2 id="commitizen_3"&gt;其他 commitizen 指令和常用參數&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cz bump&lt;/code&gt;： 提升版本號&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--dry-run&lt;/code&gt;： 將提升版本號的訊息輸出到終端機，不會實際產生 tag 和改變檔案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--increment {MAJOR,MINOR,PATCH}&lt;/code&gt;： 提升特定版本號&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cz changelog&lt;/code&gt;: 產生更新日誌&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--dry-run&lt;/code&gt;: 將產生的更新日誌書處到終端機，不產生或更新 &lt;code&gt;CHANGELOG.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cz -n NAME [command]&lt;/code&gt;： 使用不同的 commit 規則 （e.g., &lt;code&gt;cz -n cz_jira commit&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cz version&lt;/code&gt;： 顯示版本&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;（&lt;code&gt;--project&lt;/code&gt;）： 顯示專案版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;（&lt;code&gt;--commitizen&lt;/code&gt;）： 顯示 commitizen 版本（預設）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="commitizen_4"&gt;關於 commitizen 的雜談&lt;/h2&gt;
&lt;p&gt;我在 Taipei.py 第一次試講 Python Table Manners 時&lt;br/&gt;
有一頁就提到了，雖然 Python 也有 commitizen 這個工具，但還不太成熟&lt;/p&gt;
&lt;p&gt;&lt;img alt="commitizen is not mature" src="/images/posts-image/2020-02-22-python-table-manner-series/not-mature-1.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;沒想到在 PyCon CA 的前一個禮拜我認真測試時&lt;br/&gt;
才發現其實 commitizen 已經很夠用了，該有的功能都有&lt;br/&gt;
只是我剛好都用一些奇怪的測試方式，測到一些 edge case&lt;br/&gt;
這時就覺得信奉 Python （？？？）的我，好像應該好好的介紹 Python 的工具&lt;br/&gt;
而不是 JavaScript 的 &lt;a href="https://github.com/commitizen"&gt;commitizen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="i am the one who's not mature" src="/images/posts-image/2020-02-22-python-table-manner-series/not-mature-2.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;於是我就在 PyCon CA 前一個禮拜，開始貢獻起 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt;&lt;br/&gt;
把我遇到的 issues 都修了，就順便把投影片中相關的內容一起翻新了&lt;/p&gt;
&lt;p&gt;貢獻的過程中也發現了很多還能再增加的新功能，於是就在 PyCon CA 2019 帶了這個專案去 Develop Sprint&lt;br/&gt;
第一次當 Sprint Leader 還蠻好玩的，也蠻有成就感的&lt;br/&gt;
（Read More 👉 &lt;a href="https://lee-w.github.io/posts/tech/2019/12/pycon-ca-2019"&gt;PyCon CA 2019&lt;/a&gt;）&lt;/p&gt;
&lt;h3 id="java-script-commitizen"&gt;為什麼不用 Java Script 的 commitizen 就好了&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;因為我是 Python 的開發者啊！！！&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;起初我也是從 JavaScript 的版本開始使用 （畢竟兩個專案 star 的數量差了一百倍）&lt;br/&gt;
原本我就有寫好 commit message 的習慣&lt;br/&gt;
能有工具幫助我把這件事做得更好，當然就再好不過了&lt;/p&gt;
&lt;p&gt;用了一段時間後，我開始覺得我明明都已經認真寫好 commit message 了&lt;br/&gt;
為什麼每次 Pull Request / Merge Request 還是花那麼多時間寫&lt;br/&gt;
是不是有什麼工具可以自動透過寫好的 commit 產生一些訊息？&lt;br/&gt;
再來就找到了 &lt;a href="https://github.com/commitizen/cz-conventional-changelog"&gt;cz-conventional-changelog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但 &lt;a href="https://github.com/commitizen/cz-conventional-changelog"&gt;cz-conventional-changelog&lt;/a&gt; 不能跟 &lt;a href="https://github.com/leonardoanalista/cz-customizable"&gt;cz-customizable&lt;/a&gt; 同時使用&lt;br/&gt;
（Read More 👉 &lt;a href="https://github.com/commitizen/cz-cli/issues/434"&gt;Possible to use multiple adapters? #434&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;而且這些擴充常常要用到 &lt;code&gt;package.json&lt;/code&gt; 來做設定&lt;br/&gt;
可是我就不是 Java Script 的專案，就不想加入這個檔案來設定啊 🤷‍♂️&lt;br/&gt;
所以才開始來找是不是有 Python 版本的替代方案&lt;br/&gt;
（Python 的 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 支援的 toml （&lt;code&gt;.cz.toml&lt;/code&gt;）是通用的格式，裡面 Python 相關的內容，適用於各語言）&lt;/p&gt;
&lt;h3 id="_3"&gt;持續貢獻&lt;/h3&gt;
&lt;p&gt;整體來說， commitizen 是一個讓我貢獻得很有成就感的專案&lt;br/&gt;
最主要的原因之一就是這是我想用的工具&lt;/p&gt;
&lt;p&gt;貢獻的過程，也會很快就收到作者 &lt;a href="https://github.com/Woile"&gt;Woile&lt;/a&gt; 的回饋&lt;br/&gt;
它也會用很友善的文字，讓我覺得貢獻 commitizen 所花的時間，是有受到重視的&lt;/p&gt;
&lt;p&gt;&lt;img alt="friendly-response-1" src="/images/posts-image/2020-02-22-python-table-manner-series/friendly-response-1.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="friendly-response-2" src="/images/posts-image/2020-02-22-python-table-manner-series/friendly-response-2.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;除此之外， commitizen 測試覆蓋率很高，比較不需要怕改錯了會不會弄壞舊有的功能&lt;br/&gt;
程式碼風格上，透過 black 跟 flake8 來規範，讓程式碼閱讀起來輕鬆很多&lt;br/&gt;
在貢獻的過程中，也學到了不少很實用的工具（e.g., pre-commit, cookiecutter）&lt;/p&gt;
&lt;p&gt;所以&lt;strong&gt;一起來貢獻 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 吧 💪&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@klauskpm/how-to-create-good-commit-messages-67943d30cced"&gt;how to create a good commit message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/writing-good-commit-messages-a-practical-guide/"&gt;How to Write Good Commit Messages: A Practical Git Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semver.org/"&gt;Semantic Version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Git"></category></entry><entry><title>Python Table Manners - pre-commit: git commit 前做完檢查</title><link href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-pre-commit" rel="alternate"></link><published>2020-02-28T23:10:00+08:00</published><updated>2020-10-04T16:10:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-02-28:/posts/tech/2020/02/python-table-manners-pre-commit</id><summary type="html">&lt;p&gt;前一篇提到了透過 &lt;a href="http://www.pyinvoke.org/"&gt;invoke&lt;/a&gt; 簡化繁瑣的指令&lt;br/&gt;
但人類除了是懶惰的，還是健忘的&lt;br/&gt;
即使已經更簡便了，沒被督促常常還是會忘了執行&lt;br/&gt;
就像這次的系列文，如果沒被寫作松督促，不知道什麼時候才會出現（笑&lt;br/&gt;
這篇來聊聊如何透過 &lt;a href="https://pre-commit.com"&gt;pre-commit&lt;/a&gt; 強制做檢查&lt;/p&gt;

&lt;h2 id="pre-commit"&gt;pre-commit&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; 讓我們能方便的加入 &lt;a href="https://git-scm.com/book/zh-tw/v2/Customizing-Git-Git-Hooks"&gt;Git Hook&lt;/a&gt;，並在各種 git 的相關操作前進行檢查&lt;/p&gt;
&lt;p&gt;正如它的命名，它可以在進行 &lt;code&gt;git commit&lt;/code&gt; 前執行一些操作&lt;br/&gt;
不過並不僅限於 commit 前，也可以在其它 git 的階段進行&lt;br/&gt;
之所以要這麼做就是為了讓不符合要求的程式碼，從最一開始就不會進入到版本庫 （pre commit）或 git 伺服器 （pre push）&lt;/p&gt;
&lt;h2 id="pre-commit_1"&gt;使用 pre-commit 進行檢查&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 安裝 pre-commit&lt;/span&gt;
pipenv install pre-commit …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;前一篇提到了透過 &lt;a href="http://www.pyinvoke.org/"&gt;invoke&lt;/a&gt; 簡化繁瑣的指令&lt;br/&gt;
但人類除了是懶惰的，還是健忘的&lt;br/&gt;
即使已經更簡便了，沒被督促常常還是會忘了執行&lt;br/&gt;
就像這次的系列文，如果沒被寫作松督促，不知道什麼時候才會出現（笑&lt;br/&gt;
這篇來聊聊如何透過 &lt;a href="https://pre-commit.com"&gt;pre-commit&lt;/a&gt; 強制做檢查&lt;/p&gt;

&lt;h2 id="pre-commit"&gt;pre-commit&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; 讓我們能方便的加入 &lt;a href="https://git-scm.com/book/zh-tw/v2/Customizing-Git-Git-Hooks"&gt;Git Hook&lt;/a&gt;，並在各種 git 的相關操作前進行檢查&lt;/p&gt;
&lt;p&gt;正如它的命名，它可以在進行 &lt;code&gt;git commit&lt;/code&gt; 前執行一些操作&lt;br/&gt;
不過並不僅限於 commit 前，也可以在其它 git 的階段進行&lt;br/&gt;
之所以要這麼做就是為了讓不符合要求的程式碼，從最一開始就不會進入到版本庫 （pre commit）或 git 伺服器 （pre push）&lt;/p&gt;
&lt;h2 id="pre-commit_1"&gt;使用 pre-commit 進行檢查&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 安裝 pre-commit&lt;/span&gt;
pipenv install pre-commit --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pre-commit-hook"&gt;設定 pre-commit hook&lt;/h3&gt;
&lt;p&gt;先透過設定檔 &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;，告訴 pre-commit 要做哪些檢查&lt;br/&gt;
需要注意的是，專案必須要是一個 git 專案&lt;br/&gt;
這些 git hook 都會被寫入 &lt;code&gt;.git/hooks/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/pre-commit/pre-commit-hooks&lt;/span&gt;
    &lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v3.2.0&lt;/span&gt;
    &lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;end-of-file-fixer&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;trailing-whitespace&lt;/span&gt;
        &lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;--markdown-linebreak-ext=md&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上面的例子來說&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;repos&lt;/code&gt; 告訴 pre-commit 要去哪邊找到這些 hook&lt;ul&gt;
&lt;li&gt;&lt;code&gt;repo&lt;/code&gt;: 去找專案 &lt;a href="https://github.com/pre-commit/pre-commit-hooks"&gt;pre-commit-hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rev&lt;/code&gt;: 在專案 pre-commit-hooks 找到 rev &lt;a href="https://github.com/pre-commit/pre-commit-hooks/tree/v2.3.0"&gt;v2.3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hooks&lt;/code&gt;: 在 pre-commit-hooks rev v2.3.0 的 &lt;a href="https://github.com/pre-commit/pre-commit-hooks/blob/v2.3.0/.pre-commit-hooks.yaml"&gt;.pre-commit-hooks.yaml&lt;/a&gt; 中尋找指定的 hook&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;: hook id&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args&lt;/code&gt;: 執行這個 hook 的額外參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pre-commit 整理了較為通用的 hook 在 &lt;a href="https://github.com/pre-commit/pre-commit-hooks"&gt;pre-commit-hooks&lt;/a&gt;&lt;br/&gt;
除此之外，如 &lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt; 和 &lt;a href="https://gitlab.com/pycqa/flake8"&gt;flake8&lt;/a&gt; 等工具也都有提供 pre-commit hook&lt;/p&gt;
&lt;p&gt;另外，&lt;strong&gt;建議 rev 不要使用 master，而應該使用版本號等明確的 rev&lt;/strong&gt;&lt;br/&gt;
原因是預設 pre-commit 會在執行時將 hook 專案 clone 下來&lt;br/&gt;
如果沒有特別設定， pre-commit 不會把最新版 pull 下來&lt;br/&gt;
指到的 master 就會是第一次 pre-commit 抓到時的 master，不是最新版的 master&lt;/p&gt;
&lt;p&gt;寫完設定檔後，接著就是把 pre-commit hook 安裝到 git 專案中&lt;/p&gt;
&lt;h2 id="pre-commit_2"&gt;安裝 pre-commit 到專案中&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 將 pre-commit hook 安裝到 git 專案&lt;/span&gt;
pipenv run pre-commit install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是每次重新 clone 之後，都必須要執行一次&lt;br/&gt;
雖然可以將 &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; 加入版本控制&lt;br/&gt;
但 &lt;code&gt;.git/hook/&lt;/code&gt; 是不能被加入版本控制的&lt;/p&gt;
&lt;p&gt;執行完會出現以下訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pre-commit installed at .git/hooks/pre-commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一次進行 git commit 時，會將 &lt;a href="https://github.com/pre-commit/pre-commit-hooks"&gt;pre-commit-hooks&lt;/a&gt; clone 到 pre-commit 統一管理的地方&lt;br/&gt;
之後就會進行 &lt;code&gt;Fix End of Files&lt;/code&gt; 跟 &lt;code&gt;Trim Trailing Whitespace&lt;/code&gt; 的檢查&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Initializing environment &lt;span class="k"&gt;for&lt;/span&gt; https://github.com/pre-commit/pre-commit-hooks.
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Installing environment &lt;span class="k"&gt;for&lt;/span&gt; https://github.com/pre-commit/pre-commit-hooks.
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Once installed this environment will be reused.
&lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; This may take a few minutes...
Fix End of Files.........................................................Passed
Trim Trailing Whitespace.................................................Passed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果沒有通過， git 會阻止你進行 commit&lt;/p&gt;
&lt;p&gt;pre-commit 每次都只會針對要 commit 的檔案做檢查&lt;br/&gt;
所以建議第一次將 pre-commit 引入專案時，可以先檢查所有的檔案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run pre-commit run --all-files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="pre-commit-hook_1"&gt;使用自定義的 pre-commit hook&lt;/h2&gt;
&lt;p&gt;下面的例子是在 commit 前，要進行 pytest 的檢查&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;local&lt;/span&gt;
    &lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pytest&lt;/span&gt;
        &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pytest&lt;/span&gt;
        &lt;span class="nt"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;commit&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
        &lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;system&lt;/span&gt;
        &lt;span class="nt"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pipenv run pytest&lt;/span&gt;
        &lt;span class="nt"&gt;pass_filenames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
        &lt;span class="nt"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;repo: local&lt;/code&gt;: 直接在本地資料夾執行&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hooks&lt;/code&gt;: 有哪些 hook 要執行&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;: hook 的 id / name 是 &lt;code&gt;pytest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stages&lt;/code&gt;: 在 &lt;code&gt;commit&lt;/code&gt; 前執行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;language&lt;/code&gt;: 直接使用系統執行 &lt;code&gt;entry&lt;/code&gt; 內的指令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;entry&lt;/code&gt;: 這個 hook 要執行的指令是 &lt;code&gt;pipenv run pytest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;types&lt;/code&gt;: 只有在 python 這種檔案類型才進行檢查&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pass_filenames&lt;/code&gt;: 是否要將 commit 的檔案名稱作為 &lt;code&gt;entry&lt;/code&gt; 中指令的參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中 &lt;code&gt;stages&lt;/code&gt; 總共有六種&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;commit&lt;/li&gt;
&lt;li&gt;merge-commit&lt;/li&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;li&gt;prepare-commit-msg&lt;/li&gt;
&lt;li&gt;commit-msg&lt;/li&gt;
&lt;li&gt;manual&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是當執行 &lt;code&gt;pipenv run pre-commit commit&lt;/code&gt; 時&lt;br/&gt;
預設只會寫入 &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt;&lt;br/&gt;
如果要加入其他階段，則必須要在後面加入參數 &lt;code&gt;-t [hook-type]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run pre-commit install -t pre-push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;支援 6 種 hook-type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pre-commit&lt;/li&gt;
&lt;li&gt;pre-merge-commit&lt;/li&gt;
&lt;li&gt;pre-push&lt;/li&gt;
&lt;li&gt;prepare-commit-msg&lt;/li&gt;
&lt;li&gt;commit-msg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;像是 pytest 這種需要執行比較久的任務&lt;br/&gt;
我就不見得會在 commit 這個 stage 做檢查&lt;br/&gt;
而是會把 &lt;code&gt;stages&lt;/code&gt; 改成 &lt;code&gt;push&lt;/code&gt;&lt;br/&gt;
並安裝 pre-push 的 hook (i.e., &lt;code&gt;pipenv run pre-commit install -t pre-push&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;如果不想要每個 hook 都各自做設定，可以在 &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; 加上 &lt;code&gt;default_stages&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;default_stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表示如果沒有特定指定 &lt;code&gt;stages&lt;/code&gt; 的 hook 都只在 &lt;code&gt;push&lt;/code&gt; 的階段做檢查&lt;/p&gt;
&lt;h2 id="pre-commit-hook_2"&gt;為自己的工具加上 pre-commit hook&lt;/h2&gt;
&lt;p&gt;為你寫的工具加上 pre-commit hook 可以讓人更方便使用你的工具&lt;br/&gt;
在工具專案中加入 &lt;code&gt;.pre-commit-hooks.yaml&lt;/code&gt; 讓 pre-commit 知道其他人引入你的工具時要做什麼處理&lt;br/&gt;
撰寫的方式跟 local 的 repo 的寫法相似&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;local&lt;/span&gt;
      &lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
          &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
          &lt;span class="nt"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="bouns-commit"&gt;Bouns: 可以只跳警告不擋下 commit 嗎？&lt;/h2&gt;
&lt;p&gt;根據 &lt;a href="https://github.com/pre-commit/pre-commit/issues/923"&gt;Can I show warning message without blocking the commit? #923&lt;/a&gt; 提到的， pre-commit 認為這不是好的作法&lt;br/&gt;
但仍然可以透過對 &lt;code&gt;entry&lt;/code&gt; 內指令的操作達到類似的效果&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mropengate.blogspot.com/2019/08/pre-commit-git-hooks_4.html"&gt;提升程式碼品質：使用 Pre-Commit (Git Hooks)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Git"></category><category term="Code Quality"></category></entry><entry><title>Python Table Manners - 管理繁瑣任務</title><link href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-manage-trival-tasks" rel="alternate"></link><published>2020-02-27T20:04:00+08:00</published><updated>2020-10-04T16:05:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-02-27:/posts/tech/2020/02/python-table-manners-manage-trival-tasks</id><summary type="html">&lt;p&gt;前面幾篇從套件管理、虛擬環境、測試、風格檢查到自動排版，提到了很多的工具&lt;br/&gt;
每一個工具又有各自的參數和設定&lt;br/&gt;
這麼多指令怎麼可能記得起來 😱&lt;/p&gt;
&lt;p&gt;&lt;img alt="too-many-commands" src="/images/posts-image/2020-02-22-python-table-manner-series/too-many-commands.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;前面幾篇從套件管理、虛擬環境、測試、風格檢查到自動排版，提到了很多的工具&lt;br/&gt;
每一個工具又有各自的參數和設定&lt;br/&gt;
這麼多指令怎麼可能記得起來 😱&lt;/p&gt;
&lt;p&gt;&lt;img alt="too-many-commands" src="/images/posts-image/2020-02-22-python-table-manner-series/too-many-commands.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;所以在這篇要介紹如何用 &lt;a href="http://www.pyinvoke.org/"&gt;invoke&lt;/a&gt; 管理這些指令&lt;/p&gt;

&lt;h2 id="invoke"&gt;invoke 是什麼&lt;/h2&gt;
&lt;p&gt;invoke 是一套任務執行工具 (task execution tool)，主要用來是統一管理各種指令&lt;br/&gt;
有點像是 Python 的 &lt;code&gt;Makefile&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="invoke_1"&gt;安裝 invoke&lt;/h2&gt;
&lt;p&gt;不同於 pytest, flake8 等套件，我會同時將 invoke 安裝在系統和虛擬環境中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 安裝 invoke 到系統&lt;/span&gt;
pipx install invoke

&lt;span class="c1"&gt;# 安裝 invoke 到虛擬環境中&lt;/span&gt;
pipenv install invoke --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;裝在系統的原因是想把它當成類似 &lt;code&gt;make&lt;/code&gt; 的指令來使用&lt;/p&gt;
&lt;p&gt;在虛擬環境還需要裝的原因是，部署時系統通常不會預裝 invoke&lt;br/&gt;
如果想在部署時也能使用 invoke 的功能，最方便的方法透過 pipenv 安裝&lt;/p&gt;
&lt;h2 id="invoke_2"&gt;如何使用 invoke&lt;/h2&gt;
&lt;p&gt;再回到 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt; 的例子&lt;br/&gt;
checkout 到 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/tree/83e48c6443303045ed1de2f020297c3110bb1300"&gt;commit 83e4&lt;/a&gt;，回到使用 invoke 管理指令前&lt;br/&gt;
從當時的文件可以看到，還需要使用相對冗長的指令&lt;/p&gt;
&lt;p&gt;&lt;img alt="before-invoke" src="/images/posts-image/2020-02-22-python-table-manner-series/before-invoke.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;到了 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/tree/72ad956fd200867dc292a156c97a99a09ebe0104"&gt;commit 72ad&lt;/a&gt; (實作已經在 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/commit/bc98eec28037a9bed5063fef0f0f564893fce3ac"&gt;commit bc98&lt;/a&gt; 完成，只是在 commit 72ad 才更新文件)，已經可以使用較短且較為統一的指令 (以 &lt;code&gt;inv&lt;/code&gt; 作為開頭)&lt;/p&gt;
&lt;p&gt;&lt;img alt="after-invoke" src="/images/posts-image/2020-02-22-python-table-manner-series/after-invoke.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;除此之外，引入 invoke 後，也不用每次都去翻文件&lt;br/&gt;
&lt;code&gt;invoke --list&lt;/code&gt; 可以列出所有可用的指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 列出可用的 invoke 指令&lt;/span&gt;
&lt;span class="c1"&gt;# p.s. invoke 指令可以縮寫為 inv&lt;/span&gt;
$ inv --list

Available tasks:

  clean      Remove all the tmp files in .gitignore
  develop    Install script in pipenv environment in development mode
  init-dev   Install development dependencies
  install    Install script in pipenv environment
  &lt;span class="nb"&gt;test&lt;/span&gt;       Run testcase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行的方式則是在 invoke 後面直接加上任務名稱&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;inv clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="invoke_3"&gt;實作 invoke 任務&lt;/h2&gt;
&lt;p&gt;我們先試著將前面的 &lt;code&gt;python setup.py develop&lt;/code&gt; 改成 invoke 的任務&lt;/p&gt;
&lt;p&gt;預設 invoke 會去找目錄下的 &lt;code&gt;tasks.py&lt;/code&gt;&lt;br/&gt;
所以第一步要先在專案最上層建立 &lt;code&gt;tasks.py&lt;/code&gt;&lt;br/&gt;
接著撰寫一個函式叫 &lt;code&gt;develop&lt;/code&gt; ，這就會是之後的任務名稱 (i.e., 透過 &lt;code&gt;inv develop&lt;/code&gt; 執行)&lt;br/&gt;
在函式前加上裝飾器 (decorator) &lt;code&gt;@task&lt;/code&gt;&lt;br/&gt;
invoke 會傳入一個 context 做為第一個參數 (Read More 👉 &lt;a href="http://docs.pyinvoke.org/en/stable/getting-started.html#aside-what-exactly-is-this-context-arg-anyway"&gt;what exactly is this ‘context’ arg anyway?&lt;/a&gt;)&lt;br/&gt;
(p.s. 原本的程式碼中是使用 &lt;code&gt;cmd&lt;/code&gt; ，那是錯誤的用法)&lt;br/&gt;
最後就可以用這個 context （參數 &lt;code&gt;ctx&lt;/code&gt;） 執行指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;develop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"python setup.py develop"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如同先前所提到的，操作都應該在虛擬環境內被完成&lt;br/&gt;
所以我將 &lt;code&gt;pipenv run&lt;/code&gt; 的前綴提出來&lt;br/&gt;
這樣就能確保之後的操作一定都會在虛擬環境內執行&lt;br/&gt;
如果之後更換了管理虛擬環境的工具（e.g. &lt;code&gt;poetry run&lt;/code&gt;），也可以更輕易的改動 &lt;code&gt;tasks.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="n"&gt;PIPENV_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pipenv run"&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;develop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;PIPENV_PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; python setup.py develop"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_1"&gt;任務相依&lt;/h2&gt;
&lt;p&gt;如果任務之間有相依性，可以在 &lt;code&gt;@task&lt;/code&gt; 後加入 &lt;code&gt;pre&lt;/code&gt; 或 &lt;code&gt;post&lt;/code&gt;&lt;br/&gt;
表示任務執行前或後還要執行其他任務&lt;/p&gt;
&lt;p&gt;e.g., 在初始環境 (&lt;code&gt;init&lt;/code&gt;) 前，常會先清除不必要的檔案 (&lt;code&gt;clean&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"clean up"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"initial"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_2"&gt;任務模組化&lt;/h2&gt;
&lt;p&gt;當任務便多時，為了方便維護，就會傾向將相似的任務模組化&lt;br/&gt;
這時候就可以使用到 &lt;code&gt;namespace&lt;/code&gt; 的概念&lt;br/&gt;
(Read More 👉 &lt;a href="http://docs.pyinvoke.org/en/stable/concepts/namespaces.html"&gt;Constructing namespaces&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;不過我不會在這篇文章深入探討要怎麼說&lt;br/&gt;
一般來說，除非任務真的非常多，這是不太必要的&lt;/p&gt;
&lt;p&gt;如果有興趣看我怎麼把 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt; 的任務模組化&lt;br/&gt;
可以參考 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/commit/f1050eabf44a8b8e662370bd97b2a79ad57723c2"&gt;commit f105&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最後修改後 &lt;code&gt;tasks&lt;/code&gt; 套件中有這些模組&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;├── tasks
│   ├── __init__.py
│   ├── build.py
│   ├── common.py
│   ├── env.py
│   ├── style.py
│   └── test.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和各個模組下的指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ inv --list

Available tasks:

  secure              Check package security
  build.clean         Remove all the tmp files in .gitignore
  build.develop       Install script in pipenv environment in development mode
  build.install       Install script in pipenv environment
  build.test-cli      Test whether the cli is runnable
  env.clean           Remove virtual environment
  env.init            Install production dependencies
  env.init-dev        Install development dependencies
  style.flake8        Check style through flake8
  style.mypy          Check style through mypy
  style.pylint        Check style through pylint
  style.reformat      Reformat python files through black
  style.run &lt;span class="o"&gt;(&lt;/span&gt;style&lt;span class="o"&gt;)&lt;/span&gt;   Check style through linter &lt;span class="o"&gt;(&lt;/span&gt;Note that pylint is not included&lt;span class="o"&gt;)&lt;/span&gt;
  test.cov            Run &lt;span class="nb"&gt;test&lt;/span&gt; coverage check
  test.run &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;     Run &lt;span class="nb"&gt;test&lt;/span&gt; cases
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="auto-completion"&gt;自動補完 （Auto-completion）&lt;/h2&gt;
&lt;p&gt;工程師是很懶惰的&lt;br/&gt;
這種指令列工具沒有自動補完怎麼行&lt;br/&gt;
invoke 當然也想到了&lt;br/&gt;
透過參數 &lt;code&gt;--print-completion-script=[shell]&lt;/code&gt; 就能取得 invoke 預先寫好的自動補完腳步&lt;br/&gt;
目前支援 bash, zsh, fish 三種 shell&lt;/p&gt;
&lt;p&gt;e.g., 將 invoke 產生的 zsh 自動補完腳本寫入 &lt;code&gt;~/.zsh&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;inv --print-completion-script&lt;span class="o"&gt;=&lt;/span&gt;zsh &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="makefile"&gt;為什麼不用 Makefile 就好？&lt;/h2&gt;
&lt;p&gt;因為有些 shell script 並不見得那麼好寫&lt;br/&gt;
（也可能只是我不熟...）&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;


&lt;span class="n"&gt;PIPENV_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pipenv run"&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Remove all the tmp files in .gitignore"""&lt;/span&gt;
    &lt;span class="n"&gt;files_to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.gitignore'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;files_to_remove&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"rm -rf &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files_to_remove&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（雖然後來發現上面的一串，可以用 &lt;code&gt;git clean -Xdf&lt;/code&gt; 取代...）&lt;/p&gt;
&lt;p&gt;除此之外，invoke 也可以讓 shell script 的結果，直接跟 Python 互動&lt;br/&gt;
更容易實作出想要的功能&lt;/p&gt;
&lt;h2 id="_3"&gt;其他進階應用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如何在任務加上參數？&lt;ul&gt;
&lt;li&gt;任務的函式後面加上除了 context 意外的參數&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="http://docs.pyinvoke.org/en/stable/getting-started.html#task-parameters"&gt;Task parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為什麼用 invoke 的結果跟指令列上的執行結果不完全相同？&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;run&lt;/code&gt; 函式中加上 &lt;code&gt;pty=True&lt;/code&gt; 參數通常能解決，但建議可以看看 invoke 為什麼不將這設定為預設行為&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="http://www.pyinvoke.org/faq.html#why-is-my-command-behaving-differently-under-invoke-versus-being-run-by-hand"&gt;Why is my command behaving differently under Invoke versus being run by hand?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何在任務執行失敗時，只做警告，不要跳錯&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;run&lt;/code&gt; 函式加上 &lt;code&gt;warn=True&lt;/code&gt; (預設是 &lt;code&gt;False&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="http://docs.pyinvoke.org/en/1.2/api/runners.html#invoke.runners.Runner.run"&gt;invoke.runners.Runner.run&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks/"&gt;Break the Cycle: Three excellent Python tools to automate repetitive tasks - PyCon US 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Task"></category></entry><entry><title>Python Table Manners - 程式碼風格</title><link href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-coding-style" rel="alternate"></link><published>2020-02-26T18:39:00+08:00</published><updated>2020-10-04T15:57:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-02-26:/posts/tech/2020/02/python-table-manners-coding-style</id><summary type="html">&lt;p&gt;接下來要介紹的是 linters&lt;br/&gt;
它們是用來檢查程式是否符合特定程式碼風格的一類工具&lt;br/&gt;
以 Python 來說，則可能是判斷有沒有遵守 &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;&lt;br/&gt;
linter 除了能檢查是否不符風格，通常也能用來檢查語法錯誤&lt;/p&gt;
</summary><content type="html">&lt;p&gt;接下來要介紹的是 linters&lt;br/&gt;
它們是用來檢查程式是否符合特定程式碼風格的一類工具&lt;br/&gt;
以 Python 來說，則可能是判斷有沒有遵守 &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;&lt;br/&gt;
linter 除了能檢查是否不符風格，通常也能用來檢查語法錯誤&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="-flake8"&gt;風格檢查 - flake8&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt; 是 Python 最常被使用的 linter 之一&lt;br/&gt;
幾乎是所有 Python 開源專案的標準配備&lt;/p&gt;
&lt;h3 id="_1"&gt;使用&lt;/h3&gt;
&lt;p&gt;以下面這段程式碼為例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# bad_code.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s2"&gt;"My Operating system"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這段程式碼出現了兩個問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把模組 &lt;code&gt;os&lt;/code&gt; 指派成一個字串，會導致無法使用 &lt;code&gt;os&lt;/code&gt; 模組內的函式（因為 &lt;code&gt;os&lt;/code&gt; 已經變成一個字串）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os&lt;/code&gt; 的 &lt;code&gt;=&lt;/code&gt; 後面加上兩個空白是不必要的，不符合 PEP 8 的規範&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 安裝 flake8&lt;/span&gt;
pipenv install flake8 --dev

&lt;span class="c1"&gt;# 執行 flake8&lt;/span&gt;
pipenv run flake8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;flake8 預設對當前目錄下所有 Python 的檔案做檢查&lt;/p&gt;
&lt;p&gt;執行後，&lt;code&gt;flake8&lt;/code&gt; 會將這些錯誤找出來&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./bad_code.py:4:1: F811 redefinition of unused 'os' from line 1
./bad_code.py:4:5: E222 multiple spaces after operator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;透過錯誤碼（e.g., &lt;code&gt;F811&lt;/code&gt;）可以在 &lt;a href="https://www.flake8rules.com/"&gt;flake8 rules&lt;/a&gt; 找到為什麼這是個錯誤和怎麼修正比較好&lt;/p&gt;
&lt;h3 id="_2"&gt;設定&lt;/h3&gt;
&lt;p&gt;某些狀況下，我們會不完全依照 flake8 的風格&lt;br/&gt;
例如 &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt; 的每行只能有 79 個字元，已經越來越不被使用&lt;/p&gt;
&lt;p&gt;除了可以直接在 &lt;code&gt;flake8&lt;/code&gt; 指令後面加上參數&lt;br/&gt;
也可以直接寫入設定檔 &lt;code&gt;setup.cfg&lt;/code&gt; (或 &lt;code&gt;.flake8&lt;/code&gt;, &lt;code&gt;tox.ini&lt;/code&gt;）&lt;br/&gt;
以下是我所使用的設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[flake8]&lt;/span&gt;
&lt;span class="na"&gt;ignore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    # F632: use ==/!= to compare str, bytes, and int literals&lt;/span&gt;
&lt;span class="s"&gt;    F632,&lt;/span&gt;
&lt;span class="s"&gt;    # W503: Line break occurred before a binary operator&lt;/span&gt;
&lt;span class="s"&gt;    W503,&lt;/span&gt;
&lt;span class="s"&gt;    # E501: Line too long&lt;/span&gt;
&lt;span class="s"&gt;    E501,&lt;/span&gt;
&lt;span class="s"&gt;    # E203: Whitespace before ':' (for black)&lt;/span&gt;
&lt;span class="s"&gt;    E203&lt;/span&gt;
&lt;span class="na"&gt;exclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    .git,&lt;/span&gt;
&lt;span class="s"&gt;    __pycache__,&lt;/span&gt;
&lt;span class="s"&gt;    build,&lt;/span&gt;
&lt;span class="s"&gt;    dist&lt;/span&gt;

&lt;span class="na"&gt;max-line-length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;88&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ignore&lt;/code&gt;: 指定要忽略的錯誤類型（可以從 &lt;a href="https://www.flake8rules.com/"&gt;flake8 rules&lt;/a&gt; 找到這些錯誤碼）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exclude&lt;/code&gt;: 不用被檢查的檔案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max-line-length&lt;/code&gt;: 每行最長長度（這裡設定的 88，是後面會介紹到的 &lt;a href="https://black.readthedocs.io/en/stable/"&gt;black&lt;/a&gt; 的預設值）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read More 👉 &lt;a href="https://flake8.pycqa.org/en/latest/user/configuration.html"&gt;Configuring Flake8&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;局部跳過檢查&lt;/h3&gt;
&lt;p&gt;另一種狀況是，我們只想在讓一兩行程式碼跳過 flake8 的檢查&lt;br/&gt;
但這份檔案的其他地方還是希望能被檢查&lt;br/&gt;
這時候可以在那行程式碼加上 &lt;code&gt;# noqa: [error]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'example'&lt;/span&gt;  &lt;span class="c1"&gt;# noqa: E731&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="-pylint"&gt;風格檢查 - pylint&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.pylint.org/"&gt;pylint&lt;/a&gt; 同樣是相當常見的 Python linter&lt;br/&gt;
一般來說，比 &lt;code&gt;flake8&lt;/code&gt; 檢查的更加嚴格&lt;/p&gt;
&lt;h3 id="_4"&gt;使用&lt;/h3&gt;
&lt;p&gt;與 flake8 不同， &lt;code&gt;pylint&lt;/code&gt; 指令需要指定模組或套件名稱才能進行檢查&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 安裝 pylint&lt;/span&gt;
pipenv install pylint --dev

&lt;span class="c1"&gt;# 執行 pylint&lt;/span&gt;
pipenv run pylint &amp;lt;package&amp;gt; ......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_5"&gt;設定&lt;/h3&gt;
&lt;p&gt;原本我建議使用 &lt;code&gt;pipenv run pylint --generate-rcfile &amp;gt;&amp;gt; .pylintrc&lt;/code&gt; 來產生設定檔&lt;br/&gt;
但現在我更傾向在 pyproject.toml 中只寫入想要客製化的設定&lt;br/&gt;
原先的做法會在設定檔 .pylintrc 中有著大量的預設值，不容易找到哪些是修改過的設定，造成維護上的困難&lt;br/&gt;
不過需要注意的是在某些版本的 pylint 這個設定方式會出錯，所以建議安裝版本 2.6.0 以上的 pylint&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.pylint]&lt;/span&gt;
    &lt;span class="k"&gt;[tool.pylint.messages_control]&lt;/span&gt;
    &lt;span class="n"&gt;disable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s"&gt;"bad-continuation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"missing-function-docstring"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"missing-module-docstring"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"invalid-name"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;[tool.pylint.format]&lt;/span&gt;
    &lt;span class="n"&gt;max-line-length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 disable 的錯誤可以在 &lt;a href="http://pylint-messages.wikidot.com/all-codes"&gt;pylint-messages&lt;/a&gt; 找到&lt;/p&gt;
&lt;h3 id="_6"&gt;局部跳過檢查&lt;/h3&gt;
&lt;p&gt;只要在要忽略的程式碼前面一行加上 &lt;code&gt;# pylint: disable=[error]&lt;/code&gt;&lt;br/&gt;
但需要注意的是，這行以後全部的檢查都會被關閉&lt;br/&gt;
所以要記得在需要開啟檢查的地方再加上 &lt;code&gt;# pylint: enable=[error]&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# pylint: disable=line-too-long&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Imagine this is a really long line!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# pylint: enable=line-too-long&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="flake8-vs-pylint"&gt;flake8 v.s. pylint&lt;/h2&gt;
&lt;p&gt;除了相關的檢查外， pylint 會比 flake8 做更嚴格的檢查&lt;br/&gt;
也可以做更多的設定，但在執行上也會比較慢&lt;/p&gt;
&lt;p&gt;在 PyCon US 2018 的 &lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2019/09/automating-code-quality/"&gt;Automating Code Quality&lt;/a&gt;，Kyle Knapp 很詳細的比較了這兩個工具&lt;/p&gt;
&lt;p&gt;我的使用上會把 flake8 作為強制檢查程式碼風格的一環&lt;br/&gt;
只要沒有通過 flake8 的檢查，就應該做修正&lt;br/&gt;
而 pylint 的警告則是只作為參考&lt;/p&gt;
&lt;p&gt;flake8 在大多數狀況已經足夠&lt;br/&gt;
花時間去修改成符合某些 pylint 過於嚴格的檢查，或設定 &lt;code&gt;.pylint&lt;/code&gt;，對我來說並不值得&lt;br/&gt;
而且 Guido 也是這麼說的 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="because-guido-say-so" src="/images/posts-image/2020-02-22-python-table-manner-series/because-guido-say-so.png"/&gt;&lt;/p&gt;
&lt;h2 id="-mypy"&gt;型別檢查 - mypy&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://mypy-lang.org/"&gt;mypy&lt;/a&gt; 是 Python 做靜態型別檢查的工具&lt;br/&gt;
Python 是一個動態型別的語言，所以可以隨意地不同型別的值指派給同一個變數&lt;br/&gt;
e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;str_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"This is a string"&lt;/span&gt;

&lt;span class="n"&gt;str_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但這麼做有時候會造成邏輯上的錯誤&lt;br/&gt;
例如 &lt;code&gt;import csv&lt;/code&gt; 時，如果使用了 &lt;code&gt;csv&lt;/code&gt; 作為其他的變數名稱&lt;br/&gt;
就會將變數的值取代掉原本引入的模組&lt;/p&gt;
&lt;p&gt;除此之外，型別標記的程式碼也會增加可讀性&lt;br/&gt;
因此近幾年越來越多人注意 Python 的型別標記&lt;/p&gt;
&lt;p&gt;PyCon US 2017 中 Lisa Guo 和 Hui Ding 的 Keynote Session &lt;a href="https://lee-w.github.io/posts/tech/2017/06/Python-at-IG"&gt;Python@Instagram&lt;/a&gt; 講了 Instagram 是為什麼要和如何將龐大的程式庫加上型別標示&lt;br/&gt;
&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-us-2020/2020/05/static-typing-in-python/"&gt;Static Typing in Python&lt;/a&gt; 則是 PyCon US 2020 年 Dustin 對型別標示和檢查的詳細介紹&lt;br/&gt;
而 Vita Smid 在 EuroPython 2019 的 &lt;a href="https://lee-w.github.io/pycon-note/posts/europython-2019/2020/03/static-typing-beyond-the-basics-of-def-foo-x-int-str/"&gt;Static typing: beyond the basics of def foo(x: int) -str:&lt;/a&gt; 則講到了型別檢查更進階一點的應用&lt;br/&gt;
這幾場演講都非常推薦可以觀看！&lt;/p&gt;
&lt;h3 id="_7"&gt;使用&lt;/h3&gt;
&lt;p&gt;以下列的程式碼為例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# wrong_type_hint.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;func&lt;/code&gt; 的參數 &lt;code&gt;val&lt;/code&gt; 標記為 &lt;code&gt;List[str]&lt;/code&gt;&lt;br/&gt;
但在呼叫的時候卻傳入整數陣列&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 安裝 mypy&lt;/span&gt;
pipenv install --dev

&lt;span class="c1"&gt;# 執行 mypy&lt;/span&gt;
pipenv run mypy &lt;span class="o"&gt;[&lt;/span&gt;files&lt;span class="o"&gt;]&lt;/span&gt; --ignore-missing-imports
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行 &lt;code&gt;mypy&lt;/code&gt; 後，它就會告訴跳出型別錯誤的警告&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wrong_type_hint.py:8: error: List item &lt;span class="m"&gt;0&lt;/span&gt; has incompatible &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s2"&gt;"int"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; expected &lt;span class="s2"&gt;"str"&lt;/span&gt;

wrong_type_hint.py:8: error: List item &lt;span class="m"&gt;1&lt;/span&gt; has incompatible &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s2"&gt;"int"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; expected &lt;span class="s2"&gt;"str"&lt;/span&gt;

wrong_type_hint.py:8: error: List item &lt;span class="m"&gt;2&lt;/span&gt; has incompatible &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s2"&gt;"int"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; expected &lt;span class="s2"&gt;"str"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;mypy 預設會去找所有引入的函式庫是否也有做好型別標記&lt;br/&gt;
所以一般使用上都會加上參數 &lt;code&gt;--ignore-missing-imports&lt;/code&gt;&lt;br/&gt;
只要確保我們撰寫的部分都是正確的&lt;/p&gt;
&lt;h3 id="_8"&gt;設定&lt;/h3&gt;
&lt;p&gt;以下是我用來設定 mypy 的 &lt;code&gt;setup.cfg&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[mypy]&lt;/span&gt;
&lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;[your files]&lt;/span&gt;
&lt;span class="na"&gt;ignore_missing_imports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="-black"&gt;自動排版 - black&lt;/h2&gt;
&lt;p&gt;比起 flake8, pylint 只做風格檢查&lt;br/&gt;
&lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt; 會更進一步的直接修正不符合風格的程式碼&lt;br/&gt;
原本我不太喜歡使用這種的工具&lt;br/&gt;
原因是每次執行的結果不一定相同，修正的結果不見得符合我的需求，這時就要再去做設定&lt;/p&gt;
&lt;p&gt;black 某種程度上的解決了這些問題&lt;br/&gt;
black 每次執行的結果都會是相同的，而且大致上修正結果我還算滿意&lt;br/&gt;
它最特別的地方是，不太能做客製化設定，也不能只做局部程式碼修正&lt;/p&gt;
&lt;p&gt;引述自 black 的文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Black code style&lt;/p&gt;
&lt;p&gt;Black reformats entire files in place. It is not configurable. It doesn't take previous formatting into account. It doesn't reformat blocks that start with # fmt: off and end with # fmt: on. # fmt: on/off have to be on the same level of indentation. It also recognizes YAPF's block comments to the same effect, as a courtesy for straddling code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;為什麼這可能是件好事？&lt;br/&gt;
因為這能讓大家更專注於程式碼的功能本身&lt;br/&gt;
而不是這裡要不要加逗號？要不要斷行？如何去調教設定檔？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“There should be one-- and preferably only one --obvious way to do it.”&lt;br/&gt;
–The Zen of Python, by Tim Peters&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_9"&gt;使用&lt;/h3&gt;
&lt;p&gt;因為 black 還是 beta 版&lt;br/&gt;
透過 pipenv 安裝時還要加上 &lt;code&gt;--pre&lt;/code&gt; 參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 安裝 black&lt;/span&gt;
pipenv install black --dev --pre

&lt;span class="c1"&gt;# 執行 black 修正程式碼風格&lt;/span&gt;
pipenv run black &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因為 black 是直接重新排版程式碼&lt;br/&gt;
我節錄了部分我在 pycontw-postevent-report-generator &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/tree/e64a1202c2af08fe9ca5a44b1e52fdafeac2098d"&gt;commit e64a&lt;/a&gt; 修正風格的結果&lt;br/&gt;
上面紅色的部分是原本的程式碼，下面綠色是修正過的結果&lt;br/&gt;
(p.s. 當時設定的長度是 119)&lt;/p&gt;
&lt;p&gt;&lt;img alt="black-fix-1" src="/images/posts-image/2020-02-22-python-table-manner-series/black-fix-1.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="black-fix-2" src="/images/posts-image/2020-02-22-python-table-manner-series/black-fix-2.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="black-fix-3" src="/images/posts-image/2020-02-22-python-table-manner-series/black-fix-3.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;如果只想要檢查程式碼是否符合 black 的風格&lt;br/&gt;
而不要直接做修正，可以在指令後面加入 &lt;code&gt;--check&lt;/code&gt; 參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run black &amp;lt;package&amp;gt; --check
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_10"&gt;設定&lt;/h3&gt;
&lt;p&gt;雖然說 black 不能對風格做太多的設定&lt;br/&gt;
我們還是能先指定哪些檔案是要修正，哪些是不用的&lt;br/&gt;
以下是我放在 &lt;code&gt;pyproject.toml&lt;/code&gt; 的設定&lt;br/&gt;
（p.s. &lt;code&gt;line-length = 88&lt;/code&gt; 是 black 的預設值）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.black]&lt;/span&gt;
&lt;span class="n"&gt;line-length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;
&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'\.pyi?$'&lt;/span&gt;
&lt;span class="n"&gt;exclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'''&lt;/span&gt;
&lt;span class="s"&gt;/(&lt;/span&gt;
&lt;span class="s"&gt;    \.eggs&lt;/span&gt;
&lt;span class="s"&gt;  | \.git&lt;/span&gt;
&lt;span class="s"&gt;  | \.hg&lt;/span&gt;
&lt;span class="s"&gt;  | \.mypy_cache&lt;/span&gt;
&lt;span class="s"&gt;  | \.tox&lt;/span&gt;
&lt;span class="s"&gt;  | \.venv&lt;/span&gt;
&lt;span class="s"&gt;  | _build&lt;/span&gt;
&lt;span class="s"&gt;  | buck-out&lt;/span&gt;
&lt;span class="s"&gt;  | build&lt;/span&gt;
&lt;span class="s"&gt;  | dist&lt;/span&gt;
&lt;span class="s"&gt;)/&lt;/span&gt;
&lt;span class="s"&gt;'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="-isort"&gt;排序函式庫 - isort&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/timothycrosley/isort"&gt;isort&lt;/a&gt; 是自動排列函式庫引入順序的的工具&lt;br/&gt;
PEP 8 建議將引入的函式庫分為三類做排序&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;標準函式庫&lt;/li&gt;
&lt;li&gt;第三方函式庫&lt;/li&gt;
&lt;li&gt;本地的函式庫&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;並在每一個種類間空一行&lt;br/&gt;
e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 isort 的原因跟 black 差不多&lt;br/&gt;
就是讓程式來決定比較枝微末節的事，專注在開發本身上面&lt;/p&gt;
&lt;h3 id="_11"&gt;執行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 安裝 isort&lt;/span&gt;
pipenv install isort --dev

&lt;span class="c1"&gt;# 執行 isort 修正函式庫排序&lt;/span&gt;
pipenv run isort --atomic .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--atomic&lt;/code&gt;: 只有重新排序後的結果沒有語法錯誤，才會儲存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_12"&gt;設定&lt;/h3&gt;
&lt;p&gt;自從 5.0.0 後， isort 直接把常見的設定寫成 &lt;a href="https://pycqa.github.io/isort/docs/configuration/profiles/"&gt;profile&lt;/a&gt;&lt;br/&gt;
只要指定 profile 就能直接套用相容的設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.isort]&lt;/span&gt;
&lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"black"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不過有一個相關的 bug 到 5.0.5 後才修正 (Ref: &lt;a href="https://github.com/PyCQA/isort/issues/1295"&gt;Black profile not compatible with Black (ensure_newline_before_comments not working) #1295&lt;/a&gt;)&lt;br/&gt;
所以還是建議安裝最新的版本&lt;/p&gt;
&lt;h2 id="_13"&gt;其他工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mgedmin/check-manifest"&gt;check-manifest&lt;/a&gt;: 檢查有沒有少放入 &lt;code&gt;MAINIFEST.in&lt;/code&gt; 的檔案&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/asottile/seed-isort-config"&gt;seed-isort-config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bouns"&gt;Bouns: 設定檔的選用&lt;/h2&gt;
&lt;p&gt;從前面的測試篇到現在有提到很多設定檔的格式&lt;br/&gt;
通常每個工具都會有自己的設定檔 (e.g., &lt;code&gt;.coveragerc&lt;/code&gt;, &lt;code&gt;.flake8&lt;/code&gt;) 或者用 Python 比較通用的格式 (e.g., &lt;code&gt;pyproject.toml&lt;/code&gt;, &lt;code&gt;setup.cfg&lt;/code&gt;)&lt;br/&gt;
其中 &lt;code&gt;pyproject.toml&lt;/code&gt; 是在 &lt;a href="https://www.python.org/dev/peps/pep-0518/"&gt;PEP 518&lt;/a&gt; 提出的設定檔格式&lt;br/&gt;
不過還沒有被所有的工具支援&lt;br/&gt;
&lt;a href="https://github.com/carlosperate/awesome-pyproject"&gt;awesome-pyproject&lt;/a&gt; 整理了目前已經支援或討論是否要支援 &lt;code&gt;proproject.toml&lt;/code&gt; 的工具&lt;/p&gt;
&lt;p&gt;比起讓多個工具的設定散落在各個設定檔&lt;br/&gt;
我傾向統一管理在 &lt;code&gt;pyproject.toml&lt;/code&gt; 或 &lt;code&gt;setup.cfg&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;black&lt;/li&gt;
&lt;li&gt;isort&lt;/li&gt;
&lt;li&gt;pylint&lt;/li&gt;
&lt;li&gt;coverage&lt;/li&gt;
&lt;li&gt;pytest&lt;/li&gt;
&lt;li&gt;commitizen (之後才會介紹到)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;setup.cfg&lt;ul&gt;
&lt;li&gt;flake8&lt;/li&gt;
&lt;li&gt;mypy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2019/09/automating-code-quality/"&gt;Automating Code Quality - PyCon US 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/11/life-is-better-painted-black-or-how-to-stop-worrying-and-embrace-auto-formatting/"&gt;Life Is Better Painted Black, or: How to Stop Worrying and Embrace Auto-Formatting - PyCon US 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wf-BqAjZb8M&amp;amp;feature=youtu.be"&gt;Beyond PEP 8 -- Best practices for beautiful intelligible code - PyCon 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Code Quality"></category></entry><entry><title>Python Table Manners - 測試 (二)</title><link href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-test-2" rel="alternate"></link><published>2020-02-25T18:05:00+08:00</published><updated>2020-10-04T15:46:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-02-25:/posts/tech/2020/02/python-table-manners-test-2</id><summary type="html">&lt;p&gt;接續前一篇提到的 &lt;a href="https://docs.pytest.org/en/6.1.1/"&gt;pytest&lt;/a&gt;，繼續看它的其他功能吧&lt;/p&gt;
</summary><content type="html">&lt;p&gt;接續前一篇提到的 &lt;a href="https://docs.pytest.org/en/6.1.1/"&gt;pytest&lt;/a&gt;，繼續看它的其他功能吧&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="fixture"&gt;fixture&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.pytest.org/en/6.1.1/fixture.html"&gt;fixture&lt;/a&gt; 幾乎可以說是 pytest 最重要的功能&lt;br/&gt;
前一篇的例子中只有用到準備資源的部分&lt;br/&gt;
這裡再舉一些例子來說明它的其他應用&lt;/p&gt;
&lt;h3 id="_1"&gt;準備 / 清除資源&lt;/h3&gt;
&lt;p&gt;假設我們已經有了虛構的 &lt;code&gt;db&lt;/code&gt; 函式庫，它可以處理各種資料庫相關的功能&lt;/p&gt;
&lt;p&gt;現在寫一個測試案例來驗證 &lt;code&gt;is_connected&lt;/code&gt; 函式是否能正確的判斷資料庫有連線&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 初始化 DB 的 instance&lt;/span&gt;
    &lt;span class="n"&gt;_db&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# 連接到資料庫&lt;/span&gt;
    &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;_db&lt;/span&gt;

    &lt;span class="c1"&gt;# 斷開資料庫連線&lt;/span&gt;
    &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_db_is_connected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_connected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;fixture &lt;code&gt;db&lt;/code&gt; 中不使用 &lt;code&gt;return&lt;/code&gt; 而是使用 &lt;code&gt;yield&lt;/code&gt;&lt;br/&gt;
連線資料庫後，就先將 &lt;code&gt;_db&lt;/code&gt; instance 回傳&lt;br/&gt;
在 &lt;code&gt;test_db_is_connected&lt;/code&gt; 引入 fixture &lt;code&gt;db&lt;/code&gt; 時，資料庫會處於連線的狀態&lt;br/&gt;
結束後，則會執行 &lt;code&gt;_db.close()&lt;/code&gt; 斷開資料庫的連線&lt;br/&gt;
（什麼時候才算結束則是看 &lt;code&gt;fixture&lt;/code&gt; 的參數 &lt;code&gt;scope&lt;/code&gt;，這會在後面說明）&lt;/p&gt;
&lt;p&gt;接下來我還想要說明兩個概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fixture&lt;/code&gt; 中使用 &lt;code&gt;fixture&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;fixture&lt;/code&gt; 準備跟清除資源，但不直接呼叫到資源 (&lt;code&gt;pytest.mark.usefixtures&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;現在假設已經實作了 &lt;code&gt;model&lt;/code&gt;，裡面有 &lt;code&gt;User&lt;/code&gt; 的定義&lt;br/&gt;
我們想要驗證新增了一筆 admin 的使用者後，是否能成功查詢到這筆資料&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;_db&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt;

    &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="err"&gt;＠&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixtures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert_admin_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 初始化 user&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# 將 user 新增到資料庫&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="c1"&gt;# 將 user 從資料庫移除&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usefixtures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"insert_admin_user"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_admin_user_exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 從資料庫中找出第一筆 name 是 admin 的 user&lt;/span&gt;
    &lt;span class="n"&gt;admin_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;admin_user&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新增資料前，必須先跟資料庫建立連線&lt;br/&gt;
因此準備資料的 fixture &lt;code&gt;insert_admin_user&lt;/code&gt; 會使用到 &lt;code&gt;db&lt;/code&gt; fixture&lt;/p&gt;
&lt;p&gt;而測試函式 &lt;code&gt;test_admin_user_exists&lt;/code&gt; ，需要已經有 admin 使用者的資料庫，來測試 &lt;code&gt;User.query.filter(name="admin").first()&lt;/code&gt; 是否能成功取得資料&lt;br/&gt;
但它不需要用到 &lt;code&gt;insert_admin_user&lt;/code&gt; 這個變數，因此就能改成使用 &lt;code&gt;pytest.mark.usefixtures&lt;/code&gt;&lt;br/&gt;
這樣就能在不引入參數的情況下，使用 fixture 設定好的環境&lt;/p&gt;
&lt;h3 id="scope"&gt;scope&lt;/h3&gt;
&lt;p&gt;fixture 的 &lt;a href="https://docs.pytest.org/en/6.1.1/fixture.html#scope-sharing-a-fixture-instance-across-tests-in-a-class-module-or-session"&gt;scope&lt;/a&gt; 共分為五種 （function, class, module, package, session）&lt;br/&gt;
表示 fixture 會在哪個階段前準備資源，並在哪個階段後清除&lt;br/&gt;
如果設定成 function，就會在每一個測試函式執行前和後做資源的處理&lt;/p&gt;
&lt;h3 id="conftestpy"&gt;conftest.py&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.pytest.org/en/2.7.3/plugins.html?#conftest-py-local-per-directory-plugins"&gt;conftest.py&lt;/a&gt; 是 pytest 中的一個特殊檔案&lt;br/&gt;
如果是整個套件（同一個資料夾）都會用到的 fixture 就能放在這， pytest 執行時會自動載入&lt;/p&gt;
&lt;p&gt;以下面的結構為例， &lt;code&gt;test_sponsor.py&lt;/code&gt; 就會自動載入上層的 &lt;code&gt;conftest.py&lt;/code&gt; 中的 fixture&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;└── tests
    ├── __init__.py
    ├── conftest.py
    ├── test_sponsor.py
    └── page
        ├── __init__.py
        ├── conftest.py
        └── test_title.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fixture_1"&gt;常用的內建 fixture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/6.1.1/reference.html#std:fixture-caplog"&gt;caplog&lt;/a&gt;: 抓 log 訊息&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/6.1.1/reference.html#std:fixture-capsys"&gt;capsys&lt;/a&gt;: 抓 std out, std err&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/6.1.1/reference.html#std:fixture-tmpdir"&gt;tmpdir&lt;/a&gt;: 暫時資料夾，通常用來測檔案相關的測試&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="parameterize"&gt;參數化 (parameterize)&lt;/h2&gt;
&lt;p&gt;在測試資料比較簡單的時候，可以使用 &lt;a href="https://docs.pytest.org/en/6.1.1/parametrize.html"&gt;parameterize&lt;/a&gt; 來減少撰寫重複的程式碼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@pytest.mark.parametrize(args1, arg2)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;第一個參數: 指定測試函式要使用的參數名稱&lt;/li&gt;
&lt;li&gt;第二個參數: 測試資料的陣列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"x, y, expected_sum"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_sum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected_sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="marker"&gt;marker&lt;/h2&gt;
&lt;p&gt;前面已經介紹過 &lt;code&gt;parameterize&lt;/code&gt; 和 &lt;code&gt;usefixtures&lt;/code&gt;&lt;br/&gt;
這裡會介紹 &lt;a href="http://doc.pytest.org/en/6.1.1/example/markers.html"&gt;markers&lt;/a&gt; 還可以做什麼&lt;/p&gt;
&lt;h3 id="marker_1"&gt;內建 marker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://doc.pytest.org/en/6.1.1/skipping.html#skip"&gt;skip&lt;/a&gt;: 跳過這個測試案例&lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.pytest.org/en/6.1.1/skipping.html#skipif"&gt;skipif&lt;/a&gt;: 如果符合某個條件，則跳過這個測試案例&lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.pytest.org/en/6.1.1/skipping.html#xfail"&gt;xfail&lt;/a&gt;: 預期會失敗 （其實前一篇想跳過會失敗的案例應該要用 &lt;code&gt;xfail&lt;/code&gt;，而不是 &lt;code&gt;skip&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="marker_2"&gt;自定義 marker&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@pytest.mark.[any custom marker]&lt;/code&gt; 的用途是標記測試案例&lt;br/&gt;
像是如果有些測試會特別慢，就可以透過標記 &lt;code&gt;@pytest.mark.slow&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_super_slow_test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;99999999999999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行時加上參數 &lt;code&gt;-m&lt;/code&gt; 就能跳過（或只執行）這些案例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pipenv run pytest -m "not slow"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的做法，如果有測試案例不小心打成 &lt;code&gt;@pytest.mark.slwo&lt;/code&gt;，會不太容易被發現&lt;br/&gt;
但 pytest 還是會正常執行&lt;br/&gt;
這時候可以在專案加入設定檔 &lt;code&gt;pyproject.toml&lt;/code&gt; (pytest 6.0.0 之後才支援這種設定檔格式) 定義 marker&lt;br/&gt;
p.s. 不建議使用 &lt;code&gt;setup.cfg&lt;/code&gt; 做為 pytest 的設定檔 (Read More 👉 &lt;a href="https://github.com/pytest-dev/pytest/issues/3523"&gt;deprecate setup.cfg support #3523&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.pytest.ini_options]&lt;/span&gt;
&lt;span class="n"&gt;minversion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"6.0"&lt;/span&gt;
&lt;span class="n"&gt;markers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"slow"&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;並在執行時加上 &lt;code&gt;--strict-markers&lt;/code&gt; 參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run pytest --strict-markers -m &lt;span class="s2"&gt;"not slow"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pytest 就會告訴我們 &lt;code&gt;slwo&lt;/code&gt; 並不是被定義過的 maker&lt;/p&gt;
&lt;p&gt;更進一步可以把 &lt;code&gt;--strict-markers&lt;/code&gt; 直接寫入 &lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.pytest.ini_options]&lt;/span&gt;
&lt;span class="n"&gt;minversion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"6.0"&lt;/span&gt;
&lt;span class="n"&gt;addopts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"--strict-markers"&lt;/span&gt;
&lt;span class="n"&gt;markers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"slow"&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_2"&gt;測試例外事件&lt;/h2&gt;
&lt;p&gt;透過 &lt;code&gt;pytest.raise&lt;/code&gt; 確認測試案例是否有符合預期的丟出例外事件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_index_error&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;some_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="pytest"&gt;pytest 常用命令列參數&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt; (&lt;code&gt;-vv&lt;/code&gt;, &lt;code&gt;-vvv&lt;/code&gt;): 顯示更多資訊 （越多 v 就會顯示越多資訊）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--durations=N&lt;/code&gt;: 只列出最慢的 &lt;em&gt;N&lt;/em&gt; 個測試&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-x&lt;/code&gt; (&lt;code&gt;--exitfirst&lt;/code&gt;): 遇到第一個失敗就終止測試&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--maxfail=num&lt;/code&gt;: 失敗次數達到 &lt;em&gt;num&lt;/em&gt; 次，直接終止測試&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--lf&lt;/code&gt; (&lt;code&gt;--last-failed&lt;/code&gt;): 只測試上次失敗的案例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ff&lt;/code&gt; (&lt;code&gt;--failed-first&lt;/code&gt;): 從上次失敗的案例開始測試&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--nf&lt;/code&gt; &lt;code&gt;--new-first&lt;/code&gt;: 從新的案例開始測試&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-k EXPRESSION&lt;/code&gt;: 只測試名稱符合 "EXPRESSION" 的案例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m MARKEXPR&lt;/code&gt;: 只測試有 "MARKEXPR" maker 的案例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--fixtures&lt;/code&gt;: 列出所有 &lt;code&gt;fixtures&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pytest-cov"&gt;pytest-cov 測試覆蓋率&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pytest-dev/pytest-cov"&gt;pytest-cov&lt;/a&gt; 可以用來產生測試覆蓋率的報告，讓我們知道程式碼還有哪些沒被測試到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 安裝 pytest-cov&lt;/span&gt;
pipenv install pytest-cov --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 計算 myproj 的覆蓋率&lt;/span&gt;
pipenv run pytest --cov&lt;span class="o"&gt;=&lt;/span&gt;myproj tests/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比較重要的參數有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--cov=[SOURCE]&lt;/code&gt;: 測試包含的程式碼範圍&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cov-report=TYPE&lt;/code&gt;: 測試覆蓋率報告的種類 (term, term-missing, annotate, html, xml)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cov-fail-under=MIN&lt;/code&gt;: 如果覆蓋率小於 &lt;em&gt;MIN&lt;/em&gt; 則跳出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中 &lt;code&gt;--cov&lt;/code&gt;, &lt;code&gt;--cov-report&lt;/code&gt; 都可以加入多個參數&lt;/p&gt;
&lt;p&gt;回到 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt; 的例子&lt;br/&gt;
先 checkout 回 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/tree/1.0.2"&gt;1.0.2&lt;/a&gt;，來測試 1.0.2 上的測試覆蓋率&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run pytest --cov&lt;span class="o"&gt;=&lt;/span&gt;report_generator --cov-report&lt;span class="o"&gt;=&lt;/span&gt;term-missing test/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;從下面的結果可以看到哪些檔案的哪些部分沒有被測試到&lt;/p&gt;
&lt;p&gt;&lt;img alt="test-coverage" src="/images/posts-image/2020-02-22-python-table-manner-series/test-coverage.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;如果想看精美的網頁版報告，可以試試看以下的指令&lt;br/&gt;
報告會產生在專案資料夾下的 &lt;code&gt;htmlcov&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv run pytest --cov&lt;span class="o"&gt;=&lt;/span&gt;report_generator --cov-report&lt;span class="o"&gt;=&lt;/span&gt;term-missing --cov-report&lt;span class="o"&gt;=&lt;/span&gt;html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一些更進階的設定，可以寫入設定檔 &lt;code&gt;pyproject.toml&lt;/code&gt; (或 &lt;code&gt;.coveragerc&lt;/code&gt;，但語法會不太一樣)&lt;br/&gt;
以下是我自己使用的 &lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.coverage]&lt;/span&gt;
    &lt;span class="k"&gt;[tool.coverage.report]&lt;/span&gt;
    &lt;span class="n"&gt;show_missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;exclude_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;# Have to re-enable the standard pragma&lt;/span&gt;
        &lt;span class="s"&gt;'pragma: no cover'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="c1"&gt;# Don't complain about missing debug-only code:&lt;/span&gt;
        &lt;span class="s"&gt;'def __repr__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'if self\.debug'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="c1"&gt;# Don't complain if tests don't hit defensive assertion code:&lt;/span&gt;
        &lt;span class="s"&gt;'raise AssertionError'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'raise NotImplementedError'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="c1"&gt;# Don't complain if non-runnable code isn't run:&lt;/span&gt;
        &lt;span class="s"&gt;'if 0:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'if __name__ == .__main__.:'&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read More 👉 &lt;a href="https://coverage.readthedocs.io/en/coverage-5.0.3/config.html"&gt;Configuration reference&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="plugins"&gt;其他常用 plugins&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pytest-xdist/"&gt;pytest-xdist&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;用平行化加速測試的執行 (&lt;code&gt;pipenv run pytest -n NUM&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pytest-dev/pytest-mock"&gt;pytest-mock&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;使用 mocking 的技巧將部分不好測試的物件替換成假的物件&lt;/li&gt;
&lt;li&gt;推薦參考 &lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/demystifying-the-Patch-functionusing-python/"&gt;Demystifying the Patch Function - PyCon US 2018&lt;/a&gt; （不過她不是用 pytest）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ESSS/pytest-regressions"&gt;pytest-regressions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;將冗長的測試結果寫成檔案，每次測試都去比對跟上次產生的結果是否相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尋找其他 plugins&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/6.1.1/plugins.html"&gt;pytest - Installing and Using plugins¶&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pytest-dev"&gt;pytest-dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;其他測試工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;在各種不同版本的 Python 中做測試，幾乎是開源 Python 專案的標準工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nox.thea.codes/en/stable/"&gt;nox&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;基本上跟 tox 的功能相似，不過組態設定是使用 Python&lt;/li&gt;
&lt;li&gt;tox 跟 nox 推薦參考 &lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks/"&gt;Break the Cycle: Three excellent Python tools to automate repetitive tasks - PyCon US 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/HypothesisWorks/hypothesis"&gt;hypothesis&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;採用 Property-based testing，跟以往要自己產生測試資料不同，我們只需要給予資料的定義（e.g., 0 ~ 10000 之間的整數）， hypothsis 會根據定義來產生隨機的資料，也因此更容易包含到極端案例&lt;/li&gt;
&lt;li&gt;推薦參考 &lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis/"&gt;Escape from auto-manual testing with Hypothesis!&lt;/a&gt; （PyCon US 2019， Zac 投了 talk, sprint, tutorial, poster，很用心在推廣這套工具）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Python Testing with pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?time_continue=201&amp;amp;v=pX1_I_sEi8k"&gt;快快樂樂成為 Coding Ninja (by pytest) - PyCon APAC 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/swiss-python-summit-2016/2019/11/pytest-rapid-simple-testing/"&gt;Pytest: Rapid Simple Testing -  Swiss Python Summit 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2020/01/demystifying-the-Patch-functionusing-python/"&gt;Demystifying the Patch Function - PyCon US 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/escape-from-auto-manual-testing-with-yypothesis/"&gt;Escape from auto-manual testing with Hypothesis!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-us-2019/2019/08/break-the-cycle-three-excellent-python-tools-to-automate-repetitive-tasks/"&gt;Break the Cycle: Three excellent Python tools to automate repetitive tasks - PyCon US 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Test"></category></entry><entry><title>Python Table Manners - 測試 (一)</title><link href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-test-1" rel="alternate"></link><published>2020-02-24T23:33:00+08:00</published><updated>2020-10-04T15:33:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-02-24:/posts/tech/2020/02/python-table-manners-test-1</id><summary type="html">&lt;p&gt;設定完環境後，接著開始要開發程式的各項功能&lt;br/&gt;
要驗證程式正確性時，我們就會撰寫測試案例&lt;/p&gt;
</summary><content type="html">&lt;p&gt;設定完環境後，接著開始要開發程式的各項功能&lt;br/&gt;
要驗證程式正確性時，我們就會撰寫測試案例&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;為什麼要寫自動化測試&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果沒有自動化測試&lt;ul&gt;
&lt;li&gt;必須手動去驗證程式的正確性，而且不能確定每次的測試方式都是相同的&lt;br/&gt;
 （如果因為很麻煩懶得測試，變成讓客戶去測試，就會造成更多的麻煩了 😱）&lt;/li&gt;
&lt;li&gt;增加重構 (refactoring）的風險，因為很難驗證程式的功能有沒有在重構的過程中被改動&lt;/li&gt;
&lt;li&gt;加入新的功能不知道會不會動到原本沒問題的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後就會像是這樣&lt;/p&gt;
&lt;p&gt;&lt;img alt="new-feature-without-test" src="/images/posts-image/2020-02-22-python-table-manner-series/new-feature.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;總之，要寫測試！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="unittest"&gt;unittest&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; 是 Python 標準函式庫的測試框架&lt;br/&gt;
起源於 jUnit 的做法，所以在函式的命名上和設計上比較不符合 Python 風格&lt;br/&gt;
雖然它不會是今天的主角，我也不太建議使用它&lt;br/&gt;
不過我們還是可以稍微看一下它的用法&lt;/p&gt;
&lt;p&gt;以下取自 &lt;a href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt; 文件中的其中一個範例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WidgetTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'The widget'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_default_widget_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                         &lt;span class="s1"&gt;'incorrect default size'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_widget_resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                         &lt;span class="s1"&gt;'wrong size after resize'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到幾個特點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;測試案例必須要繼承 &lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;setUp&lt;/code&gt; 函式來初始化 &lt;code&gt;widget&lt;/code&gt; （如果有需要清除資源則會使用 &lt;code&gt;tearDown&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;assertEqual&lt;/code&gt; 來做正確性的驗證&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pytest"&gt;pytest&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.pytest.org/en/6.1.1/"&gt;pytest&lt;/a&gt; 是現在 Python 專案建議使用的測試框架，也會是這篇文章的主角&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;為什麼要用 pytest&lt;ul&gt;
&lt;li&gt;更符合 Python 程式碼風格 (Pythonic)&lt;/li&gt;
&lt;li&gt;pytest 支援舊有的 unittest 風格&lt;/li&gt;
&lt;li&gt;扁平化（不用繼承）&lt;/li&gt;
&lt;li&gt;只需要使用 &lt;code&gt;assert&lt;/code&gt;，不需要去記 &lt;code&gt;assert.+&lt;/code&gt; (e.g., &lt;code&gt;assertEqual&lt;/code&gt;) 等 API&lt;/li&gt;
&lt;li&gt;更好的&lt;a href="https://docs.pytest.org/en/6.1.1/goodpractices.html#test-discovery"&gt;測試探索 (test discovery)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;更多的進階功能 (e.g., fixture, mark, parameterize and etc.)&lt;/li&gt;
&lt;li&gt;強大的套件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是取自 &lt;a href="https://docs.pytest.org/en/6.1.1/getting-started.html#create-your-first-test"&gt;pytest - Create your first test&lt;/a&gt; 的範例&lt;br/&gt;
相比於 unittest 寫法相對簡潔&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# content of test_sample.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_answer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="unittest-pytest"&gt;從 Unittest 到 Pytest&lt;/h2&gt;
&lt;p&gt;前面的比較其實不太公平，unittest 的範例要測的內容本身就比 pytest 的複雜&lt;/p&gt;
&lt;p&gt;所以接下來會用 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt; 為例子&lt;br/&gt;
討論如何從 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/tree/v1.0"&gt;v1.0&lt;/a&gt; 的 unittest 風格改成在 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/commit/83e48c6443303045ed1de2f020297c3110bb1300"&gt;commit 83e4&lt;/a&gt; 的 pytest 風格&lt;/p&gt;
&lt;p&gt;如果想跟著程式碼跑，可以把專案 clone 下來&lt;br/&gt;
（當然能貢獻專案就更棒了 XD）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# clone 專案到本地&lt;/span&gt;
git clone https://github.com/pycontw/pycontw-postevent-report-generator

&lt;span class="nb"&gt;cd&lt;/span&gt; pycontw-postevent-report-generator

&lt;span class="c1"&gt;# 切換到 commit 83e4 的前一個 commit (因為commit 83e4 已經完成修正)&lt;/span&gt;
git checkout 83e4~1

&lt;span class="c1"&gt;# 設定環境&lt;/span&gt;
pipenv install --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="test-discovery"&gt;測試探索 (test discovery)&lt;/h3&gt;
&lt;p&gt;原本在 &lt;code&gt;REAMDE.md&lt;/code&gt; 中要跑測試的指令相當的冗長&lt;br/&gt;
而且還必須要切換到 test 資料夾 (i.e., &lt;code&gt;cd test&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;
python -m unittest discover -s ./ -p &lt;span class="s1"&gt;'test_*.py'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不過這其實是一開始的設計有誤&lt;br/&gt;
以下是 test 資料夾的內容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;└── test
    …
    ├── test_sponsor.py
    └── test_title.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;test (或 tests) 本身也必須是一個套件&lt;br/&gt;
所以必須先在 test 內加入 &lt;code&gt;__init__.py&lt;/code&gt;&lt;br/&gt;
（這是我在寫程式初期想開始寫測試遇到一個很大的坎 😢）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;└── test
    ├── __init__.py
    ...
    ├── test_sponsor.py
    └── test_title.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;做了改變後，就能改用更簡潔的指令跑測試了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;unittest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因為 pytest 也支援 unittest 風格&lt;br/&gt;
所以也可以直接使用 &lt;code&gt;pytest&lt;/code&gt; 指令跑測試&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pytest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不過在前一篇有提到使用虛擬環境的概念了&lt;br/&gt;
所以應該要確保每個專案的指令，都只在虛擬環境中跑&lt;br/&gt;
（因為前一篇建議使用 pipenv，之後的範例都會用 pipenv）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 將 pytest 安裝到開發環境&lt;/span&gt;
pipenv install pytest --dev

&lt;span class="c1"&gt;# 執行 pytest&lt;/span&gt;
pipenv run pytest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這時候的測試其實會有許多錯誤&lt;br/&gt;
但執行後應該要能看到類似的畫面&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;===================== test session starts ======================
platform darwin -- Python 3.7.3, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /....../pycontw-postevent-report-generator
plugins: mock-2.0.0, cov-2.8.1
collected 9 items

test/test_sponsor.py FFFFFFFF                            [ 88%]
test/test_title.py F                                     [100%]

=========================== FAILURES ===========================
......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;F&lt;/code&gt; 表示測試沒有通過，如果出現 &lt;code&gt;.&lt;/code&gt; 則表示成功&lt;/p&gt;
&lt;h3 id="step-0"&gt;Step 0: 追朔程式碼&lt;/h3&gt;
&lt;p&gt;以 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator/blob/v1.0/test/test_sponsor.py#L6"&gt;test/test_sponsor.py::TestSponsor::test_sponsor_number&lt;/a&gt; 為例&lt;br/&gt;
（在套件以及模組的層級後， pytest 會使用 &lt;code&gt;::&lt;/code&gt; 來區別不同的層級，試試 &lt;code&gt;pipenv run pytest -v&lt;/code&gt; 指令）&lt;/p&gt;
&lt;p&gt;原本 unittest 風格的程式碼中，做了三件事&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用了 &lt;code&gt;setUp&lt;/code&gt; 做 &lt;code&gt;self.sponsors&lt;/code&gt; 的初始化&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;test_sonpsor_number&lt;/code&gt; 取用 &lt;code&gt;setUp&lt;/code&gt; 中初始過的 &lt;code&gt;self.sponsors&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;self.assertEqual&lt;/code&gt; 來看 &lt;code&gt;self.sponsors&lt;/code&gt; 的長度是否等於 1&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;atta.partner&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSponsor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sponsors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_all_sponsors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./data/packages.yaml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                            &lt;span class="s1"&gt;'./data/sponsors.yaml'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sponsors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sponsors&lt;/span&gt;

        &lt;span class="o"&gt;......&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sponsor_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="o"&gt;.......&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="step-1-fixture-setup-teardown"&gt;Step 1: 使用 fixture 取代 setUp / tearDown&lt;/h3&gt;
&lt;p&gt;將 &lt;code&gt;unittest.TestCase&lt;/code&gt; 移除，改用 pytest 的 &lt;a href="https://docs.pytest.org/en/6.1.1/fixture.html"&gt;fixture&lt;/a&gt; 取代 &lt;code&gt;setUp&lt;/code&gt;&lt;br/&gt;
fixture 跟 &lt;code&gt;setUp / tearDown&lt;/code&gt; 的概念上相近，都是用來 準備 / 清除 資源&lt;br/&gt;
但 fixture 更加的輕量且更有彈性&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;test_sponsor_number&lt;/code&gt; 中加入參數 &lt;code&gt;sponsors&lt;/code&gt;&lt;br/&gt;
pytest 會去找 fixtures 中是否有 &lt;code&gt;sponsors&lt;/code&gt; 並將之代入&lt;/p&gt;
&lt;p&gt;接著將較為冗長的 &lt;code&gt;assertEqual&lt;/code&gt;，改為 &lt;code&gt;assert&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;report_generator.partner&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSponsor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"class"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_all_sponsors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test/data/packages.yaml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sponsors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="s2"&gt;")&lt;/span&gt;

        &lt;span class="o"&gt;......&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sponsor_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="o"&gt;......&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(p.s. 在這裡 &lt;code&gt;atta&lt;/code&gt; 已經重新命名為 &lt;code&gt;report_generator&lt;/code&gt;)&lt;/p&gt;
&lt;h3 id="step-2-markskip"&gt;Step 2: 使用 mark.skip 跳過部分測試&lt;/h3&gt;
&lt;p&gt;原本的測試中有些邏輯錯誤&lt;br/&gt;
但我只想先完成風格的轉換，還不打算修正&lt;br/&gt;
因此先使用了 &lt;a href="http://doc.pytest.org/en/6.1.1/example/markers.html"&gt;markers&lt;/a&gt;&lt;br/&gt;
在想跳過的測試案例前面加上 &lt;code&gt;@pytest.mark.skip&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;report_generator.partner&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSponsor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"No bronze sponsor in test case"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sponsor_promotion_web_click_rank_bronze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NA_CONTENT_MESSAGE&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bronze_sponsor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web_click_rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;執行 &lt;code&gt;pipenv run pytest&lt;/code&gt; 後，就會發現有部分的測試案例變成了 &lt;code&gt;s&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;========== test session starts ==========
platform darwin -- Python 3.7.3, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /....../pycontw-postevent-report-generator
plugins: mock-2.0.0, cov-2.8.1
collected 9 items

test/test_sponsor.py ....ssss     [ 88%]
test/test_title.py .              [100%]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="step-3-class"&gt;Step 3: 扁平化 - 移除不必要的 class&lt;/h3&gt;
&lt;p&gt;從上面的範例可以看到， &lt;code&gt;self&lt;/code&gt; 其實並不必要&lt;br/&gt;
這些測試案例不需要是一個類別&lt;br/&gt;
因此可以更近一步，把 &lt;code&gt;TestSponsor&lt;/code&gt; 類別移除&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;report_generator.partner&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sponsor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_all_sponsors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test/data/packages.yaml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="s2"&gt;"test/data/sponsors.yaml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sponsor_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sponsors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不過這並不代表用類別就是錯的&lt;br/&gt;
一般我會在模組內測試案例比較多的時候，使用類別來將相似的測試案例歸在同一類&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;因為篇幅的關係，我決定把測試分成兩篇文章&lt;br/&gt;
&lt;del&gt;絕對不是因為我寫不完了&lt;/del&gt;&lt;br/&gt;
盡請期待明天更深入的 pytest 應用 😄&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Python Testing with pytest&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;非常推薦用這本書上手 &lt;code&gt;pytest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?time_continue=201&amp;amp;v=pX1_I_sEi8k"&gt;快快樂樂成為 Coding Ninja (by pytest) - PyCon APAC 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/swiss-python-summit-2016/2019/11/pytest-rapid-simple-testing/"&gt;Pytest: Rapid Simple Testing -  Swiss Python Summit 2016&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Test"></category></entry><entry><title>Python Table Manners - 虛擬環境和套件管理</title><link href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-dependency-mangement" rel="alternate"></link><published>2020-02-23T12:24:00+08:00</published><updated>2020-10-04T15:22:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-02-23:/posts/tech/2020/02/python-table-manners-dependency-mangement</id><summary type="html">&lt;p&gt;開始 Python 專案時，第一步都是建立一個專屬於專案的虛擬環境&lt;br/&gt;
會需要這麼做是為了避免不同的 Python 專案需要使用到不同版本的套件&lt;br/&gt;
假設專案 A 需要 &lt;code&gt;lib==2.3.5&lt;/code&gt; 而專案 B 需要 &lt;code&gt;lib==1.0.0&lt;/code&gt;&lt;br/&gt;
如果 &lt;code&gt;lib&lt;/code&gt; 都被安裝在本機中，就會有其中一個專案跑不起來&lt;br/&gt;
所以只要兩個專案都有建立虛擬環境，它們就都能在自己的虛擬環境中安裝所需的 &lt;code&gt;lib&lt;/code&gt; 版本&lt;br/&gt;
理想上，本機的環境是不需要安裝套件的&lt;br/&gt;
因為每一個專案都會在個字的虛擬環境內執行，並安裝各自的套件&lt;/p&gt;
</summary><content type="html">&lt;p&gt;開始 Python 專案時，第一步都是建立一個專屬於專案的虛擬環境&lt;br/&gt;
會需要這麼做是為了避免不同的 Python 專案需要使用到不同版本的套件&lt;br/&gt;
假設專案 A 需要 &lt;code&gt;lib==2.3.5&lt;/code&gt; 而專案 B 需要 &lt;code&gt;lib==1.0.0&lt;/code&gt;&lt;br/&gt;
如果 &lt;code&gt;lib&lt;/code&gt; 都被安裝在本機中，就會有其中一個專案跑不起來&lt;br/&gt;
所以只要兩個專案都有建立虛擬環境，它們就都能在自己的虛擬環境中安裝所需的 &lt;code&gt;lib&lt;/code&gt; 版本&lt;br/&gt;
理想上，本機的環境是不需要安裝套件的&lt;br/&gt;
因為每一個專案都會在個字的虛擬環境內執行，並安裝各自的套件&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="venv"&gt;venv&lt;/h2&gt;
&lt;p&gt;建立虛擬環境，最基本作法是使用 &lt;a href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt;&lt;br/&gt;
透過以下幾個指令建立，並把需要的套件寫入 &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 建立 Python 虛擬環境到 ./venv&lt;/span&gt;
python -m venv ./venv

&lt;span class="c1"&gt;# 啟動 Python 虛擬環境 (for Unix like)&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate

&lt;span class="c1"&gt;# 將虛擬環境用到的套件寫入 requirements.txt&lt;/span&gt;
pip freeze &amp;gt;&amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;p.s. 基本上這個系列文會以 Unix 系統（macOS, Linux）為主&lt;/p&gt;
&lt;p&gt;但這個做法會遇到幾個問題&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;忘記開啟/關閉虛擬環境&lt;/li&gt;
&lt;li&gt;忘記把新安裝的套件寫入 requirements.txt&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip freeze&lt;/code&gt; 安裝一些不必要的套件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一開始我會使用 &lt;a href="https://github.com/bndr/pipreqs"&gt;pipreqs&lt;/a&gt; 來解決 &lt;code&gt;pip freeze&lt;/code&gt; 所造成的雜亂&lt;br/&gt;
但是忘記更新 requirements.txt 跟開關虛擬環境的問題還是存在&lt;br/&gt;
常常我在本地測試成功，push 到遠端的時候又告訴我少了套件&lt;br/&gt;
只好再送一個 Pull Request 修正......&lt;/p&gt;
&lt;h2 id="pipenv"&gt;pipenv&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pipenv.readthedocs.io/en/latest/"&gt;pipenv&lt;/a&gt; 可以用來同時管理虛擬環境跟套件&lt;br/&gt;
pipenv 不使用 &lt;code&gt;requriements.txt&lt;/code&gt;，而是使用自定義的 &lt;code&gt;Pipfile&lt;/code&gt; 跟 &lt;code&gt;Pipfile.lock&lt;/code&gt; 管理套件&lt;br/&gt;
它的好處是能透過單一指令將套件安裝到虛擬環境中，並且更新到 &lt;code&gt;Pipfile&lt;/code&gt; 以及 &lt;code&gt;Pipfile.lock&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="pipenv_1"&gt;安裝 pipenv&lt;/h3&gt;
&lt;p&gt;根據不同的系統，可以在 &lt;a href="https://pipenv.readthedocs.io/en/latest/install/#installing-pipenv"&gt;Installing Pipenv&lt;/a&gt; 找到安裝 pipenv 的方式&lt;/p&gt;
&lt;p&gt;不過最簡單的做法還是透過 &lt;code&gt;pip&lt;/code&gt; 安裝&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python -m pip install --user pipenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_1"&gt;初始化環境&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 初始化虛擬環境&lt;/span&gt;
&lt;span class="c1"&gt;# 如果 Pipfile 跟 Pipfile.lock 還不存在，則會產生&lt;/span&gt;
pipenv install

&lt;span class="c1"&gt;# 指定用特定版本的 Python 來產生虛擬環境&lt;/span&gt;
pipenv install --python &lt;span class="m"&gt;3&lt;/span&gt;.6.4

&lt;span class="c1"&gt;# 移除虛擬環境&lt;/span&gt;
pipenv --rm

&lt;span class="c1"&gt;# 列出虛擬環境的所在位置&lt;/span&gt;
pipenv --where
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初始化虛擬環境後，會產生 &lt;code&gt;Pipfile&lt;/code&gt; 跟 &lt;code&gt;Pipfile.lock&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pipfile&lt;/code&gt; 是 &lt;a href="https://github.com/toml-lang/toml"&gt;toml&lt;/a&gt; 格式的檔案&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;source&lt;/strong&gt;: 指定要去找套件的倉儲，預設是 &lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt; ，也可以再加上私有的 PyPI&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dev-package&lt;/strong&gt;: 開發環境所需套件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;packages&lt;/strong&gt;: 預設安裝套件（通常是 Production 用）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[[source]]&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"pypi"&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://pypi.org/simple"&lt;/span&gt;
&lt;span class="n"&gt;verify_ssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="k"&gt;[dev-packages]&lt;/span&gt;

&lt;span class="k"&gt;[packages]&lt;/span&gt;

&lt;span class="k"&gt;[requires]&lt;/span&gt;
&lt;span class="n"&gt;python_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"3.7"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pipfile.lock&lt;/code&gt; 是 JSON 格式的檔案&lt;ul&gt;
&lt;li&gt;同樣是記錄安裝的套件，但會同時記錄下套件相依的其他套件（假設安裝了 &lt;code&gt;requests&lt;/code&gt; 套件，而 &lt;code&gt;requests&lt;/code&gt; 相依於 &lt;code&gt;urllib3&lt;/code&gt; ，則 &lt;code&gt;requests&lt;/code&gt; 跟 &lt;code&gt;urllibs&lt;/code&gt; 都會列在這）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"_meta"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"hash"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"sha256"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"..."&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"pipfile-spec"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"requires"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"python_version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"3.7"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"sources"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"pypi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"https://pypi.org/simple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;"verify_ssl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="nt"&gt;"develop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通常沒有什麼特別的理由，可以不用動到 &lt;code&gt;Pipfile&lt;/code&gt; 跟 &lt;code&gt;Pipfile.lock&lt;/code&gt;&lt;br/&gt;
交給 &lt;code&gt;pipenv&lt;/code&gt; 管理就好&lt;/p&gt;
&lt;h3 id="_2"&gt;安裝套件&lt;/h3&gt;
&lt;p&gt;pipenv 的另一個好處是，它的 API 基本上跟 &lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; 是一樣的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 安裝套件&lt;/span&gt;
pipenv install &amp;lt;package&amp;gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;lt;version&amp;gt;

&lt;span class="c1"&gt;# 解除安裝套件&lt;/span&gt;
pipenv uninstall &amp;lt;package&amp;gt;

&lt;span class="c1"&gt;# 更新套件&lt;/span&gt;
pipenv update &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以安裝 &lt;a href="https://requests.readthedocs.io/en/master/"&gt;requests&lt;/a&gt; 為例&lt;br/&gt;
會更新在 Pipfile 的 &lt;strong&gt;packages&lt;/strong&gt; 區段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[packages]&lt;/span&gt;
&lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pipfile.lock 中除了 &lt;code&gt;requests&lt;/code&gt; 外，還會列出 &lt;code&gt;requests&lt;/code&gt; 的相依套件 &lt;code&gt;urllib3&lt;/code&gt; (Ref: &lt;a href="https://github.com/psf/requests/blob/v2.22.0/setup.py#L47"&gt;setup.py#L47&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;......&lt;/span&gt;
    &lt;span class="nt"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;......&lt;/span&gt;

        &lt;span class="nt"&gt;"requests"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"hashes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;"sha256:11e007a8a2aa0323f5a921e9e6a2d7e4e67d9877e85773fba9ba6419025cbeb4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"sha256:9cf5292fcd0f598c671cfc1e0d7d1a7f13bb8085e9a590f48c010551dc6c4b31"&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;"index"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"pypi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"==2.22.0"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"urllib3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"hashes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;"sha256:3de946ffbed6e6746608990594d08faac602528ac7015ac28d33cee6a45b7398"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"sha256:9a107b99a5393caf59c7aa3c1249c16e6879447533d0887f4336dde834c7be86"&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"==1.25.6"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="err"&gt;......&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以注意到每個安裝的套件會有三個欄位 &lt;strong&gt;index&lt;/strong&gt;, &lt;strong&gt;version&lt;/strong&gt; 和 &lt;strong&gt;hashes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index&lt;/strong&gt;: 套件從哪裡裝的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;version&lt;/strong&gt;: 安裝的版本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hashes&lt;/strong&gt;: 下載這個套件時產生的雜湊值 (hashing)&lt;br/&gt;
  只要套件內容有改變，就會產生不同的雜湊值&lt;br/&gt;
  可以用於驗證下次安裝時，這個套件的內容是否跟這次相同&lt;br/&gt;
  有些套件雖然改了內容，但沒有更新版本號&lt;br/&gt;
  雜湊值可以用來避免使用者在沒注意到的情況下安裝了不同的套件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面兩個指令就會運用到 &lt;strong&gt;hashes&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 安裝時同時確認 Pipfile.lock ，如果 lock 檔跟實際安裝的有衝突，則會取消安裝&lt;/span&gt;
pipenv install --deploy

&lt;span class="c1"&gt;# 直接使用 Pipfile.lock 安裝套件&lt;/span&gt;
pipenv install --ignore-pipfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_3"&gt;安裝開發環境套件&lt;/h3&gt;
&lt;p&gt;有些套件（e.g., 測試工具）不需要在 Production 的環境上安裝&lt;br/&gt;
以往會將不同的套件用不同的 &lt;code&gt;requirements.txt&lt;/code&gt; 來管理 (e.g.,  &lt;code&gt;requirments/dev.txt&lt;/code&gt;, &lt;code&gt;requirements/prod.txt&lt;/code&gt;)&lt;br/&gt;
pipenv 則是將開發環境才需要的套件寫在 Pipfile 的 &lt;strong&gt;dev-packages&lt;/strong&gt; 內&lt;br/&gt;
只要在安裝時後面加上選項 &lt;code&gt;--dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 安裝開發環境套件&lt;/span&gt;
pipenv install &amp;lt;package&amp;gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;lt;version&amp;gt; --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_4"&gt;在虛擬環境中執行指令&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 在虛擬環境中執行 [command]&lt;/span&gt;
pipenv run &amp;lt;command&amp;gt;

&lt;span class="c1"&gt;# e.g.,&lt;/span&gt;
pipenv run python your_program.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;雖然可以透過 &lt;code&gt;pipenv shell&lt;/code&gt; 進入到虛擬環境，但我不太建議使用&lt;br/&gt;
原因是我常常會進入虛擬環境後，亂下 &lt;code&gt;pip install &amp;lt;package&amp;gt;&lt;/code&gt; 的指令&lt;br/&gt;
然後就沒被 Pipfile 給記錄到...&lt;/p&gt;
&lt;h3 id="_5"&gt;其他功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pipenv check&lt;/code&gt;: 檢查安裝的套件是否有已知的安全性問題&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv graph&lt;/code&gt;: 檢視整個相依套件的相依圖&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv open &amp;lt;package&amp;gt;&lt;/code&gt;: 開啟安裝的套件（不知道什麼時候養成了「懶得看文件，直接 trace code」的習慣...）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="poetry"&gt;Poetry&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://python-poetry.org/"&gt;poetry&lt;/a&gt; 是目前很多人說可以取代 pipenv 的工具&lt;br/&gt;
除了 pipenv 包含的功能外，它還能用來初始化專案、上傳套件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pipenv 被抱怨的原因&lt;ul&gt;
&lt;li&gt;之前有相隔快兩年沒有新的版本釋出（2020 年倒是更新了幾次）&lt;/li&gt;
&lt;li&gt;lock 太慢&lt;/li&gt;
&lt;li&gt;不會自動跟 setup.py 中的 &lt;code&gt;install_rquires&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;poetry 使用下來體驗還算不錯&lt;br/&gt;
而且它採用 pyproject.toml 來做配置設定，這點我就蠻喜歡的&lt;/p&gt;
&lt;p&gt;我會建議如果要寫 Python 函式庫的話，可以使用 poetry&lt;br/&gt;
至於 Python 應用，使用 pipenv 還是 poetry 就看個人的喜好了&lt;/p&gt;
&lt;h3 id="_6"&gt;基本使用&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 初始化 poetry 專案&lt;/span&gt;
poetry init

&lt;span class="c1"&gt;# 安裝套件&lt;/span&gt;
poetry install

&lt;span class="c1"&gt;# 加入新的套件&lt;/span&gt;
poetry add &amp;lt;package&amp;gt;

&lt;span class="c1"&gt;# 移除套件&lt;/span&gt;
poetry remove &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_7"&gt;其他工具&lt;/h2&gt;
&lt;h3 id="pip-tools"&gt;pip-tools&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt; 主要的功能是產生 hashes ，並不能用來管理虛擬環境&lt;br/&gt;
這套工具比較適合習慣使用 pip 跟 virtualenv ，但又想要有 Pipfile.lock 的功能的情況&lt;/p&gt;
&lt;h3 id="dephell"&gt;dephell&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dephell/dephell"&gt;dephell&lt;/a&gt; 是個 all-in-one 的工具&lt;br/&gt;
當初看到覺得很有趣，但還沒有時間好好研究&lt;br/&gt;
目前使用到對我最有幫助的功能是它能在轉換不同的格式 (e.g., Pipfile → pyproject.toml)&lt;/p&gt;
&lt;h3 id="_8"&gt;自動偵測套件版本並適當升級的服務&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pyup.io"&gt;pyup.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dependabot.com"&gt;dependabot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bouns-pipx-python"&gt;Bouns: pipx - 在系統安裝 Python 工具&lt;/h2&gt;
&lt;p&gt;雖然建議 Python 的套件都裝在虛擬環境，但如果平時要使用的工具 (e.g., &lt;a href="http://www.pyinvoke.org/"&gt;invoke&lt;/a&gt;, &lt;a href="https://pypi.org/project/awscli/"&gt;awscli&lt;/a&gt;) 都裝在虛擬環境&lt;br/&gt;
每次使用這些工具都得進入虛擬環境就太麻煩了&lt;br/&gt;
&lt;a href="https://pipxproject.github.io/pipx/"&gt;pipx&lt;/a&gt; 會為每個工具創建一個專屬的虛擬環境，並且設定好 PATH&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安裝 pipx，並設定 PATH&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python -m pip install --user pipx
python -m pipx ensurepath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;安裝工具&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx install &lt;span class="o"&gt;[&lt;/span&gt;package&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-tw-2018/2019/10/is-your-dev-env-alright/"&gt;這樣的開發環境沒問題嗎？ - PyCon TW 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-us-2018/2019/11/pipenv-the-future-of-python-dependency-management/"&gt;Pipenv: The Future of Python Dependency Management - PyCon US 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-de-2018/2019/12/python-dependency-management/"&gt;Python Dependency Management - PyCon DE 2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Dependency"></category></entry><entry><title>Python Table Manners 系列</title><link href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-series" rel="alternate"></link><published>2020-02-22T19:32:00+08:00</published><updated>2020-03-18T10:20:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-02-22:/posts/tech/2020/02/python-table-manners-series</id><summary type="html">&lt;!--more--&gt;

&lt;p&gt;&lt;a href="https://speakerdeck.com/leew/python-table-manners-a-clean-style-at-pycon-ca-2019"&gt;Python Table Manners - A Clean Style&lt;/a&gt; 是我在 &lt;a href="https://lee-w.github.io/posts/tech/2019/12/pycon-ca-2019"&gt;PyCon CA 2019&lt;/a&gt; 給的一個分享&lt;br&gt;
內容是介紹在開發 Python 專案時能用的工具們，並且把它們串成一個工作流&lt;br&gt;
希望能讓剛接觸 Python 的朋友們，能在早期就碰到這些好用的工具，少踩一些雷&lt;/p&gt;
&lt;p&gt;原本打算找個時間把這些內容整理成文章&lt;br&gt;
但在沒人督促的情況下，當然就忘了 XD&lt;br&gt;
剛好看到 &lt;a href="https://www.accupass.com/event/2001190943344186137000"&gt;連續七天寫作挑戰，解放你的技術創作力&lt;/a&gt;&lt;br&gt;
就給個理由來督促一下自己&lt;/p&gt;
&lt;p&gt;除了在 PyCon CA 分享中提到的內容外，還會多整理一些在貢獻 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 學到的工具&lt;/p&gt;
&lt;p&gt;目前預計會包含以下的內容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-dependency-mangement"&gt;虛擬環境和套件管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-test-1"&gt;測試（ㄧ）&lt;/a&gt; / &lt;a href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-test-2"&gt;測試（二）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-coding-style"&gt;程式碼風格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-manage-trival-tasks"&gt;管理繁瑣任務&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-pre-commit"&gt;pre-commit: git commit 前做完檢查&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/03/python-table-manners-commitizen"&gt;Commitizen: 規格化 commit …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;!--more--&gt;

&lt;p&gt;&lt;a href="https://speakerdeck.com/leew/python-table-manners-a-clean-style-at-pycon-ca-2019"&gt;Python Table Manners - A Clean Style&lt;/a&gt; 是我在 &lt;a href="https://lee-w.github.io/posts/tech/2019/12/pycon-ca-2019"&gt;PyCon CA 2019&lt;/a&gt; 給的一個分享&lt;br&gt;
內容是介紹在開發 Python 專案時能用的工具們，並且把它們串成一個工作流&lt;br&gt;
希望能讓剛接觸 Python 的朋友們，能在早期就碰到這些好用的工具，少踩一些雷&lt;/p&gt;
&lt;p&gt;原本打算找個時間把這些內容整理成文章&lt;br&gt;
但在沒人督促的情況下，當然就忘了 XD&lt;br&gt;
剛好看到 &lt;a href="https://www.accupass.com/event/2001190943344186137000"&gt;連續七天寫作挑戰，解放你的技術創作力&lt;/a&gt;&lt;br&gt;
就給個理由來督促一下自己&lt;/p&gt;
&lt;p&gt;除了在 PyCon CA 分享中提到的內容外，還會多整理一些在貢獻 &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;commitizen&lt;/a&gt; 學到的工具&lt;/p&gt;
&lt;p&gt;目前預計會包含以下的內容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-dependency-mangement"&gt;虛擬環境和套件管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-test-1"&gt;測試（ㄧ）&lt;/a&gt; / &lt;a href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-test-2"&gt;測試（二）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-coding-style"&gt;程式碼風格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-manage-trival-tasks"&gt;管理繁瑣任務&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/02/python-table-manners-pre-commit"&gt;pre-commit: git commit 前做完檢查&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/03/python-table-manners-commitizen"&gt;Commitizen: 規格化 commit message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/03/python-table-manners-security"&gt;安全性檢查&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/posts/tech/2020/04/python-table-manners-documentation"&gt;文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;持續整合&lt;/li&gt;
&lt;li&gt;Cookiecutter: 程式專案模板&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當初整理 PyCon CA 2019 投影片的時候，大多是把這些工具應用到 &lt;a href="https://github.com/pycontw/pycontw-postevent-report-generator"&gt;pycontw-postevent-report-generator&lt;/a&gt;&lt;br&gt;
這是 PyCon TW 用來自動產生會後分析報表的工具，歡迎一起來貢獻～&lt;br&gt;
當然能一起來當志工就更棒了 🎉&lt;br&gt;
👉 &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSe6whkZAEZD10LlPQuSWRYsshySoNR_pux8grGZ0OgmOIkQ3g/viewform"&gt;PyCon Taiwan 志工招募&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;參考資料&lt;/h2&gt;
&lt;p&gt;有些文章會同時涵括多過我想提的主題，我會把那些參考資料放在這&lt;br&gt;
如果是我聽過的 PyCon 演講，我會連結到我自己的 &lt;a href="https://lee-w.github.io/pycon-note/"&gt;PyCon Note&lt;/a&gt;，裡面會有該場演講的相關資訊和我的筆記&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jonas.r.kemper/understanding-best-practice-python-tooling-by-comparing-popular-project-templates-6eba49229106"&gt;Understanding best-practice Python tooling by comparing popular project templates&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;這篇文章整理和比較了 18 個比較有名的 Python 專案模板&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sourcery.ai/blog/python-best-practices/"&gt;How to set up a perfect Python project&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;這篇文章整理上面那篇文章很推薦其中一個模板&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jacobian.org/2019/nov/11/python-environment-2020/"&gt;My Python Development Environment, 2020 Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-jp-2019/2019/10/modern-development-environments-for-pythonistas/"&gt;Modern development environments for Pythonistas - PyCon JP 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category></entry><entry><title>pipenv 和 poerty 如何處理在不同作業系統下相依套件不同</title><link href="https://lee-w.github.io/posts/tech/2020/02/how-pipenv-and-poetry-stores-if-dependencies-platform-dependent" rel="alternate"></link><published>2020-02-12T11:45:00+08:00</published><updated>2020-02-12T11:45:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-02-12:/posts/tech/2020/02/how-pipenv-and-poetry-stores-if-dependencies-platform-dependent</id><summary type="html">
&lt;h2 id="_1"&gt;遇到的問題&lt;/h2&gt;
&lt;p&gt;用 &lt;a href="https://twine.readthedocs.io/en/latest/"&gt;twine&lt;/a&gt; 上傳 Python 套件&lt;br/&gt;
在 mac 的本地端測試有成功，但丟上 CI 跑在 Ubuntu 的 image 內會缺少 &lt;code&gt;jeepney&lt;/code&gt; 套件&lt;/p&gt;
&lt;h2 id="_2"&gt;問題的根源&lt;/h2&gt;
&lt;p&gt;目前最新版 (3.1.1) 的 twine 相依於套件 &lt;a href="https://github.com/jaraco/keyring"&gt;keyring&lt;/a&gt; (&lt;a href="https://github.com/pypa/twine/blob/3.1.1/setup.cfg#L44"&gt;setup.cfg#L44&lt;/a&gt;)&lt;br/&gt;
而 keyring 在不同的作業系統中，相依的套件是不同的 (&lt;a href="https://github.com/jaraco/keyring/blob/master/setup.cfg#L30"&gt;setup.cfg#L30&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;install_requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;pywin32-ctypes&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sys_platform&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;"win32"&lt;/span&gt;
    &lt;span class="n"&gt;SecretStorage&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sys_platform …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;h2 id="_1"&gt;遇到的問題&lt;/h2&gt;
&lt;p&gt;用 &lt;a href="https://twine.readthedocs.io/en/latest/"&gt;twine&lt;/a&gt; 上傳 Python 套件&lt;br/&gt;
在 mac 的本地端測試有成功，但丟上 CI 跑在 Ubuntu 的 image 內會缺少 &lt;code&gt;jeepney&lt;/code&gt; 套件&lt;/p&gt;
&lt;h2 id="_2"&gt;問題的根源&lt;/h2&gt;
&lt;p&gt;目前最新版 (3.1.1) 的 twine 相依於套件 &lt;a href="https://github.com/jaraco/keyring"&gt;keyring&lt;/a&gt; (&lt;a href="https://github.com/pypa/twine/blob/3.1.1/setup.cfg#L44"&gt;setup.cfg#L44&lt;/a&gt;)&lt;br/&gt;
而 keyring 在不同的作業系統中，相依的套件是不同的 (&lt;a href="https://github.com/jaraco/keyring/blob/master/setup.cfg#L30"&gt;setup.cfg#L30&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;install_requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;pywin32-ctypes&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sys_platform&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;"win32"&lt;/span&gt;
    &lt;span class="n"&gt;SecretStorage&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sys_platform&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;"linux"&lt;/span&gt;
    &lt;span class="n"&gt;jeepney&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.4.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sys_platform&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;"linux"&lt;/span&gt;
    &lt;span class="n"&gt;importlib_metadata&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;python_version&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"3.8"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我缺少的的確就是那幾個 &lt;code&gt;sys_platform=="linux"&lt;/code&gt; 的套件&lt;/p&gt;
&lt;h2 id="pipenv"&gt;pipenv 怎麼處理&lt;/h2&gt;
&lt;p&gt;基本上 &lt;code&gt;pipenv&lt;/code&gt; 不算有解決這個問題， &lt;code&gt;pipenv&lt;/code&gt; 只會將目前系統的所需套件寫進 &lt;strong&gt;Pipfile.lock&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以 twine 為例，在 macOS 透過 &lt;code&gt;pipenv&lt;/code&gt; 安裝 ，跑 &lt;code&gt;pipenv graph&lt;/code&gt;指令&lt;br/&gt;
就會發現 keyring 只會直接相依於 importlib-metadata&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  - keyring [required: &amp;gt;=15.1, installed: 21.1.0]
    - importlib-metadata [required: Any, installed: 1.5.0]
      - zipp [required: &amp;gt;=0.5, installed: 2.2.0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但換到 Ubuntu 上跑，就會多了 SecretStorage 跟 jeepney&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  - keyring [required: &amp;gt;=15.1, installed: 21.1.0]
    - importlib-metadata [required: Any, installed: 1.5.0]
      - zipp [required: &amp;gt;=0.5, installed: 2.2.0]
    - jeepney [required: &amp;gt;=0.4.2, installed: 0.4.2]
    - SecretStorage [required: &amp;gt;=3, installed: 3.1.2]
      - cryptography [required: Any, installed: 2.8]
        - cffi [required: &amp;gt;=1.8,!=1.11.3, installed: 1.14.0]
          - pycparser [required: Any, installed: 2.19]
        - six [required: &amp;gt;=1.4.1, installed: 1.14.0]
      - jeepney [required: &amp;gt;=0.4.2, installed: 0.4.2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這個問題也有其他人提過 (&lt;a href="https://github.com/pypa/pipenv/issues/3902"&gt;Cross-platform Pipenv.lock? #3902&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pipenv&lt;/code&gt; 貢獻者給的建議是使用 &lt;code&gt;pipenv install --keep-outdated&lt;/code&gt;&lt;br/&gt;
但這個指令的說明是 &lt;strong&gt;Keep out-dated dependencies from being updated in Pipfile.lock.&lt;/strong&gt;&lt;br/&gt;
總覺得好像不是在這個 use case 下使用的&lt;/p&gt;
&lt;p&gt;最後我的解決方案是是把那幾個平台相依的套件安裝進去&lt;br/&gt;
原因是在 production 的環境就是需要這幾個多安裝的套件，我在 local 多裝幾個套件好像也沒什麼差&lt;br/&gt;
但如果今天是相反的狀況，我可能就會傾向 local 跑在 docker 裡&lt;/p&gt;
&lt;h2 id="poetry"&gt;Poetry 怎麼處理&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://python-poetry.org/"&gt;poerty&lt;/a&gt; 對這個問題則是有比較好的解法&lt;/p&gt;
&lt;p&gt;透過 poetry 安裝 twine 後&lt;br/&gt;
產生的 &lt;strong&gt;poetry.lock&lt;/strong&gt; 會把 &lt;code&gt;marker = "sys_platform == \"linux\""&lt;/code&gt; 記錄下來&lt;br/&gt;
實際 &lt;code&gt;poetry shell&lt;/code&gt; 進去看，的確也沒多安裝這些套件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[[package]]&lt;/span&gt;
&lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"main"&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Store and access your passwords safely."&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"keyring"&lt;/span&gt;
&lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;python-versions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&amp;gt;=3.6"&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"21.1.0"&lt;/span&gt;

&lt;span class="k"&gt;[package.dependencies]&lt;/span&gt;
&lt;span class="n"&gt;SecretStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&amp;gt;=3"&lt;/span&gt;
&lt;span class="n"&gt;jeepney&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&amp;gt;=0.4.2"&lt;/span&gt;
&lt;span class="n"&gt;pywin32-ctypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;0.1.0 || &amp;gt;0.1.0,&amp;lt;0.1.1 || &amp;gt;0.1.1"&lt;/span&gt;

&lt;span class="p"&gt;......&lt;/span&gt;

&lt;span class="k"&gt;[[package]]&lt;/span&gt;
&lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"main"&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Python bindings to FreeDesktop.org Secret Service API"&lt;/span&gt;
&lt;span class="n"&gt;marker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"sys_platform == \"linux\""&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"secretstorage"&lt;/span&gt;
&lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;python-versions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&amp;gt;=3.5"&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"3.1.2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_3"&gt;總結&lt;/h2&gt;
&lt;p&gt;poetry 在處理不同平台相依套件不同的狀況，處理得比較好&lt;br/&gt;
它會把所有需要的資訊記錄下來，在不同的平台進行不同的安裝&lt;/p&gt;
&lt;p&gt;如果要用 pipenv 則可以使用 &lt;code&gt;pipenv install --keep-outdated&lt;/code&gt;&lt;br/&gt;
或者就直接多安裝這幾個不是每個平台都需要的套件&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Dependency"></category></entry><entry><title>透過 GitHub Action 自動發佈 Pelican 部落格文章</title><link href="https://lee-w.github.io/posts/tech/2020/01/automate-publish-pelican-through-github-action" rel="alternate"></link><published>2020-01-16T15:35:00+08:00</published><updated>2020-01-16T15:35:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-16:/posts/tech/2020/01/automate-publish-pelican-through-github-action</id><summary type="html">&lt;p&gt;最近因為在貢獻 &lt;a href="https://github.com/Woile/commitizen"&gt;commitizen&lt;/a&gt;，開始碰到 &lt;a href="https://github.com/features/actions"&gt;GitHub Action&lt;/a&gt;&lt;br/&gt;
（ Python 也有自己的 commitizen 了！！！）&lt;br/&gt;
記錄一下怎麼應用到發布部落格文章&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近因為在貢獻 &lt;a href="https://github.com/Woile/commitizen"&gt;commitizen&lt;/a&gt;，開始碰到 &lt;a href="https://github.com/features/actions"&gt;GitHub Action&lt;/a&gt;&lt;br/&gt;
（ Python 也有自己的 commitizen 了！！！）&lt;br/&gt;
記錄一下怎麼應用到發布部落格文章&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="before-github-action"&gt;Before GitHub Action&lt;/h2&gt;
&lt;p&gt;要發佈一個新文章，我會做兩件事&lt;br/&gt;
1. 將原始碼推到 GitHub 上&lt;br/&gt;
2. 透過原始碼產生靜態頁面，並且推到 gh-pages 這個分支上&lt;/p&gt;
&lt;p&gt;只有第二步是必要的，但也沒不把原始碼推上去的理由&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 初始化部落格時會產生 &lt;code&gt;Makefile&lt;/code&gt; 和給 &lt;a href="https://github.com/pyinvoke/invoke"&gt;invoke&lt;/a&gt; 用的 &lt;code&gt;tasks.py&lt;/code&gt;&lt;br/&gt;
裡面會包好如 build, publish 等常見指令&lt;br/&gt;
預設會透過 &lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt; 推到 GitHub Page&lt;/p&gt;
&lt;h2 id="working-on-github-action"&gt;Working on GitHub Action&lt;/h2&gt;
&lt;p&gt;將我原本做的事整理成 GitHub Action 該做的事，就會變成這樣&lt;br/&gt;
1. &lt;strong&gt;Check out&lt;/strong&gt;: Check Out 到這個分支&lt;br/&gt;
2. &lt;strong&gt;Set up Python&lt;/strong&gt;: 設定 Python 環境&lt;br/&gt;
3. &lt;strong&gt;Install dependencies&lt;/strong&gt;: 安裝 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 和相關套件&lt;br/&gt;
4. &lt;strong&gt;Build and Deploy&lt;/strong&gt;: 產生原始碼推上去&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;

&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;publish post&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;content&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check out&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set up Python&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v1&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'3.7'&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install dependencies&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
          &lt;span class="no"&gt;python -m pip install pipenv&lt;/span&gt;
          &lt;span class="no"&gt;pipenv --version&lt;/span&gt;
          &lt;span class="no"&gt;pipenv install&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build and Deploy&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
          &lt;span class="no"&gt;pipenv run inv github&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這份設定檔要放在專案目錄的 &lt;code&gt;.github/workflows/&lt;/code&gt; 下&lt;br/&gt;
至於要命名成什麼都可以&lt;br/&gt;
另外建議使用 yamllint 來檢查 yaml 語法&lt;br/&gt;
我遇過太多次縮排造成的錯誤了&lt;/p&gt;
&lt;p&gt;這份設定檔大致上算直觀&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;name: 這個 workflow 的名稱&lt;/li&gt;
&lt;li&gt;on: 在什麼情況下才要執行這個 workflow&lt;/li&gt;
&lt;li&gt;jobs: 要執行哪些任務，目前我只執行 publish 這件事，下面的 step 則是描述我前面說要做的事&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這麼做之後，我遇到了兩個問題: &lt;strong&gt;submodule&lt;/strong&gt; 跟 &lt;strong&gt;ghp-import&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的部落格把主題跟套件都分出去各自成一個專案&lt;br/&gt;
所以要建立部落格必須要把每一個 submodule 都一併 clone 下來&lt;br/&gt;
所幸原本 GitHub Action 就有提供 (Ref: &lt;a href="https://github.com/actions/checkout#Checkout-submodules"&gt;Check-out-submodule&lt;/a&gt;)&lt;br/&gt;
加上下面這段就解決了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout submodules&lt;/span&gt;
        &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
          &lt;span class="no"&gt;auth_header="$(git config --local --get http.https://github.com/.extraheader)"&lt;/span&gt;
          &lt;span class="no"&gt;git submodule sync --recursive&lt;/span&gt;
          &lt;span class="no"&gt;git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ghp-import 的問題則是，我沒有在上面的環境設定我的 git 資訊&lt;br/&gt;
他沒有權限推到 gh-pages&lt;br/&gt;
也可以透過把 URL 改成 &lt;code&gt;https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${repo_name}&lt;/code&gt; 來解決&lt;br/&gt;
但我實在不太想再多去設定一些 credential&lt;br/&gt;
最後找到了 &lt;a href="https://github.com/peaceiris/actions-gh-pages"&gt;actions-gh-page&lt;/a&gt;&lt;br/&gt;
只要把靜態網頁在 GitHub 上 build 出來，再把結果透過這個 action 推到 gh-pages 即可&lt;br/&gt;
這樣我就只需要設定 &lt;code&gt;{{ secrets.PERSONAL_ACCESS_TOKEN}}&lt;/code&gt; 這個我在其他 GitHub Action 也都用得到的 token&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peaceiris/actions-gh-pages@v2&lt;/span&gt;
        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;PERSONAL_TOKEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.PERSONAL_ACCESS_TOKEN }}&lt;/span&gt;
          &lt;span class="nt"&gt;PUBLISH_BRANCH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
          &lt;span class="nt"&gt;PUBLISH_DIR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="token" src="/images/posts-image/2020-01-16-automate-publish-pelican-through-github-action/token.png"/&gt;&lt;/p&gt;
&lt;p&gt;另外，最近 GitHub 終於提供可以 rerun 的選項了&lt;br/&gt;
原本失敗的時候還必須要 git reset 來強制 GitHub 重新執行 Action&lt;/p&gt;
&lt;p&gt;&lt;img alt="rebuild" src="/images/posts-image/2020-01-16-automate-publish-pelican-through-github-action/rebuild.png"/&gt;&lt;/p&gt;
&lt;h2 id="after-github-action"&gt;After GitHub Action&lt;/h2&gt;
&lt;p&gt;下面就是我最後的 &lt;code&gt;.github/workflows/publish.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;

&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;publish post&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;content&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check out&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout submodules&lt;/span&gt;
        &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
          &lt;span class="no"&gt;auth_header="$(git config --local --get http.https://github.com/.extraheader)"&lt;/span&gt;
          &lt;span class="no"&gt;git submodule sync --recursive&lt;/span&gt;
          &lt;span class="no"&gt;git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set up Python&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v1&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'3.7'&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install dependencies&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
          &lt;span class="no"&gt;python -m pip install pipenv&lt;/span&gt;
          &lt;span class="no"&gt;pipenv --version&lt;/span&gt;
          &lt;span class="no"&gt;pipenv install&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
          &lt;span class="no"&gt;pipenv run inv publish&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peaceiris/actions-gh-pages@v2&lt;/span&gt;
        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;PERSONAL_TOKEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.PERSONAL_ACCESS_TOKEN }}&lt;/span&gt;
          &lt;span class="nt"&gt;PUBLISH_BRANCH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
          &lt;span class="nt"&gt;PUBLISH_DIR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Tech"></category><category term="Python"></category><category term="GitHub Action"></category><category term="Blog"></category><category term="CI/CD"></category></entry><entry><title>EDBT-ICDT 2018</title><link href="https://lee-w.github.io/posts/tech/2020/01/edbt-icdt-2018" rel="alternate"></link><published>2020-01-03T15:30:00+08:00</published><updated>2020-01-03T15:30:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-03:/posts/tech/2020/01/edbt-icdt-2018</id><summary type="html">&lt;p&gt;整理筆記時，翻到兩年前去研討會的筆記&lt;br/&gt;
想說放著也不會增值，就整理出來了&lt;br/&gt;
雖然大部分的內容的印象都已經有點模糊了&lt;br/&gt;
不過就加減把當初的筆記湊起來&lt;/p&gt;
</summary><content type="html">&lt;p&gt;整理筆記時，翻到兩年前去研討會的筆記&lt;br/&gt;
想說放著也不會增值，就整理出來了&lt;br/&gt;
雖然大部分的內容的印象都已經有點模糊了&lt;br/&gt;
不過就加減把當初的筆記湊起來&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;當時我覺得最有趣的論文是 &lt;a href="http://www.vldb.org/pvldb/vol9/p1465-milo.pdf"&gt;Interactive Rule Refinement for Fraud Detection.&lt;/a&gt;&lt;br/&gt;
不過竟然沒有做到太多筆記&lt;/p&gt;

&lt;h2 id="day-1-keynote"&gt;Day 1 - Keynote&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In theoretical CS&lt;ul&gt;
&lt;li&gt;Polynomial time → easy/fast&lt;ul&gt;
&lt;li&gt;However, that's not always the case&lt;/li&gt;
&lt;li&gt;e.g., $O(n^{100})$&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;n&lt;/code&gt; grows, even $O(n^2)$ is not efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We're stuck on many problems even just in $O(n^2)$&lt;/li&gt;
&lt;li&gt;No $N^{2-\epsilon}$ time algorithms known for&lt;ul&gt;
&lt;li&gt;String matching&lt;/li&gt;
&lt;li&gt;computational geometry&lt;/li&gt;
&lt;li&gt;graph problem in sparse graphs&lt;/li&gt;
&lt;li&gt;many problems from database&lt;/li&gt;
&lt;li&gt;many other problems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why are we stuck?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The traditional hardness in complexity tells us little about runtime&lt;/li&gt;
&lt;li&gt;fine-grained hardness idea&lt;ol&gt;
&lt;li&gt;identify key hard problem&lt;/li&gt;
&lt;li&gt;......&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="large-scale-machine-learning-where-do-relational-systems-fit-in-by-chris-jermaine"&gt;Large Scale Machine Learning: Where Do Relational Systems Fit In? (by Chris Jermaine)&lt;/h2&gt;
&lt;p&gt;Currently, ML community cares about new models instead of theory and fundamental ML design&lt;/p&gt;
&lt;h3 id="ml-vs-ai"&gt;ML vs AI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ML is one approach to AI&lt;/li&gt;
&lt;li&gt;Classic AI: a programmer/expert imparting knowledge to a system&lt;/li&gt;
&lt;li&gt;ML is fundamentally statistical&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="intro-to-ml"&gt;Intro to ML&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Distributed ML&lt;ul&gt;
&lt;li&gt;Most ML systems use a "parameter server" model&lt;ul&gt;
&lt;li&gt;Essentially a distributed key-value pair&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Negatives&lt;ul&gt;
&lt;li&gt;Parameter server compute model very limiting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Parallel ML&lt;ul&gt;
&lt;li&gt;Each compute server runs same computation on different data&lt;/li&gt;
&lt;li&gt;Global state updated via aggregation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Want to scale out to speed up learning?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;scale out ineffective in data parallel param server&lt;ul&gt;
&lt;li&gt;no easy way to add machines and have a graph execute faster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Only easy way to scale out is to add compute servers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="take-home-point"&gt;Take-Home Point&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Current ML systems are &lt;strong&gt;easily&lt;/strong&gt; applicable only to&lt;ul&gt;
&lt;li&gt;Relatively small model problems&lt;/li&gt;
&lt;li&gt;That is run on a single machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="detecting-database-file-tampering-through-page-carving"&gt;Detecting Database File Tampering through Page Carving&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Attack Vector: File Tampering&lt;ul&gt;
&lt;li&gt;Occurs at the OS level → outside DBMS control&lt;ul&gt;
&lt;li&gt;Bypass DBMS control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Page Deconstruction&lt;ul&gt;
&lt;li&gt;Page Header&lt;ul&gt;
&lt;li&gt;Checksum&lt;/li&gt;
&lt;li&gt;PageID&lt;/li&gt;
&lt;li&gt;Row Count&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DBStorageAuditor&lt;ul&gt;
&lt;li&gt;Goal: find inconsistency in storage&lt;ul&gt;
&lt;li&gt;which is created by direct file manipulation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="extracting-statistical-graph-features-for-accurate-and-efficient-time-series-classification"&gt;Extracting Statistical Graph Features for Accurate and Efficient Time Series Classification&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Time series: Any data that is ordered&lt;/li&gt;
&lt;li&gt;Time Series Classification&lt;ul&gt;
&lt;li&gt;similarity-based kNN (e.g., kNN-ED, kNN-DTW)&lt;ul&gt;
&lt;li&gt;similarity can be unreliable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shaplets&lt;ul&gt;
&lt;li&gt;high computation complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why multiscale&lt;ul&gt;
&lt;li&gt;sometimes global features are more important while sometimes local features are more important&lt;/li&gt;
&lt;li&gt;in this research, both global and local are considered&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visibility Graphs&lt;/li&gt;
&lt;li&gt;Multiscale Visibility Graphs&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Conference"></category></entry><entry><title>[Book] 原子習慣</title><link href="https://lee-w.github.io/posts/book/2020/01/atmoic-habit" rel="alternate"></link><published>2020-01-02T21:30:00+08:00</published><updated>2020-01-02T21:30:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2020-01-02:/posts/book/2020/01/atmoic-habit</id><summary type="html">&lt;p&gt;終於把之前很多人在討論的這本書看完了&lt;br/&gt;
也許是太久沒看書了，看書的速度下降了很多&lt;br/&gt;
上一次好好看完一本書竟然是九月初的事了＠＠&lt;/p&gt;
&lt;p&gt;整體來說，這本書在講的跟&lt;a href="https://lee-w.github.io/posts/tech/2019/12/pycon-ca-2019"&gt;為什麼我們這樣生活，那樣工作 ?&lt;/a&gt;差不多&lt;br/&gt;
但文字上淺顯易懂了很多&lt;/p&gt;
&lt;p&gt;&lt;img alt="atmoic-habit" src="/images/books/atmoic-habit.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;終於把之前很多人在討論的這本書看完了&lt;br/&gt;
也許是太久沒看書了，看書的速度下降了很多&lt;br/&gt;
上一次好好看完一本書竟然是九月初的事了＠＠&lt;/p&gt;
&lt;p&gt;整體來說，這本書在講的跟&lt;a href="https://lee-w.github.io/posts/tech/2019/12/pycon-ca-2019"&gt;為什麼我們這樣生活，那樣工作 ?&lt;/a&gt;差不多&lt;br/&gt;
但文字上淺顯易懂了很多&lt;/p&gt;
&lt;p&gt;&lt;img alt="atmoic-habit" src="/images/books/atmoic-habit.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;「習慣的四階段模型」&lt;ol&gt;
&lt;li&gt;提示&lt;/li&gt;
&lt;li&gt;渴望&lt;/li&gt;
&lt;li&gt;回應&lt;/li&gt;
&lt;li&gt;獎賞&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="-"&gt;基本原理 - 為何細微改變會帶來巨大差距&lt;/h2&gt;
&lt;h3 id="1"&gt;1. 原子習慣的驚人力量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;造就成功的，是日常習慣，而不是千載難逢的轉變&lt;/li&gt;
&lt;li&gt;如果花太多時間思考目標，卻花太少時間設計系統，會遇到這些問題&lt;ol&gt;
&lt;li&gt;贏家跟輸家擁有同樣的目標&lt;/li&gt;
&lt;li&gt;目標達成不過是短暫的改變&lt;ul&gt;
&lt;li&gt;目標的達成只能暫時改變你的生活&lt;/li&gt;
&lt;li&gt;結果並非問題所在，應該改變的是造成那些結果的系統&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目標限制了你的快樂&lt;/li&gt;
&lt;li&gt;目標與長期進步互相矛盾&lt;ul&gt;
&lt;li&gt;設定目標的目的是贏得比賽，建立系統的目的則是持續待在比賽裡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在跨越關鍵門檻之前，小改變往往看似無足輕重。所有複利過程的強大成果總是遲來，你要有耐性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2"&gt;2. 改變習慣最有效的方法，是改變身份認同&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;改變的發生分成三個層次&lt;ol&gt;
&lt;li&gt;結果&lt;/li&gt;
&lt;li&gt;過程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;身分認同&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;改變信念： 世界觀、你的自我形象、你對自己與他人的評價&lt;/li&gt;
&lt;li&gt;在成為自我身分的一部分之前，改善都只是暫時的&lt;ul&gt;
&lt;li&gt;目標不是讀一本書，而是成為讀書的人&lt;/li&gt;
&lt;li&gt;目標不是跑一趟馬拉松，而是成為跑步的人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你之所以相信你現在的身份認同是因為你有證據&lt;ul&gt;
&lt;li&gt;假如你每週日都上教堂，你就有證據證明自己是個虔誠的人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新的身分認同需要新的證據&lt;ol&gt;
&lt;li&gt;決定你想要成為什麼樣的人&lt;/li&gt;
&lt;li&gt;透過生活中的小勝利來向自己證明&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3"&gt;3. 四個簡單的步驟，讓你建立更好的習慣&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;習慣可以讓你騰出自由思考與創意所需的心理空間&lt;/li&gt;
&lt;li&gt;每當你想要改變一個行為&lt;ol&gt;
&lt;li&gt;我要怎麼讓提示顯而易見？&lt;/li&gt;
&lt;li&gt;我要怎麼讓習慣有吸引力？&lt;/li&gt;
&lt;li&gt;我要怎麼讓行動輕而易舉？&lt;/li&gt;
&lt;li&gt;我要怎麼讓獎賞令人滿足？&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="1-"&gt;法則 1 - 讓提示顯而易見&lt;/h2&gt;
&lt;h3 id="4"&gt;4. 行為改變的過程始於察覺&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;習慣記分卡&lt;ul&gt;
&lt;li&gt;Why&lt;ul&gt;
&lt;li&gt;幫助你覺察自身習慣&lt;/li&gt;
&lt;li&gt;行為愈是自動化，愈難有意識地想到它，也愈容易出錯&lt;/li&gt;
&lt;li&gt;個人生活中，也需要&lt;a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E5%B7%AE%E7%A2%BA%E8%AA%8D"&gt;指差確認&lt;/a&gt;系統&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How&lt;ul&gt;
&lt;li&gt;列出每日習慣的清單&lt;/li&gt;
&lt;li&gt;「這是好習慣、壞習慣，或是不好不壞的習慣？」&lt;ul&gt;
&lt;li&gt;好習慣: 標上正號（＋）&lt;/li&gt;
&lt;li&gt;壞習慣: 標上負號（－）&lt;/li&gt;
&lt;li&gt;不好不壞:  標上等號（＝）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何判斷好習慣還壞習慣 → 「這個習慣能幫助我成為我想要成為的那種人嗎？對於我渴望的身分認同，這個習慣投的是同意票或反對票？」&lt;/li&gt;
&lt;li&gt;目標只是要注意到實際發生的行為，請&lt;strong&gt;不帶評價或批判地觀察自己的想法與行動&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改變惡習的第一步，就是密切注意它們&lt;ul&gt;
&lt;li&gt;如果覺得需要額外的協助，可以嘗試在生活中執行指差確認，&lt;em&gt;大聲說出你打算做的事，以及可能的結果&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="5"&gt;5. 開始一個新習慣最好的方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;執行意向: &lt;strong&gt;我會於〔時間〕，在〔地點〕進行〔行為〕&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;對何時何地執行一項新習慣做出確切計畫的人，比較可能真的去執行&lt;/li&gt;
&lt;li&gt;確切知道自己想要什麼、如何達成目標，可以幫助你拒絕干擾你前進、令你分心、讓你脫離軌道的事物&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;習慣堆疊: &lt;strong&gt;「做完〔目前的習慣〕之後，我會執行〔新的習慣〕。」&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;先找出自己目前的每日習慣，然後把新的行為堆疊上去&lt;/li&gt;
&lt;li&gt;修正習慣堆疊，讓時間點明確：&lt;ul&gt;
&lt;li&gt;e.g., 「午餐休息時，我會做十下伏地挺身。」 → 「當我闔上筆電、準備去吃午餐時，我會在書桌旁做十下伏地挺身。」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="6"&gt;6. 激勵被高估了，環境往往更重要&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;情境是觸發習慣的提示&lt;/li&gt;
&lt;li&gt;比起在相互牴觸的提示中建立新習慣，把新習慣跟一個全新的情境連結在一起比較容易&lt;ul&gt;
&lt;li&gt;如果你每晚都在臥室看電視，想要早點就寢可能很難&lt;/li&gt;
&lt;li&gt;如果客廳是你打電動的地方，想要在那裡專心讀書可能很難&lt;ul&gt;
&lt;li&gt;步出平常的環境，你就把那些行為偏誤拋在腦後了。你不必對抗舊環境裡的提示，新習慣的形成也就不受干擾了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一個空間，一個用途: 倘若無法移動到全新的環境，就重新定義或重新整理當前的環境，為工作、讀書、運動、娛樂與烹飪區隔出不同的空間&lt;/li&gt;
&lt;li&gt;盡量避免把一個習慣的情境跟另一個習慣的情境混在一起&lt;ul&gt;
&lt;li&gt;當情境混合，習慣也會開始混合在一起&lt;/li&gt;
&lt;li&gt;到頭來，獲勝的通常是比較輕鬆的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-"&gt;法則 2 - 讓習慣有吸引力&lt;/h2&gt;
&lt;h3 id="7"&gt;7. 自制力的祕密&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所謂「自律者」只是擅長建構生活，好讓自己不需要展現超凡的意志力與自我控制力 → 不常讓自己處於充滿誘惑的情境&lt;ul&gt;
&lt;li&gt;可以破除一項習慣，但不太可能忘掉它&lt;ul&gt;
&lt;li&gt;習慣的心理紋路一旦被刻進大腦，幾乎不可能完全移除 → 抗拒誘惑是無效策略&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;短期內，你可以用意志力壓過誘惑；長久下來，我們終歸是所處環境的產物&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要剷除一項壞習慣，最實用的方法之一就是&lt;strong&gt;減少接觸會激發此惡習的提示&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="8"&gt;8. 如何讓習慣變得難以抗拒&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;習慣堆疊加誘惑綑綁&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;做完〔目前的習慣〕之後，我會執行〔我需要的習慣〕&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;做完〔我需要的習慣〕之後，我會執行〔我想要的習慣〕&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="9"&gt;９　家人與朋友如何形塑你的習慣&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;要打造更好的習慣，最有效的方法之一就是加入一個把你想要的行為視作常態的文化之中。當你看到其他人每天都在做，新習慣便顯得可行&lt;ul&gt;
&lt;li&gt;沒有任何事物比「屬於某一族群」的感覺更能支撐動機，這種歸屬感把個人的追求轉化為共同的追求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加入的文化應該具備兩個特點&lt;ol&gt;
&lt;li&gt;你想要的行為是常態&lt;/li&gt;
&lt;li&gt;你跟這個群體本來就有某些共同點&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="10"&gt;10　如何找出並解決壞習慣的成因&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目前的習慣不見得是解決問題的最佳手段，而只是你學會使用的手段&lt;ul&gt;
&lt;li&gt;某個人也許學會用抽菸來抒解壓力，另一個人則學會用跑步來減低焦慮&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;與正面感受產生連結之後，習慣就有了吸引力&lt;/li&gt;
&lt;li&gt;動機儀式: 練習把習慣與你很享受的某件事物聯想在一起，往後每當需要一點動機時，就可以把這個提示拿出來用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3-"&gt;法則 3 - 讓行動輕而易舉&lt;/h2&gt;
&lt;h3 id="11"&gt;11. 精通習慣由重複開始，而非完美&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;想要精通一項習慣，&lt;strong&gt;關鍵是由重複開始，而非完美&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;你不必詳細列出新習慣的所有特徵，只要開始實行就好了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="12"&gt;12. 最小努力原則&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;讓習慣簡單到就算沒有意願也會執行&lt;ul&gt;
&lt;li&gt;創造出一個讓正確的事情盡可能輕而易舉的環境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;讓好習慣更加方便，你就更有可能貫徹&lt;ul&gt;
&lt;li&gt;為了以後方便，把環境準備好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="13"&gt;13. 如何運用「兩分鐘法則」停止拖延&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;兩分鐘法則：新習慣的開始應該要花不到兩分鐘&lt;ul&gt;
&lt;li&gt;幾乎每個習慣都可以縮減為兩分鐘版本：&lt;ul&gt;
&lt;li&gt;「每晚就寢前閱讀」變成「讀一頁」&lt;/li&gt;
&lt;li&gt;「做三十分鐘瑜伽」變成「拿出瑜伽墊」&lt;/li&gt;
&lt;li&gt;「用功讀書」變成「翻開筆記」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在覺得費力之前停止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="14"&gt;14. 如何讓好習慣變得無可避免，讓壞習慣不可能發生&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;讓違背好習慣比開始執行好習慣更花力氣&lt;ul&gt;
&lt;li&gt;e.g.,&lt;ul&gt;
&lt;li&gt;報名瑜伽課程並提前付款&lt;/li&gt;
&lt;li&gt;買一個插座定時器，裝在電源和路由器中間，每天晚上十點，這個定時器會切斷路由器的電源；當網路斷線，就知道上床時間到了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="4-"&gt;法則 4 - 讓獎賞令人滿足&lt;/h2&gt;
&lt;h3 id="15"&gt;15. 行為改變的基本原則&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;行為改變的基本原則： 帶來獎賞的行為會被重複，帶來懲罰的行為會被避免&lt;ul&gt;
&lt;li&gt;正面情緒培養習慣，負面情緒摧毀習慣&lt;/li&gt;
&lt;li&gt;不是任何一種滿足都好，&lt;strong&gt;我們追求的是立即的滿足&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;立即獎賞與延遲獎賞之間的不一致&lt;ul&gt;
&lt;li&gt;&lt;em&gt;壞習慣的後果被延遲，其獎賞卻是立即的&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何把「立即滿足」變得對你有利&lt;ul&gt;
&lt;li&gt;本來就沒有行動時，很難讓人感到滿足。你所做的只是抵抗誘惑，這沒什麼好令人滿足的&lt;/li&gt;
&lt;li&gt;一個解決方法是把情況顛倒： &lt;strong&gt;讓避免變得可見&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;開一個存款帳戶，然後每跳過一樣東西不買，就在那個帳戶裡存進同等金額的錢&lt;ul&gt;
&lt;li&gt;早餐沒點拿鐵？ 轉五美元進去&lt;/li&gt;
&lt;li&gt;下個月不訂購 Netflix？ 轉十美元進去&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;值得注意的是，選擇的短期獎賞必須能夠強化你的身分認同，不能與之牴觸&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="16"&gt;16. 如何每天堅持好習慣&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;習慣追蹤器&lt;ul&gt;
&lt;li&gt;最基本的形式就是找一本日曆，只要有執行例行事務，就在那天打個勾&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why&lt;ol&gt;
&lt;li&gt;顯而易見&lt;ul&gt;
&lt;li&gt;記錄上一個行動，可以創造觸發下一個行動的因子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有吸引力&lt;ul&gt;
&lt;li&gt;最有效的激勵就是自己的進步&lt;/li&gt;
&lt;li&gt;習慣追蹤可以產生一種成癮效果，每個小勝利都餵養著你的渴望&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;令人滿足&lt;ul&gt;
&lt;li&gt;習慣追蹤還能幫助你專注於當下所做的事：把焦點放在過程，而非結果&lt;/li&gt;
&lt;li&gt;不再執著於練出六塊腹肌，而是試圖讓連續紀錄延續下去，成為從不錯過健身行程的那種人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;如何在習慣中斷之後快速回復&lt;ul&gt;
&lt;li&gt;每當這種情況發生，我就會提醒自己守住一個簡單的原則：不要錯過兩次&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;問題不在於犯錯，而在於以為只要無法做到完美，就乾脆不要做&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;即使只是執行一點，也要執行&lt;/li&gt;
&lt;li&gt;在狀態不佳（或忙碌）的一天繼續執行你的習慣，有非常大的價值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="17"&gt;17.　問責夥伴作用大&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;習慣契約 - 讓違背承諾變成公開且令人痛苦的事&lt;ul&gt;
&lt;li&gt;一份口頭或文字的同意書&lt;ul&gt;
&lt;li&gt;表明你承諾投入某項特定習慣&lt;/li&gt;
&lt;li&gt;未能貫徹時會有的懲罰&lt;/li&gt;
&lt;li&gt;找一到兩人來擔任你的「問責夥伴」，與你一同簽署這份契約&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="18"&gt;18　基因如何影響習慣的養成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基因決定的不是你的命運，而是你在哪個領域會有機會&lt;/li&gt;
&lt;li&gt;如何找到對自己有利的賽場&lt;ul&gt;
&lt;li&gt;什麼事情對別人來說是勞苦，對我來說卻是樂趣?&lt;/li&gt;
&lt;li&gt;什麼事情讓我忘記時間？&lt;/li&gt;
&lt;li&gt;什麼事情讓我比一般人得到更多報償？&lt;/li&gt;
&lt;li&gt;什麼事情對我來說是自然而然的？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當你無法靠著「更好」來贏，可以憑藉「不同」勝出&lt;ul&gt;
&lt;li&gt;透過結合自己的各項技能，你把競爭程度降低，讓自己更容易出頭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="19"&gt;19. 如何在生活與工作中維持動力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;維持動力並達到欲望最高點的關鍵： 執行「難度恰到好處」的任務&lt;/li&gt;
&lt;li&gt;如何在感到無聊時保持專注&lt;ul&gt;
&lt;li&gt;變動獎賞&lt;ul&gt;
&lt;li&gt;但變動獎賞不會創造渴望&lt;ul&gt;
&lt;li&gt;不能拿一個人們不感興趣的獎賞，以變動的間隔給，然後希望可以讓他們改變主意，但對於強化原本就有的渴望非常有效，因為變動獎賞能夠減低無聊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不管有沒有變動獎賞，任何習慣都無法永遠保持有趣。在自我精進的旅途上，到了某個時間點，每個人都會面對同樣的挑戰： 你必須愛上無聊&lt;/li&gt;
&lt;li&gt;在討厭的時候、痛苦的時候、筋疲力盡的時候還是挺身繼續，這就是專業人士與業餘者的差別&lt;ul&gt;
&lt;li&gt;專業人士堅守既定行程，業餘者接受生活的干擾&lt;/li&gt;
&lt;li&gt;專業人士知道什麼事情對自己最重要，帶著決心奮力向前，業餘者則讓生活中的緊急事件拽離正軌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="20"&gt;20.　建立好習慣的壞處&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;當習慣變得自動化，你對回饋就變得比較不敏感，落入無意識的重複之中&lt;ul&gt;
&lt;li&gt;錯誤就比較容易趁虛而入&lt;/li&gt;
&lt;li&gt;當你可以不假思索地把事情做得「夠好」，就不會去思考要怎麼樣才能做得「更好」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;習慣 ＋ 刻意練習 ＝ 精通&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;作者使用的反省/複查模式&lt;ul&gt;
&lt;li&gt;每年十二月，進行「年度審核」，反思過去的一年&lt;ul&gt;
&lt;li&gt;為那年的習慣打分&lt;ul&gt;
&lt;li&gt;發表了多少篇文章&lt;/li&gt;
&lt;li&gt;健身了多少回&lt;/li&gt;
&lt;li&gt;造訪了多少個新地方&lt;/li&gt;
&lt;li&gt;and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;問自己以下問題，反思是否有進步&lt;ol&gt;
&lt;li&gt;今年什麼事情很順利？&lt;/li&gt;
&lt;li&gt;今年什麼事情不順利？&lt;/li&gt;
&lt;li&gt;我從中學到什麼？&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;六月，進行「誠實報告」&lt;ul&gt;
&lt;li&gt;重新審視自己的核心價值觀，思考自己是否有依照這些價值觀行事&lt;/li&gt;
&lt;li&gt;思索自己的身分認同，看看應該如何努力成為自己想要成為的那種人&lt;/li&gt;
&lt;li&gt;問自己以下的問題&lt;ol&gt;
&lt;li&gt;驅動生活與工作的核心價值觀為何？&lt;/li&gt;
&lt;li&gt;現在如何誠實地生活與工作？&lt;/li&gt;
&lt;li&gt;未來如何設定更高的標準？&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這兩份報告不會花太多時間，每年幾個小時而已，卻是精細改進的關鍵時期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何破除妨礙你前進的信念&lt;ul&gt;
&lt;li&gt;不要讓身分的任何單一面向決定你是誰&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Productivity"></category></entry><entry><title>PyCon CA 2019</title><link href="https://lee-w.github.io/posts/tech/2019/12/pycon-ca-2019" rel="alternate"></link><published>2019-12-23T17:51:00+08:00</published><updated>2019-12-23T17:51:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-12-23:/posts/tech/2019/12/pycon-ca-2019</id><summary type="html">&lt;p&gt;隔了一個多月，終於有時間可以來補 PyCon CA 2019 的心得&lt;br&gt;
這是我今年參加的第四場 PyCon&lt;br&gt;
終於是因為當 Regular Talk 的講者參加&lt;/p&gt;
</summary><content type="html">&lt;p&gt;隔了一個多月，終於有時間可以來補 PyCon CA 2019 的心得&lt;br&gt;
這是我今年參加的第四場 PyCon&lt;br&gt;
終於是因為當 Regular Talk 的講者參加&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;當初會想投稿的原因，就單純的是被 PyCon CA 的 Organizer 在 PyCon US 的閃電秀燒到&lt;br&gt;
「秋天剛好是來加拿大看楓葉的好時間」&lt;br&gt;
好像還沒來過加拿大就來投稿看看吧 XD&lt;br&gt;
雖然這麼說，這個想法也是擱置了好一段時間&lt;br&gt;
之後開始比較認真在構思，則是因為有其他想去北美一趟的理由&lt;/p&gt;
&lt;p&gt;想想之後也會協助 PyCon TW 2020 議程組&lt;br&gt;
來當講者看看，好像也會知道大家都在幹嘛（？？？&lt;/p&gt;
&lt;h2 id="_1"&gt;講者宣傳&lt;/h2&gt;
&lt;p&gt;PyCon CA 每一位講者的議程都會發篇推特宣傳&lt;br&gt;
而且會積極地邀請你一起來宣傳自己的分享&lt;br&gt;
這點還蠻有趣的&lt;br&gt;
&lt;img alt="-w375" src="/images/posts-image/2019-12-23-pycon-ca-2019/15720217074612.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;會場&lt;/h2&gt;
&lt;p&gt;PyCon CA 辦在一個市中心的宴會廳&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hall way" src="/images/posts-image/2019-12-23-pycon-ca-2019/15770893363222.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Keynote Speaker 的演講廳完全是大家可以邊吃飯邊聽議程的 XD&lt;br&gt;
&lt;img alt="Keynote" src="/images/posts-image/2019-12-23-pycon-ca-2019/15770893540925.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;議程&lt;/h2&gt;
&lt;p&gt;提醒議程的方式很好玩&lt;br&gt;
走廊會閃燈，提醒大家議程即將開始&lt;br&gt;
原本以為是劇場的三明三暗，但好像都會閃超過三次&lt;br&gt;
但還是蠻有趣的&lt;/p&gt;
&lt;p&gt;第一場我去聽 &lt;strong&gt;Understanding autistic children using BioSensors and Python!&lt;/strong&gt;&lt;br&gt;
稍微詳細一點的筆記我都丟在 &lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-ca-2019/2019/12/understanding-autistic-children-using-bioSensors-and-python/"&gt;note&lt;/a&gt;&lt;br&gt;
這場主要在講她們如何透過 sensor 來偵測自閉症&lt;/p&gt;
&lt;p&gt;再來我去聽 &lt;strong&gt;My Favourite Errors - Tales From The Ops Side&lt;/strong&gt; (&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-ca-2019/2019/12/my-favourite-errors/"&gt;note&lt;/a&gt;)&lt;br&gt;
主要是講各種可能遇到的 HTTP 錯誤&lt;br&gt;
除了前一場本來就是我非常有興趣的議題外，這場是我覺得 PyCon CA 數一數二精彩的議程&lt;br&gt;
雖然跟 Python 完全沒有直接關係 XD&lt;br&gt;
後來發現講者前一段時間才在 devops day 講過同樣的講題&lt;/p&gt;
&lt;p&gt;接下來連三場，我跑去主持人，就沒特別花時間做筆記&lt;br&gt;
畢竟用非母語主持其實還是有些吃力&lt;br&gt;
主持完真的太累，就一口氣休息了幾場&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Modelling user journeys with Keras and neural networks&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;第一場主持的太緊張了，沒有什麼聽到 XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anomaly detection in the wild&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;主要講如何偵測異常值，舉的例子都還蠻有趣的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A Pythonista’s intro to Kafka: no, it’s not like Celery&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;如果對 Kafka 有興趣，這場很值得聽&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二天早上是閃電秀&lt;br&gt;
登記閃電秀和其他活動的方式是上去改 PyCon CA 的 &lt;a href="https://github.com/pyconca/2019-wiki"&gt;wiki&lt;/a&gt;&lt;br&gt;
我也投了一個小小的閃電秀來宣傳一下明年的 PyCon TW (&lt;a href="https://speakerdeck.com/leew/pycon-tw-2020-at-pycon-ca-2019"&gt;slide&lt;/a&gt;)&lt;br&gt;
迴響還蠻不錯的，尤其是講到台南美食的時候 XD&lt;br&gt;
倒是這天因為太冷了，我有點睡過頭，差點就趕不上閃電秀...&lt;/p&gt;
&lt;p&gt;因為我是這天的下午分享，聽的議程就比較少&lt;br&gt;
印象最深刻的是 &lt;strong&gt;Fun with compilers: exploring languages one Python at a time&lt;/strong&gt;&lt;br&gt;
&lt;a href="[Fun with compilers: exploring languages one Python at a time](https://github.com/pdmccormick/pyconca2019-fun-with-compilers)"&gt;GitHub&lt;/a&gt;&lt;br&gt;
之前有人問我 Python 到底是編譯還是直譯&lt;br&gt;
這位講者給的答案是 Python 就只是個語言，要看用哪個 implementation 來跑&lt;br&gt;
&lt;img alt="is-python-compiled-or-interpreted" src="/images/posts-image/2019-12-23-pycon-ca-2019/15770893777395.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PySpark: avoiding common pitfalls and keeping your sanity&lt;/strong&gt; (&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-ca-2019/2019/12/pyspark-avoiding-common-pitfalls-and-keeping-your-sanity/"&gt;note&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;PySpark 跟 Python 語法上一些不同需要注意的地方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How to Level Up&lt;/strong&gt; (&lt;a href="https://lee-w.github.io/pycon-note/posts/pycon-ca-2019/2019/12/how-to-level-up/"&gt;note&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;用什麼心態面對學習，才能讓自己的技術更上一層樓&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當天因為體力跟時間的關係，還有不少議程沒聽到&lt;br&gt;
這些是之後影片出來我會想要補的議程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My Favourite Errors&lt;/li&gt;
&lt;li&gt;Fantastic anti-patterns and where to find them: pinpointing performance bottlenecks&lt;/li&gt;
&lt;li&gt;Rust accelerated Pythons&lt;/li&gt;
&lt;li&gt;How to build bulletproof integrations&lt;/li&gt;
&lt;li&gt;Forecasting and observing airfare trends using Python and neural networks&lt;/li&gt;
&lt;li&gt;Operator overloading: you're doing it wrong&lt;/li&gt;
&lt;li&gt;Put Your Data in a Box&lt;/li&gt;
&lt;li&gt;Python is a weirdo&lt;/li&gt;
&lt;li&gt;The blameless post mortem: how embracing failure makes us better&lt;/li&gt;
&lt;li&gt;Pull requests: merging good practices into your project&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python-table-manners-a-clean-style"&gt;Python Table Manners - A Clean Style&lt;/h2&gt;
&lt;p&gt;我的分享主要是整理了一大堆工具，他們可能能在開發的各個不同環節用上&lt;br&gt;
我把這次的分享定位在「讓你知道有這個工具，我怎麼用它，你如果會用到，可以自己研究細節」&lt;br&gt;
因為介紹了很多工具，所以沒有辦法深入討論&lt;br&gt;
當初也有點擔心這樣的內容會不會太淺&lt;br&gt;
出發 PyCon CA 前，有先到 Taipei.py 分享一下&lt;br&gt;
得到的迴響比我預想的還好些&lt;br&gt;
PyCon CA 當天來聽的人也算不少，我想應該還算成功吧&lt;/p&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/leew/python-table-manners-a-clean-style-at-pycon-ca-2019"&gt;slide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="myself" src="/images/posts-image/2019-12-23-pycon-ca-2019/15770893864623.jpg"&gt;&lt;/p&gt;
&lt;p&gt;一個有趣的小插曲是&lt;br&gt;
我原本介紹了一套 Java Script 的工具 &lt;a href="https://github.com/commitizen"&gt;commitizen&lt;/a&gt;&lt;br&gt;
雖然 Python 也有 &lt;a href="https://github.com/Woile/commitizen"&gt;commitizen&lt;/a&gt;&lt;br&gt;
但一開始用的時候，遇到了很多的 bug&lt;br&gt;
PyCon CA 前一個禮拜，覺得還是想介紹個 Python 的套件&lt;br&gt;
就想說去貢獻看看，能不能把這些 Bug 修完&lt;br&gt;
認真使用才發現功能大部分都沒問題，只是我剛好亂玩遇到 Bug......&lt;br&gt;
幸運的是 &lt;a href="https://github.com/Woile/commitizen"&gt;commitizen&lt;/a&gt; 作者回覆超快&lt;br&gt;
PyCon CA 前，我就把遇到的 Bug 都修完了&lt;br&gt;
既然都修完了，就順便把這段的投影片也更新一下&lt;br&gt;
後來還拿著這個專案去主持一個 Sprint&lt;/p&gt;
&lt;h2 id="development-sprint"&gt;Development Sprint&lt;/h2&gt;
&lt;p&gt;參與的專案還蠻多的&lt;br&gt;
在 PyCon CA 前，幾乎沒有人想填 &lt;a href="https://github.com/pyconca/2019-wiki"&gt;wiki&lt;/a&gt;&lt;br&gt;
都是到 PyCon CA 開始後，甚至是 Sprint 開始後才慢慢有專案出現 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="Broad" src="/images/posts-image/2019-12-23-pycon-ca-2019/15770894153368.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sprint" src="/images/posts-image/2019-12-23-pycon-ca-2019/15770894201423.jpg"&gt;&lt;/p&gt;
&lt;p&gt;原則上不供餐，鼓勵你和你的夥伴一起出去吃飯&lt;br&gt;
其實我覺得挺好的&lt;br&gt;
雖然第二天還是訂了 Pizza XD&lt;/p&gt;
&lt;h2 id="_4"&gt;雜談&lt;/h2&gt;
&lt;p&gt;雖然今年參與的 PyCon 都有讓我覺得比起之前跟參與者的交流更多&lt;br&gt;
PyCon CA 給我的感覺是所有參與者之間最沒有隔閡的&lt;br&gt;
大家就是一群來這裡的 Pythonists&lt;br&gt;
不會因為你有不同的身份，而有不同&lt;br&gt;
但也可能是我當了志工才有這樣的感覺&lt;/p&gt;
&lt;p&gt;紀念品也還蠻有趣的，是當地很需要的毛帽&lt;br&gt;
有一度想要買，因為真的很冷...&lt;br&gt;
我在加拿大期間最冷的期間就是會期這兩天&lt;br&gt;
-8 度真的很瘋狂，但又不能不出門......&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="PyCon"></category><category term="Conference"></category></entry><entry><title>PyCon TW 2019 - Do you know PyCon JP</title><link href="https://lee-w.github.io/posts/tech/2019/10/pycon-tw-2019-do-you-know-pycon-jp" rel="alternate"></link><published>2019-10-28T12:35:00+08:00</published><updated>2019-10-28T12:35:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-10-28:/posts/tech/2019/10/pycon-tw-2019-do-you-know-pycon-jp</id><summary type="html">
&lt;p&gt;每年的 PyCon TW 都是我在台灣蠻期待的研討會&lt;br/&gt;
雖然第一年來的時候，幾乎什麼都聽不懂&lt;br/&gt;
但還是被各種大家正在做正在研究的事有些震撼到&lt;br/&gt;
而今年跟往年不同的是，我誤打誤撞的成為了 PyCon TW 志工&lt;/p&gt;
&lt;p&gt;多誤打誤撞呢&lt;br/&gt;
大概就是我在報名了 PyCon JP 參訪團後不久突然收到了這個訊息&lt;/p&gt;
&lt;p&gt;&lt;img alt="recruit" src="/images/posts-image/2019-10-29-pycon-tw-2019/15720876979484.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;我是到最近才確認了當初敲我的是誰，雖然一直有在猜 XD&lt;/p&gt;
&lt;h2 id="being-a-volunteer"&gt;Being a volunteer&lt;/h2&gt;
&lt;p&gt;我大概到七月才加入，往年這都是辦完 PyCon TW 的時間了&lt;br/&gt;
所以我真的完全是菜鳥一枚&lt;br/&gt;
一進入議程組，就接了聯絡 Keynote Speakers 的工作&lt;br/&gt;
一開始就丟這種應該挺重要的工作給菜鳥真的是可以的嗎 XD&lt;/p&gt;
&lt;p&gt;今年我主要工作是負責各式的英文書信&lt;br/&gt;
包含後來跟財務補助申請人的書信往來，我都有碰到&lt;br/&gt;
英文書信還真的不是一件簡單的事啊.....&lt;br/&gt;
每一封信常常還是要花我不少時間才能擬好&lt;br/&gt;
不過是真的蠻有趣的，會有更多跟來自各個國家的人相處的機會&lt;br/&gt;
每個 Keynote 都是很有個性的人 XD&lt;/p&gt;
&lt;p&gt;會議期間，我大概有一半的時間都在當主持人&lt;br/&gt;
而且我大多都主持英文場 …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;每年的 PyCon TW 都是我在台灣蠻期待的研討會&lt;br/&gt;
雖然第一年來的時候，幾乎什麼都聽不懂&lt;br/&gt;
但還是被各種大家正在做正在研究的事有些震撼到&lt;br/&gt;
而今年跟往年不同的是，我誤打誤撞的成為了 PyCon TW 志工&lt;/p&gt;
&lt;p&gt;多誤打誤撞呢&lt;br/&gt;
大概就是我在報名了 PyCon JP 參訪團後不久突然收到了這個訊息&lt;/p&gt;
&lt;p&gt;&lt;img alt="recruit" src="/images/posts-image/2019-10-29-pycon-tw-2019/15720876979484.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;我是到最近才確認了當初敲我的是誰，雖然一直有在猜 XD&lt;/p&gt;
&lt;h2 id="being-a-volunteer"&gt;Being a volunteer&lt;/h2&gt;
&lt;p&gt;我大概到七月才加入，往年這都是辦完 PyCon TW 的時間了&lt;br/&gt;
所以我真的完全是菜鳥一枚&lt;br/&gt;
一進入議程組，就接了聯絡 Keynote Speakers 的工作&lt;br/&gt;
一開始就丟這種應該挺重要的工作給菜鳥真的是可以的嗎 XD&lt;/p&gt;
&lt;p&gt;今年我主要工作是負責各式的英文書信&lt;br/&gt;
包含後來跟財務補助申請人的書信往來，我都有碰到&lt;br/&gt;
英文書信還真的不是一件簡單的事啊.....&lt;br/&gt;
每一封信常常還是要花我不少時間才能擬好&lt;br/&gt;
不過是真的蠻有趣的，會有更多跟來自各個國家的人相處的機會&lt;br/&gt;
每個 Keynote 都是很有個性的人 XD&lt;/p&gt;
&lt;p&gt;會議期間，我大概有一半的時間都在當主持人&lt;br/&gt;
而且我大多都主持英文場&lt;br/&gt;
英文主持沒準備好，就真的很容易會卡 QQ&lt;br/&gt;
但當主持人真的是一個跟能跟講者多交流的機會，還蠻有趣的&lt;/p&gt;
&lt;p&gt;話說這是我第一次站上了 R0 的舞台了呢（笑&lt;br/&gt;
&lt;img alt="Session Chair" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721878688895.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;所以就不要猶豫了，明年來加入議程組吧！&lt;br/&gt;
或者加入各個你有興趣的組都好&lt;br/&gt;
總之先填單吧 XD&lt;br/&gt;
&lt;strong&gt;&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSe6whkZAEZD10LlPQuSWRYsshySoNR_pux8grGZ0OgmOIkQ3g/viewform?fbclid=IwAR3N-eLvw5iyKJX14sO2LuOUYuOrnar8m-lhK5NOvI2L25y4rGNKIBk788g"&gt;PyCon TW 2020 志工報名&lt;/a&gt;&lt;/strong&gt;&lt;br/&gt;
&lt;img alt="program team" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721879831813.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="during-the-conference"&gt;During the conference&lt;/h2&gt;
&lt;p&gt;不知道是不是因為我今年當了志工才有這樣的感覺&lt;br/&gt;
總覺得今年在於讓會眾交流這點，有做得比往年更好一些&lt;br/&gt;
至少我很努力的帶我拉來的人去認識各路的大大&lt;/p&gt;
&lt;p&gt;&lt;img alt="make new friends" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721878520540.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;雖然原本也在懷疑多擺個高腳桌到底是不是真的會促進會眾交流&lt;br/&gt;
但就結果來看，應該是真的蠻有幫助的（？&lt;/p&gt;
&lt;p&gt;&lt;img alt="high-table" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721878386503.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;今年的 PyNight 依然是少不了各式的音樂表演&lt;br/&gt;
&lt;del&gt;我來 PyCon TW 聽音樂會&lt;/del&gt;&lt;br/&gt;
還有一位用機器學習做音樂伴奏的講者&lt;br/&gt;
直接在 PyNight demo 他的作品，真得挺有趣的&lt;/p&gt;
&lt;p&gt;&lt;img alt="pynight" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721879523324.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;在走廊那邊，大家也玩白板玩得很開心&lt;br/&gt;
日本、波蘭、馬來西亞來的朋友，都在這個白板畫上了自己的 PyCon&lt;br/&gt;
&lt;img alt="map" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721879605000.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;甚至在 PyNight 後&lt;br/&gt;
除了帶各國 PyCon 來的朋友一起吃熱炒，還邀請了一些會眾一同參與&lt;br/&gt;
倒是有一個有趣（？）的小插曲是，我沒注意到波蘭的朋友帶來的酒其實很烈&lt;br/&gt;
我倒酒倒到一半的時候，當突然現場一片歡呼&lt;br/&gt;
我才知道我倒太多了...&lt;/p&gt;
&lt;p&gt;&lt;img alt="after-py-night" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721879668571.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;今年特別擴大舉辦的 Open Space&lt;br/&gt;
在那個時段完全沒有其他的議程&lt;br/&gt;
算是想故意促成大家多交流，也是推廣 Open Space 這個概念&lt;br/&gt;
原本還在怕會不會沒有人想來主持，結果好像一開放沒多久就爆滿了 XD&lt;/p&gt;
&lt;p&gt;這是我第一次主持 Open Space&lt;br/&gt;
雖然人不是特別多，而且大都是自己人 QQ&lt;br/&gt;
但聊聊各地的 PyCon 還是挺有趣的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;PyCon [A-Z]+
or just traveling experiences
~~Help me decide where to go~~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="open-space-host" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721878736938.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;今年好像是第一年讓 Speaker Tour 成真（？&lt;br/&gt;
原本抱著大概只會去一些台北觀光客景點的心態來參加&lt;br/&gt;
沒想到這個導覽真的超出我的預期&lt;br/&gt;
即使這些地方我都去過不知道幾次了，我還是覺得這趟挺有趣的&lt;/p&gt;
&lt;p&gt;&lt;img alt="taipei" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721880418930.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;這還是我第一次從這個角度看台北呢&lt;/p&gt;
&lt;p&gt;&lt;img alt="boat" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721880369566.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="talks"&gt;Talks&lt;/h2&gt;
&lt;p&gt;既然是技術研討會，總覺得還是要分享一下有趣的 talk&lt;br/&gt;
但我好像常常到處跑，沒有認真聽完太多的 talk XD&lt;br/&gt;
最近我們開始在上傳影片了，可以到 &lt;a href="https://www.youtube.com/playlist?list=PLqtzN042QpffQ1j_gK9KGMAqlbRTwXF5c"&gt;PyCon TW 的 Youtube 頻道&lt;/a&gt; 看這次的錄影&lt;/p&gt;
&lt;h3 id="pep-572-the-walrus-operator"&gt;PEP 572: The Walrus Operator&lt;/h3&gt;
&lt;p&gt;在 PyCon JP 的時候，就有跟講者 Dustin 聊過&lt;br/&gt;
他說這場是他自己覺得最喜歡的 talk&lt;br/&gt;
我也是因為這樣才來的&lt;br/&gt;
不然單就標題，我可能不會特別感興趣&lt;br/&gt;
就結果來說這場非常的精彩&lt;br/&gt;
主要在講 PEP 572 造成整個 Python 管理階層重組的事件&lt;/p&gt;
&lt;p&gt;&lt;img alt=":=" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721878608003.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="keynote-programming-language-tourism-leave-python-and-see-the-world"&gt;Keynote: Programming Language Tourism: Leave Python and see the world!&lt;/h3&gt;
&lt;p&gt;這場主要在談 Python 以外的程式語言的各種特性&lt;br/&gt;
透過看其他語言的設計和想法，來重新看看 Python 的設計和未來 Python 能怎麼再改善&lt;br/&gt;
不過講者 Paul 提到的語言，我好像真的只有聽過 Golang 而已......&lt;/p&gt;
&lt;p&gt;想再多提一下 Paul，他是個相當有趣相當熱情的人&lt;br/&gt;
整個會議他都很積極跟我們交流，並參與我們的各種活動&lt;/p&gt;
&lt;h3 id="wait-ipython-can-do-that"&gt;Wait, IPython Can Do That?&lt;/h3&gt;
&lt;p&gt;這場主要在講各種 IPython 的神秘用法&lt;br/&gt;
btw 我也很喜歡講者 Sebastian 在第三天結束給的 Lightning Talk&lt;/p&gt;
&lt;h3 id="keynote-the-different-paths-we-take-as-programmers"&gt;Keynote: The Different Paths We Take As Programmers&lt;/h3&gt;
&lt;p&gt;這場主要在從不同的角度看待 Programmers&lt;br/&gt;
其實還有很多人透過程式和不同的背景知識在解決不同的問題&lt;br/&gt;
而他們不見得是傳統認為程式很強的人&lt;br/&gt;
我們可以試著更接納來自不同領域的人，而不是把他們拒於門外&lt;br/&gt;
這才有助於讓這個社群更多樣、更好&lt;/p&gt;
&lt;p&gt;In conclusion, there is no true programmer.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tracy" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721879760129.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;出去外面才知道台灣的好啊 XD&lt;br/&gt;
中研院這個場地真的是有夠高級&lt;br/&gt;
&lt;img alt="-w375" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721880099317.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;阿對了，還是要炫耀一下&lt;br/&gt;
我有搶到 Tracy 親簽的書&lt;br/&gt;
&lt;img alt="book" src="/images/posts-image/2019-10-29-pycon-tw-2019/15721880028577.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="do-you-know-pycon-jp"&gt;Do you know PyCon JP?&lt;/h2&gt;
&lt;p&gt;最後回來聊聊，副標 Do you know PyCon JP 是怎麼回事&lt;br/&gt;
這是起源於第一天的 Lightning Talk&lt;br/&gt;
第一天的五場 Lightning Talk 中，有四場都是來自 PyCon JP 的朋友&lt;br/&gt;
而且每一位都有一頁會提到 Do you know PyCon JP&lt;br/&gt;
第五位講者雖然不是來自日本，但也跟進了這個梗&lt;br/&gt;
連第二天的 Keynote Paul 都玩這個梗玩得很開心呢&lt;/p&gt;
&lt;p&gt;So...&lt;br/&gt;
Do you know PyCon JP?&lt;/p&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="PyCon"></category></entry><entry><title>PyCon JP 2019</title><link href="https://lee-w.github.io/posts/tech/2019/10/pycon-jp-2019" rel="alternate"></link><published>2019-10-12T22:30:00+08:00</published><updated>2019-10-12T22:30:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-10-12:/posts/tech/2019/10/pycon-jp-2019</id><summary type="html">&lt;p&gt;當初在 PyCon US 看到 PyCon JP 上去介紹他們自己&lt;br/&gt;
不知道哪根筋不對，就覺得不然就來投稿一下吧&lt;br/&gt;
雖然後來投稿並沒有上，但突然發現 PyCon TW 想揪團一起去&lt;/p&gt;
&lt;p&gt;&lt;img alt="visiting-group-post" src="/images/posts-image/2019-10-12-pycon-jp-2019/visiting-group-post.png"/&gt;&lt;/p&gt;
&lt;p&gt;想說這次不去，說不定就不會再有這樣的揪團了&lt;br/&gt;
就衝動的報名下去了 XD&lt;/p&gt;

&lt;h2 id="development-sprint"&gt;Development Sprint&lt;/h2&gt;
&lt;p&gt;sprint 的報名有分 Leader 跟 Attendee&lt;br/&gt;
現場到的人大概 100 人&lt;br/&gt;
雖然不用錢，但就是要統計一下人數&lt;br/&gt;
而且他們還有不斷寄信提醒「如果無法出席，請釋出位置給想參加的人」&lt;br/&gt;
感覺人好像蠻多的&lt;br/&gt;
雖然他們的 sprint 辦在假日，這樣比好像不太公平&lt;br/&gt;
但感覺上比之前在台灣參加的 sprint 熱絡了不少&lt;/p&gt;
&lt;p&gt;一開始會公佈有哪些專案可以參與&lt;br/&gt;
到結束前，大家各自分組討論和開發&lt;br/&gt;
最後來個 demo，分享大家一天的成果&lt;/p&gt;
&lt;p&gt;總共十來個專案中，只有三個是英文的&lt;br/&gt;
有兩個就是台灣人 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;當初在 PyCon US 看到 PyCon JP 上去介紹他們自己&lt;br/&gt;
不知道哪根筋不對，就覺得不然就來投稿一下吧&lt;br/&gt;
雖然後來投稿並沒有上，但突然發現 PyCon TW 想揪團一起去&lt;/p&gt;
&lt;p&gt;&lt;img alt="visiting-group-post" src="/images/posts-image/2019-10-12-pycon-jp-2019/visiting-group-post.png"/&gt;&lt;/p&gt;
&lt;p&gt;想說這次不去，說不定就不會再有這樣的揪團了&lt;br/&gt;
就衝動的報名下去了 XD&lt;/p&gt;

&lt;h2 id="development-sprint"&gt;Development Sprint&lt;/h2&gt;
&lt;p&gt;sprint 的報名有分 Leader 跟 Attendee&lt;br/&gt;
現場到的人大概 100 人&lt;br/&gt;
雖然不用錢，但就是要統計一下人數&lt;br/&gt;
而且他們還有不斷寄信提醒「如果無法出席，請釋出位置給想參加的人」&lt;br/&gt;
感覺人好像蠻多的&lt;br/&gt;
雖然他們的 sprint 辦在假日，這樣比好像不太公平&lt;br/&gt;
但感覺上比之前在台灣參加的 sprint 熱絡了不少&lt;/p&gt;
&lt;p&gt;一開始會公佈有哪些專案可以參與&lt;br/&gt;
到結束前，大家各自分組討論和開發&lt;br/&gt;
最後來個 demo，分享大家一天的成果&lt;/p&gt;
&lt;p&gt;總共十來個專案中，只有三個是英文的&lt;br/&gt;
有兩個就是台灣人 Host 的&lt;br/&gt;
所以就來試試看剩下的 &lt;a href="https://github.com/dimaqq/awaitwhat"&gt;awaitwhat&lt;/a&gt; XD&lt;/p&gt;
&lt;p&gt;awaitwhat 的目標是想挖到 async 更深的 traceback，讓 async 的除錯更方便&lt;br/&gt;
但我實在還沒有對 async 太熟&lt;br/&gt;
最後就是花了點時間對專案做了一些 refactor&lt;br/&gt;
雖然看起來改動很大，但其實貢獻真的很還好（笑&lt;/p&gt;
&lt;p&gt;&lt;img alt="sprint-demo" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700839086070.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;晚餐倒是很有趣，他們好像想把餐點排成一隻蛇 xD&lt;/p&gt;
&lt;p&gt;&lt;img alt="sprint-dinner-snake" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700839118735.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="welcome-party"&gt;Welcome Party&lt;/h2&gt;
&lt;p&gt;只有上台 5 分鐘的 Lightning Talk 講者也能來參加講者晚宴（笑&lt;/p&gt;
&lt;p&gt;場地沒有座位，只有圓桌&lt;br/&gt;
這樣的安排應該是方便大家隨意移動，就能促進更多人的交流&lt;br/&gt;
認真想想這樣的設計還蠻不錯的&lt;/p&gt;
&lt;p&gt;然後每一個圓桌上都有啤酒 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="welcome-beer" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700839787175.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="pycon-jp-day-1"&gt;PyCon JP - Day 1&lt;/h2&gt;
&lt;p&gt;如果想看每場 talk 的細節的話，筆記都整理 PyCon TW Visiting Group 的&lt;a href="https://hackmd.io/pYYzA4hLROGFKbXR0QMTMA?view"&gt;共筆&lt;/a&gt;上了&lt;br/&gt;
我就不聊每一場的細節了&lt;/p&gt;
&lt;p&gt;一開始有點不習慣他們的場地&lt;br/&gt;
Keynote 演講的空間後面馬上就是海報，在更後面就是贊助商&lt;br/&gt;
有時候聲音就會蠻發散的&lt;br/&gt;
不過後來聽前輩們說好像大部分的場地都是這樣&lt;br/&gt;
中研院真的是場地太好&lt;br/&gt;
倒是 Keynote 會有英日互轉的即時口譯，覺得還挺不錯的&lt;/p&gt;
&lt;p&gt;海報的部分則是要感謝 Ohmura-san 幫 PyCon TW 做了精美海報 🙏&lt;br/&gt;
&lt;img alt="poster" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840034582.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;整天下來我最喜歡的 talk 是 Takanori-san 的 &lt;a href="https://www.youtube.com/watch?v=rbNI2LzwaqE"&gt;Automate the Boring Stuff with Slackbot&lt;/a&gt;&lt;br/&gt;
雖然只是被一些有趣的點打到了（笑&lt;br/&gt;
今年他總共參加了 8 場 PyCon&lt;br/&gt;
而且大多都是講者，就算不是講者也有帶海報過去&lt;br/&gt;
雖然 Noah 好像今年參加了 11 場？&lt;br/&gt;
後來跟一些外國講者聊到 Noah，他們說不管到哪場 PyCon 都會遇到他 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="pycon-tour" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840070533.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="programmer-is-lazy" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840091662.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;因為明年是 Python 2 的 End of Life&lt;br/&gt;
&lt;img alt="python 2 rip" src="/images/posts-image/2019-10-12-pycon-jp-2019/python 2 rip.png" style="height:150px;width:150px"/&gt;&lt;br/&gt;
&lt;small&gt;Designed by &lt;a href="https://twitter.com/lisroach"&gt;Lisa Roach&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;有好幾場 Talk 都跟 Python 2 to 3 相關，像是 &lt;a href="https://www.youtube.com/watch?v=8a_TEjCl8NQ"&gt;"It’s 2019 and I’m still using Python 2. Should I be worried?"&lt;/a&gt; 跟 Kir 大大的 &lt;a href="https://www.youtube.com/watch?v=BS-HyV3V7GI"&gt;"SupportingPython3 in Large Scale Project"&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;對於議程安排覺得還蠻不錯的一點是「同一個時段至少會有一場英文的 talk」&lt;br/&gt;
外國來的會眾不會在任何一個時段因為聽不懂日文就完全沒有能聽的 talk&lt;br/&gt;
後來跟他們聊到，這好像也是他們近期在努力的目標之一&lt;/p&gt;
&lt;h3 id="peer-reviewed-lightning-talk"&gt;Peer Reviewed Lightning Talk&lt;/h3&gt;
&lt;p&gt;最後想提到我的 Lightning Talk&lt;/p&gt;
&lt;p&gt;&lt;img alt="lightning" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840162587.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.google.com/presentation/d/1buthYkXvgjbrvb3CT9eXUKklRZOTPc4aN3RgH1PZayk/edit#slide=id.g5cf8cd871b_0_9"&gt;slide&lt;/a&gt; 跟 &lt;a href="https://www.youtube.com/watch?v=7U2D5tcMZb4&amp;amp;t=1110s"&gt;video&lt;/a&gt; 都已經釋出了&lt;/p&gt;
&lt;p&gt;PyCon JP 的 Lightning Talk 還蠻特別的&lt;br/&gt;
分為 &lt;strong&gt;Peer Reviewed&lt;/strong&gt; 跟 &lt;strong&gt;Same Day&lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;Peer Reviewed&lt;/strong&gt; 必須先投稿，也需要經過審稿&lt;br/&gt;
(PyCon TW Visiting Group 包下了所有英文的 Peer Reviewed Lightning Talk XD)&lt;br/&gt;
&lt;strong&gt;Same Day&lt;/strong&gt; 則是當天投稿，當場抽籤決定誰是講者&lt;/p&gt;
&lt;p&gt;我的 Lightning Talk 主要是要介紹 PyCon TW&lt;br/&gt;
我用「與人交流」作為 "How to get more than PyCon in a PyCon" 的核心&lt;br/&gt;
每一個點再帶到 PyCon TW 在做的一些努力之類的&lt;br/&gt;
但其實到了日本才發現，這邊的會眾超積極在跟人交流的啊 XDDD&lt;br/&gt;
果然只是我以前都待在舒適圈太開心，都只跟原本的朋友聊聊天&lt;/p&gt;
&lt;p&gt;有一個小插曲是&lt;br/&gt;
大家湧入主會場的時候，網路就開始不穩定了......&lt;br/&gt;
因為我到當天都還有再改 slide，還沒來得及抓最新的離線版本，讓我著實抖了一下&lt;br/&gt;
Peter 說得對 "Never live Demo. Never Internet......"&lt;br/&gt;
還好在我上台前，網路有稍微恢復，才沒有出包&lt;/p&gt;
&lt;p&gt;雖然只有 5 分鐘，但第一次上台給全英文的 talk 還是挺緊張的&lt;br/&gt;
&lt;img alt="down-stair" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840143063.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;原本 PyCon JP 的 party 結束後&lt;br/&gt;
Takanori-san 很熱情的帶我們去續攤&lt;br/&gt;
&lt;img alt="beer" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840215951.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="pycon-jp-day-2"&gt;PyCon JP - Day 2&lt;/h2&gt;
&lt;p&gt;這天的 Keynote &lt;a href="https://www.youtube.com/watch?v=0bTPOsVvG7g"&gt;Pythonで切り開く新しい農業&lt;/a&gt; 主要是在講他透過 Python 來分辨小黃瓜的故事&lt;br/&gt;
我很喜歡他對 AI 的註解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;現在越來越少人要當農夫了&lt;br/&gt;
如果不做些什麼，農業的知識就會流失&lt;br/&gt;
而 AI 正好可以作為一種知識儲存和傳遞的工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dustin 的 &lt;a href="https://www.youtube.com/watch?v=d3cj4f63u-A"&gt;Modern development environments for Pythonistas&lt;/a&gt; 也讓我印象蠻深刻的&lt;br/&gt;
主要是因為跟我要去 PyCon CA 講的內容相關&lt;br/&gt;
再加上，結束後我們一群 PyCon TW 圍著他問問題 XD&lt;br/&gt;
btw Dustin 在 PyCon TW / US / ... 給的 talks "PEP 572"，真的非常精彩&lt;br/&gt;
錯過的話，非常推薦可以補帶&lt;/p&gt;
&lt;p&gt;當然還有 KK 大的 &lt;a href="https://www.youtube.com/watch?v=NLLhYKscuMk"&gt;When AI meets 3000-year-old Chinese Palmistry&lt;/a&gt;&lt;br/&gt;
其實我這次來比較少聽 AI 相關的 talk，但分析手相實在太有趣了&lt;/p&gt;
&lt;p&gt;最後我有嘗試去聽一場日文的 talk&lt;br/&gt;
憑著我 50 音都背不齊的日文程度，果然還是太挑戰了 XD&lt;br/&gt;
當我以為我至少能看投影片的時候，他的投影片也是日文的&lt;br/&gt;
後來發現好像是台灣才是比較特例&lt;br/&gt;
即使是用中文給的 talk ，還是習慣用英文做投影片&lt;/p&gt;
&lt;p&gt;最後閉幕的時候聽到 Python 這個商標在日本被&lt;a href="http://www.gigamall.ne.jp/ark/ai/python.html"&gt;ARK&lt;/a&gt;註冊走&lt;br/&gt;
PSF 要著手處理這件事了&lt;/p&gt;
&lt;p&gt;&lt;img alt="drone" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840284965.jpg"/&gt;&lt;br/&gt;
&lt;small&gt;最後大合照的無人機&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="coffee" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840254045.jpg"/&gt;&lt;br/&gt;
&lt;small&gt;某人把還沒打開的奶精加入咖啡&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="after-party" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840345989.jpg"/&gt;&lt;br/&gt;
&lt;small&gt;離開日本前， Visiting Group 小聚&lt;/small&gt;&lt;/p&gt;
&lt;h2 id="speaker-tour"&gt;Speaker Tour&lt;/h2&gt;
&lt;p&gt;會議結束後的一天，PyCon JP 還有帶講者們到淺草寺等有名的景點走走&lt;br/&gt;
可惜那天下著大雨 QQ&lt;/p&gt;
&lt;p&gt;&lt;img alt="speaker-tour" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840364273.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="final-words"&gt;Final Words&lt;/h2&gt;
&lt;p&gt;整體來說，我覺得 PyCon JP 辦得比我想像的來得更好&lt;br/&gt;
能跟著 PyCon TW 來，也讓我覺得跟人交流有比較容易一些&lt;br/&gt;
如果下次還有揪團，我應該也還會再來&lt;/p&gt;
&lt;p&gt;恩對，大概就是這樣&lt;br/&gt;
&lt;img alt="me-with-badge" src="/images/posts-image/2019-10-12-pycon-jp-2019/15700840325586.jpg" style="width:80%"/&gt;&lt;/p&gt;
&lt;p&gt;在找一些東西的時候，發現同行的前輩 Kir 也發了一篇 PyCon JP 的文&lt;br/&gt;
&lt;a href="https://medium.com/@Kir.Chou/my-journey-of-pycon-jp-tw-2019-220555e8e3b1"&gt;My journey of PyCon JP/TW 2019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外，這是發在 PyCon TW Blog 的參訪報告 - &lt;a href="https://pycontw.blogspot.com/2019/10/visiting-group-in-pycon-jp-2019.html"&gt;Visiting Group in PyCon JP 2019&lt;/a&gt;&lt;br/&gt;
整理了我們整團的所見所聞&lt;/p&gt;
&lt;p&gt;如果喜歡這篇文章的話，你雖然沒辦法拍手 50 下&lt;br/&gt;
但可以在下面按一個 response，或留個 comment 跟我聊聊天&lt;br/&gt;
如果能在順手填一下 2020 年的 &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSe6whkZAEZD10LlPQuSWRYsshySoNR_pux8grGZ0OgmOIkQ3g/viewform?fbclid=IwAR2mPycJxD2HCVm_mIX4v7ChEGwNEgo5-HP_QGA4503dD9E2kCP3M5OihT8"&gt;PyCon Taiwan 志工招募&lt;/a&gt; 就能給我更大的支持了 😄&lt;/p&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="PyCon"></category><category term="Python"></category></entry><entry><title>最近的念英文小結</title><link href="https://lee-w.github.io/posts/gossiping/2019/09/how-i-learn-english-recently" rel="alternate"></link><published>2019-09-09T09:40:00+08:00</published><updated>2019-09-09T09:40:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-09-09:/posts/gossiping/2019/09/how-i-learn-english-recently</id><summary type="html">&lt;p&gt;今年五月跑去 PyCon US 順便在美國晃了一個月後&lt;br/&gt;
發現自己的英文口說實在太爛了&lt;br/&gt;
下定決心要來練一下&lt;/p&gt;
&lt;p&gt;回到台灣後，誤打誤撞加入 PyCon TW 當志工，負責跟外國講者聯繫&lt;br/&gt;
才發現不只是口說，連寫作也不行呢 ˊ_&amp;gt;ˋ&lt;/p&gt;
</summary><content type="html">&lt;p&gt;今年五月跑去 PyCon US 順便在美國晃了一個月後&lt;br/&gt;
發現自己的英文口說實在太爛了&lt;br/&gt;
下定決心要來練一下&lt;/p&gt;
&lt;p&gt;回到台灣後，誤打誤撞加入 PyCon TW 當志工，負責跟外國講者聯繫&lt;br/&gt;
才發現不只是口說，連寫作也不行呢 ˊ_&amp;gt;ˋ&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;反正 VoiceTube Hero 也需要心得文&lt;br/&gt;
就順便整理一下最近念英文的方法&lt;/p&gt;
&lt;p&gt;我只整理了聽、說、讀的部分&lt;br/&gt;
因為我沒有特別在練寫作，大概就先透過跟外國講者的書信往來吧&lt;br/&gt;
歡迎推薦好的英文寫作訓練法 XD&lt;/p&gt;
&lt;h2 id="-"&gt;語言交換 - 說&lt;/h2&gt;
&lt;p&gt;不知道是不是我在台南沒主動去找這種資訊，才沒參加過&lt;br/&gt;
（台南真的很安逸啊 ˊ_&amp;gt;ˋ）&lt;br/&gt;
台北的 meetup 真的非常的多&lt;br/&gt;
以我想找的語言交換來說，一週七天都有不同的人在辦&lt;br/&gt;
而我就剛好參加了時間對得到的 &lt;a href="https://www.meetup.com/languageexchange/events/hgxvdryzmbcb/"&gt;English/Chinese language and cultural exchange 中英文語言文化交流&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;時間： 每週日早上 10:00 ~ 你想走或大家想走&lt;br/&gt;
地點： 忠孝新生捷運站旁的伯朗咖啡館&lt;/p&gt;
&lt;p&gt;每次會有 20 ~ 40 人不等，外國人大概占 1 ~ 2 成&lt;br/&gt;
通常會有一、兩桌在學中文，其他都是在練英文&lt;br/&gt;
不得不說台北人的英文真的好好啊......&lt;/p&gt;
&lt;p&gt;除了希望你能在店家消費（畢竟都佔了這麼多的位置），沒有其他的費用&lt;br/&gt;
形式上很自由，沒有什麼規定&lt;br/&gt;
可以在各桌穿梭，這裡聊累了去那裡之類的&lt;br/&gt;
主辦人 Kieve 非常的友善，她原本在加州也有主辦一個同樣的 meetup&lt;br/&gt;
所以參加過的人有來台灣，通常都會順道過來一趟&lt;br/&gt;
通常也蠻有機會遇到去過各個國家的人&lt;br/&gt;
目前我只要週日沒有特別的事都會去參加（然後每次都遲到）&lt;br/&gt;
有興趣的人可以一起來玩&lt;/p&gt;
&lt;h2 id="audible-"&gt;Audible - 聽、讀&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.audible.com"&gt;Audible&lt;/a&gt; 是 Amazon 旗下的有聲書服務&lt;br/&gt;
收費方式我覺得很特別&lt;br/&gt;
屬於訂閱制，但又不是你訂閱後，就能聽裡面所有的書&lt;br/&gt;
而是每個月會給你一定數量的點數&lt;br/&gt;
除了點數以外，現在每個月還會再加贈兩本 Audible Original&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;US $14.95: 一個月一點&lt;/li&gt;
&lt;li&gt;US $22.95: 一個月兩點&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一點都可以拿來換任何一本任意價格的有聲書&lt;br/&gt;
這些書只要兌換後就都是你的，而且不會因為取消訂閱而消失&lt;br/&gt;
但印象中點數要在會員期間用完就是了&lt;br/&gt;
我通常都是列一個要買的清單，直接訂閱 $22.95 直到我要買的清單換完&lt;br/&gt;
不過最近發現 Kindle Store 上買電子書加有聲書，有時候會比較便宜&lt;br/&gt;
所以其實我現在也用不太到會員了 XD&lt;/p&gt;
&lt;p&gt;雖然中間有停過一段時間，但我算是持續聽 Audible 快三年了&lt;br/&gt;
我盡可能地維持每天都要聽 1 ~ 2 個章節，時間平均大概是 20 ~ 40 分鐘&lt;br/&gt;
截至我寫這篇文章的時候，總聆聽時數差不多是 170 小時&lt;/p&gt;
&lt;p&gt;在播有聲書的時候，我通常會把書一起拿著看&lt;br/&gt;
如果還沒有常接觸英聽，我會建議從青少年讀物 (Young Reader Books) 開始&lt;br/&gt;
雖然現在我已經有辦法單用聽的就大部分都聽懂&lt;br/&gt;
但有文字的輔助對一些細節的了解還是蠻有幫助的&lt;br/&gt;
更重要的是比較不會分心，只有聽故事實在太放鬆了 XD&lt;/p&gt;
&lt;p&gt;因為我是一個 Star Wars 迷，到目前為止大多都是看 Star Wars 的小說&lt;br/&gt;
整體的體驗非常的好，你就像是看了一場電影一樣&lt;br/&gt;
說書人們 (narrators) 真的很厲害，大部分都是一個人配完裡面所有的角色&lt;/p&gt;
&lt;p&gt;反正第一個月試用 audible 是免費的，可以先試試看&lt;br/&gt;
如果透過以下的連結去註冊，會間接的贊助到我很喜歡的 Youtuber&lt;br/&gt;
&lt;a href="http://audibletrial.com/starwarsexplain"&gt;audible trial&lt;/a&gt;&lt;br/&gt;
當然也可以找看看有沒有你喜歡的 Youtuber 有類似的連結&lt;br/&gt;
我看到好幾個頻道都有跟 Audible 合作&lt;/p&gt;
&lt;p&gt;另外是， Audible 有換書機制，好像在一段時間內都可以換掉你不滿意的書&lt;br/&gt;
但我自己是從來沒用過&lt;br/&gt;
因為到目前為止，我每一本書都很滿意&lt;/p&gt;
&lt;p&gt;如果還想要知道更多關於 Audible 的使用方式或心得&lt;br/&gt;
我很推薦看 &lt;a href="https://tzangms.com/"&gt;小海嚴寫&lt;/a&gt; 的文章&lt;br/&gt;
我就是看了他的文章才入坑的 XD&lt;br/&gt;
另外，剛剛還有看到這篇 &lt;a href="https://medium.com/read-on-jade/%E9%96%8B%E5%A7%8B%E8%81%BD%E6%9B%B8%E5%90%A7-audible-%E6%96%B0%E6%89%8B%E6%94%BB%E7%95%A5-9c1da64f7138"&gt;開始聽書吧！Audible 新手攻略&lt;/a&gt;，寫得也是蠻清楚的&lt;/p&gt;
&lt;h2 id="voicetube-hero-"&gt;VoiceTube Hero 零元挑戰 - 聽、讀、說&lt;/h2&gt;
&lt;p&gt;其實原本對 &lt;a href="https://tw.voicetube.com/hero"&gt;VoiceTube Hero&lt;/a&gt; 對我會不會有幫助感到很懷疑&lt;br/&gt;
不過回國剛好看到英文很好的朋友發了挑戰成功的文&lt;br/&gt;
再加上這段時間 CNN 10 放暑假去了，就決定跟進了 XDD&lt;br/&gt;
（btw 有人能推薦一下 CNN 10 的其他替代品嗎）&lt;/p&gt;
&lt;p&gt;我上的是高級課程，總共 30 堂課&lt;br/&gt;
但每一堂課要複習兩次，所以應該就可以看成 90 堂課&lt;br/&gt;
在兩個月內必須完成所有課程，而且每週有一定的課程數量要達到&lt;br/&gt;
一堂新課大概會花我 30 分鐘，複習課可能 20 分鐘可以完成&lt;br/&gt;
我大概抓在每天平均進度兩堂課，這樣最後的緩衝比較多&lt;/p&gt;
&lt;p&gt;內容蠻多元的，財金、心理學、人際、國際情勢之類的都有&lt;br/&gt;
通常會把一個影片切成兩課&lt;br/&gt;
所以 30 堂課大概就是 15 個主題&lt;br/&gt;
看完影片後大概會問下面這幾種問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文意理解選擇、單字聽打、單字字意選擇&lt;/li&gt;
&lt;li&gt;單句口說錄音&lt;/li&gt;
&lt;li&gt;單字填空&lt;/li&gt;
&lt;li&gt;單字補充資料閱讀&lt;/li&gt;
&lt;li&gt;片語&lt;/li&gt;
&lt;li&gt;語句重組&lt;/li&gt;
&lt;li&gt;對話口說錄音&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要中間有錯誤，這堂課就要重看一次影片&lt;br/&gt;
直到你把所有的錯誤都訂正完&lt;/p&gt;
&lt;p&gt;這時候就會感受到自己怎麼時態都不注意、單字都沒在背&lt;br/&gt;
口說更是每次聽到錄音都覺得很悲劇&lt;br/&gt;
不過口說這部分都會有老師對每個句子講解，也會說明一些連音和發音的細節&lt;br/&gt;
比較可惜的是口說不會有任何的驗證正確與否的機制&lt;br/&gt;
不過口說要有人驗證的話，就不會是這個價錢了&lt;/p&gt;
&lt;p&gt;雖然除了一兩個英式口音，我比較不習慣外&lt;br/&gt;
大致上課程不算太困難&lt;br/&gt;
但我的答對率其實還是蠻低的，大概 7 成左右吧&lt;br/&gt;
不背單字、不好好看完問題就會這樣 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="finished" src="/images/posts-image/2019-09-09-how-i-learn-english-recently/finished.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;最後我不小心太早完課&lt;br/&gt;
但每週基本任務（三堂課新課、三堂複習課）還是得繼續完成到跳戰結束&lt;br/&gt;
所以有幾堂課多上了幾次&lt;br/&gt;
倒是在結束後才發現還有一個功能是跟別人 PK&lt;br/&gt;
還挺有趣的，沒事可以來玩玩（？&lt;/p&gt;
&lt;p&gt;不得不說，客服的回應真的很快&lt;br/&gt;
真的是馬上就會有回覆那種&lt;br/&gt;
有一次我遇到系統錯誤，說我挑戰失敗（嚇死我了）&lt;br/&gt;
問完客服，馬上就修正了&lt;/p&gt;
&lt;p&gt;&lt;img alt="mission-failed" src="/images/posts-image/2019-09-09-how-i-learn-english-recently/mission-failed.png"/&gt;&lt;/p&gt;
&lt;p&gt;好像應該來總結一下我對 VoiceTube Hero 的想法&lt;br/&gt;
我覺得他的課程還蠻不錯的&lt;br/&gt;
不是死板板的教科書對話，有時候還能獲取到一些原本不知道的知識&lt;br/&gt;
每次放出自己殘破口說的錄音，還是會逼自己多錄個幾次&lt;br/&gt;
拼字、時態都要很注意才能一次通過整個課程&lt;br/&gt;
我認為他最能幫助到的應該還是養成撥出時間唸英文的習慣&lt;br/&gt;
畢竟語言這種東西不太是一蹴可幾的&lt;br/&gt;
VoiceTube Hero 比較像是讓英文一直進步的開端&lt;/p&gt;</content><category term="Gossiping"></category><category term="English"></category></entry><entry><title>COSCUP 2019</title><link href="https://lee-w.github.io/posts/tech/2019/09/coscup-2019" rel="alternate"></link><published>2019-09-02T14:10:00+08:00</published><updated>2019-09-02T14:10:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-09-02:/posts/tech/2019/09/coscup-2019</id><summary type="html">&lt;p&gt;事隔了兩年又再次參加了 COSCUP&lt;br/&gt;
上一次好像是還在中研院的時候&lt;/p&gt;
&lt;p&gt;現在會議都會有共筆，就不太需要再另外做筆記&lt;br/&gt;
所以大概就是聊聊這次去比較喜歡的幾場 talk&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hackmd.io/@coscup/2019/https%3A%2F%2Fhackmd.io%2F%40coscup%2FHJAlwq67H"&gt;COSCUP 2019 共筆&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;事隔了兩年又再次參加了 COSCUP&lt;br/&gt;
上一次好像是還在中研院的時候&lt;/p&gt;
&lt;p&gt;現在會議都會有共筆，就不太需要再另外做筆記&lt;br/&gt;
所以大概就是聊聊這次去比較喜歡的幾場 talk&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hackmd.io/@coscup/2019/https%3A%2F%2Fhackmd.io%2F%40coscup%2FHJAlwq67H"&gt;COSCUP 2019 共筆&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;好像前幾年就開始有把每一個軌的主題分得很清楚&lt;br/&gt;
也有可能是我以前去的時候沒發現 XD&lt;br/&gt;
這次參加最多場的應該是 &lt;code&gt;開源與職涯&lt;/code&gt; 這一軌&lt;br/&gt;
尤其想聽 &lt;code&gt;海外頭路：憂喜甘苦談&lt;/code&gt;&lt;br/&gt;
我明明已經提早過去了，沒想到隊伍從前 10 分鐘就排得很長了......&lt;br/&gt;
是大家都想離開台灣了嗎 XD&lt;/p&gt;
&lt;p&gt;聽到最有趣的是 talk 是 &lt;code&gt;如何在两年内从初学者成长为流行开源项目维护者和技术书作者？&lt;/code&gt;&lt;br/&gt;
（&lt;a href="https://hackmd.io/1kfASFqeR1iCEq2Uqf9S_A"&gt;共筆&lt;/a&gt;附上）&lt;br/&gt;
講者分享如何在兩年內成為了 flask 的維護者，還寫了一本技術書&lt;br/&gt;
&lt;del&gt;最重要的訣竅就是&lt;strong&gt;不要工作&lt;/strong&gt;&lt;/del&gt;&lt;br/&gt;
比起提供建議，我覺得這更像是是一個 call to action&lt;br/&gt;
用他的故事來告訴我們，要做到這些事並不見得那麼困難&lt;br/&gt;
有時候就是需要多一點衝動而已&lt;br/&gt;
不知道有沒有錄影，這場真的蠻值得再看一次的 XD&lt;/p&gt;
&lt;p&gt;第一天最後是 Rust 核心成員 Steve Klabnik （&lt;a href="https://hackmd.io/3Euz7maGRLSATDR_X3P7lA"&gt;共筆&lt;/a&gt;）帶來的 talk&lt;br/&gt;
原本還想說再講 Rust ，會不會聽不懂&lt;br/&gt;
不過後來講的內容跟開源專案的組織管理比較有關&lt;br/&gt;
其實還挺有趣的&lt;/p&gt;
&lt;p&gt;第二天一早就被告台科大停電，臨時更換地點&lt;br/&gt;
不過還算是蠻順利的，除了換個場地，沒有網路了以外，倒是沒遇到什麼大問題&lt;br/&gt;
這天我大概都在會場亂晃，除了下面有筆記的兩場 talk 外，好像就都沒什麼印象了 XD&lt;/p&gt;
&lt;p&gt;下面就放了一些我當天有做的筆記&lt;br/&gt;
有一些是從共筆補充過來&lt;br/&gt;
也有一些時覺得不知道怎麼整理上共筆，就留在這了&lt;/p&gt;

&lt;hr/&gt;
&lt;h1 id="day-1"&gt;Day 1&lt;/h1&gt;
&lt;h2 id="infra-devops"&gt;Infra / DevOps 的養成之路與開源工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/Yhf8ByscR2-oIifd9c2IBQ"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1wF1gA_Q-cZ33nXf1YhqGIWuLy_iMcC_1XllEHEkMgAc/edit#slide=id.i0"&gt;slide - 開源與職涯 - Infra 的養成之路與開源工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/chusiang/my-devops-tour-0-dot-1"&gt;slide - 系統工程師的大怪升級之旅&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Ref:&lt;a href="https://zh.wikipedia.org/wiki/奮鬥吧！系統工程師"&gt;奮鬥吧！系統工程師&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-infra"&gt;開源與職涯 - Infra 的養成之路與開源工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CV 要夠詳細&lt;ul&gt;
&lt;li&gt;只有打 Linux 五個字沒有人看得懂 → 細說你會什麼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;社群&lt;ul&gt;
&lt;li&gt;選擇你最舒服的方式參與&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1wF1gA_Q-cZ33nXf1YhqGIWuLy_iMcC_1XllEHEkMgAc/edit#slide=id.g487e56660f_0_14"&gt;開源社群 List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;系統工程師的大怪升級之旅&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DevOps 三步工作法&lt;ol&gt;
&lt;li&gt;由左自右的流動&lt;/li&gt;
&lt;li&gt;從右自左的回饋&lt;/li&gt;
&lt;li&gt;文化&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;推薦讀物&lt;ul&gt;
&lt;li&gt;自我成長: &lt;a href="https://www.tenlong.com.tw/products/9789862762561"&gt;學徒模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DevOps: &lt;a href="https://www.amazon.com/Nature-Software-Development-Simple-Valuable-ebook-dp-B00VDHRFWU/dp/B00VDHRFWU/ref=mt_kindle?_encoding=UTF8&amp;amp;me=&amp;amp;qid="&gt;The Nature of Software Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q-a"&gt;Q &amp;amp; A&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q1: 撰寫 DevOps 部落格時如何避開機密、公司智財權等？&lt;ul&gt;
&lt;li&gt;自己複製出環境、資料等，自己把找到的技術在自己的環境複製一次，執行成功之後才記錄下來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="learn-to-test-and-then-test-to-learn"&gt;Learn to test and then test to learn&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Material&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/185lhxQoS07G1g9Qw7ngT4Z2lQaB7p3HIPky5ERkIWFc/edit"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pitfalls of End-to-end Testing&lt;ul&gt;
&lt;li&gt;High learning curve&lt;/li&gt;
&lt;li&gt;Hard to build and maintain&lt;/li&gt;
&lt;li&gt;Not easy to identify defects&lt;/li&gt;
&lt;li&gt;Slow feedback&lt;/li&gt;
&lt;li&gt;Not realistic enough&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Test to learn&lt;ul&gt;
&lt;li&gt;透過寫測試，紀錄學習歷程，下次回來看就知道怎麼用了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wrap Up&lt;ul&gt;
&lt;li&gt;Unit Testing is the foundation and hard to learn&lt;/li&gt;
&lt;li&gt;Mock and wrapper help you isolate your system boundaries&lt;/li&gt;
&lt;li&gt;To make your code unit-testable, you'll learn to write better code.&lt;/li&gt;
&lt;li&gt;Test to learn&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;海外頭路：憂喜甘苦談&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/@coscup/rJkQ17l4H"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;荷蘭&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why Not The Netherlands&lt;ul&gt;
&lt;li&gt;荷蘭文難學&lt;/li&gt;
&lt;li&gt;食物難吃&lt;/li&gt;
&lt;li&gt;外食很貴&lt;/li&gt;
&lt;li&gt;房租很高&lt;/li&gt;
&lt;li&gt;稅很重 (up to 51.75%)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why The Netherlands&lt;ul&gt;
&lt;li&gt;英文可存活&lt;/li&gt;
&lt;li&gt;簽證好辦&lt;/li&gt;
&lt;li&gt;薪水&lt;/li&gt;
&lt;li&gt;多元文化&lt;/li&gt;
&lt;li&gt;氣候宜人 (冬天頂多 0 度)&lt;/li&gt;
&lt;li&gt;房貸比房租便宜&lt;/li&gt;
&lt;li&gt;30% Ruling （高技術外國人的稅務優惠）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bonus&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在歐洲正中間，方便旅遊&lt;/li&gt;
&lt;li&gt;大麻？（其實是非法，但政府明確表明不抓 xD）紅燈區？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;荷蘭對 Work from Home 的政策算蠻鬆的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;日本&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mercari Backend Engineer&lt;ul&gt;
&lt;li&gt;What is Mercari？&lt;ul&gt;
&lt;li&gt;主要做二手拍賣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主要使用 Go Lang, php&lt;/li&gt;
&lt;li&gt;How many leave do you have?&lt;ul&gt;
&lt;li&gt;10 days leave + 3 days summer leave + 10 days sick leave&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Are you usually late for work?&lt;ul&gt;
&lt;li&gt;彈性工時 (12:00 ~ 16:00 一定要在公司)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How many foreigner in you project?&lt;ul&gt;
&lt;li&gt;Engineer: 50% foreigners&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do you have lots of nomikai（應酬）?&lt;ul&gt;
&lt;li&gt;一季一次&lt;/li&gt;
&lt;li&gt;一次約 ￥4,000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q-a_1"&gt;Q &amp;amp; A&lt;/h3&gt;
&lt;h4&gt;Q: 日本階級制度很重？&lt;/h4&gt;
&lt;p&gt;是，但因為是外國人，所以可以裝作不知道&lt;/p&gt;
&lt;h4&gt;Q: 怎麼找到海外工作的？&lt;/h4&gt;
&lt;p&gt;LinkedIn, location 換到當地後，就會有收不完的邀約了&lt;/p&gt;
&lt;h4&gt;Q: 不會日文可以去日本工作嗎&lt;/h4&gt;
&lt;p&gt;只會講英文的話，建議去 Line, Rakuten, Mercari ，小公司至少要有 N2 比較順利&lt;/p&gt;
&lt;h4&gt;Q: 日本薪水大概是多少&lt;/h4&gt;
&lt;p&gt;New Grade 年收 400 萬日幣， Senior 則要怎麼談&lt;/p&gt;
&lt;h4&gt;Q: 荷蘭 engineer 職缺多嗎？&lt;/h4&gt;
&lt;p&gt;很多，目前最大是 Uber ，另外有很多新創&lt;br/&gt;
因為英國脫歐，最近荷蘭職缺比較多&lt;/p&gt;
&lt;h4&gt;Q: 荷蘭的永久居留證？&lt;/h4&gt;
&lt;p&gt;雖然荷蘭不能雙重國籍，但因為不承認台灣是個國家，所以申請上會特別容易，不會被刁難&lt;/p&gt;
&lt;h4&gt;Q: 台灣人到歐洲最大的障礙是什麼&lt;/h4&gt;
&lt;p&gt;自己煮飯，其他都還好&lt;/p&gt;
&lt;h4&gt;Q: 會遇到歧視嗎？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;日本 - Lilith Peng&lt;ul&gt;
&lt;li&gt;女性歧視有點大&lt;/li&gt;
&lt;li&gt;排外的社會 → 沒有解法，各憑本事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;荷蘭 - 呂行&lt;ul&gt;
&lt;li&gt;除非到鄉下才會有歧視，但大城市還好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Q: 除了薪資以外，為什麼想出國&lt;/h4&gt;
&lt;p&gt;體驗不同文化、生活方式&lt;/p&gt;
&lt;h4&gt;Q: 為什麼 荷蘭/日本，而不是北美&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;荷蘭 - 呂行&lt;ul&gt;
&lt;li&gt;因為北美簽證不好拿，不習慣美國的生活方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日本 - Lilith Peng&lt;ul&gt;
&lt;li&gt;日本有高度人才證&lt;/li&gt;
&lt;li&gt;會日文，英文不好 XD&lt;/li&gt;
&lt;li&gt;日本離台灣近&lt;/li&gt;
&lt;li&gt;稅率比歐洲好&lt;/li&gt;
&lt;li&gt;房租便宜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Q: 日本/荷蘭 的面試文化？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;荷蘭&lt;ul&gt;
&lt;li&gt;會有白板題&lt;/li&gt;
&lt;li&gt;一關問架構&lt;/li&gt;
&lt;li&gt;一關問經歷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日文&lt;ul&gt;
&lt;li&gt;履歷表用 Excel 寫，會加分&lt;/li&gt;
&lt;li&gt;履歷是一致的格式&lt;/li&gt;
&lt;li&gt;面試分兩種&lt;ul&gt;
&lt;li&gt;外商派&lt;/li&gt;
&lt;li&gt;日本傳統派&lt;ul&gt;
&lt;li&gt;西裝外套、打領帶、皮鞋、公事包......&lt;/li&gt;
&lt;li&gt;90度鞠躬&lt;/li&gt;
&lt;li&gt;他們就是看感覺錄取 ← 他們認為人才是可以被培養的 XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Q: 會不會有天花板&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;日本工程師大概 1,500 萬就是天花板，除非轉管理職&lt;/li&gt;
&lt;li&gt;荷蘭不算特別明顯&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h1 id="day-2"&gt;Day 2&lt;/h1&gt;
&lt;h2 id="_5"&gt;源碼在哪裡&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;grep 可以對二進位檔直接做文字搜尋&lt;/li&gt;
&lt;li&gt;Technical / Development History&lt;ul&gt;
&lt;li&gt;Firsthand&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mailing lists&lt;/strong&gt;, IRC, HipChat, Slack, Issue trackers, Forums, Journals / Papers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Summary&lt;ul&gt;
&lt;li&gt;Wiki, Tech News, Tech Document, White Papers, Blogs, Books, Review papers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Management&lt;ul&gt;
&lt;li&gt;Source Hosts&lt;ul&gt;
&lt;li&gt;Github / Bitbucket and etc., SourceForge, Launchpad&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Local Deployment&lt;ul&gt;
&lt;li&gt;FHS, Language-specific path&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed Deployment&lt;ul&gt;
&lt;li&gt;Auxiliary services (e.g., Open Stack, web)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Version&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Major.Minor.Patch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="do-you-select-postgresql-or-mysql"&gt;Do you Select PostgreSQL or mysql&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/soudai/do-you-select-postgresql-or-mysql"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="difference-between-mysql-and-postgresql"&gt;Difference between MySQL and PostgreSQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Server architecture&lt;ul&gt;
&lt;li&gt;MySQL → multi-thread&lt;/li&gt;
&lt;li&gt;PostgresSQL → multi-process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Licence&lt;ul&gt;
&lt;li&gt;MySQL → GPL v2 or Commercial License&lt;/li&gt;
&lt;li&gt;PostgresSQL → PostgresSQL License&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Development Style&lt;ul&gt;
&lt;li&gt;MySQL → Oracle&lt;/li&gt;
&lt;li&gt;PostgresSQL → Community&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="advantage-of-mysql"&gt;Advantage of MySQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Extensibility&lt;/li&gt;
&lt;li&gt;Good at fetching by &lt;strong&gt;primary key&lt;/strong&gt; and &lt;strong&gt;primary key&lt;/strong&gt; update&lt;/li&gt;
&lt;li&gt;Flexible replication&lt;ul&gt;
&lt;li&gt;Multi source replication&lt;/li&gt;
&lt;li&gt;Group Replication → Multi Master&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Document Store&lt;ul&gt;
&lt;li&gt;JSON type → schema-less table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="advantage-of-postgresql"&gt;Advantage of PostgreSQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Parallel Query&lt;ul&gt;
&lt;li&gt;but not to increase number of workers beyond number of CPU core&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Materialized View&lt;/li&gt;
&lt;li&gt;Foreign Data Wrapper → an external table handle for your own table (other DBMS)&lt;ul&gt;
&lt;li&gt;support WHERE, JOIN, GROUP BY, DELETE &amp;amp; UPDATE&lt;/li&gt;
&lt;li&gt;Any data store is acceptable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GIN INDEX &amp;amp; Function INDEX + JSON&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="COSCUP"></category></entry><entry><title>[Book] The Ultimate Guide to Remote Work</title><link href="https://lee-w.github.io/posts/book/2019/08/the-ultimate-guide-to-remote-work" rel="alternate"></link><published>2019-08-13T10:55:00+08:00</published><updated>2019-08-13T10:55:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-08-13:/posts/book/2019/08/the-ultimate-guide-to-remote-work</id><summary type="html">&lt;p&gt;This is an excerpt of Zapier's book &lt;a href="https://zapier.com/learn/remote-work/"&gt;The Ultimate Guide to Remote Work&lt;/a&gt;.&lt;br/&gt;
I had a good time chatting with Zapier in PyCon US and then found this book on their website.&lt;br/&gt;
Since I currently work remotely, I thrive on making myself a better remote worker.&lt;br/&gt;
Hope this excerpt would help if you're working remotely or considering it.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This is an excerpt of Zapier's book &lt;a href="https://zapier.com/learn/remote-work/"&gt;The Ultimate Guide to Remote Work&lt;/a&gt;.&lt;br/&gt;
I had a good time chatting with Zapier in PyCon US and then found this book on their website.&lt;br/&gt;
Since I currently work remotely, I thrive on making myself a better remote worker.&lt;br/&gt;
Hope this excerpt would help if you're working remotely or considering it.&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="chapter-1-how-to-run-a-remote-team"&gt;Chapter 1: How to Run a Remote Team&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Important ingredients to remote work&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Team&lt;/li&gt;
&lt;li&gt;Tools&lt;/li&gt;
&lt;li&gt;Process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Team&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hire Doers → default to action&lt;/li&gt;
&lt;li&gt;Hire people you can trust&lt;/li&gt;
&lt;li&gt;Trust the people you hire&lt;/li&gt;
&lt;li&gt;Hire people who can write&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Communication is one of the most important parts of a remote team.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hire people who are ok without a social workplace&lt;ul&gt;
&lt;li&gt;It'll be important to try to create some social aspects with a remote team. But the truth is that remote workplaces are usually less social than co-located ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tools&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Slack → If you're in Slack then you're at work&lt;/li&gt;
&lt;li&gt;Trello&lt;ul&gt;
&lt;li&gt;Trick to avoid getting card overload&lt;ul&gt;
&lt;li&gt;Each card needs to have&lt;ul&gt;
&lt;li&gt;Detailed description of the feature&lt;/li&gt;
&lt;li&gt;Why it's important&lt;/li&gt;
&lt;li&gt;the results of a successful implementation of it should look like&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;1Password&lt;/li&gt;
&lt;li&gt;Google Docs &amp;amp; Quip&lt;/li&gt;
&lt;li&gt;Zoom&lt;/li&gt;
&lt;li&gt;HelloSign&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Everyone does support&lt;/li&gt;
&lt;li&gt;Culture of shipping&lt;/li&gt;
&lt;li&gt;Weekly Hangouts&lt;/li&gt;
&lt;li&gt;Air Buddies&lt;/li&gt;
&lt;li&gt;Weekly One-on-Ones&lt;/li&gt;
&lt;li&gt;A culture of accountability&lt;ul&gt;
&lt;li&gt;People often ask "how do you know if employees are actually working?" → Friday updates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Building culture in person&lt;/li&gt;
&lt;li&gt;Automate anything that can be automated&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chapter-3-how-to-hire-a-remote-team"&gt;Chapter 3: How to Hire a Remote Team&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Propensity towards action&lt;/li&gt;
&lt;li&gt;Ability to prioritize&lt;/li&gt;
&lt;li&gt;Proficient writing&lt;/li&gt;
&lt;li&gt;Trustworthy&lt;/li&gt;
&lt;li&gt;People with Local support system&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chapter-5-how-to-build-strong-relationships-in-a-remote-team"&gt;Chapter 5: How to Build Strong Relationships in a Remote Team&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Performance Review combines the following 3 aspects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Manager's own opinions&lt;/li&gt;
&lt;li&gt;Thoughts from co-workers&lt;/li&gt;
&lt;li&gt;A self-evaluation from the actual employee&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you're setting up phone or video calls to meet your new teammates, try setting a time limit of 15 minutes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Putting aside our own desires to contribute to the conversation and instead asking short, open questions like how, when, and why.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replying on Text the Right Way&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stay Up to Date&lt;/li&gt;
&lt;li&gt;Remember Hanlon's Razor: We should always assume ignorance before malice&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Asserting Yourself When Needed&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set up rules ahead of time&lt;ul&gt;
&lt;li&gt;e.g., set up your focus time and ask others not to message you at this time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Find a way to share the context of your situation with your teammates.&lt;ul&gt;
&lt;li&gt;Keep in mind all the information you have about how you feel and your current needs that your teammates don't have. They need all the information you can give them to work with you in the best way they can.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chapter-10-how-to-work-faster-in-a-remote-team"&gt;Chapter 10: How to Work Faster in a Remote Team&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;"If employees don't have freedom and independence to make decisions, remote work will be less effective."&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to deal with vast numbers of emails?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Company and department updates, project specs, design mock-ups, and individual "Friday Update" reports moved from email to our private internal blog&lt;/li&gt;
&lt;li&gt;Team and department feedback, along with questions and discussions, moved to Slack, which replaced one-on-one email threads with its private messaging feature, too.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Whether it's working in your own home or a nearby coffee shop, there's another aspect that pushes remote employees to work faster: &lt;strong&gt;You're responsible for your productivity&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Completely unplug from the communication tools. Do this, and then put 100% focus on writing in a distraction-free environment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chapter-11-how-to-find-your-optimal-work-environment-and-boost-productivity"&gt;Chapter 11: How to Find Your Optimal Work Environment and Boost Productivity&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If you have different types of work, grouping similar tasks into time "chunks" can make you more productive than switching between different types of work.&lt;ul&gt;
&lt;li&gt;Small, simple tasks can be saved for the periods when you're low in energy, or in-between meetings.&lt;/li&gt;
&lt;li&gt;Work on the big, intense projects first, and work on smaller tasks that don't have deadlines as you go through the day.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chapter-12-how-to-work-in-different-timezones"&gt;Chapter 12: How to Work in Different Timezones&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Manage projects in an asynchronous way&lt;ul&gt;
&lt;li&gt;Break things up into chunks that can be worked on individually&lt;/li&gt;
&lt;li&gt;Find time to sync back up on what's been done, and make sure each person can self-direct their work&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Work in an asynchronous way&lt;ul&gt;
&lt;li&gt;Check in with your team before you start your workday and make sure you're on the same page as everyone else.&lt;/li&gt;
&lt;li&gt;To work effectively with a time shift, you'll also need to work in public. In other words, communicate, and make sure everyone knows what you're working on.&lt;/li&gt;
&lt;li&gt;Write what you've done that day, share where you're hung up on a project, and ping others with ideas.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chapter-13-how-to-avoid-burnout-in-a-remote-team"&gt;Chapter 13: How to Avoid Burnout in a Remote Team&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Establish and Maintain a Routine&lt;/li&gt;
&lt;li&gt;Set and Stick to Priorities&lt;ul&gt;
&lt;li&gt;'Have I done the most important work I could do today?'&lt;ul&gt;
&lt;li&gt;when I can say yes to that, then I can log off, recharge, and invest in the other areas of my life.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create and Keep Boundaries&lt;ul&gt;
&lt;li&gt;Find your rhythm and protect it to avoid burnout.&lt;ul&gt;
&lt;li&gt;For me, that rhythm means taking time to reflect and celebrate progress when planning, and setting boundaries like working outside of my apartment at a co-working space or scheduling deliberate non-work time into my week.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Take Short and Long Breaks&lt;ul&gt;
&lt;li&gt;Take a three-day weekend every now and then.&lt;/li&gt;
&lt;li&gt;Make sure to get away from everything for a week or two each year.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make Time for Human Interaction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prioritize your social activities, because they are a form of self-care.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recruit - 4 essential traits&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You're tech-savvy&lt;/li&gt;
&lt;li&gt;You're an efficient communicator&lt;/li&gt;
&lt;li&gt;You're independent and trustworthy&lt;/li&gt;
&lt;li&gt;You've mastered time management&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Where to Find Remote Jobs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.flexjobs.com"&gt;FlexJobs&lt;/a&gt; is a job board that showcases not just telecommuting openings, but also job postings for other types of flexible arrangements, such as freelance or part-time work.&lt;ul&gt;
&lt;li&gt;Price: &lt;code&gt;$14.95/month&lt;/code&gt; to &lt;code&gt;$49.95/year&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jobspresso.co"&gt;Jobspresso&lt;/a&gt; allows you to search for jobs in specific categories, such as marketing, copywriting, project management, and support. All of the jobs listed are curated for remote workers.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://remote.co"&gt;Remote.co&lt;/a&gt; is passionate about remote work and partners with startups that feel the same way.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://weworkremotely.com"&gt;We Work Remotely&lt;/a&gt; is sponsored by Basecamp and their book Remote, which delves into all things related to working remotely. The job board is updated daily, and you can subscribe to the site's RSS feed to get informed of new job postings.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.workingnomads.co/jobs"&gt;Working Nomads&lt;/a&gt; provides a curated list of remote jobs for individuals who want to travel while they work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to Apply and Interview for a Remote Work Job&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prepare for the video interview&lt;ul&gt;
&lt;li&gt;If you're positive, curious, and articulate in the video chat as well as other parts of the application process, hiring managers will be more confident about you.&lt;/li&gt;
&lt;li&gt;Try out the video app before the interview.&lt;/li&gt;
&lt;li&gt;Find a quiet space where you can focus on your interview and won't be distracted.&lt;/li&gt;
&lt;li&gt;Dress professionally and stay engaged during the interview.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Explain why you want the exact position. Just wanting to work at a remote company is usually not enough for specialized roles.&lt;/li&gt;
&lt;li&gt;You might be asked about or want to mention things like&lt;ul&gt;
&lt;li&gt;Successful solo projects you've started or team projects you've led.&lt;/li&gt;
&lt;li&gt;Your reasons for wanting to work remotely.&lt;/li&gt;
&lt;li&gt;What makes you fit for working on a remote team? (independence and trustworthiness)&lt;/li&gt;
&lt;li&gt;Previous writing experience and other communication skills&lt;/li&gt;
&lt;li&gt;How do you choose the communication tool for different situations? (communication skills)&lt;/li&gt;
&lt;li&gt;Your daily routine and methods to stay focused.&lt;/li&gt;
&lt;li&gt;What are your optimal work hours?&lt;/li&gt;
&lt;li&gt;What's your workspace like?&lt;/li&gt;
&lt;li&gt;How do you prioritize tasks?&lt;/li&gt;
&lt;li&gt;How do you balance work and personal life? (time management skills)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Questions you should ask to make sure the company is really serious about remote work&lt;ul&gt;
&lt;li&gt;How many people do you have working remotely full-time?&lt;/li&gt;
&lt;li&gt;Is occasional travel needed to meet with co-workers?&lt;/li&gt;
&lt;li&gt;How does the remote team usually communicate?&lt;/li&gt;
&lt;li&gt;What would my typical schedule and day look like? How often would I be in touch with my manager?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you're applying for an employer in another country, before accepting a position it's a good idea to find out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How will taxes be taken care of from my paycheck?&lt;/li&gt;
&lt;li&gt;Will I need to buy my own health plan?&lt;/li&gt;
&lt;li&gt;Would I need to get a work permit when visiting the employer?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="chapter-14-the-remote-workers-toolkit"&gt;Chapter 14: The Remote Workers' Toolkit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mind Maps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Usage: collaborative brainstorming, project planning&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mindmeister.com"&gt;MindMeister&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Program Blockers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://selfcontrolapp.com"&gt;SelfControl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getcoldturkey.com"&gt;Cold Turkey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More options: &lt;a href="http://www.quacklabs.in/blog/2017/03/17/14-tools-help-avoid-distractions-stay-focused-work/"&gt;14 Tools to Help You Avoid Distractions and Stay Focused at Work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Remote Job"></category></entry><entry><title>How was PyCon US 2019</title><link href="https://lee-w.github.io/posts/tech/2019/06/how-was-pycon-us-2019" rel="alternate"></link><published>2019-06-22T21:49:00+08:00</published><updated>2020-02-04T18:43:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-06-22:/posts/tech/2019/06/how-was-pycon-us-2019</id><summary type="html">&lt;p&gt;既然自稱 Python 的信徒&lt;br/&gt;
總是要來世界最大的 PyCon 朝聖一下 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3010" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3010.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;（我還因為寫了 GitHub ，被以為是 GitHub 的員工 XD）&lt;/p&gt;
</summary><content type="html">&lt;p&gt;既然自稱 Python 的信徒&lt;br/&gt;
總是要來世界最大的 PyCon 朝聖一下 XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3010" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3010.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;（我還因為寫了 GitHub ，被以為是 GitHub 的員工 XD）&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="pycon-us"&gt;簡介一下 PyCon US&lt;/h2&gt;
&lt;p&gt;PyCon 總共跨了 9 天&lt;br/&gt;
除了主會議外，還有各種不同的活動跟討論&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5/1 ~ 5/2: Tutorial&lt;/li&gt;
&lt;li&gt;5/3 ~ 5/5: 主會議&lt;/li&gt;
&lt;li&gt;5/6 ~ 5/9: Development Sprint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今年辦在 Cleveland 的 Huntington Convention Center&lt;br/&gt;
會眾大概有 3000 人&lt;br/&gt;
會議期間除了同時會有 6 個軌的 talk 以外，還會有好幾間的 Open Space&lt;/p&gt;
&lt;p&gt;最大的會議廳長這樣&lt;br/&gt;
&lt;img alt="IMG_3033" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3033.jpg"/&gt;&lt;br/&gt;
&lt;img alt="IMG_3035" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3035.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;參加前，我有看了這篇 "&lt;a href="https://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/"&gt;How to have a great first PyCon&lt;/a&gt;"&lt;br/&gt;
對我這次去參加 PyCon 很有幫助&lt;/p&gt;
&lt;h2 id="tutorial"&gt;Tutorial&lt;/h2&gt;
&lt;p&gt;我參加了兩場 Tutorial&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=J08MrW2NC1Y&amp;amp;list=PLPbTDk1hBo3xof51R8pk3kP1BVBuMYP9c&amp;amp;index=18&amp;amp;t=0s"&gt;Getting started with Kubernetes and container orchestration&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Kubernetes 的使用介紹的蠻清楚的，我覺得對入門 Kubernete 很有幫助&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DWgD5iloSHs&amp;amp;list=PLPbTDk1hBo3xof51R8pk3kP1BVBuMYP9c&amp;amp;index=15&amp;amp;t=0s"&gt;Building Evolutionary API with GraphQL and Python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;主要是在講 GraphQL 的概念，我覺得偏簡單，原本希望可以多聽到一些設計上的想法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一場 Tutorial 大概是三個小時&lt;br/&gt;
一天參加一場，我的體力上比較負荷的來&lt;br/&gt;
但中午吃飯跟其他會眾聊天的時候，遇到了好幾個人都是兩天參加滿四場 Tutorial ...&lt;/p&gt;
&lt;p&gt;好幾個會眾都推薦了 David Beazley 的 &lt;a href="https://www.youtube.com/watch?v=pkCLMl0e_0k"&gt;Lambda Calculus from the Ground Up&lt;/a&gt;&lt;br/&gt;
這場 Tutorial 的介紹開宗明義就說了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You will learn nothing practically useful in this tutorial.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但大家還是都很推薦這場&lt;br/&gt;
聽說 David Beazley 是很有名的 Speaker（請原諒我的孤陋寡聞 QQ）&lt;br/&gt;
我甚至遇到一位會眾說看到名字就報名了，也不用看是什麼主題&lt;/p&gt;
&lt;h2 id="talks"&gt;Talks&lt;/h2&gt;
&lt;p&gt;稍微簡介幾場我還有印象的 talk&lt;br/&gt;
也許之後有時間會把筆記好好整理一下分享出來&lt;/p&gt;
&lt;h3 id="day-1"&gt;Day 1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Keynote - Russell Keith-Magee&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Python's Black Swan&lt;ul&gt;
&lt;li&gt;你現在覺得 Python 的存在很自然，但 10 年後 Python 還會在嗎？&lt;/li&gt;
&lt;li&gt;我們要怎麼做些什麼才能讓 Python 在 10 年後還存在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5 Calls to Action&lt;ol&gt;
&lt;li&gt;Start thinking about Black swans (before it's too late)&lt;/li&gt;
&lt;li&gt;Improve resourcing of maintenance and R&amp;amp;D efforts&lt;/li&gt;
&lt;li&gt;Value contributors and their contributions&lt;/li&gt;
&lt;li&gt;Get out your wallet&lt;/li&gt;
&lt;li&gt;Contribute&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API Evolution the Right Way&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;更新 API 並且淘汰舊的版本，你需要注意的幾個設計細節&lt;/li&gt;
&lt;li&gt;如果想直接看文字不要補影片的話，可以直接看講者的文章 &lt;a href="https://emptysqua.re/blog/api-evolution-the-right-way/"&gt;API Evolution the Right Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Programmatic Notebooks with papermill&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Netflix 推銷自己的開源工具 &lt;a href="https://github.com/nteract/papermill"&gt;papermill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用一個 jupyter notebook 當作範本，由外部輸入幾組不同的參數，一次產生多個相對應 jupyter notebooks（為什麼我在弄碩論的時候沒發現有這樣的工具 QQ）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Everything at Once: Python's Many Concurrency Models&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;介紹跟比較 5 種 Python 的 Concurrency Model (asyncio, Python threads, GIL-released thread, multiprocessing, distributed tasks)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Supporting Engineers with Mental Health Issues&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Enginner 常常因為壓力太大造成一些心理的狀況，該如何正視自己的狀況並試著調適或尋求幫助&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=yFcCuinRVnU&amp;amp;list=PLPbTDk1hBo3x9H3_WOWv_p6wD01B5eBvn&amp;amp;index=1&amp;amp;t=16m35s"&gt;Lightning Talk - Overthinking T-Shirts with Scipy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;這是他們用自己公司的產品 Demo 他們計算要帶多少 T-Shirts 來發，並且快速的視覺化&lt;/li&gt;
&lt;li&gt;其實講題蠻瞎的，但講者講的真的很有趣很精彩 XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="day-2"&gt;Day 2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Keynote - Shadeed "Sha" Wallace-Stepter&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;"How many people here are on probation or parole?" （這個開頭害我以為我是不是英文真的太差誤會了什麼...... ）&lt;/li&gt;
&lt;li&gt;Sha 訴說自己如何一個從犯人變成創業家的故事，如何在獄中學習 Python，並在出獄後重新融入社會&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keynote - Jessica McKellar&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;上一場像是實例的現身說法，這場則是在同一個主題下的 call to action&lt;/li&gt;
&lt;li&gt;Jessica 想做的是改變美國的監獄系統&lt;ul&gt;
&lt;li&gt;如果出獄的人並不能融入社會，社會也不願意接受他們，那他們就會很容易再犯再回到監獄，而這會產生很大的社會成本&lt;/li&gt;
&lt;li&gt;如果能讓他們在獄中學習技能，並說服一些公司慢慢接受這群人，我們就能讓這些人重新融入社會，並成為社會的生產力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工程師的工作不就是該修復系統嗎？&lt;/li&gt;
&lt;li&gt;這兩場 keynote 非常的精采，是整場 PyCon 最多人起立鼓掌最久的 Talk&lt;ul&gt;
&lt;li&gt;很不幸的這兩場的影片剛好消失了，目前只能從 &lt;a href="https://twitter.com/jessicamckellar/status/1127639822640660482"&gt;Jessica 的 twitter&lt;/a&gt; 看到文字版的內容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Zen of Python Teams&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;將 Zen of Python 應用到建造更好的團隊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Does remote work really work?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;怎樣的人適合 remote work？ (Remote work is not for everyone.)&lt;/li&gt;
&lt;li&gt;你要注意些什麼才能成為一個好的 remote worker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python Security Tool&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;這場很實際地提了幾個跟 Python 有關的 Security Tool&lt;br/&gt;
&lt;img alt="IMG_3063" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3063.jpg"/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sRwHWPDJBnk&amp;amp;list=PLPbTDk1hBo3x9H3_WOWv_p6wD01B5eBvn&amp;amp;index=2&amp;amp;t=39m35s"&gt;Lightning Talk - Writing Selfless Python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;無私的 Python： 有了 &lt;a href="https://pypi.org/project/selfless/"&gt;selfless&lt;/a&gt; 我們不用在 Python 中寫自私的 (&lt;strong&gt;self&lt;/strong&gt;fish) class 也能有同樣的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sRwHWPDJBnk&amp;amp;list=PLPbTDk1hBo3x9H3_WOWv_p6wD01B5eBvn&amp;amp;index=2&amp;amp;t=8m45s"&gt;Lightning Talk - One Weird Trick for people to see your name in lunch&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;因為 badge 太長了，吃午餐的時候其他人會看不到你的名字&lt;ul&gt;
&lt;li&gt;那就在 badge 後面打個結，讓帶子短一點，大家就能看到你的名字了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;恩對，這場 Lightning Talk 就真的是這樣而已 XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sRwHWPDJBnk&amp;amp;list=PLPbTDk1hBo3x9H3_WOWv_p6wD01B5eBvn&amp;amp;index=2&amp;amp;t=5m19s"&gt;Lightning Talk - 3 Quick Tips for Software Blogging&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;Set a Purpose&lt;ul&gt;
&lt;li&gt;Why do you want to blog?&lt;ul&gt;
&lt;li&gt;Publish info, guides, help&lt;/li&gt;
&lt;li&gt;Personal journalling /notes&lt;/li&gt;
&lt;li&gt;connect with others&lt;/li&gt;
&lt;li&gt;electronic biz card&lt;/li&gt;
&lt;li&gt;be self-motivated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Don't&lt;ul&gt;
&lt;li&gt;&lt;del&gt;become famous&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;make money from ads&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write new, helpful content&lt;ul&gt;
&lt;li&gt;Don't repeat existing content. Make something new!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools and Platforms Don't Matter (Content matters)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="day-3"&gt;Day 3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keynote - Python Steering Council&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;現在的 Python 政府討論 Python的過去與未來&lt;ul&gt;
&lt;li&gt;Python Governance&lt;/li&gt;
&lt;li&gt;PEP 8000&lt;/li&gt;
&lt;li&gt;PEP 13&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q: Where to start to become a core dev?&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org"&gt;Python Developer’s Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keynote - Nina Zakharenko - Light up you life with Python &amp;amp; LEDS!&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;現場 Demo &lt;a href="https://micropython.org"&gt;MicroPython&lt;/a&gt;，如何用 Python 操控硬體&lt;/li&gt;
&lt;li&gt;我想這場主要是想展示用 Python 能很簡單地做到一些原本想像中可能會比較困難的事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="watch-list"&gt;Watch List&lt;/h3&gt;
&lt;p&gt;我跟在 PyCon 認識的朋友整理了一些之後會想補帶的 talk&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dqDnB6jKzcE"&gt;API Evolution the Right Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WZ8FEB4J8-c"&gt;The Zen of Python Teams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2mevf60qm60"&gt;Releasing the World's Largest Python Site Every 7 Minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CLW5Lyc1FN8"&gt;Time to take out the rubbish: garbage collector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0ysyWk-ox-8"&gt;Getting Started Testing in Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KcyGUVzL7HA"&gt;Escape from auto-manual testing with Hypothesis!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NltGUUi23zc"&gt;Ace Your Technical Interview Using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=e1vqfBEAkNA"&gt;Migrating Pinterest from Python2 to Python3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QvZqttX9uXc"&gt;Scraping a Million Pokemon Battles: Distributed Systems By Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MjHpMCIvwsY"&gt;Practical decorators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-BHverY7IwU"&gt;Break the Cycle: Three excellent Python tools to automate repetitive tasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="open-space"&gt;Open Space&lt;/h2&gt;
&lt;p&gt;畢竟 talk 都會錄影，而且很快就上傳了（大概結束後兩天就會上傳）&lt;br/&gt;
所以後來我就越來越常去 Open Space&lt;br/&gt;
而且相較之下 Open Space 會比較有跟人互動的機會&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3042" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3042.jpg"/&gt;&lt;br/&gt;
&lt;img alt="IMG_3060" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3060.jpg"/&gt;&lt;br/&gt;
&lt;img alt="IMG_3064" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3064.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;除了一些比較技術性的討論外&lt;br/&gt;
也會有不少娛樂性的 Open Space（通常在晚上）&lt;br/&gt;
像這個就是揪團要一起看 Game of Throne XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3062" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3062.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;大部分討論性質的 Open Space 會像這樣圍成一圈&lt;/p&gt;
&lt;p&gt;&lt;img alt="open-space" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/15611957026963.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;這是我去參加 Vim 討論會的照片&lt;br/&gt;
當天就有人分享了討論的筆記 (&lt;a href="https://gist.github.com/pwlandoll/dcb252686ae3c2e2486fd6425eb00d91"&gt;Vim BoF @PyCon2019&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;我還有參加到一場幫忙做履歷健檢的跟討論 Tech Interview&lt;/p&gt;
&lt;h2 id="job-fair-poster"&gt;Job Fair / Poster&lt;/h2&gt;
&lt;p&gt;Job Fair 主要就是跟各個公司聊天，看看他們的工作性質跟開了什麼缺&lt;br/&gt;
有聽到幾間 remote 的公司還蠻有趣的&lt;br/&gt;
不過其實也不用等到 Job Fair 才問&lt;br/&gt;
Job Fair 的公司反而比較少，不過應該就是專注在有開缺的公司&lt;br/&gt;
前幾天的攤位反而更有機會聊聊&lt;br/&gt;
&lt;img alt="IMG_3025" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3025.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Poster 也是一個能跟人互動蠻好的機會&lt;br/&gt;
不過那些比較有趣的，通常旁邊都會圍著一群人 XD&lt;br/&gt;
&lt;a href="https://hypothesis.readthedocs.io"&gt;Hypothesis&lt;/a&gt; 好像整個 session 人都沒少過&lt;br/&gt;
（話說 Hypothesis 還真的從 talk, tutorial, sprint 到 poster 每個場合都出現了）&lt;br/&gt;
&lt;img alt="IMG_3070" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3070.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="development-sprint"&gt;Development Sprint&lt;/h2&gt;
&lt;p&gt;自從上次在 PyCon TW 參加了 PyBee 的 Sprint ，就覺得這樣一群人協作開源專案很有趣&lt;br/&gt;
所以這也是我這次 PyCon 幾乎最期待的活動&lt;/p&gt;
&lt;p&gt;在 Development Sprint ，開源專案的作者會帶自己的專案找大家一起來協作&lt;br/&gt;
沒有帶專案來的人就可以看自己對哪個有興趣加入貢獻&lt;br/&gt;
參加 Development Sprint 是貢獻開源專案還蠻好的入門方式&lt;br/&gt;
畢竟原作者跟 core contributor 就在旁邊&lt;br/&gt;
有遇到什麼問題想問馬上就可以問&lt;/p&gt;
&lt;p&gt;我這次參加了 &lt;a href="https://github.com/pallets"&gt;pallets&lt;/a&gt;, &lt;a href="https://github.com/python/cpython"&gt;cpython&lt;/a&gt;, &lt;a href="https://github.com/pybee"&gt;pybee&lt;/a&gt;, &lt;a href="https://github.com/edx"&gt;OpenEdx&lt;/a&gt; 的 Sprint&lt;br/&gt;
每一個專案，我在最後都有提交至少一個小 PR&lt;br/&gt;
這次最有成就感的大概就是成功提交了一個 flask 跟 cpython 的 PR&lt;br/&gt;
（雖然 cpython 的其實還在 review 中）&lt;/p&gt;
&lt;p&gt;這幾個專案之中，我覺得 &lt;a href="https://github.com/pybee"&gt;pybee&lt;/a&gt;, &lt;a href="https://github.com/edx"&gt;OpenEdx&lt;/a&gt; 算是最新手友善的&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3195" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3195.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Sprint 的這幾天還蠻常看到 Guido 在走廊走來走去&lt;br/&gt;
也蠻多人去找他搭話跟拍照的&lt;br/&gt;
不過害羞的我就有點不敢過去了 QQ&lt;/p&gt;
&lt;p&gt;記錄一下這四天丟了哪些 PR&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pallets"&gt;pallets&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Pull Request&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pallets/flask/pull/3179"&gt;Fix MethodView inheritance Error (#3138) #3179&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beeware.org"&gt;Beeware&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Pull Request&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/pull/679"&gt;Fix the CAPSLOCK typo in toga_cocoa #679&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/pull/686"&gt;Fix open file not working when using open command and double click files #686&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/podium/pull/28"&gt;Fix the error that UP arrow won't go the previous page #28&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPython&lt;ul&gt;
&lt;li&gt;Project&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org"&gt;Python Developer’s Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/cpython-source-code-guide/?preview=cpython-sprints"&gt;The Ultimate Guide to the CPython Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pull Request (not yet merged)&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/13233"&gt;bpo-36841: Supporting customization of float encoding in JSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OpenEdx&lt;ul&gt;
&lt;li&gt;Project&lt;ul&gt;
&lt;li&gt;&lt;a href="https://contributing-to-open-edx.readthedocs.io/en/latest/"&gt;Contributing to Open edX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openedx.slack.com"&gt;open edx slack&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;openedx-slack-invite.herokuapp.com&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openedx.atlassian.net/wiki/spaces/COMM/pages/162245773/Sites+powered+by+Open+edX"&gt;Sites powered by Open edX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pull Request&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-documentation/pull/1825"&gt;Add pull upstream reminder in contribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edx/edx-platform/pull/20502"&gt;INCR-236&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;給自己下次去的建議&lt;/h2&gt;
&lt;h3 id="_2"&gt;多跟人交流、多跟人交流、多跟人交流&lt;/h3&gt;
&lt;p&gt;這是我感受到跟在台灣參加研討會最不一樣的地方&lt;br/&gt;
（也可能是我在台灣的研討會都在舒適圈中...）&lt;br/&gt;
只要你願意，在會場中幾乎每個人都很樂於跟你交流&lt;br/&gt;
可能你只是站在一個桌子上吃早餐，就會有人過來跟你聊聊&lt;br/&gt;
這個體驗真的蠻有趣的&lt;/p&gt;
&lt;h3 id="_3"&gt;練好英文口說&lt;/h3&gt;
&lt;p&gt;原本覺得自己英文程度雖然稱不上好，但應該也沒到太差吧&lt;br/&gt;
至少在旅行上是沒遇過什麼問題&lt;br/&gt;
但這種程度跟要跟人討論或聊天還是差太多了&lt;br/&gt;
當然要說點話是沒什麼問題，但要流暢表達自己就還是蠻困難的&lt;br/&gt;
一對一的聊天還算勉強有辦法&lt;br/&gt;
到了團體討論就真的很吃力&lt;br/&gt;
光在聽力上要跟上大家在討論的就有點辛苦&lt;br/&gt;
就更不用說要加入討論了&lt;br/&gt;
剛到 PyCon 的前幾天對於這件事還真的蠻挫折的&lt;/p&gt;
&lt;h3 id="_4"&gt;準備好一段短的招呼語跟自我介紹&lt;/h3&gt;
&lt;p&gt;一開始有人來找我聊天，還是會有些緊張，不知道要說什麼&lt;br/&gt;
畢竟在台灣真的也沒什麼這樣練習英文口說的機會&lt;br/&gt;
後來多跟幾個人聊過後&lt;br/&gt;
自然而然就形成了一套跟人開頭的招呼語跟自我介紹&lt;br/&gt;
之後話題就能比較順利地一直接下去&lt;/p&gt;
&lt;h3 id="_5"&gt;留點緩衝時間給調時差&lt;/h3&gt;
&lt;p&gt;這次到美國的隔天就已經要開始 PyCon 了&lt;br/&gt;
一到了傍晚就會開始想睡&lt;br/&gt;
所以前幾天的 After Party 我參加一下就走了&lt;br/&gt;
後來也沒去參加 Facebook&lt;br/&gt;
一來是我也有點不知道怎麼在這種場合應對&lt;br/&gt;
二來是真的太累了...&lt;/p&gt;
&lt;h3 id="-"&gt;保留體力 - 不用每個活動都參與到&lt;/h3&gt;
&lt;p&gt;剛來的時候會覺得，都花了這麼多錢特地跑來，一定要把握時間每&lt;br/&gt;
就會勉強自己盡可能每個時段都要塞滿&lt;br/&gt;
但 PyCon 的 talk, open space and etc. 實在太多了&lt;br/&gt;
真的要塞滿，體力就有點負荷不來，後來就都是邊睡邊聽......&lt;br/&gt;
中間可以留一些時間在 Quiet Room 稍微休息&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3187" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3187.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;與其多衝一些場數，不如專注地把幾場真正想聽的專心聽完&lt;/p&gt;
&lt;h3 id="open-space_1"&gt;多去 Open Space&lt;/h3&gt;
&lt;p&gt;相較於 talk ， Open Space 除了沒有錄影可以補帶以外&lt;br/&gt;
也是一個跟人們可以更有互動的機會&lt;br/&gt;
有時候說不定也能聽到一些不能在 talk 說的事（笑&lt;br/&gt;
而且我覺得在這應該是蠻有機會交到一些朋友的場合&lt;br/&gt;
（雖然我後來認識的大多是在走廊上或吃飯遇到的 XD）&lt;/p&gt;
&lt;h3 id="talk"&gt;事前對有興趣的 talk 準備好想問的問題&lt;/h3&gt;
&lt;p&gt;雖然說看現場的感受跟看影片還是不一樣&lt;br/&gt;
但既然都去聽了，如果能跟講者討論自己遇到的問題，應該會更有收穫&lt;/p&gt;
&lt;h3 id="action-items"&gt;將當下的熱情紀錄下來，並列出 action items&lt;/h3&gt;
&lt;p&gt;參加的當下的感受還蠻強烈的，但回來台灣好一段時間後&lt;br/&gt;
當初的熱情跟想法，就會慢慢被生活給磨光&lt;br/&gt;
所以立刻把明確的 action items 記錄下來，也許會讓這些事情成真的機會高一點&lt;/p&gt;
&lt;p&gt;寫下這篇文章，某種程度上也是想記錄下這次參加的感受呢&lt;/p&gt;
&lt;h2 id="20190703-update"&gt;食物 （20190703 update）&lt;/h2&gt;
&lt;p&gt;&lt;img alt="food" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/food.png"/&gt;&lt;/p&gt;
&lt;p&gt;既然有人問了，就來補充一下吧 XD&lt;/p&gt;
&lt;p&gt;首先是從 Tutorial 開始到 Sprint 結束的九天&lt;br/&gt;
每天都有星巴克可以喝&lt;br/&gt;
雖然到 Sprint 的時候好像已經把經費花光&lt;br/&gt;
臨時又有廠商在贊助才能撐到結束&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3011" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3011.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;議程以外那幾天大多是自助式&lt;br/&gt;
大概都是這樣的沙拉&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3024" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3024.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;議程那幾天就有點像是餐盒&lt;br/&gt;
有豬、牛、素、水果幾種可以選&lt;br/&gt;
像這個就是牛排，吃起來就還不錯&lt;br/&gt;
&lt;img alt="IMG_3045" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3045.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;這個也是牛排&lt;br/&gt;
但吃起來很可怕......&lt;br/&gt;
上面那個餅皮我真的努力要吃過了，但我失敗了＠＠&lt;br/&gt;
這是我待在美國這一個月最難吃的食物......&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3061" src="/images/posts-image/2019-06-22-how-was-pycon-us-2019/IMG_3061.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;恩，大概就只有這樣xD&lt;/p&gt;
&lt;h2 id="_6"&gt;雜談&lt;/h2&gt;
&lt;p&gt;一開始對於要不要飛一趟去美國還蠻猶豫的&lt;br/&gt;
畢竟 PyCon 的 talk 網路上都看得到，花這一大筆錢真的值得嗎？&lt;br/&gt;
而且自己一個跑到一個人生地不熟的地方也是挺可怕的&lt;/p&gt;
&lt;p&gt;其實這些問題我到最後也沒給自己一個好的答覆&lt;br/&gt;
反正就覺得現在如果不衝動地做這件事，也許就不會有下次了&lt;br/&gt;
就毅然決然的買了機票跟門票&lt;br/&gt;
逼得自己沒有退路，一定得要去&lt;/p&gt;
&lt;p&gt;以結論來說，我覺得非常值得&lt;br/&gt;
而且如果有可能，我明年還是會想去 PyCon 2020 in Pittsburgh&lt;br/&gt;
在 PyCon 體驗到一些我在台灣比較不會接觸到的事&lt;br/&gt;
平常也許可以看看文章，聽別人說說這些故事&lt;br/&gt;
但這跟實際現場的體會真的太不一樣了&lt;br/&gt;
最大的感受是「那些原先覺得做不到的事，似乎變得不再那麼遙遠」&lt;/p&gt;
&lt;p&gt;當然我在美國其實待了一個多月，也是去了不少地方&lt;br/&gt;
說不定哪天有空也會寫篇遊記&lt;/p&gt;
&lt;p&gt;這篇快速整理了一下我現在想到的，也許之後還會再補點內容&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="PyCon"></category><category term="Conference"></category></entry><entry><title>[Book] OKR 做最重要的事</title><link href="https://lee-w.github.io/posts/book/2019/06/measure-what-matters" rel="alternate"></link><published>2019-06-16T17:18:00+08:00</published><updated>2019-06-16T17:18:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-06-16:/posts/book/2019/06/measure-what-matters</id><summary type="html">&lt;p&gt;&lt;img alt="measure-what-matters" src="/images/books/measure-what-matters.jpg" style="height:255px;"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="measure-what-matters" src="/images/books/measure-what-matters.jpg" style="height:255px;"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="ch2-okr"&gt;Ch2 - OKR 之父&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「目標」和「關鍵結果」&lt;ul&gt;
&lt;li&gt;目標就是方向&lt;ul&gt;
&lt;li&gt;e.g., 我們要主導中檔微電腦元件市場&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;關鍵結果是里程碑，必須明確可測量&lt;ul&gt;
&lt;li&gt;e.g., 替 8085 贏得10款新設計&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;葛洛丈博士的 ORK 要訣&lt;ul&gt;
&lt;li&gt;少就是多&lt;/li&gt;
&lt;li&gt;由下而上設定目標&lt;/li&gt;
&lt;li&gt;不強制規定&lt;/li&gt;
&lt;li&gt;保持彈性&lt;/li&gt;
&lt;li&gt;敢於失敗&lt;/li&gt;
&lt;li&gt;工具而非武器&lt;/li&gt;
&lt;li&gt;要有耐心，也要堅定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch4-1"&gt;Ch4 - 超能力 1: 專注投入優先要務&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;與目標配合的關鍵結果，應強調工作品質&lt;ul&gt;
&lt;li&gt;e.g.,&lt;ul&gt;
&lt;li&gt;產量目標： 三項新功能&lt;/li&gt;
&lt;li&gt;品質目標： 品保測試中，每項功能少於五個錯誤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch-10-3"&gt;Ch 10 - 超能力 3: 追蹤當責&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;追蹤、審視 OKR 時，可以採用的選項&lt;ul&gt;
&lt;li&gt;繼續： 處於綠燈區（進度符合預期），不需調整&lt;/li&gt;
&lt;li&gt;更新： 處於黃燈區（需要關注），視流程或現實狀況調整時間和資源&lt;/li&gt;
&lt;li&gt;啟動： 隨時可以依需要啟動一組新的 OKR&lt;/li&gt;
&lt;li&gt;終止： 處於紅燈區（「處於危險中」）且目標不再有用，應直接放棄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;總結 OKR 時，可以思考的問題&lt;ul&gt;
&lt;li&gt;是否全部達標？&lt;ul&gt;
&lt;li&gt;如果是，哪些因素貢獻良多？&lt;/li&gt;
&lt;li&gt;如果不是，遇到了什麼障礙？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果重設一項可以完全達成的目標，應該如何修改？&lt;/li&gt;
&lt;li&gt;學到哪些教訓，可以改變下一週期 OKR 的做法？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch-15-okr-cfr"&gt;Ch 15 - 持續性績效管理: OKR 與 CFR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CFR (Conversations, Feedback, Recognition)&lt;/li&gt;
&lt;li&gt;主管與部屬對話涉及的五個關鍵面向&lt;ul&gt;
&lt;li&gt;設定目標和反省&lt;/li&gt;
&lt;li&gt;了解最新進度&lt;/li&gt;
&lt;li&gt;互相指導&lt;/li&gt;
&lt;li&gt;事業發展&lt;/li&gt;
&lt;li&gt;輕量的績效考核&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="-google-okr"&gt;附錄一 - Google 的 OKR 攻略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;目標代表 What ，應該要&lt;ul&gt;
&lt;li&gt;表達目標與意圖&lt;/li&gt;
&lt;li&gt;進取但可行的&lt;/li&gt;
&lt;li&gt;實在、客觀且明確&lt;/li&gt;
&lt;li&gt;成功達成的目標必須提供明確的價值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;關鍵結果代表 How ，應該要&lt;ul&gt;
&lt;li&gt;表達可衡量的里程碑，一旦實現將有利於達成目標&lt;/li&gt;
&lt;li&gt;必須描述結果而非活動&lt;/li&gt;
&lt;li&gt;必須含有完成工作的證據，且必須可取得、可信和容易發現&lt;ul&gt;
&lt;li&gt;e.g. 變化清單、文件連結、筆記以及已公布的指標報告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何判斷 OKR 好不好&lt;ul&gt;
&lt;li&gt;只花五分鐘寫下的 OKR → 很可能不好&lt;/li&gt;
&lt;li&gt;目標無法一行寫完 → 不夠簡潔&lt;/li&gt;
&lt;li&gt;關鍵結果只能用團隊內部術語表達 → 不夠好&lt;ul&gt;
&lt;li&gt;e.g., &lt;del&gt;推出 Foo 4.1&lt;/del&gt; → 推出 Foo 4.1 以提高註冊率 25% → 提高註冊率 25%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;寫下真實的日期&lt;ul&gt;
&lt;li&gt;如果每一項關鍵結果，都發生在一季的最後一天，很可能沒有切實可行的計畫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;確保關鍵結果是可衡量的&lt;ul&gt;
&lt;li&gt;e.g., &lt;del&gt;提高註冊率&lt;/del&gt; → 5月1號前提高註冊率 25%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;確保指標是不含糊的&lt;/li&gt;
&lt;li&gt;如果寫下來的 OKR 未涵蓋團隊努力中相當顯著的部分，則需要再添加一些 OKR&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Productivity"></category></entry><entry><title>SITCON 2019</title><link href="https://lee-w.github.io/posts/tech/2019/04/sitcon-2019" rel="alternate"></link><published>2019-04-06T21:00:00+08:00</published><updated>2019-04-06T21:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-04-06:/posts/tech/2019/04/sitcon-2019</id><summary type="html">&lt;p&gt;SITCON 都過了兩個禮拜&lt;br&gt;
好不容易才騰出個時間整理一下想法&lt;br&gt;
想想去年的 X-Village 的想法也一直還沒好好寫完&lt;br&gt;
兩個禮拜似乎也不算太久（？&lt;/p&gt;
</summary><content type="html">&lt;p&gt;SITCON 都過了兩個禮拜&lt;br&gt;
好不容易才騰出個時間整理一下想法&lt;br&gt;
想想去年的 X-Village 的想法也一直還沒好好寫完&lt;br&gt;
兩個禮拜似乎也不算太久（？&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;不過這次在 SITCON 的分享也算是把 X-Village 的想法都整理起來了&lt;br&gt;
就當作整合進這篇吧 xD&lt;/p&gt;
&lt;h3 id="_1"&gt;第一次站上中研院的舞台&lt;/h3&gt;
&lt;p&gt;這是我第一次以講者的身份站在中研院的台上&lt;br&gt;
主要分享去年 X-Village 辦課程的經驗&lt;br&gt;
不過不出意外的，這樣的議題大家不會太感興趣 XD&lt;br&gt;
而且同時的 R0 又很精彩&lt;br&gt;
如果我不是這場的講者，我應該也會去聽吧&lt;/p&gt;
&lt;p&gt;原本不想花太多時間，就只投了十分鐘的 Espresso&lt;br&gt;
不知道是不是我的介紹看起來好像內容很多&lt;br&gt;
就被問要不要改成 40 分鐘的 Presentation 了&lt;br&gt;
既然都被問了，那就來挑戰看看吧&lt;/p&gt;
&lt;p&gt;只是很不幸的&lt;br&gt;
我的工作就在 SITCON 錄取我後開始忙碌起來&lt;br&gt;
一直都沒時間好好準備簡報&lt;br&gt;
我的第一版簡報甚至要到了台南試講的前一兩個小時才做完&lt;br&gt;
原本想說彩排前還有兩個禮拜可以改&lt;br&gt;
但我還是一直忙到前幾天才有時間好好改...&lt;br&gt;
這才親身體會到，直到要講的前一天才弄簡報不是傳說啊 xD&lt;br&gt;
工程師真是沒看到死線就不會覺悟（笑&lt;br&gt;
所幸不管是試講還是彩排，我應該都講得還不算太差&lt;/p&gt;
&lt;p&gt;至於議程當天&lt;br&gt;
除了人不太多以外，一切都還蠻順利的&lt;br&gt;
時間掌握上，也比我想像得順利得多&lt;br&gt;
雖然現場沒人提問，Sli.do 倒是有不少人留下問題&lt;br&gt;
不過問我 Python 問題的人大概就佔了一半 xD&lt;br&gt;
我想是因為我開頭就介紹了我是 Python 的信徒吧 xDD&lt;/p&gt;
&lt;p&gt;這次會想來當講者&lt;br&gt;
主要就是想訓練自己公開演說的技能&lt;br&gt;
總覺得好像好一段時間都沒有點這項技能了&lt;br&gt;
也想讓去年累個半死辦的 X-Village 有多一點人看到&lt;br&gt;
即使我們的經驗中有很多錯誤的嘗試&lt;br&gt;
還是希望有人多少能從中帶走一些什麼想法，讓下一個這樣的資訊教育辦得更成功&lt;/p&gt;
&lt;p&gt;如果沒參加到我的議程，對我的內容有興趣的話&lt;br&gt;
我有把我的簡報公開出來，我也在會後把 Sli.do 上的問題都回答完了&lt;br&gt;
我應該算還蠻認真的講者吧 xDD&lt;br&gt;
之後沒忘記的話，我應該也會把錄影補上來&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/leew/x-village-yong-bu-dao-liang-ge-yue-zhun-bei-liang-ge-yue-de-ke-cheng"&gt;Slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/P-oMfddFSuWbEeFX1WfIVg#X-Village---用不到兩個月準備兩個月的課程"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;身為會眾&lt;/h3&gt;
&lt;p&gt;比起之前參加的幾場 SITCON&lt;br&gt;
這次應該是我參加的議程最少的一次&lt;br&gt;
大概有一半的時間都在外面的攤位閒晃 xD&lt;/p&gt;
&lt;p&gt;倒是 R2 的三場 Espresso 都聽了&lt;br&gt;
每一場的內容跟表達方式都很有趣&lt;/p&gt;
&lt;p&gt;當然每年還是要參與一下編輯器大亂鬥&lt;br&gt;
今年終於不再是 vim 跟 emacs 互鬥，然後還把對方擦掉了 xDD&lt;/p&gt;
&lt;p&gt;&lt;img alt="vs_code_wins" src="/images/posts-image/2019-04-07-SITCON-2019/vs_code_wins.jpeg" style="width:50%"&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;講者晚宴&lt;/h3&gt;
&lt;p&gt;這也是這次 SITCON 我蠻期待的一個活動&lt;br&gt;
難得有機會能這樣子跟各路大神交流&lt;br&gt;
不然每次參加 conference ，好像都沒有交到新朋友&lt;br&gt;
當然也有可能只是我太邊緣了&lt;/p&gt;
&lt;p&gt;大家真的都好早就開始碰程式了&lt;br&gt;
同桌之中，最老的就是我ＱＱ&lt;br&gt;
最年輕也有國高中的講者呢&lt;br&gt;
相比他們，我國高中的時候沒有什麼特別的想法&lt;br&gt;
只是跟著大家認為正確的升學道路走&lt;br&gt;
甚至高中還蠻討厭寫程式的呢&lt;br&gt;
沒想到最後竟然還是走上了程式這條路&lt;br&gt;
出來混，早晚還是要還的嗎xD&lt;/p&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="SITCON"></category></entry><entry><title>[Note] Effective Python</title><link href="https://lee-w.github.io/posts/tech/2019/01/effective-python" rel="alternate"></link><published>2019-01-19T16:45:00+08:00</published><updated>2019-01-19T16:45:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-01-19:/posts/tech/2019/01/effective-python</id><summary type="html">&lt;p&gt;&lt;img alt="effective python" src="/images/books/aE00B2o.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;第二次看過終於有辦法把原本看不懂的部分都看懂了&lt;br/&gt;
那些看不懂的大多是很抽象化的技巧&lt;br/&gt;
但是啊，看懂了這些語法&lt;br/&gt;
現在的我還是沒有能力，將這些抽象化應用在我自己的程式中&lt;br/&gt;
不過其他大部分比較簡單的在看過一次&lt;br/&gt;
還是提醒我在每一個眉眉角角都還要再更注意&lt;br/&gt;
上次看過的還沒有全部都應用到我寫程式的習慣中呢&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="effective python" src="/images/books/aE00B2o.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;第二次看過終於有辦法把原本看不懂的部分都看懂了&lt;br/&gt;
那些看不懂的大多是很抽象化的技巧&lt;br/&gt;
但是啊，看懂了這些語法&lt;br/&gt;
現在的我還是沒有能力，將這些抽象化應用在我自己的程式中&lt;br/&gt;
不過其他大部分比較簡單的在看過一次&lt;br/&gt;
還是提醒我在每一個眉眉角角都還要再更注意&lt;br/&gt;
上次看過的還沒有全部都應用到我寫程式的習慣中呢&lt;/p&gt;
&lt;!--more--&gt;

&lt;hr/&gt;
&lt;h2 id="pythonic"&gt;第一章： Pythonic 思維&lt;/h2&gt;
&lt;h3 id="02-pep8"&gt;作法02： 遵循 PEP8 風格指南&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt;&lt;br/&gt;
(我只把我認為容易被忽略或特別重要的幾點留下來)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Whitespace&lt;ul&gt;
&lt;li&gt;過長的 expressions 要接續到其他文字行時，除了原本的縮排層次，應再加上額外的&lt;strong&gt;四個空格&lt;/strong&gt;來縮排&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Naming&lt;ul&gt;
&lt;li&gt;protected instance attributes → _leading_underscore&lt;/li&gt;
&lt;li&gt;private instance attributes → __double_leading_underscore&lt;/li&gt;
&lt;li&gt;Class, exceptions → CapitalizedWord&lt;/li&gt;
&lt;li&gt;model-level constant → ALL_CAPS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Statements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用行內否定 (inline negation, e.g., &lt;code&gt;if a is not b&lt;/code&gt;)，而非否定正向的運算式 (negation of positive expressions, e.g., &lt;code&gt;if not a is b&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;別用查驗長度的方式 (&lt;code&gt;if len(somelist) == 0&lt;/code&gt;) 來檢查空值。使用 &lt;code&gt;if not somelist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;避免單行 &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;except&lt;/code&gt;，將它們分多行描述以清楚表達&lt;/li&gt;
&lt;li&gt;import module 永遠用絕對名稱&lt;ul&gt;
&lt;li&gt;e.g., 用 &lt;code&gt;from bar import foo&lt;/code&gt; 而不是 &lt;code&gt;import foo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;import 順序&lt;ol&gt;
&lt;li&gt;standard library modules&lt;/li&gt;
&lt;li&gt;third-party modules&lt;/li&gt;
&lt;li&gt;your own modules&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 &lt;a href="https://www.pylint.org"&gt;pylint&lt;/a&gt; 來檢查風格&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="04"&gt;作法04： 撰寫輔助函式而非複雜的運算式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;將複雜的運算式移到輔助函式 (helper function) 內，特別是在你需要重複用到同樣的邏輯的時候&lt;/li&gt;
&lt;li&gt;與其在運算式中使用 &lt;code&gt;or&lt;/code&gt; 或 &lt;code&gt;and&lt;/code&gt; ，不如使用 &lt;code&gt;if/else&lt;/code&gt; 讓程式碼更易讀&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'5'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# or, and&lt;/span&gt;
&lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# if/else&lt;/span&gt;
&lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# even better if/else&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# helper function&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_first_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;

&lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_first_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="05"&gt;作法05: 知道如何切割序列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;省略 zero index, 最後的索引來降低視覺雜訊&lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;a[:5]&lt;/code&gt;, &lt;code&gt;a[5:]&lt;/code&gt; 而不是 &lt;code&gt;a[0:5]&lt;/code&gt;, &lt;code&gt;a[5:len(a)]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;copy value v.s. copy reference&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# copy value&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="c1"&gt;# copy reference&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="07-list-comprehension-map-filter"&gt;作法07: 使用 list comprehension 而非 map 和 filter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;避免用 &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; ，因為使用他們時需要建立一個 &lt;code&gt;lambda&lt;/code&gt; ，這是種視覺雜訊&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# list comprehension&lt;/span&gt;
&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# map&lt;/span&gt;
&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="09-generator-list-comprehension"&gt;作法09: 考慮使用 generator 取代大型 list comprehension&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;對於大型輸入來說 list comprehension 可能耗用相當大量的記憶體&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="11-zip-iterables"&gt;作法11: 使用 zip 來平行處理 iterables&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# without zip&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# with zip&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;如果提供了不同長度的 iterables ， zip 會 truncate 掉較長的 input&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="12-for-while-else"&gt;作法12: 避免在 for 或 while 後面使用 else 區塊&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# avoid&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="13-tryexceptelsefinally"&gt;作法13: 善用 try/except/else/finally 中的每個區塊&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;finally&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;即使例外發生，但也想要在例外發生時執行清理用的 cleanup code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;else&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;如果 try 沒有丟出例外， else 區塊就會執行&lt;/li&gt;
&lt;li&gt;用來最小化 try 區塊的程式碼量 → &lt;strong&gt;讓 try 區塊只出現會丟出例外的程式碼&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;第二章： 函式&lt;/h2&gt;
&lt;h3 id="14-none"&gt;作法14: 優先選用例外處理而非回傳 None&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;回傳 &lt;code&gt;None&lt;/code&gt; 帶有特殊意義的函式容易出錯，因為 &lt;code&gt;None&lt;/code&gt; 與其他的值 (e.g., &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;)，在做條件運算式運算的結果都是 &lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="20-none-docstrings-mutable-default-arguments"&gt;作法20: 使用 None 與 Docstrings 來指定 mutable default arguments&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;default arguments 只會被 evaluate 一次：模組載入時、函式定義時。對於動態值 (e.g., &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;) 來說，這可能導致奇怪的行為&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# The two results would be the same but should be different&lt;/span&gt;
&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Fix&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Demonstration&lt;/span&gt;

&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;span class="sd"&gt;        default: current datetime&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="19-keyword-argument-related-to-21"&gt;作法19: 以 keyword argument 提供選擇性的行為 (Related to 作法21)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# original&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flow_rate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weight_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weight_diff&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;time_diff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;

&lt;span class="c1"&gt;# with default argument&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flow_rate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weight_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weight_diff&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;time_diff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不像「作法21」全面採取 keyword argement的原因是為了達到 backwards compatibility&lt;/p&gt;
&lt;h3 id="21-keyword-argument"&gt;作法21: 強制使用僅限 keyword argument 來讓程式碼更清楚易懂&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 keyword-only arguments 來強制要求呼叫者提供 keyword argument 以避免混淆，特別是在接收多個 Boolean flag 的函式中&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# * indicates the end of positional arguments&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;safe_division&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;divisor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;ignore_overflow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_2"&gt;第三章： 類別與繼承&lt;/h2&gt;
&lt;h3 id="22-class-dictionary-tuple"&gt;作法22: 優先選用輔助 class 而非使用 dictionary 或 tuple 來管理紀錄&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果還不需要用到較有彈性的完整 class，請使用 &lt;code&gt;namedtuple&lt;/code&gt; 來製作輕量化、不可變的資料容器&lt;ul&gt;
&lt;li&gt;&lt;code&gt;namedtuple&lt;/code&gt; 不能指定預設引數值，如果資料有許多 optional properties，則還是適合用 class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="25-super"&gt;作法25: 使用 super 來初始化父類別&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Implicit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="27"&gt;作法27: 優先選用公開屬性而非私有屬性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;為什麼私有屬性的語法不強制施行嚴格的可見性限制呢？&lt;ul&gt;
&lt;li&gt;We are all consenting adults here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選擇私有屬性，只會讓子類別的 overrides 或 extensions 動作變得更麻煩更容易出錯&lt;/li&gt;
&lt;li&gt;一般來說最好選擇使用 protected attributes&lt;/li&gt;
&lt;li&gt;唯一得認真考慮使用 private attributes 的時機，是擔心子類別會有名稱衝突的時候&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;第四章： 元類別與屬性&lt;/h2&gt;
&lt;h3 id="33-34-35"&gt;作法33, 34, 35&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Metaclass 的應用&lt;ul&gt;
&lt;li&gt;驗證 subclass 是否有被正確定義&lt;/li&gt;
&lt;li&gt;註冊 class 的存在&lt;/li&gt;
&lt;li&gt;在一個 class 被實際使用前，修改其特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;第五章： 共時與平行處理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;共時 (concurrency): 作業系統會在單一處理器快速切換多個執行程式&lt;/li&gt;
&lt;li&gt;平行處理 (parallelism): 真正在同一時間執行許多工作的處理方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="38-lock-data-race"&gt;作法38: 使用 Lock 來避免執行緒中的 data race&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果用 thread 去跑 &lt;code&gt;increment&lt;/code&gt; 會造成 data race&lt;br/&gt;
原因是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;實際上執行了三個 operation&lt;br/&gt;
等效於以下的程式碼&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'count'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;
&lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'count'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這時候必須在 &lt;code&gt;increment&lt;/code&gt; 加上 &lt;code&gt;Lock&lt;/code&gt; 避免 data race&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LockingCounter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="39-queue"&gt;作法39: 使用 Queue 來協調執行緒之間的工作&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;queue&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'consumer waiting'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'consumer done'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Producer putting'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Producer done'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="41-concurrentfutures"&gt;作法41: 考慮使用 concurrent.futures 來達成真正的平行處理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;from concurrent.futures import multiprocessing&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;藉由執行額外的直譯器作為 child processes。因為這些 child processes 跟主直譯器是分開的，所以它們的 GIL 也是分開的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 multiprocessing 的成本很高&lt;ul&gt;
&lt;li&gt;因為 main process 和 child processes 的溝通需要透過 serialization 和 deserialization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multiprocessing 適合&lt;ul&gt;
&lt;li&gt;isolated: 不必與程式其他部分共用狀態的 function&lt;/li&gt;
&lt;li&gt;high-leverage: 在 main process 和 child processes 只需要轉移少量的資料，就能進行大量計算的狀況&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multiprocessing 最好只用到 &lt;code&gt;concurrent.futures&lt;/code&gt; 的 built-in module 和 &lt;code&gt;ProcessPoolExecutor&lt;/code&gt; class&lt;ul&gt;
&lt;li&gt;其他部分過於複雜，建議避免&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;第六章： 內建模組&lt;/h2&gt;
&lt;h3 id="34-contextlib-with-statement-tryfinally"&gt;作法34: 考慮使用 contextlib 與 with statement 來建立可重用的 try/finally 行為&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;contextmanager&lt;/span&gt;


&lt;span class="nd"&gt;@contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;old_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getEffectiveLevel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;log_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'mylog'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'This is my message!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'This will not print'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yield&lt;/code&gt; 前是 contextmanager 的 &lt;code&gt;__enter__&lt;/code&gt; 會執行的部分，之後則是 &lt;code&gt;__exit__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="45-datetime-time"&gt;作法45: 本地時鐘使用 datetime 而非 time&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;搭配 &lt;code&gt;pytz&lt;/code&gt; module 來使用 &lt;code&gt;datetime&lt;/code&gt; built-in module 在不同時區的時間之間作轉換&lt;/li&gt;
&lt;li&gt;處理過程中，永遠用 UTC 來記錄，呈現給使用者前才轉換&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_6"&gt;第七章： 協作&lt;/h2&gt;
&lt;h3 id="49-function-class-module-docstrings"&gt;作法49: 為每個 function, class, module 撰寫 Docstrings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;General Docstring Guide&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用3個 double quotes (&lt;code&gt;"""&lt;/code&gt;) 開頭&lt;/li&gt;
&lt;li&gt;第一行應該是單一句子，來描寫用途&lt;/li&gt;
&lt;li&gt;接下來的文字含有使用者應該知道的作業細節&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;class&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;將重要的 public attribute 和 method 在 class level 的 docstring 寫出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;public function / method&lt;ul&gt;
&lt;li&gt;寫上 function 的特殊行為, argument 和 return value&lt;/li&gt;
&lt;li&gt;如果沒有 argument, return value，單句描述應該就夠了&lt;/li&gt;
&lt;li&gt;如果不會回傳任何東西，就不要提到 return value，而不是寫 "return None"&lt;/li&gt;
&lt;li&gt;如果有用到數目不定的 argument , keyword-argument，應該用 &lt;code&gt;*args&lt;/code&gt;, &lt;code&gt;**kwargs&lt;/code&gt;來描述&lt;/li&gt;
&lt;li&gt;如果有 default argument 都應該被提及&lt;/li&gt;
&lt;li&gt;如果是一個 generator，應該描述 iterate 時會 yield 什麼&lt;/li&gt;
&lt;li&gt;如果是 coroutine，應該描述&lt;ul&gt;
&lt;li&gt;會產生什麼&lt;/li&gt;
&lt;li&gt;預期從 yield 收到什麼&lt;/li&gt;
&lt;li&gt;什麼時候會停止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="50-package-module-api"&gt;作法50: 使用 package 來組織 module 並提供穩定的 API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python 可以透過 module 或 package 的 &lt;code&gt;__all__&lt;/code&gt; 特殊屬性來限制要暴露給 API 使用者的「表面積」&lt;ul&gt;
&lt;li&gt;如此即使重構也不會影響到使用者&lt;/li&gt;
&lt;li&gt;這在提供明確、穩定、給外部使用的 API 是個很好的做法&lt;/li&gt;
&lt;li&gt;如果只是在建置自己 module 間使用的 API 則是應該避免的做法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;盡可能使用 &lt;code&gt;from x import y&lt;/code&gt;，而不是 &lt;code&gt;import *&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import *&lt;/code&gt; 可能造成變數名稱複寫，而且不容易被 debug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="51-root-exception-api"&gt;作法51: 定義一個 root exception 來隔離呼叫者與 API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;為什麼要自定義一個 root exception?&lt;ul&gt;
&lt;li&gt;讓使用者知道他們以錯誤的用法使用了你的 API&lt;/li&gt;
&lt;li&gt;幫助你找出 API 中的 bug → 只要不是提出這些自定義的例外，就很可能是 bug 的所在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="52"&gt;作法52: 知道如何打破循環依存性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最好的做法是重構程式碼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但有時候清楚的劃分相當困難，或 cost 太高了，因此還是需要知道如何打破循環依存性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解法一： 重新安排匯入順序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這是一個比較不好的做法，違反了 PEP 8，且容易讓程式碼稍微的修改就造成問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解法二： import, configure and execute&lt;ul&gt;
&lt;li&gt;讓 module 只作定義 function, class 和 constant，不做實際執行&lt;/li&gt;
&lt;li&gt;每個 module 提供一個 configure 函式，讓所有 module 都完成匯入後才呼叫&lt;/li&gt;
&lt;li&gt;許多狀況下都能運作良好，並且讓 dependency injection 變得可能&lt;/li&gt;
&lt;li&gt;缺點&lt;ul&gt;
&lt;li&gt;很難重新組織程式碼架構&lt;/li&gt;
&lt;li&gt;因為物件的定義和 configuration 在不同的地方，造成程式碼更難閱讀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解法三： 動態匯入&lt;ul&gt;
&lt;li&gt;通常是最簡單的解法&lt;/li&gt;
&lt;li&gt;在 function/method 中才使用 import&lt;/li&gt;
&lt;li&gt;但一般來說來是最好避免， import 的 cost 並沒有小到可以被忽略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_7"&gt;第八章： 推出產品&lt;/h2&gt;
&lt;h3 id="57-pdb"&gt;作法57: 考慮使用 pdb 來進行互動式除錯&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在程式碼加入以下這行，就能讓程式執行到這一步時停下，開啟互動式的 python shell&lt;br/&gt;
&lt;code&gt;python
    import pdf; pdf.set_trace()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;檢視執行中的程式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bt&lt;/code&gt;: 印出目前 call stack 的 traceback&lt;/li&gt;
&lt;li&gt;&lt;code&gt;up&lt;/code&gt;: 上移 call stack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;down&lt;/code&gt;: 下移 call stack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;恢復程式的執行&lt;ul&gt;
&lt;li&gt;&lt;code&gt;step&lt;/code&gt;: 執行程式，直到下一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt;: 執行程式，直到遇到目前函式的下一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return&lt;/code&gt;: 執行程式，直到目前函式回傳&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt;: 執行程式，直到下一個 breakpoint 或 set_trace 再被呼叫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="58"&gt;作法58: 最佳化之前先進行效能評估&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;cProfile&lt;/code&gt; module 而非 &lt;code&gt;profile&lt;/code&gt; module&lt;ul&gt;
&lt;li&gt;因為對程式效能的影響較小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cProfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pstats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Stats&lt;/span&gt;

&lt;span class="c1"&gt;# some program to test&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;test&lt;/span&gt;

&lt;span class="n"&gt;profiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;profiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runcall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profiler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip_dirs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cumulative'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_stats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="59-tracemalloc"&gt;作法59: 使用 tracemalloc 來了解記憶體用量或是否有洩漏&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python 的預設實作 CPython 中，記憶體管理的方式是使用 reference counting&lt;/li&gt;
&lt;li&gt;Python 3.4 以後可以使用 tracemalloc&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tracemalloc&lt;/span&gt;
&lt;span class="n"&gt;tracemalloc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;time1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tracemalloc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take_snapshot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# some code that waste memory&lt;/span&gt;

&lt;span class="n"&gt;time2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tracemallo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take_snapshot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'lineno'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Note"></category></entry><entry><title>[Book] 電腦玩物站長的筆記思考術</title><link href="https://lee-w.github.io/posts/book/2019/01/think-through-note-taking" rel="alternate"></link><published>2019-01-07T22:50:00+08:00</published><updated>2019-01-07T22:50:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2019-01-07:/posts/book/2019/01/think-through-note-taking</id><summary type="html">&lt;p&gt;去年剛看完這本書的時候，實在覺得跟想像的很不一樣&lt;br/&gt;
直到現在終於有空好好的再翻過一遍，做一些紀錄了&lt;/p&gt;
&lt;p&gt;&lt;img alt="think-through-note-taking" src="/images/books/KnfcClD.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;去年剛看完這本書的時候，實在覺得跟想像的很不一樣&lt;br/&gt;
直到現在終於有空好好的再翻過一遍，做一些紀錄了&lt;/p&gt;
&lt;p&gt;&lt;img alt="think-through-note-taking" src="/images/books/KnfcClD.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;原本以為會是很明確的 xxx筆記法...如何在生活中實用之類的&lt;br/&gt;
不過這本書主要在講的「如何用記錄下來的東西帶起自己的行動」&lt;br/&gt;
至於怎麼做筆記（e.g., 什麼格式），就不是它的重點了&lt;/p&gt;
&lt;p&gt;雖然跟原先期待的不一樣，但我反而蠻喜歡這樣的內容&lt;br/&gt;
尤其我自己也有一套反省、紀錄生活的方式&lt;br/&gt;
翻著它就感嘆「原來還能這麼做啊」xD&lt;/p&gt;
&lt;p&gt;這本書大概不會是那種即刻有效的考試筆記術之類的&lt;br/&gt;
它所提的想法和技巧，都是需要時間慢慢融入自己的生活當中&lt;br/&gt;
但相信這些思考都會對如何管理自己的人生很有幫助的&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="_1"&gt;一、筆記技巧&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;記錄過去是為了改變未來，試著思考這些問題&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;為什麼會這樣？&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;我是怎麼想的？&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;我想要變成怎樣？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;筆記有用與否的重點在於&lt;strong&gt;「付諸行動」&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;筆記時，就要思考筆記怎麼使用&lt;ul&gt;
&lt;li&gt;我可能怎麼利用它&lt;/li&gt;
&lt;li&gt;我想利用它來達到什麼目的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;筆記的三層思考空間&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;行動層 →  我的行動&lt;ul&gt;
&lt;li&gt;我要採取什麼行動來改變&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;構思層 →  我的想法 (最精華的筆記內容)&lt;ul&gt;
&lt;li&gt;當下的想法&lt;/li&gt;
&lt;li&gt;列舉大綱&lt;/li&gt;
&lt;li&gt;收集到的資料重點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;封存層 →  我的紀錄 (雜亂但可能具有參考價值的思考過程和零散資料)&lt;ul&gt;
&lt;li&gt;參考資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="draw"&gt;DRAW 計畫筆記法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Destination 確認目標： 我想要達成的目標，達成是什麼樣的具體景象？&lt;/li&gt;
&lt;li&gt;Roadmap 畫出路線圖&lt;/li&gt;
&lt;li&gt;Action 列出行動步驟&lt;/li&gt;
&lt;li&gt;Warnings 評估風險&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;建立觀點的筆記練習&lt;/h3&gt;
&lt;p&gt;「寫作輸出」可以加速學習與成長、訓練獨立思考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;練習條列重點&lt;ul&gt;
&lt;li&gt;抓出看到或想到的重點&lt;/li&gt;
&lt;li&gt;用關鍵字句濃縮重點&lt;/li&gt;
&lt;li&gt;條列重點，並思考重點的排序&lt;/li&gt;
&lt;li&gt;跳開原文，嘗試用自己的話說明重點&lt;/li&gt;
&lt;li&gt;找出原文沒提到的重點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;練習窮舉範疇&lt;ul&gt;
&lt;li&gt;從一個事件，思考背後的現象&lt;/li&gt;
&lt;li&gt;窮盡現象背後所有的面相&lt;/li&gt;
&lt;li&gt;幫這個現象做分類定義&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;練習分析追問&lt;ul&gt;
&lt;li&gt;「為什麼...」, 「因為...」&lt;/li&gt;
&lt;li&gt;對習以為常的結論，重新練習追問為什麼？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;練習翻轉想法&lt;ul&gt;
&lt;li&gt;「如果... 會怎樣」, 「還有可能...」, 「為什麼不？」&lt;/li&gt;
&lt;li&gt;不同的前提會導出不同的結論 → 練習以不同角度觀看同一件事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;精煉過去的元經驗筆記&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不只是寫下經驗了什麼，而是拆解出經驗背後的結構、規則 → 重複利用、方便組合的元經驗 → 累積自己的 SOP 清單&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;二、筆記整理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;資料本身是死的，把它收納整理好，他更加無法行動&lt;ul&gt;
&lt;li&gt;除非不是整理資料，而是納入真正行動的工作流程中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果稍後閱讀違背了「好好讀完一篇文章」的本意，而變成「收集現在沒時間讀的文章」的工具，那長久下來就會變成一個問題「為什麼我總在沒時間讀的時候看文章？然後不斷收集沒時間讀的文章？」&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;整理是要處理，而不是收集用不到的東西&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;學習經驗背後的邏輯、方法，而非照著經驗的結果做&lt;/li&gt;
&lt;li&gt;對於新工具先體驗，不需要搞懂&lt;ol&gt;
&lt;li&gt;先試試看&lt;/li&gt;
&lt;li&gt;透過多試錯理解工具或方法背後設計的意義&lt;/li&gt;
&lt;li&gt;試錯後回頭看文章和說明更能理解上面的意思 → 體驗後，才能加快學習與研究&lt;/li&gt;
&lt;li&gt;嘗試後開口問，才有辦法問出有價值的問題&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_6"&gt;三、時間筆記&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;時間管理不是完成所有事情，而是選擇重要的事情完成&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_7"&gt;處理壓力&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;承認有壓力，看到自己的困境&lt;/li&gt;
&lt;li&gt;認知到壓力是情緒，不是現實&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_8"&gt;清空大腦的筆記法&lt;/h3&gt;
&lt;p&gt;讓煩惱「儲存在外部清單」，也讓期待可以被「客觀看見」&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把雜事列成清單&lt;/li&gt;
&lt;li&gt;整理清單，給雜事不同的權重與判斷&lt;/li&gt;
&lt;li&gt;把焦慮和壓力，置換成下一步行動&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_9"&gt;克服拖延&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;列待辦清單時，之所以做不到，常常是因為我們寫下了「困難到我不想去行動」的任務&lt;/li&gt;
&lt;li&gt;什麼時候不會有拖延?&lt;ul&gt;
&lt;li&gt;很想做的事&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;簡單又立即有成效的事&lt;/strong&gt; ← &lt;strong&gt;把下一步行動變得簡單又立即有成果&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;截止期限快到，而感到迫切的事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="135"&gt;每日 135 專注法則&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;讓每天的代辦清單控制在這個數量以下&lt;ul&gt;
&lt;li&gt;一件重要任務&lt;/li&gt;
&lt;li&gt;三件中等任務&lt;/li&gt;
&lt;li&gt;五件小型瑣事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;訂定切合實際的目標，如果多餘的時間完成更多事，也能提升自己的成就感&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_10"&gt;每週重新上膛的子彈計畫&lt;/h3&gt;
&lt;p&gt;每個週末一個小時，做出下週行動清單&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;反省前一週的行動&lt;ul&gt;
&lt;li&gt;不能只是記錄，而是找出問題，進而找到下週準備怎麼解決這個問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;清空大腦&lt;/li&gt;
&lt;li&gt;檢查一遍下週行事曆&lt;ul&gt;
&lt;li&gt;事先確認下週已經安排好的重點工作&lt;/li&gt;
&lt;li&gt;從下週已安排好的部分，得知下週可運用的時間籌碼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;決定下週行動清單&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;任務清單是一回事，決定要採取的行動清單才是重要的&lt;/li&gt;
&lt;li&gt;下週有限的時間籌碼，要投注到哪些可以自我實現的標的物上？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_11"&gt;筆記如何幫你保持專注力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有效地專注方式&lt;ul&gt;
&lt;li&gt;列好清單&lt;/li&gt;
&lt;li&gt;挑選重要的事&lt;/li&gt;
&lt;li&gt;拆解成可以立刻執行的步驟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常常無效的專注方式&lt;ul&gt;
&lt;li&gt;排出長專注時間&lt;/li&gt;
&lt;li&gt;挑選困難的事&lt;/li&gt;
&lt;li&gt;跳過零碎時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_12"&gt;四、人生筆記&lt;/h2&gt;
&lt;h3 id="kpt"&gt;不問優缺點的 KPT 日記法&lt;/h3&gt;
&lt;p&gt;你需要看到的不是優缺點，而是下一次怎麼做會更好&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;KPT&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep: 歸納有哪些部分是下一次要繼續維持的&lt;/li&gt;
&lt;li&gt;Problem： 找出哪些部分是這一次還有疑問的，下一次要解決&lt;/li&gt;
&lt;li&gt;Try： 提出下一次可以改進的測試行動&lt;ul&gt;
&lt;li&gt;並非構想真正的解決辦法，因為事實上我們通常不知道哪個才是最佳解法，唯有「先測試才知道」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 KPT 進行個人反省日記&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep: 覺得自己應該繼續維持的習慣&lt;/li&gt;
&lt;li&gt;Problem: 反省可能有問題的某些習慣與步驟&lt;/li&gt;
&lt;li&gt;Try: 思考如何解決問題的具體方法，並在下一次實際測試看看&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_13"&gt;建立你的技能學習系統&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;收集&lt;ul&gt;
&lt;li&gt;有了念頭就收集起來，可以增加學習的可能性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;行動&lt;ul&gt;
&lt;li&gt;針對這個主題的學習，必須採取什麼行動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;反省&lt;ul&gt;
&lt;li&gt;記錄學習的過程，嘗試改進的行動&lt;/li&gt;
&lt;li&gt;額外加上「下一次想要怎麼改進或變化」的待辦清單&lt;/li&gt;
&lt;li&gt;把學習過程中的「最好成果」記錄下來 → 把最好的流程在反覆地看筆記練習中變成習慣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_14"&gt;讓大腦更開心的快樂筆記&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;記錄那些美好時光&lt;ul&gt;
&lt;li&gt;當你的筆記本中，有這些讓人開心的筆記，那麼每次打開筆記準備開始工作時，會擁有更好的心情&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;待辦清單裡不要只有工作&lt;ul&gt;
&lt;li&gt;在自己的時間排程中「有了生活的位置」，不再只是工作，把人生的主導權拿回自己手上&lt;/li&gt;
&lt;li&gt;讓興趣真的被實踐，而不只是口頭說說&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_15"&gt;筆記不重要的事&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;寫下念頭：讓那些現在不做的事，以後有機會做&lt;/li&gt;
&lt;li&gt;寫下想要擁有的經驗&lt;/li&gt;
&lt;li&gt;寫下臨時的、想到一半的點子，期待它成長&lt;/li&gt;
&lt;li&gt;寫下那些現在還無法回答的問題，記下來給未來的自己&lt;/li&gt;
&lt;li&gt;寫下生活中的好事，讓筆記不沈重&lt;/li&gt;
&lt;li&gt;寫下感動自己的方法或東西，累積自己的創意箱&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-"&gt;相信自己可以改變 - 元經驗模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;常常檢視自己的習慣、行為模式&lt;/li&gt;
&lt;li&gt;找出裡面其他可能性&lt;/li&gt;
&lt;li&gt;用行動去「實驗」這些可能性&lt;/li&gt;
&lt;li&gt;把更好的、獲得確認的可能性，變成自己的新行動&lt;/li&gt;
&lt;li&gt;最後會發現自己原本沒有發現的新世界&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_16"&gt;每日不一樣的練習筆記&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;強迫不一樣的新發現&lt;ul&gt;
&lt;li&gt;其實真的有很多豐富的選擇「已經存在」看似一成不變的生活中&lt;ul&gt;
&lt;li&gt;只是我們容易被平常的慣性，或外在條件擔心害怕，而掉入了選擇的侷限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Note-Taking"></category></entry><entry><title>[Note] Clean Code</title><link href="https://lee-w.github.io/posts/tech/2018/11/clean-code" rel="alternate"></link><published>2018-11-16T17:08:00+08:00</published><updated>2020-10-08T16:12:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2018-11-16:/posts/tech/2018/11/clean-code</id><summary type="html">&lt;p&gt;既然都把 The Clean Coder 做完了&lt;br/&gt;
就順便把原本在 GitBook 的 The Clean Code 一起搬過來好了&lt;/p&gt;
&lt;p&gt;&lt;img alt="clean code" src="/images/books/clean code.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;既然都把 The Clean Coder 做完了&lt;br/&gt;
就順便把原本在 GitBook 的 The Clean Code 一起搬過來好了&lt;/p&gt;
&lt;p&gt;&lt;img alt="clean code" src="/images/books/clean code.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;blockquote&gt;
&lt;p&gt;Lee-W @ 2020-10-08&lt;br/&gt;
隔了兩年又再回來翻這本書&lt;br/&gt;
這次除了打算把後面的章節全部看完外，也會重新把筆記順過一次&lt;/p&gt;
&lt;p&gt;第四次把前十章看完後，感到一些原本似懂非懂的概念，變得理所當然&lt;br/&gt;
但依然會對巧妙的地方感到讚嘆&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="1"&gt;第1章：無暇的程式碼&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LeBlanc's Law: 待會而等於永不&lt;ul&gt;
&lt;li&gt;待會兒再回來整理程式，等於讓程式一直限於髒亂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;髒亂的程式只會讓開發速度更慢。&lt;strong&gt;趕上期限的方法是隨時都確保程式儘可能的乾淨&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;What is Clean Code?&lt;ul&gt;
&lt;li&gt;只做好一件事&lt;/li&gt;
&lt;li&gt;可以被原作者以外的開發者閱讀與擴充的&lt;/li&gt;
&lt;li&gt;Beck's rules for simple code&lt;ul&gt;
&lt;li&gt;通過所有測試&lt;/li&gt;
&lt;li&gt;沒有重複的程式碼&lt;/li&gt;
&lt;li&gt;充份表達系統設計的構思&lt;/li&gt;
&lt;li&gt;具有最少的 entities (e.g., class, methods, functions, and etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每一次修改程式碼之後，都得讓程式碼變得比修改之前再更乾淨&lt;ul&gt;
&lt;li&gt;童子軍原則: 每次你到過的營地，離開後要比之前更乾淨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2"&gt;第2章：有意義的命名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Variables, methods, classes 要能解釋他們為什麼在這、做什麼用和怎麼使用它&lt;/li&gt;
&lt;li&gt;變數名稱要唸得出來 (e.g., &lt;del&gt;genYMDHMS&lt;/del&gt;)&lt;/li&gt;
&lt;li&gt;較小的名稱如果能表達足夠的意義，通常比較長的名稱好，儘量減少再命名上不必要的文字&lt;/li&gt;
&lt;li&gt;不要用變數型態作為變數名稱&lt;ul&gt;
&lt;li&gt;e.g., &lt;code&gt;accountList&lt;/code&gt; → &lt;code&gt;accountGroup&lt;/code&gt; or &lt;code&gt;accounts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要區別名稱，用&lt;strong&gt;讀者能分辨的區別方式&lt;/strong&gt;！！！&lt;ul&gt;
&lt;li&gt;e.g.,&lt;ul&gt;
&lt;li&gt;&lt;del&gt;moneyAmount&lt;/del&gt; → &lt;code&gt;money&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;customerInfo&lt;/del&gt; → &lt;code&gt;customer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命名的長度應該要與 scope 大小對應&lt;ul&gt;
&lt;li&gt;一個常用到的變數或常數，最好給它一個容易被搜尋的名子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;詞性&lt;ul&gt;
&lt;li&gt;class, object → 名詞&lt;/li&gt;
&lt;li&gt;method → 動詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;替單一的概念選一個詞&lt;ul&gt;
&lt;li&gt;e.g., get, fetch, retrieve 混用是一件很糟的事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免用雙關語，或可以表達兩個意思的字&lt;ul&gt;
&lt;li&gt;e.g., 加入一個新的值 : &lt;del&gt;add&lt;/del&gt; → append, insert&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3"&gt;第3章：函式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;寫一個好的函式有兩個守則&lt;ul&gt;
&lt;li&gt;簡短&lt;/li&gt;
&lt;li&gt;比簡短來得更簡短&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;準則&lt;ul&gt;
&lt;li&gt;每行應該少於150字，函式應該少於20行&lt;/li&gt;
&lt;li&gt;但最重要的是，&lt;strong&gt;每個函式都要能清楚的告訴你本身的意圖，並帶領你到下個函式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;別去害怕取較長的函數名稱&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;長但具描述性質 &amp;gt; 註解 &amp;gt; 短而無法理解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;降層準則： 由上而下閱讀的程式&lt;/li&gt;
&lt;li&gt;Don't repeat yourself at any cost!!!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; 這些敘述最好都只有一行，而那行通常是函式呼叫&lt;ul&gt;
&lt;li&gt;避免巢狀結構，&lt;strong&gt;函式內的縮排不該超過一或兩層&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函式應該只做好做一件事情&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;做一件事的函式不應該被合理的分成不同的段落 (e.g., 宣告區, 初始區... and etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函式要能&lt;strong&gt;做好某件事&lt;/strong&gt;，或&lt;strong&gt;回答某個問題&lt;/strong&gt;，而這代表&lt;strong&gt;兩者不該同時發生！！！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"bob"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;......&lt;/span&gt;

&lt;span class="c1"&gt;// refactored&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"userName"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;setAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"userName"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"bob"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_1"&gt;錯誤處理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用例外處理取代錯誤碼回傳&lt;ul&gt;
&lt;li&gt;而錯誤處理是會混淆程式結構的，比較好的作法就是把 try catch 區塊提出來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deletePage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;E_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;E_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeKey&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;E_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"page deleted"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"configKey not delete"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"deleteReference from registry failed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"delete failed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// refactored&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;deletePage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;configKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeKey&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// even more refactored&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;deletePageAndAllReferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;logError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deletePageAndAllReferences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;deletePage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;configKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeKey&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;logError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_2"&gt;參數&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;函式最好是不使用到參數，可以的話不要超過3個&lt;ul&gt;
&lt;li&gt;除非有非常特殊的理由，否則都不該超過3個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;別傳flag參數(e.g. isSutie)進入函式&lt;/strong&gt;，那代表這個函式一定做超過一件事！！！&lt;/li&gt;
&lt;li&gt;單一參數函式&lt;ul&gt;
&lt;li&gt;問與這個參數有關的問題 (e.g., &lt;code&gt;fileExists("MyFile")&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;對這個參數進行操作，並且 &lt;strong&gt;回傳&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;事件，利用參數去改變系統的狀態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2 ~ 3 個參數&lt;ul&gt;
&lt;li&gt;注意參數順序性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用建立物件的方式，減少函式參數的數量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Circle&lt;/span&gt; &lt;span class="nf"&gt;makeCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// refactored&lt;/span&gt;
&lt;span class="n"&gt;Circle&lt;/span&gt; &lt;span class="nf"&gt;makeCirecle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;radiue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;避免使用輸出型參數，這十分的讓人困惑&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;appendFooter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// refactored&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendFooter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_3"&gt;如何寫出這樣函式？？？&lt;/h3&gt;
&lt;p&gt;一直修改和重構，直到足夠精簡&lt;br/&gt;
不用一開始就要寫到最精簡，實際上那也是辦不到的&lt;/p&gt;
&lt;h2 id="4"&gt;第4章：註解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要替糟糕的程式碼寫註解 ─ 重寫它！！！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;即使是適當的使用註解，也只是用來彌補程式碼表達意思的失敗&lt;ul&gt;
&lt;li&gt;每次要寫註解時，先思考是否能&lt;strong&gt;直接用程式碼表達&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;註解只應該描述附近的程式碼，不要在區域性註解內放入系統全域資訊&lt;/li&gt;
&lt;li&gt;替只做一件事的小函式選一個好名稱，多半比將註解寫在函式標頭優雅&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;有用的註解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供資訊的註解&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;//format matched kk:mm:ss EEE, MMM dd, yyyy&lt;/span&gt;
&lt;span class="n"&gt;Pattern&lt;/span&gt; &lt;span class="n"&gt;tiMatcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"\\d*:\\d*:\\d* \\w*, \\w* \\d*, \\d*"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;對後果的告誡： 警告會出現某種特殊後果的註解&lt;/li&gt;
&lt;li&gt;TODO&lt;/li&gt;
&lt;li&gt;公開 API 中的 Javadoc&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;糟糕的註解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大部分的註解&lt;/li&gt;
&lt;li&gt;多餘的註解： 沒比程式碼本身透露更多資訊的註解&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;每個函式，每個變數都該有註解來說明&lt;/del&gt;。&lt;strong&gt;不，別這麼做&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;把暫時無用的程式碼註解掉並留著，是很惱人的 → 版本控制會幫我們記下它&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="5"&gt;第5章：編排&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;選擇一些簡單的縮排規則，並持續的運用它&lt;ul&gt;
&lt;li&gt;如果在一個團隊，所有成員都該依循著一套統一的編排規則&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;團隊合作時，事先決定編排方式是值得的&lt;ul&gt;
&lt;li&gt;該在哪裡放括號&lt;/li&gt;
&lt;li&gt;縮排寬度多少&lt;/li&gt;
&lt;li&gt;如何命名變數、類別、方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;編排是一種溝通方式，可以嚴重影響可讀性，所以我們要很重視它&lt;/li&gt;
&lt;li&gt;垂直邊排： 一份程式檔大概多長比較好？&lt;ul&gt;
&lt;li&gt;一份重要的大型專案也可以在大多數程式檔都只有200行左右的情況下完成&lt;/li&gt;
&lt;li&gt;這沒有硬性規定。但要知道&lt;strong&gt;簡短的程式檔總是比大型的程式檔容易理解&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;變數應該被宣告在接近它被使用的地方&lt;ul&gt;
&lt;li&gt;區域變數應該在函式的最上方被宣告&lt;/li&gt;
&lt;li&gt;迴圈的控制變數應該在回圈敘述內宣告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_6"&gt;函式間的編排&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果一個函式呼叫了另一個函式，這個函式最好放在被呼叫函式的上方&lt;/li&gt;
&lt;li&gt;概念高度相似的函式也應該垂直的放在一起&lt;ul&gt;
&lt;li&gt;也許是類似的命名或相同工作的變異版本，就算沒相互呼叫，還是應該放在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;談到了垂直的寬度後，那水平的寬度呢?&lt;ul&gt;
&lt;li&gt;雖然我們喜歡較短的程式碼，但只要是&lt;strong&gt;不需要用到捲軸捲到右方就可以稱為適當的寬度&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有時候if, while或簡單的函式，可以被縮減為一行，讓我們違反一般的縮排規則，&lt;strong&gt;不建議這麼做&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="c1"&gt;//better&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_7"&gt;使用空行、空白&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每一段程式碼都代表一個完整思緒，而我們用空行來區隔它們&lt;ul&gt;
&lt;li&gt;而如果程式碼們是相關的，它們就該是垂直緊密的&lt;/li&gt;
&lt;li&gt;相似的概念應該要放在同一份檔案中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們用水平的空白來區分高度和低度相關的概念，也可以作為強調用，下面的程式碼是書中一個很棒的例子&lt;ul&gt;
&lt;li&gt;注意到return那行，這裡用空格來強調運算子的優先權&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Quadratic&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;root1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;determinant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;determinant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;determinant&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;......&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="6"&gt;第6章：物件及資料結構&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;資料結構容易新增函式，而物件容易增加新類別。&lt;/strong&gt; 反之亦然&lt;/li&gt;
&lt;li&gt;模組不該知道它操作的物件的內部操作&lt;/li&gt;
&lt;li&gt;別使用一連串的程式呼叫&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;outputDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctxt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getScratchDir&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePaty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;//refactored&lt;/span&gt;
&lt;span class="n"&gt;Option&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctxt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;scratchDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getScractchDir&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;outputDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scratchDir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="7"&gt;第7章：錯誤處理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;例外處理應該要能提供&lt;strong&gt;有用的錯誤訊息&lt;/strong&gt;，&lt;ul&gt;
&lt;li&gt;e.g, 哪裡發生錯誤、錯誤型態是什麼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;別回傳 null，試著拋出例外事件是更好的作法&lt;ul&gt;
&lt;li&gt;函式回傳 null 已經夠糟了，但傳遞 null 進去更是糟糕透頂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wrapper: 從呼叫者的角度定義例外class -&amp;gt; 減少依賴&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wrapper Example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// original&lt;/span&gt;
&lt;span class="n"&gt;ACMEPort&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ACMEPort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DeviceResponseException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;reportPortError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Device response exception"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ATM1212UnlockedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;reportPortError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ATM1212UnlockedException"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HMXError&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;reportPortError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Device response exception"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// refactored&lt;/span&gt;
&lt;span class="n"&gt;LocalPort&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LocalPort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PortDeviceFailure&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;reportPortError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LocalPort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ACMEPort&lt;/span&gt; &lt;span class="n"&gt;innerPort&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;LocalPort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;portNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;innerPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ACMEPort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;innerPort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DeviceResponseException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PortDeviceFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ATM1212UnlockedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PortDeviceFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GMXError&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PortDeviceFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="8"&gt;第8章：邊界&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;學習型測試： 不在產品程式（production）裡實驗新的東西，而是另外寫測試程式，來了解第三方軟體&lt;ul&gt;
&lt;li&gt;學習型測試不會花太多額外時間（因為原本就要研究 API），而且能用來&lt;strong&gt;確認第三方軟體是否能照我們預期的執行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果沒有這種&lt;strong&gt;邊界測試&lt;/strong&gt;來減輕版本更新時的整合負擔，我們&lt;strong&gt;只能一直停留在舊的版本&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免我們的程式過度的使用第三方軟體的特殊之處，最好是依靠在可以控制的程式之上。免得到最後反而受到第三方軟體的控制&lt;/li&gt;
&lt;li&gt;使用尚未存在的程式（e.g., 尚未開定義好）&lt;ul&gt;
&lt;li&gt;自行定義介面，並用 adapter 封裝與 API 的互動&lt;ul&gt;
&lt;li&gt;額外的好處是如果 API 升級，也只需要改動 adapter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="9"&gt;第9章：單元測試&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;為什麼要寫測試？&lt;ul&gt;
&lt;li&gt;測試讓程式保有彈性&lt;/li&gt;
&lt;li&gt;不用怕修改程式會造成程式結果不如預期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;測試程式跟產品程式一樣重要，一樣需要整潔&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可讀性&lt;/strong&gt;造就了整潔的測試程式&lt;/li&gt;
&lt;li&gt;但是測試程式並不需要產品程式一樣的有效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整潔測試程式的 5 個原則 F.I.R.S.T.&lt;ol&gt;
&lt;li&gt;Fast: 能快速的被執行&lt;/li&gt;
&lt;li&gt;Independent: 測試程式不該相互依賴&lt;/li&gt;
&lt;li&gt;Repeatable: 可以在任何環境重複執行&lt;/li&gt;
&lt;li&gt;Self-Validating: 輸出 boolean ，你不該手動比較兩個檔案才知道有沒有通過測試&lt;/li&gt;
&lt;li&gt;Timely: 單元測試要在恰好能使其通過的產品程式&lt;strong&gt;之前&lt;/strong&gt;不久撰寫&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;BUILD-OPERATE-CHECK&lt;ol&gt;
&lt;li&gt;建立測試資料&lt;/li&gt;
&lt;li&gt;操作測試資料&lt;/li&gt;
&lt;li&gt;檢查「操作測試資料」後的結果是否如預期&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;del&gt;一個測試只能有一個assert&lt;/del&gt; → &lt;strong&gt;一個測試只測試一個概念&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;TDD (Test Driven Development) 三大法則&lt;ol&gt;
&lt;li&gt;在撰寫一個單元測試前，不可撰寫任何產品程式&lt;/li&gt;
&lt;li&gt;只撰寫剛好無法通過的單元測試，不能編譯也算無法通過&lt;/li&gt;
&lt;li&gt;只撰寫剛好能通過當前測試的產品程式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="10"&gt;第10章：類別&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Java的慣例&lt;ul&gt;
&lt;li&gt;類別以變數開頭&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public static final&lt;/code&gt; → &lt;code&gt;private static&lt;/code&gt; → &lt;code&gt;private&lt;/code&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;code&gt;public&lt;/code&gt; (幾乎很少有理由要用到)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;public 函式緊跟在變數&lt;/li&gt;
&lt;li&gt;private 的工具函式，會跟在呼叫它的函式後&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不用過度執著於封裝，有時候為了讓測試程式存取， protected 是必要的&lt;/li&gt;
&lt;li&gt;設計程式時，一次只專注在「讓程式運作」或「讓程式整潔」之一，而兩者是同樣重要的&lt;/li&gt;
&lt;li&gt;系統應該要由很多小的 class 組成，而不是少數的大 class 組成&lt;/li&gt;
&lt;li&gt;我們架構的系統，在未來想新增或修改功能時，應該要儘可能不動到其他程式碼&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;開放閉合原則&lt;/strong&gt;： 類別應該要對擴充有開放性，對修改有封閉性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相依性反向原則&lt;/strong&gt;： 類別應該要相依於抽象概念，而不是相依在具體細節&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;職責&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;class 除了簡短還是要簡短&lt;ul&gt;
&lt;li&gt;在函式計算行數，class算的是&lt;strong&gt;職責的數量&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;class的命名要能足夠描寫他的職責&lt;ul&gt;
&lt;li&gt;如果無法取個明確的名稱，這個 class 可能就太大了&lt;/li&gt;
&lt;li&gt;模稜兩可的名稱，代表 class 可能包含愈多的職責，而這是我們不希望的&lt;/li&gt;
&lt;li&gt;用 25 個字詞為這個 class 寫出簡短的描述，而不使用到模糊的字眼，這樣的 class 就是職責數量恰當&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;單一職責原則&lt;/strong&gt;： 一個 class 或 module 應該有也只能有一個修改的理由&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;凝聚性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;class 只應該要有少量的實體變數， class 的每個方法都應該操作一個或更多這些變數&lt;/li&gt;
&lt;li&gt;不用也不太可能產生最大凝聚性類別&lt;ul&gt;
&lt;li&gt;但當凝聚性增加，就代表方法和變數結合成一個邏輯的整體，這是我們所希望的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;class 累積越來越多實體變數，但只有少數函式操作著他們，就會開始喪失凝聚性&lt;ul&gt;
&lt;li&gt;而這就是應該拆開 class 的時候了！！！&lt;/li&gt;
&lt;li&gt;不用重新撰寫程式，而是應該改變它&lt;ul&gt;
&lt;li&gt;先寫好一套驗證的測試程式，一次一個地改變&lt;/li&gt;
&lt;li&gt;每一次變動都重新驗證是否如預期執行&lt;/li&gt;
&lt;li&gt;重構完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Note"></category><category term="Software Engineering"></category></entry><entry><title>[Note] The Clean Coder</title><link href="https://lee-w.github.io/posts/tech/2018/11/the-clean-coder" rel="alternate"></link><published>2018-11-16T15:03:00+08:00</published><updated>2018-11-16T15:03:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2018-11-16:/posts/tech/2018/11/the-clean-coder</id><summary type="html">&lt;p&gt;過了幾年又重新看過這本書才慢慢能感受到裡面說的&lt;br/&gt;
Uncle Bob 的書真的每個階段看都會有很不一樣的感覺&lt;br/&gt;
很值得買回來收 xD&lt;/p&gt;
&lt;p&gt;&lt;img alt="Clean Coder" src="/images/books/5a0LzcS.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;過了幾年又重新看過這本書才慢慢能感受到裡面說的&lt;br/&gt;
Uncle Bob 的書真的每個階段看都會有很不一樣的感覺&lt;br/&gt;
很值得買回來收 xD&lt;/p&gt;
&lt;p&gt;&lt;img alt="Clean Coder" src="/images/books/5a0LzcS.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;幾年前第一次看這本書的時候&lt;br/&gt;
寫程式大多只是交作業，頂多就跟其他的同學一起交大一點的作業或開發一些小專案&lt;br/&gt;
能不要被雷（或不要雷別人）就很不錯了&lt;br/&gt;
當時記錄下的摘要也就沒什麼內容（&lt;a href="http://lee-w.github.io/posts/book/2015/01/clean-coder/"&gt;[Book] Clean Coder&lt;/a&gt;）&lt;br/&gt;
到了現在。加減算是做過稍微大一點的專案，也帶過一些小專案&lt;br/&gt;
重新看過這本書，就慢慢理解了一點 Uncle Bob 想說的&lt;/p&gt;

&lt;h2 id="_1"&gt;關於本書&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;什麼是軟體專業人士？&lt;/li&gt;
&lt;li&gt;軟體專業人士如何行事？&lt;/li&gt;
&lt;li&gt;軟體專業人士如何處理衝突，「應對」緊湊的開發進度表？如何和不切實際的管理人員打交道？&lt;/li&gt;
&lt;li&gt;軟體專業人士何時應該說「不」？怎麼說？&lt;/li&gt;
&lt;li&gt;軟體專業人士如何「應對」壓力？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;第一章：專業主義&lt;/h2&gt;
&lt;h3 id="_3"&gt;擔當責任&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;專業人士如果犯了錯，只好&lt;strong&gt;自己&lt;/strong&gt;收拾殘局&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;專業主義就代表著&lt;strong&gt;「擔當責任」&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你說的沒錯。軟體發展太複雜了，不可能沒什麼Bug。但很不幸，這個理由並不能為你開脫。人體太複雜了，不可能完全理解，但醫生仍誓言不傷害病人。如果他們不拿人體的複雜性做託辭，我們又怎麼能拿上述理由，開脫自已的責任呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程式難免出現 bug ，但這不意味著你不用對他們負責；沒人能寫出完美的軟體，但這不代表你不用對不完美負責。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每次 QA 找出問題時，或者更糟糕的是「用戶找出問題」時，你都該震驚羞愧，並決心以此為戒。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;自動化測試&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;寫一些隨時都能執行的「單元測試」，然後盡可能地多執行&lt;/li&gt;
&lt;li&gt;要測試多少程式碼呢？ → &lt;strong&gt;當然是全部！全部都要測！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;但有些程式碼不是很難測嗎？&lt;ul&gt;
&lt;li&gt;沒錯。但之所以難測，是因為設計時沒考慮如何測試&lt;/li&gt;
&lt;li&gt;唯一的解決辦法就是要設計&lt;strong&gt;「易於測試的程式碼」&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;結構&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;想證明軟體易於修改，唯一的辦法就是「做些實際的修改」&lt;ul&gt;
&lt;li&gt;如果發現這些修改不如想像中簡單，就應該改進設計，讓後續的改變更簡單&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_6"&gt;職業道德&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;你應該計畫每週的60小時中&lt;ul&gt;
&lt;li&gt;40小時給雇主&lt;/li&gt;
&lt;li&gt;20小時給自己 （大約每天 3 小時）&lt;ul&gt;
&lt;li&gt;不為雇主工作，為自己的職業發展工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_7"&gt;了解你的領域&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每個專業軟體發展人員&lt;strong&gt;至少&lt;/strong&gt;必須精通的事項&lt;ul&gt;
&lt;li&gt;Design patterns&lt;ul&gt;
&lt;li&gt;GOF&lt;/li&gt;
&lt;li&gt;POSA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Design principles&lt;ul&gt;
&lt;li&gt;SOLID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Methods&lt;ul&gt;
&lt;li&gt;XP&lt;/li&gt;
&lt;li&gt;Scrum&lt;/li&gt;
&lt;li&gt;Lean&lt;/li&gt;
&lt;li&gt;Kanban&lt;/li&gt;
&lt;li&gt;Waterflow&lt;/li&gt;
&lt;li&gt;結構化分析&lt;/li&gt;
&lt;li&gt;結構化設計&lt;/li&gt;
&lt;li&gt;and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disciplines&lt;ul&gt;
&lt;li&gt;TDD&lt;/li&gt;
&lt;li&gt;物件導向設計&lt;/li&gt;
&lt;li&gt;結構化程式設計&lt;/li&gt;
&lt;li&gt;CI&lt;/li&gt;
&lt;li&gt;Pair Programming&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Artifacts&lt;ul&gt;
&lt;li&gt;UML&lt;/li&gt;
&lt;li&gt;DFD (Data Flow Diagram)&lt;/li&gt;
&lt;li&gt;結構圖&lt;/li&gt;
&lt;li&gt;Petri net&lt;/li&gt;
&lt;li&gt;狀態遷移圖表&lt;/li&gt;
&lt;li&gt;流程圖&lt;/li&gt;
&lt;li&gt;決策表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;學習&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自我學習&lt;ul&gt;
&lt;li&gt;讀書, 關注 blog, tweets, 參加 conference, 訪問用戶群, 參與讀書會 and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;協作&lt;/li&gt;
&lt;li&gt;輔導&lt;ul&gt;
&lt;li&gt;專業人士會「視輔導新人為己任」，他們不會放任未經輔導的新手胡打亂撞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;了解業務領域&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果撰寫財務系統，你就該對財務領域有所了解&lt;ul&gt;
&lt;li&gt;你未必要成為該領域的專家，但你仍需要勤勉，付出相當的努力來認識業務領域。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最不專業的做法是，只簡單地按照規格說明來撰寫程式碼，但卻對於那些業務為什麼需要做那樣的規格定義不求甚解。相反的，你應該對該領域有所瞭解，能辨別、執行規格說明書的錯誤&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_10"&gt;第二章：説「不」&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Do or do not ! There is no try!&lt;br/&gt;
—— Yoda&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;專業人士敢於說明真相而不屈從於權勢。專業人士有勇氣對他們的經理說「不」。&lt;ul&gt;
&lt;li&gt;難道不該照你老闆說的去做嗎？&lt;ul&gt;
&lt;li&gt;不該。只要你是一名專業人士，那就不該&lt;/li&gt;
&lt;li&gt;奴隸沒有權利說「不」。勞工或許也對說「不」有所顧慮。但是專業人士應該懂得說「不」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你的經理要求你在明天之前完成登入頁面，這就是他在追求和捍衛的一個目標，那是他的工作職責。如果你明知第二天之前不可能完成登入頁面，嘴上卻說「好的，我會試試看」，那麼便是你失職了。這時候，唯一盡責的方式便是說「不，這不可能」&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可能得最好結果&lt;/strong&gt;是你和你的經理共同追求的目標。&lt;strong&gt;最關鍵的是要找到那個「共同目標」，而這往往有賴於「協商」。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「為什麼」重要嗎？&lt;ul&gt;
&lt;li&gt;如果你的主管恰好有「技術背景」和「好脾氣」去傾聽理解，這些解釋也許有用&lt;/li&gt;
&lt;li&gt;另一種狀況是，主管會不認同這樣的結論或做法不對，可能會說出不用做完整的測試和程式碼審核&lt;ul&gt;
&lt;li&gt;有時候，提供太多細節，只會變成一個口令一個動作的管理方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_11"&gt;第三章：説「是」&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作出承諾包含三步驟&lt;ol&gt;
&lt;li&gt;口頭上說自己將會去做&lt;/li&gt;
&lt;li&gt;心裡認真對待自己所做出的能諾&lt;/li&gt;
&lt;li&gt;真的付諸行動去做&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_12"&gt;識別「缺乏承諾」的徵兆&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;need / should&lt;ul&gt;
&lt;li&gt;我們需要把這工作做完&lt;/li&gt;
&lt;li&gt;我需要減肥&lt;/li&gt;
&lt;li&gt;有人應當負責去推動這件事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hope / wish&lt;ul&gt;
&lt;li&gt;希望明天我能完成這個任務&lt;/li&gt;
&lt;li&gt;希望改天我們能見宴嗎&lt;/li&gt;
&lt;li&gt;但願我有時間做這件事&lt;/li&gt;
&lt;li&gt;但願電腦更快點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Let's (而不是「讓我」)&lt;ul&gt;
&lt;li&gt;讓我們回頭見&lt;/li&gt;
&lt;li&gt;讓我們把這工作做完&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_13"&gt;真正的承諾聽起來是怎樣的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;我將在...之前...&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;e.g., 我將在星期二之前完成這個任務&lt;/li&gt;
&lt;li&gt;你對自己會做某件事做了清晰的事實陳述，而且還明確說明了完成期限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;之所以沒成功，是因為我寄望於某某人去做這件事&lt;ul&gt;
&lt;li&gt;你只能承諾自己能&lt;strong&gt;完全掌控&lt;/strong&gt;的事&lt;/li&gt;
&lt;li&gt;如果最終目標依賴於他人，那麼你就應該採取些具體行動以接近最終目標&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;之所以沒成功，是因為有些時候我真的無能為力&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如果你無法兌現承諾，那麼最重要的就是「儘早向你承諾對象發聲預警，越快越好，越早越好」。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果你不儘早告訴他人可能的問題，就錯失了讓他們幫你兌現能諾的機會。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_14"&gt;第四章：寫程式&lt;/h2&gt;
&lt;h3 id="_15"&gt;做好準備&lt;/h3&gt;
&lt;p&gt;寫程式是件累人的事，你必須做到&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;讓程式碼能正常工作。理解當前要解決的問題和如何解決，並且確保程式碼忠實的依循解決方案&lt;/li&gt;
&lt;li&gt;幫客戶解決問題&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;很多時候，客戶提出的需求其實並不能真正解決他們自己的問題。這有賴於你去發現這些問題並與客戶交流，以確保能滿足客戶的真實需求&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程式碼必須和現有系統整合，並妥善管理好各種相依關係，不能讓系統僵化&lt;ul&gt;
&lt;li&gt;寫程式時必須遵循穩工程原則&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他的程式設計師必須能讀懂你的程式碼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這包括寫好註解、精心淬煉程式碼，這可能是程式設計師最難精通的一項。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;感到疲勞或心煩意亂，&lt;strong&gt;千萬別寫程式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;奉獻精神和職業素養更主要的意義在於「遵守紀律原則」而非成為「長時間的工作狂」&lt;/li&gt;
&lt;li&gt;要確保自己已經幾睡眠、健康和生活方式調整到最佳狀態，這樣才能做到每天的8小時工作時間內&lt;strong&gt;全力以赴&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_16"&gt;創意輸入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;「創意輸出」依賴於「創意出入」 → 廣泛閱讀&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_17"&gt;保持節奏、知道何時應該離開一會&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;軟體開發是一場馬拉松，不是短跑衝刺&lt;/li&gt;
&lt;li&gt;沒解決這個問題不能回家&lt;ul&gt;
&lt;li&gt;噢不，你可以回家，而且是應該回家！&lt;/li&gt;
&lt;li&gt;創意和智力來自於大腦的高速運轉，當你感到疲勞時，它們就不翼而飛了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_18"&gt;進度延遲&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;即使是最優秀的程式設計師、最敬業的員工，也不能避免碰到延遲&lt;ul&gt;
&lt;li&gt;管理延遲的要訣就是&lt;strong&gt;早期檢測和保持透明&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;根據目標定期衡量進度，使用三個考慮到各種因素的期限，&lt;strong&gt;不要把預估和期望混淆在一起&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;樂觀預估, 常態預估, 悲觀預估&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要經受不住誘惑盲目衝刺&lt;ul&gt;
&lt;li&gt;你無法更快的寫完程式碼。試圖這麼做，最終只會讓自己變得更慢，同時也只能製造出一堆混亂，讓其他人也慢下來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_19"&gt;交付失敗&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;程式設計師所能表現的不專業中，最糟糕的就是，明知道還沒有完成任務卻宣稱已經完成&lt;/li&gt;
&lt;li&gt;明確定義「完成」&lt;ul&gt;
&lt;li&gt;最好的方法是讓業務分析師和測試人員建立一套自動化的驗收測試，只有完全通過這些驗收測試，開發任務才能算已經完成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_20"&gt;幫助&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;作為專業人士，你要以能隨時幫助別人為榮&lt;ul&gt;
&lt;li&gt;你的工作不可能重要到你不能花一丁點時間來幫助別人&lt;/li&gt;
&lt;li&gt;這並不是說你不需要獨處的時間 → 直接、禮貌的讓人知道某個時間區段不希望受到干擾，其餘的時段敞開大門樂於幫助他人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要學會如何請求幫助&lt;/li&gt;
&lt;li&gt;輔導&lt;ul&gt;
&lt;li&gt;花時間親自輔導手底下的年輕程式設計師，是資深程式設計師的「專業職責所在」&lt;/li&gt;
&lt;li&gt;同樣的道理，向資深導師尋求輔導，也是年輕程式設計師的「專業職責」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_21"&gt;第五章：測試驅動開發&lt;/h2&gt;
&lt;h3 id="tdd"&gt;TDD 的三大法則&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在撰寫一個單元測試（測試失敗的單元測試）前，不可撰寫任何產品程式&lt;/li&gt;
&lt;li&gt;只撰寫剛好無法通過的單元測試，不能編譯也算無法通過&lt;/li&gt;
&lt;li&gt;只撰寫剛好能通過當前測試失敗的產品程式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="tdd_1"&gt;TDD 的優勢&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;確定性&lt;/li&gt;
&lt;li&gt;缺陷注入率&lt;/li&gt;
&lt;li&gt;勇氣&lt;ul&gt;
&lt;li&gt;擁有一套值得信賴的測試，便可完全打消對修改程式碼的全部恐懼。當看見糟糕的程式碼時，就可以放手整理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件&lt;ul&gt;
&lt;li&gt;單元測試就是文件。他們描述了系統的最底層設計細節&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;設計&lt;ul&gt;
&lt;li&gt;基於測試先行的需要，會迫使你去思考什麼才是&lt;strong&gt;好的設計&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;與採用測試先行方式編寫的測試程式碼比起來，後寫的測試在深度和捕捉錯誤的靈敏度方面要遜色很多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_22"&gt;第六章：練習&lt;/h2&gt;
&lt;h3 id="_23"&gt;自身經驗的拓展&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;老闆通常只會限定一種語言、一種平台，以及程式設計師工作目標的專業領域。這樣會導致經驗不夠豐富的程式設計師，其領域和思維都被侷限&lt;ul&gt;
&lt;li&gt;程式設計師發現，面對這個行業的週期性變化造成的新局面，自己並沒有做好準備&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保持不落伍的一種方法是為 open source project 貢獻程式碼&lt;ul&gt;
&lt;li&gt;嘗試對自己不習慣的語言、平台、領域做出貢獻&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_24"&gt;第七章：驗收測試&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定義驗收測試&lt;ul&gt;
&lt;li&gt;「業務方與開發方合作編寫的測試」，其目的在於確認需求已經完成了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「完成」意味著&lt;ol&gt;
&lt;li&gt;所有程式碼都寫完了&lt;/li&gt;
&lt;li&gt;所有的測試都通過了&lt;/li&gt;
&lt;li&gt;QA 和需求方已經認可&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_25"&gt;測試的協商與被動推進&lt;/h3&gt;
&lt;p&gt;身為專業開發人員，「與撰寫測試的人協商並改進測試」是你的職責。絕不能被動接受測試，更不能對自己說：「噢，測試就是這麼要求的，我又得這麼做。」&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;層級&lt;/th&gt;
&lt;th&gt;對象&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;單元測試&lt;/td&gt;
&lt;td&gt;系統內部&lt;/td&gt;
&lt;td&gt;呼叫特定類別方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;驗收測試&lt;/td&gt;
&lt;td&gt;系統外部&lt;/td&gt;
&lt;td&gt;通常在 API 或 UI 層級進行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_26"&gt;結論&lt;/h3&gt;
&lt;p&gt;細節交流是件麻煩事。尤其開發方和業務方交流關於程式的細節時，更是如此。&lt;strong&gt;通常，各方握手言歡，以為其他人都明白自己的意思。雙方以為取得了共識，然後帶著截然不同的想法離開，這種事屢見不顯。&lt;/strong&gt;&lt;br/&gt;
要解決開發方和業務方的溝通問題，我 (Uncle Bob) 所知道的唯一有效辦法是「編寫自動化的驗收測試」。&lt;/p&gt;
&lt;h2 id="_27"&gt;第八章：測試策略&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;職位&lt;/th&gt;
&lt;th&gt;測試面向&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;業務人員&lt;/td&gt;
&lt;td&gt;正常路徑測試 (happy-pathtest)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QA&lt;/td&gt;
&lt;td&gt;包含極端狀況 (corner)、邊界條件 (boundary)的異常路徑測試(unhappy-path)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="_28"&gt;自動化測試金字塔&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;測試&lt;/th&gt;
&lt;th&gt;覆蓋率&lt;/th&gt;
&lt;th&gt;測試介面&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;人工探索式測試&lt;/td&gt;
&lt;td&gt;~5%&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;系統測試&lt;/td&gt;
&lt;td&gt;~10%&lt;/td&gt;
&lt;td&gt;gui&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;整合測試&lt;/td&gt;
&lt;td&gt;~20%&lt;/td&gt;
&lt;td&gt;api&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;元件測試&lt;/td&gt;
&lt;td&gt;~50%&lt;/td&gt;
&lt;td&gt;api&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;單元測試&lt;/td&gt;
&lt;td&gt;~100%&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;單元測試&lt;ul&gt;
&lt;li&gt;目的： 在最低層次上定義系統&lt;ul&gt;
&lt;li&gt;先寫測試，在寫程式碼&lt;/li&gt;
&lt;li&gt;這些應該作為 CI 的一部分執行，以確保程式設計師的程式碼意圖沒有遭到破壞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;元件測試&lt;ul&gt;
&lt;li&gt;需要使用合適的 mocking 或 test-doubling，解開「系統和其他元件」的耦合&lt;/li&gt;
&lt;li&gt;由 QA 和業務人員編寫，開發人員提供輔助&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整合測試&lt;ul&gt;
&lt;li&gt;目的： 確認系統架構層面結構正確&lt;/li&gt;
&lt;li&gt;只對元件很多的較大型系統才具有意義&lt;/li&gt;
&lt;li&gt;由系統架構師或 lead designers 來編寫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系統測試&lt;ul&gt;
&lt;li&gt;針對「整個整合完畢的系統」來執行的自動化測試&lt;/li&gt;
&lt;li&gt;不會直接測試業務規則，而是測試系統是否以正確組裝完畢&lt;/li&gt;
&lt;li&gt;應包含產能測試和性能測試&lt;/li&gt;
&lt;li&gt;由系統架構師和 technical leads 來編寫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人工探索式測試&lt;ul&gt;
&lt;li&gt;目的： 驗證預期行為時，探索系統預期以外的行為&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_29"&gt;第九章：時間管理&lt;/h2&gt;
&lt;h3 id="_30"&gt;會議&lt;/h3&gt;
&lt;p&gt;關於會議，有兩條真理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;會議是必須的&lt;/li&gt;
&lt;li&gt;會議浪費了大量的時間&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;離席&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;仔細管理自己的時間是你的責任。如果你發現參加某個會議是在浪費時間，就應當想個禮貌的辦法出來&lt;ul&gt;
&lt;li&gt;顯然，你不該大喊「這會議真讓人厭煩」，沒有必要採取粗魯的辦法。可以選個適當時機來問問大家，你的出席是否必要。你可以解釋說，自己抽不出更多的時間用於這場會議，問問有沒有辦法加快討論，或者另選時間&lt;/li&gt;
&lt;li&gt;繼續參加對你沒有太多意義的會議，是不專業的行為&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_31"&gt;爭論 / 反對&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果觀點無法在短時間（5 ~ 30 分鐘）內達成一致，就永遠無法達成一致&lt;ul&gt;
&lt;li&gt;唯一的解決方法是「去取得資料，讓資料來說話」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「既然其他人想要這樣做，就這麼做吧」這可能是非專業的行為中最糟糕的了，千萬千萬不要這麼做&lt;ul&gt;
&lt;li&gt;如果你同意了，就&lt;strong&gt;必須&lt;/strong&gt;拿出行動來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="manna"&gt;專注力 Manna&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;專注力是稀有的資源&lt;ul&gt;
&lt;li&gt;如果你用光了自己的專注力 Manna，必須花一個小時或更多時間做不需要專注力的事情來補充它&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;專業開發人員會安排好他們的睡眠，保證清晨有飽滿的專注力 Manna 去上班&lt;/li&gt;
&lt;li&gt;肌肉專注力有助於改善新制專注力，而不僅僅是簡單恢復&lt;ul&gt;
&lt;li&gt;定期訓練肌肉專注力，可以提升心智專注力的上限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_32"&gt;要避免的行為&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;優先順序錯亂&lt;ul&gt;
&lt;li&gt;無論什麼原因，我們都可以找到辦法逃避真正的工作。提高某項任務的優先順序，之後就有藉口延後真正急迫的任務&lt;/li&gt;
&lt;li&gt;專業開發人員會評估每項任務的優先順序，排除個人的喜好和需求，按照真實的緊急程度來執行任務&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_33"&gt;死胡同&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;專業開發人員不會執著於不容放棄也無法繞開的 idea。他們會保持開放的頭腦來聽取其他建議，所以即便走到盡頭，他們仍然有選擇&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="10"&gt;第10章：預估&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;承諾 v.s. 預估&lt;ul&gt;
&lt;li&gt;承諾是必須做到的&lt;/li&gt;
&lt;li&gt;預估是一種「猜測」，不帶任何承諾的色彩。之所以要預估，是因為不知道要花多少時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pert-program-evaluation-and-review-technique"&gt;PERT (Program Evaluation and Review Technique)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;三元分析法&lt;ul&gt;
&lt;li&gt;O: Optimistic Estimate&lt;ul&gt;
&lt;li&gt;一切都很順利的完成時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;N: Nominal Estimate&lt;ul&gt;
&lt;li&gt;一般來說的完成時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;P: Pessimistic Estimate&lt;ul&gt;
&lt;li&gt;遇到各種意外地完成時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$ \mu = \frac{O+4N+P}{6} $&lt;ul&gt;
&lt;li&gt;任務期望完成的時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$ \sigma = \frac{P-O}{6} $&lt;ul&gt;
&lt;li&gt;任務完成機率分布的標準差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_34"&gt;大數法則&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把大任務分成許多小任務，分開預估再加總，結果會比單獨評估大任務要精確得多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="11"&gt;第11章：壓力&lt;/h2&gt;
&lt;h3 id="_35"&gt;避免壓力&lt;/h3&gt;
&lt;h4&gt;承諾&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;避免對「沒有把握達成最後期限的工作」做出「承諾」&lt;ul&gt;
&lt;li&gt;業務方總是期望能夠拿到這些承諾，因為他們想消除風險。我們要做的就是日風險量會，必將他們陳述給業務方，這樣他們就能做好相對的準備。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有時，有人會代我們做出承諾&lt;ul&gt;
&lt;li&gt;出於責任感，我們必須主動協助找到方法來兌現這些承諾，但是一定&lt;strong&gt;不能接受&lt;/strong&gt;這些承諾&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;危機中的紀律&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果在危機中你改變了行為，就說明你並不是真的相信常規行為中的紀律&lt;ul&gt;
&lt;li&gt;如果在平時你會注意程式碼整潔，但在危機時刻，你卻會產出髒亂的程式碼，就說明你並不真正相信混亂會導致速度下降&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_36"&gt;應對壓力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不要驚慌失措&lt;/li&gt;
&lt;li&gt;溝通&lt;ul&gt;
&lt;li&gt;讓你的團隊或主管知道你身陷困境。告訴他們你為走出困境置地的最佳計畫。請求他們的支援與指引。避免製造意料之外的詫異&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依靠你的紀律原則&lt;ul&gt;
&lt;li&gt;依靠那些你已經知道確實有效的東西 - 你平時遵守的紀律&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尋求幫助&lt;ul&gt;
&lt;li&gt;Pair Programming&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="12"&gt;第12章：協作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;專業程式設計師的主要職責是滿足雇主的需求&lt;ul&gt;
&lt;li&gt;這意味著要含你的經理們、業務分析師們、測試工程師們和其他團隊成員有良好的協作，並且&lt;strong&gt;深刻理解&lt;/strong&gt;業務項目&lt;/li&gt;
&lt;li&gt;你需要理解&lt;strong&gt;「手上正在撰寫的程式碼，其業務價值是什麼」&lt;/strong&gt;，了解雇用你的企業將如何從你的工作中獲得回報&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「需要長時間努力思考一個問題」、「任務極為簡單、和另一個人一起工作變成一種浪費」時單獨工作是正確的&lt;ul&gt;
&lt;li&gt;但一般來說和其他人緊密協作、大部分時間採取 Pair Programming 是最好的作法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;程式設計意味著「與人協作」&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;我們需要和業務人員一起工作，我們之間也需要互相合作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="13"&gt;第13章：團隊與專案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;形成有凝聚力的團隊是需要時間的&lt;ul&gt;
&lt;li&gt;可能需要6個月，甚至是1年&lt;/li&gt;
&lt;li&gt;團隊成員首先要建立關係。他們需要學習如何互相協作，需要瞭解彼此的癖好、強項、弱項，最終才能&lt;strong&gt;凝聚成&lt;/strong&gt;團隊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有凝聚力的團隊通常有12名成員，多可以有20人，最少可以只有3人&lt;ul&gt;
&lt;li&gt;e.g., 12名&lt;ul&gt;
&lt;li&gt;7名程式設計師&lt;/li&gt;
&lt;li&gt;2名測試人員： 編寫「自動化測試」確認程式正確性&lt;/li&gt;
&lt;li&gt;2名分析師： 開發「需求」，為需求編寫「自動化測試」確認業務價值正確&lt;/li&gt;
&lt;li&gt;1名專案經理： 跟蹤團隊的「進度」，確保成員理解「專案時間表」和「優先順序」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;團隊比專案更難建置&lt;ul&gt;
&lt;li&gt;組織穩健的團隊，讓團隊在一個又一個專案中整體移動、共同工作是較好的做法&lt;/li&gt;
&lt;li&gt;團隊有了凝聚力，但卻因為專案結束了便將這樣的團隊解散，是極為荒謬可笑的做法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="14"&gt;第14章：輔導、學徒期與工藝典範&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;學校能夠傳授的是電腦程式設計的理論&lt;ul&gt;
&lt;li&gt;但學校並不會、也無法傳授作為一名程式設計工匠所需要掌握的原則、實踐和技能&lt;ul&gt;
&lt;li&gt;這些東西只有經由師徒個體間多年的細心監督和輔導才能獲得&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="appendix-a"&gt;Appendix A: 工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Source code control&lt;ul&gt;
&lt;li&gt;e.g., git&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IDE / Editor&lt;ul&gt;
&lt;li&gt;e.g., vi, emacs, IntelliJ, TextMate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;問題追蹤&lt;ul&gt;
&lt;li&gt;e.g., Pivotal Tracker, Lighthouse, wiki, Board (To-Do/ Doing/ Done)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CI&lt;ul&gt;
&lt;li&gt;e.g., Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;單元測試工具&lt;ol&gt;
&lt;li&gt;快速便捷的執行測試&lt;/li&gt;
&lt;li&gt;在通過或失敗要有清楚的視覺提示&lt;/li&gt;
&lt;li&gt;對於測試進度也要有清楚的視覺提示&lt;/li&gt;
&lt;li&gt;避免 test cases 之間的彼此通訊&lt;/li&gt;
&lt;li&gt;讓編寫測試變得容易&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;元件測試工具&lt;ul&gt;
&lt;li&gt;理想的情況是「業務分析師和QA」能夠使用這些工具來&lt;strong&gt;編寫&lt;/strong&gt;規約&lt;/li&gt;
&lt;li&gt;e.g, FitNesse, RobotFX, Cucumber&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整合測試工具&lt;ul&gt;
&lt;li&gt;e.g., Selenium, Watir&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UML / MDA&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Note"></category><category term="Software Engineering"></category></entry><entry><title>[Book] 告別菜尾時代</title><link href="https://lee-w.github.io/posts/book/2018/11/it-s-time-for-the-young-generation" rel="alternate"></link><published>2018-11-07T14:00:00+08:00</published><updated>2018-11-07T14:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2018-11-07:/posts/book/2018/11/it-s-time-for-the-young-generation</id><summary type="html">&lt;p&gt;&lt;img alt="Imgur" src="/images/books/0he265Q.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="Imgur" src="/images/books/0he265Q.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;blockquote&gt;
&lt;p&gt;The plain fact is that the planet does not need more successful people. But it does desperately need more peacemakers, healers, restorers, storytellers and lovers of every kind. It needs people who live well in their places. It needs people of moral courage willing to join the fight to make the world habitable and humane. And these qualities have little to do with success as we have defined it.&lt;br/&gt;
–– David W. Orr&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;第一篇：如果舒適圈一點也不舒服&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「再重新想一遍。你認為的舒適圈，真的舒適嗎？」&lt;/li&gt;
&lt;li&gt;有些人會說，那是因為他們有錢，才能夠擺脫「飢餓威脅」。&lt;ul&gt;
&lt;li&gt;可是我的好友M就曾憂心忡忡地告訴我，他身上有龐大的貸款要償還：瑞典人Ｎ在找房子時，也說他沒辦法租太昂貴的房子，因為每個月能花的費用有限：澳洲人S也總是在研究空擋去醫院兼職打工。  &lt;/li&gt;
&lt;li&gt;這些人並非是天之驕子，都是跟你我一樣為了錢而煩惱的凡人，但他們卻勇於暫時放下外人或自己人生的「飢餓威脅」，嘗試走到世界闖一闖。&lt;/li&gt;
&lt;li&gt;美國人Ｍ與Ｋ就告訴過我，若不是在南美、非洲的那幾年，他們不會知道自己想成為一個怎樣的醫生。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/pulse/you-your-time-zone-dr-abhijit-singh/"&gt;You Are In Your Time Zone.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;比起年齡，更應該焦慮的是 - 有沒有在做自已喜歡的事&lt;ul&gt;
&lt;li&gt;不要用已經付出的「沈沒成本」來限制人生的決定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;美國的學校最喜歡能展現領導力的學生，且招生標語總是希望培育出「未來領導人」，因此，進了美國職場後，就算我是整個實驗室裡輩份最小的，同事和老闆也總是告誡我：「&lt;strong&gt;我們要你未來也能成為領導人。千萬不要小看自己，人總是會往上爬，有一天你也會成為主管，而我們希望到那個時候你是『準備好的』&lt;/strong&gt;」。由此可知，他們不只把我當個「員工」而已 ，還會花時間教我各種領導能力，例如，有效運用自己的時間，學會取捨、面對無謂的要求要懂得說「不」、學著主持會議、還教我如何與其他老闆社交......等。&lt;/li&gt;
&lt;li&gt;如果你因為旁人的負面思考與意見被侷限而不放膽嘗試，那麼，你的最佳狀態就只會是現在的模樣，不會再進步了。&lt;/li&gt;
&lt;li&gt;對未來缺乏想像力這件事，或許不能完全怪在台灣的學生身上......&lt;strong&gt;如果你沒有看過別人成為什麼，便很難去想像自己可以成為什麼&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;「你應該要先去想想，二、三十年後，你想成為一個怎麼樣的人？為了成為這樣的人，十五年後應該要達成什麼樣的位置？又必須做出多少的努力，才能達到二、三十年的目標？以此回推，如果要達成十五年的位置，那麼到了第十年你該做些什麼？第五年呢？第一年呢？&lt;strong&gt;慢慢逐步推回來。因此你現在應該要為了一年後，做什麼努力？&lt;/strong&gt;」  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;他點出了我們應該要先放膽去想，二、三十年後想做什麼？然後再慢慢回推現在該做什麼努力，而非以現在能看到的視野、擁有的資源，規劃我們三十年後想成為的樣子。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;第二篇：只要敢闖，世界就是你的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;聯合國與哈佛的面試： &lt;strong&gt;你的 Commitment 是什麼？&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;我還特地問他（組織內的行政助理）：「難道美國人/西方人比較看重承諾？畢竟我過去從未在面試時被問到這樣的問題，就連我進醫學系的時候也沒有。」&lt;br/&gt;
  他說：「真的！因為 Commitment 是個很慎重的字。」他沈默了也思考一下，然後說：「我的人生中還沒有在面試時被問到這個問題，但我可以想見，&lt;strong&gt;我們(哈佛大學)或聯合國想要找到對於這個世界有熱情、有理想的申請者，才會在面試的時候這麼詢問。&lt;/strong&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;第三篇：站在語言、文化與價值觀的十字路口&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;當你開始在異鄉生活，英文就再也不是考試上那一題題的單選或複選題了，而是工作、讀書，或是生活上的溝通「工具」。就英文程度需求最低的生活層面來看，如果你到了另一個國家，無法聽得懂對方的解釋，又無法清楚表達自己的想法，那麼，在國外吃虧時，該要如何幫自己爭取權益呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;第四篇：在地球的另一端，從異鄉看家鄉&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;只用旅行構成的世界觀並不完整&lt;ul&gt;
&lt;li&gt;因為在旅行途中，大部分的時間是快樂的，然而，在當地生活是酸甜苦樂並存的，甚至是時間的苦悶。&lt;/li&gt;
&lt;li&gt;透過長住的機會，使我有不一樣的「成長」。這個「成長」，來自於我每天使用非母語的語言，每天努力融入另一個族群的文化、每天拼了命去學習全新的思考模式，然後在空閒時間，好好看著離家半個地球遠的當地風景。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有一位我十分敬重的某 NGO 創辦人來台灣演講時，有學生問他：「如果我有四萬元，你希望我把四萬元捐給你？還是希望我用四萬元買一張機票，去看看你所創建的孤兒院呢？」&lt;br/&gt;
  NGO創辦人豪不猶豫地說：「&lt;strong&gt;我希望你買一張機票來看看，因為當你買了那張機票，你才會明白我所說的一切貧窮、困苦都是真的。你會把這些震撼與故事帶回到你的生命裡，然後，我要你用你那四萬塊的機票，發揮你生命的影響力，把故事傳出去，讓更多人知道什麼是貧窮，在貧窮裡生活又是如何超乎你原本生活想像的艱難。&lt;/strong&gt;」&lt;/li&gt;
&lt;li&gt;往後，我看到許多偏鄉志工、國際志工，不論是捐錢、捐物資等，也有相似的行為漠視：半吊子的助人，認為「有幫總比沒幫好」，或是助人後，完全不檢討自己的行為是否為對方帶來傷害、是否有改善的空間，也因此，我開始深刻的體會「做好事，不是只有善意就好」。&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.huffingtonpost.com/juliana-ruhfus/cambodias-orphanage-busin_b_1616255.html"&gt;Cambodia’s Orphanage Business&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ethiopia food aid dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;為善，應該要更柔軟與敏感&lt;ul&gt;
&lt;li&gt;心存善念幫助他人的同時，不要只憑一股衝勁去做，完全缺乏事前的評估，也沒有細心調查服務對象的需求，更不要在事後，完全沒有檢討、追蹤與改善。&lt;br/&gt;
  這就好像待人處事一樣，是需要互相尊重與同理心的，更不是自己的地位比受助人高。別忘了，今天的你只是相對幸運，能夠擁有比較多的資源，説不定，有天你也可能會成為需要幫助的人。行善之前，請試著多想一些。&lt;br/&gt;
  尤其做好事的人，內心往往要比一般人更柔軟與敏感才是。&lt;/li&gt;
&lt;li&gt;The road to hell is paved with good intensions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同場加映作者的文章: &lt;a href="https://crossing.cw.com.tw/blogTopic.action?id=689&amp;amp;nid=7083"&gt;「愛台灣，就是畢業了先不要回來。」──現在我明白，這句話背後的沉重&lt;/a&gt;&lt;/p&gt;</content><category term="Book"></category><category term="Story"></category></entry><entry><title>MOPCON 2018</title><link href="https://lee-w.github.io/posts/tech/2018/11/mopcon-2018" rel="alternate"></link><published>2018-11-06T17:50:00+08:00</published><updated>2018-11-06T17:50:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2018-11-06:/posts/tech/2018/11/mopcon-2018</id><summary type="html">&lt;p&gt;今年其實是因為拿到去年講者用不到的邀請票才來參加的 xD&lt;br&gt;
總結來說，我覺得這趟來還算是蠻有收穫的&lt;/p&gt;
</summary><content type="html">&lt;p&gt;今年其實是因為拿到去年講者用不到的邀請票才來參加的 xD&lt;br&gt;
總結來說，我覺得這趟來還算是蠻有收穫的&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;幾年前有去過一次 MOPCON&lt;br&gt;
也許是去慣了台北的研討會都在中研院豪華的場地，就覺得 MOPCON 的場地很普通&lt;br&gt;
（其實連國際級的會議 EDBT 的場地都沒中研院好呢&lt;br&gt;
那年的議程也沒給我多大的收穫，之後就沒再來過了&lt;/p&gt;
&lt;p&gt;兩天的會議下來，原本自己有做了一些筆記&lt;br&gt;
但後來覺得自己保留一份筆記實在沒什麼意義...&lt;br&gt;
共筆上面的內容還比我多，就把我自己的部分也都更新上共筆了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/c/mopcon-2018/%2FQeQiI7PvSeG5EdDQyb9NmQ"&gt;共筆連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="day-1"&gt;Day 1&lt;/h2&gt;
&lt;p&gt;第一天比較有趣的是&lt;code&gt;從菜鳥警察到資料戰警&lt;/code&gt;, &lt;code&gt;用 Drone 改善團隊自動化測試及部署流程&lt;/code&gt;&lt;br&gt;
原本讓我有考慮來 MOPCON 就是想來聽聽 Drone 的使用&lt;br&gt;
不過果然還是要自己玩玩看才會知道怎麼用啊 xD&lt;br&gt;
感覺聽這樣的 talk 大概就是讓我決定要不要花時間來試新工具&lt;/p&gt;
&lt;p&gt;聽說還蠻多場都只是在介紹自家的產品的&lt;br&gt;
還好我很巧妙的避開了（？？？&lt;/p&gt;
&lt;h2 id="day-2"&gt;Day 2&lt;/h2&gt;
&lt;p&gt;第二天我就幾乎都在 Unconference 了&lt;br&gt;
一般議程只聽了開頭 jserv 的&lt;code&gt;智慧電網背後的軟體建設&lt;/code&gt; 跟結尾的&lt;code&gt;Flutter 踩雷心得&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其實會都待在 Unconference 也是一場意外 xD&lt;br&gt;
原本想說還有五分鐘才正式議程，所以就先過去晃晃&lt;br&gt;
但 &lt;code&gt;創業的辛酸與奧義&lt;/code&gt; 實在太精彩了，就一直聽下去了&lt;br&gt;
這場可是讓 Unconfernce 的場地全部坐滿，外面還圍了一整圈的人呢&lt;/p&gt;
&lt;p&gt;接下來的 &lt;code&gt;工程師與設計師都該知道的事&lt;/code&gt; 也很精彩&lt;br&gt;
還好我有跑去 Dcard 的攤位跟講者要 &lt;a href="https://www.facebook.com/dcardlab/photos/ms.c.eJxFVNuRRTEI6mhH47v~;xnaO3JBfBhHRRG3mRGRa2Kj2ny6Qmtl1XPQCYx9gx8nor0QyCcwyhhodciTyMfIs0EPAV~_PID4jSj1FNwFbUq8kQMK6xcAGjrug58BH0sbOYvRJFSRKYHd9uSX0u65getl3rVUOgtkRu29LaErnW0zDLeQAibEZouQx9TqFhLEn4iOej17rRh2NRxeEKiRkTwxoq37SFEnZxZKrUQGLOxNKRaV2nEQeJ0Vg7uhQB~_Dg8B49d9rMeBg22HSSW3P7UAsHEEgEFrdf6EC4q5~_vSwxuLaWgY20J0KDqzZ8mQs7AoJwPLFi47HYARaAHD2QVt57ZNnJQ~;p4FpeTAlCuvP6UCDJeLQICPXqTOgksYV8omprQbPodS2Cw~_mFIklS1oxC60H8kgOl~;DBTFPxouR9BniVL7HYW8~;3KgNOY~;4BsW3r1Q~-~-.bps.a.1399255386872479/1399255663539118/?type=3&amp;amp;theater"&gt;slide&lt;/a&gt;&lt;br&gt;
裡面的內容都還蠻有用的，但實在有點來不及作筆記&lt;br&gt;
而且 Unconference 真的沒什麼人會去更新共筆&lt;br&gt;
這場的整份筆記只有我在更新 QQ&lt;br&gt;
最大的 takeaway 是 UI堆疊的太念&lt;br&gt;
好像是來自 &lt;a href="http://scotthurff.com/posts/why-your-user-interface-is-awkward-youre-ignoring-the-ui-stack"&gt;How to fix a bad user interface&lt;/a&gt; 這篇文章&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Flutter 踩雷心得&lt;/code&gt; 也是出乎意料有趣的議程&lt;br&gt;
&lt;a href="https://flutter.io"&gt;Flutter&lt;/a&gt; 是一套可以拿來用在 iOS 和 Android 的框架&lt;br&gt;
整場聽下來學到了不少 mobile 開發的知識&lt;br&gt;
還有如何叫老闆買新電腦（誤&lt;/p&gt;
&lt;h3 id="lighting-talk"&gt;Lighting Talk&lt;/h3&gt;
&lt;p&gt;話說今年好像彩蛋題太難解，好多場 Lighting Talk 都在講要怎麼打 MOPCON 的官方 APP xDDD&lt;/p&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="MOPCON"></category></entry><entry><title>[Book] 做孩子的重要他人</title><link href="https://lee-w.github.io/posts/book/2018/10/be-someone-to-the-children" rel="alternate"></link><published>2018-10-24T11:55:00+08:00</published><updated>2018-10-24T11:55:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2018-10-24:/posts/book/2018/10/be-someone-to-the-children</id><summary type="html">&lt;p&gt;跟蘇老師合作了半年下來&lt;br&gt;
這還真的是我第一次真的有時間好好的看完這本書&lt;/p&gt;
&lt;p&gt;&lt;img alt="Imgur" src="/images/books/3sJOmbH.jpg"&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;跟蘇老師合作了半年下來&lt;br&gt;
這還真的是我第一次真的有時間好好的看完這本書&lt;/p&gt;
&lt;p&gt;&lt;img alt="Imgur" src="/images/books/3sJOmbH.jpg"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;第一次知道這本書大概是幾年前政大書城打得很大的標語&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的研究若做好，只幫了幾個人，但走入偏鄉，我要影響的是我們的下一代。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這本書交錯著蘇老師的成長歷程跟在偏鄉看到的事&lt;br&gt;
我想大概還是偏鄉的那段故事比較吸引我&lt;br&gt;
看著不同生長背景的人的故事，讓我更有能力去理解用不同方式去思考的人們&lt;br&gt;
（ 同場加映：&lt;a href="http://lee-w.github.io/posts/book/2017/03/worker/"&gt;做工的人&lt;/a&gt; ）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我也同樣的記錄下，讓我比較有感的句子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;許多人認為偏鄉的孩子沒有進取心，但問題可能在於我們不曾提供希望，讓他們知道向上爬的可能性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我在教導程式書寫的過程中發現，如果我一味將孩子訓練成寫程式的工匠，而不讓他們知道為什麼要寫這些程式，將來他們只有當代工的命 - 在別人設定的規格下，做出別人要的制式化的東西。&lt;br&gt;
  因此訓練學生思考「現在面對的問題是什麼？」「如何解決這些問題」「電腦程式可以為解決這個問題幫上什麼忙？」甚至是「為什麼人們需要解決這種問題？」這一系列問題的替換，塑造他們思辯判斷的能力，才能培養出這個時代需要的領導人才。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;孩子們需要的是長期的陪伴，蜻蜓點水式的關係，反而可能造成傷害。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;真正的能者不會要求別人給你「公平」，反倒會努力爭取機會，把「公平」分給別人。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我們有什麼資格用「弱勢」二字來形容人家？說不定我們自己才是真的「弱勢」呢！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;裡面有些內容讓我想起去埔寨當國際志工的事&lt;br&gt;
對我來說，那絕對是一趟收穫很多的經歷&lt;br&gt;
但我是不是真的對當地帶來了幫助&lt;br&gt;
回過頭來看，我對此是很懷疑的&lt;br&gt;
我想反而是我從他們身上得到的還比較多&lt;/p&gt;
&lt;p&gt;我們離開時，有人問當地的小朋友對我們的想法&lt;br&gt;
我們突然來到他們的生活，卻又突然的離開&lt;br&gt;
其實他們是很難過的，覺得我們這樣是很過分的&lt;br&gt;
也許真的想要做些什麼，還是需要很長期的付出和陪伴&lt;br&gt;
我們以為的幫助，反而卻帶來了傷害&lt;/p&gt;</content><category term="Book"></category><category term="Education"></category></entry><entry><title>Blog 風格修正</title><link href="https://lee-w.github.io/posts/tech/2018/10/fix-blog-style" rel="alternate"></link><published>2018-10-14T21:00:00+08:00</published><updated>2018-10-14T21:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2018-10-14:/posts/tech/2018/10/fix-blog-style</id><summary type="html">&lt;p&gt;一直以來都有發現 Blog 的風格有點小問題&lt;br&gt;
但都懶得去好好地找出問題&lt;br&gt;
這次終於下定決定修好它&lt;/p&gt;
</summary><content type="html">&lt;p&gt;一直以來都有發現 Blog 的風格有點小問題&lt;br&gt;
但都懶得去好好地找出問題&lt;br&gt;
這次終於下定決定修好它&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;起源其實是我的上一篇文被嘴了 QAQ&lt;/p&gt;
&lt;p&gt;&lt;img alt="your style is bad" src="/images/posts-image/2018-10-14-fix-blog-style/15385701963828.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="problem 1" src="/images/posts-image/2018-10-14-fix-blog-style/15385699268490.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="problem 2" src="/images/posts-image/2018-10-14-fix-blog-style/15385700601798.jpg"&gt;&lt;/p&gt;
&lt;p&gt;整理下來大概有三個問題&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大小標的 margin&lt;/li&gt;
&lt;li&gt;英文前後也空一格&lt;/li&gt;
&lt;li&gt;第二行縮了四分之一字元&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="1-margin"&gt;1. 大小標的 margin&lt;/h2&gt;
&lt;p&gt;這應該是三個問題中最簡單的&lt;br&gt;
但我有點懶得動 CSS ，所以就先不修了 xD&lt;/p&gt;
&lt;h2 id="2"&gt;2. 英文前後也空一格&lt;/h2&gt;
&lt;p&gt;剛好最近看到了&lt;a href="https://github.com/sparanoid/chinese-copywriting-guidelines#中文文案排版指北"&gt;中文文案排版指北&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;才發現原來&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「有研究顯示，打字的時候不喜歡在中文和英文之間加空格的人，感情路都走得很辛苦，有七成的比例會在 34 歲的時候跟自己不愛的人結婚，而其餘三成的人最後只能把遺產留給自己的貓。畢竟愛情跟書寫都需要適時地留白。與大家共勉之。」&lt;br&gt;
——vinta/paranoid-auto-spacing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;總之，這也不是特別難處理的問題&lt;br&gt;
只要透過 &lt;a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk"&gt;add-space-between-latin-and-cjk&lt;/a&gt; 再加上 &lt;code&gt;os.walk()&lt;/code&gt; 就能解決了&lt;br&gt;
不過還是會遇到一些不該加空格的地方，也被加空格了&lt;br&gt;
但也只要用 &lt;code&gt;git diff&lt;/code&gt; 再確認一下哪裡有被 script 修改過就可以了&lt;/p&gt;
&lt;h2 id="3"&gt;3. 第二行縮了四分之一字元&lt;/h2&gt;
&lt;p&gt;這個問題就比較頭痛了&lt;br&gt;
因為我在模板找到這段的內容是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{{ article.content }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是説這個多的空白是 &lt;a href="https://github.com/getpelican/pelican"&gt;pelican&lt;/a&gt; (我用的 static blog generator) 所產生的&lt;br&gt;
我沒有辦法透過單純的修改 HTML, CSS 來修正這個問題&lt;br&gt;
必須要找到 pelican 是從哪產生出這個空白的&lt;br&gt;
於是就開始我的 trace pelican 的之旅&lt;/p&gt;
&lt;p&gt;接下來，就是一連串的 trace 過程&lt;br&gt;
不想看可以透過&lt;a href="#transport"&gt;傳送門&lt;/a&gt;直接跳到解法&lt;/p&gt;
&lt;h3 id="pelicanreaderspy-first-try"&gt;pelican/readers.py (first try)&lt;/h3&gt;
&lt;p&gt;要找到 Markdown 是在哪被 parse 並產生內容的並不困難&lt;br&gt;
(&lt;code&gt;pelican/readers.py&lt;/code&gt; 的 &lt;a href="https://github.com/getpelican/pelican/blob/ee24ad1821774db2bfb199100eced17270a961d3/pelican/readers.py#L334"&gt;334行&lt;/a&gt;)&lt;br&gt;
透過一些測試，發現這段的行為是因為有了多的 &lt;code&gt;\n&lt;/code&gt; 造成了多的空白&lt;br&gt;
第一個猜想是某些情況下的 &lt;code&gt;\n&lt;/code&gt; 沒有成功的被移除掉&lt;br&gt;
所以只要加一行 &lt;code&gt;content.replace('\n', '')&lt;/code&gt; 確保全部的 &lt;code&gt;\n&lt;/code&gt; 都被移除，應該就可以了&lt;/p&gt;
&lt;p&gt;一開始問題也真的解決了&lt;br&gt;
直到我用到 markdown中的 ``` 語法才又出現問題&lt;br&gt;
在整個 code block 中的 code 全部都黏在一起沒有斷行&lt;br&gt;
看來這個做法是行不通...&lt;/p&gt;
&lt;p&gt;只好認命的從我平常產生文章的指令一步一步追回去&lt;br&gt;
trace 的過程還有踩到一個雷是「pip 裝的 pelican 並不是 master 上的版本」&lt;br&gt;
所以我還必須要切到 &lt;a href="https://github.com/getpelican/pelican/tree/3.7.1"&gt;3.7.1版&lt;/a&gt; 才能開始解決我遇到的問題&lt;/p&gt;
&lt;h4&gt;setup.py&lt;/h4&gt;
&lt;p&gt;平常我都是透過 &lt;code&gt;pelican -r -o output -s pelicanconf.py&lt;/code&gt;這個指令來產生文章&lt;br&gt;
所以第一步就是要從 &lt;a href="https://github.com/getpelican/pelican/blob/master/setup.py#L15"&gt;setup.py&lt;/a&gt; 找出 pelican 這個指令是哪裡來的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pelican = pelican:main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;pelican/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/h4&gt;
&lt;p&gt;既然在 &lt;a href="https://github.com/getpelican/pelican/tree/3.7.1/pelican"&gt;pelican&lt;/a&gt; 這個 package 中沒有 &lt;code&gt;main.py&lt;/code&gt;&lt;br&gt;
那 Python 還能找到 &lt;code&gt;main&lt;/code&gt; 就只剩下 &lt;code&gt;__init__.py&lt;/code&gt;&lt;br&gt;
扣除掉一些 parse 指令參數的程式碼&lt;br&gt;
接下來最像是產生文章的程式碼就是&lt;a href="https://github.com/getpelican/pelican/blob/master/pelican/__init__.py#L147"&gt;147行&lt;/a&gt; 的 &lt;code&gt;run&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;generate_context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下一步就是要從 &lt;code&gt;generators&lt;/code&gt; 找出 &lt;code&gt;generate_context&lt;/code&gt; 這個函式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelican.generators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArticlesGenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PagesGenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;SourceFileGenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StaticGenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;TemplatePagesGenerator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;pelican/generators.py&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;generators&lt;/code&gt;中看起來最有關的就是 &lt;code&gt;ArticlesGenerator&lt;/code&gt;&lt;br&gt;
這個 class 也找到了 &lt;code&gt;generate_context&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;article_or_draft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;base_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;preread_signal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_generator_preread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;preread_sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;context_signal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_generator_context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;context_sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡找到的是文章被產生的地方&lt;br&gt;
只要能在找到文章中的內容是在哪產生，應該就能解決我的問題&lt;br&gt;
所以下一步就是要再去找到 &lt;code&gt;Readers&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;pelican/reader.py&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Readers&lt;/code&gt; 在這個檔案的&lt;a href="https://github.com/getpelican/pelican/blob/3.7.1/pelican/readers.py#L486"&gt;486行&lt;/a&gt;&lt;br&gt;
接著 trace 這個 class 到&lt;a href="https://github.com/getpelican/pelican/blob/3.7.1/pelican/readers.py#L526"&gt;526行&lt;/a&gt;就真的是文章內容第一次被產生的地方&lt;br&gt;
到目前為止，文章的內容還是沒有多餘的空白&lt;br&gt;
所以順利的話只要從這繼續 trace 下去就能找出問題&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader_metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cached_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader_metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader_metadata&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後發現問題是出在 &lt;a href="https://github.com/getpelican/pelican/blob/3.7.1/pelican/readers.py#L555"&gt;555行&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typogrify_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要不對 &lt;code&gt;content&lt;/code&gt; 做 &lt;code&gt;typogrify_wrapper&lt;/code&gt;就不會產生多餘的空白&lt;/p&gt;
&lt;p&gt;&lt;a id='transport'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;typogrify&lt;/h4&gt;
&lt;p&gt;typogrify 是 &lt;code&gt;pelicanconf.py&lt;/code&gt; (pelican 的設定檔) 中的一個設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;TYPOGRIFY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要關掉 typogrify 就不會再產生出多餘的空白&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mintchaos/typogrify"&gt;typogrify&lt;/a&gt; 看來是某種加強 HTML 的工具&lt;br&gt;
我試過要把 &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 跟 &lt;code&gt;&amp;amp;nbsp&lt;/code&gt; 加入 &lt;code&gt;TYPOGRIFY_IGNORE_TAGS&lt;/code&gt;&lt;br&gt;
不過看來還是沒辦法解決&lt;br&gt;
最後只好把 typogrify 整個關掉了&lt;/p&gt;
&lt;h2 id="_1"&gt;後記&lt;/h2&gt;
&lt;p&gt;其實這也只是個無傷大雅的小問題&lt;br&gt;
但真的是花了我不少時間才找到真正的問題所在&lt;/p&gt;
&lt;p&gt;前幾次都能透過 trace 原始碼，找到 library 的一些小問題&lt;br&gt;
也丟了幾個 Pull Request&lt;br&gt;
不過看來這次沒能再多貢獻什麼&lt;br&gt;
雖然好像有找到可能從 typogrify 解決掉這個 issue的方式&lt;br&gt;
但要再把它加入 pelican 變成一種 config 還是有些麻煩 xD&lt;/p&gt;</content><category term="Tech"></category><category term="Develop"></category></entry><entry><title>X-Village 課程設計</title><link href="https://lee-w.github.io/posts/gossiping/2018/09/X-Village-Course-Design" rel="alternate"></link><published>2018-09-24T15:15:00+08:00</published><updated>2018-09-24T15:15:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2018-09-24:/posts/gossiping/2018/09/X-Village-Course-Design</id><summary type="html">&lt;p&gt;要一次說完整個 X-Village ，還是有點太花時間&lt;br&gt;
先來聊聊我這次接觸到跟課程設計有關的部分&lt;/p&gt;
</summary><content type="html">&lt;p&gt;要一次說完整個 X-Village ，還是有點太花時間&lt;br&gt;
先來聊聊我這次接觸到跟課程設計有關的部分&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;我在 X-Village 中，主要的工作還是在規劃、管理跟行政的部分&lt;br&gt;
所以我要上的課也不多&lt;br&gt;
跟課程相關，我接觸比較多的大概是這幾個部分&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Review 「程式設計基石」(a.k.a. Python 課)&lt;/li&gt;
&lt;li&gt;「資料結構」第三天下午的練習&lt;/li&gt;
&lt;li&gt;「網頁開發、資料庫、雲端運算」第三天後半課程&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="1-review"&gt;1. Review 「程式設計基石」&lt;/h2&gt;
&lt;h3 id="_1"&gt;課綱&lt;/h3&gt;
&lt;p&gt;起初，我和另一位核心助教規劃了 Python 課程的大綱&lt;br&gt;
但這份課綱對初學者還是太難&lt;br&gt;
因為身上處理的事在太多&lt;br&gt;
這些工作就逐步派給其他助教&lt;/p&gt;
&lt;p&gt;過了一週後，我們得到了一份更難了很多的課綱 xD&lt;br&gt;
畢竟大家沒有太多的教學經驗&lt;br&gt;
一開始就要設計好一份適當的課綱，本來就很困難&lt;br&gt;
而且初期 Target Audience 一直不太明確&lt;br&gt;
造成課程難度很難抓&lt;/p&gt;
&lt;p&gt;陸續討論了幾週後，這就是我們正式課程前的版本&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Topics&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Day 1&lt;/td&gt;
&lt;td&gt;&lt;ul&gt; &lt;li&gt;Opening&lt;/li&gt; &lt;li&gt;Python Intro&lt;/li&gt; &lt;li&gt;Editor&lt;/li&gt; &lt;li&gt;Git&lt;/li&gt; &lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Day 2&lt;/td&gt;
&lt;td&gt;&lt;ul&gt; &lt;li&gt;HackMD&lt;/li&gt; &lt;li&gt; 淺談電腦基本運作 &lt;/li&gt; &lt;li&gt; 如何自己解決問題？ (Google, Stack Overflow)&lt;/li&gt; &lt;li&gt; Python Basic(I) (Synyax, Data Types)&lt;/li&gt; &lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Day 3&lt;/td&gt;
&lt;td&gt;&lt;ul&gt; &lt;li&gt;Function&lt;/li&gt; &lt;li&gt;Module/Package&lt;/li&gt; &lt;li&gt;Class&lt;/li&gt; &lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Day 4&lt;/td&gt;
&lt;td&gt;&lt;ul&gt; &lt;li&gt;OOP Introduciton&lt;/li&gt; &lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Day 5&lt;/td&gt;
&lt;td&gt;&lt;ul&gt; &lt;li&gt;Exception Handling&lt;/li&gt; &lt;li&gt;File&lt;/li&gt; &lt;li&gt;String&lt;/li&gt; &lt;li&gt;Coding Convention&lt;/li&gt; &lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Day 6&lt;/td&gt;
&lt;td&gt;&lt;ul&gt; &lt;li&gt;Recap&lt;/li&gt; &lt;li&gt;Built-in&lt;/li&gt; &lt;ul/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Day 7&lt;/td&gt;
&lt;td&gt;&lt;ul&gt; &lt;li&gt;Regular Expression&lt;/li&gt; &lt;li&gt;Python 套件管理 &lt;/li&gt; &lt;li&gt;&lt;a href="http://docs.python-requests.org/en/master/"&gt;requests&lt;/a&gt;&lt;/li&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Day 8&lt;/td&gt;
&lt;td&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;Beautifulsoup&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Visualization&lt;/li&gt; &lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Day 9&lt;/td&gt;
&lt;td&gt;&lt;ul&gt; &lt;li&gt;Decorator&lt;/li&gt; &lt;li&gt;Iterator&lt;/li&gt; &lt;li&gt;Generator&lt;/li&gt; &lt;li&gt;Context Manager&lt;/li&gt; &lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Day 10&lt;/td&gt;
&lt;td&gt;&lt;ul&gt; &lt;li&gt;Broaden Horizon&lt;/li&gt; &lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="rehearsal"&gt;Rehearsal&lt;/h3&gt;
&lt;p&gt;Rehearsal 的時候，我看到了蠻多值得學習跟反省的地方&lt;br&gt;
不愧是從醒獅團的人們，我看到了一些很有趣的教學方式&lt;br&gt;
看著每個人不同的教學風格和內容&lt;br&gt;
我在思考著&lt;br&gt;
是不是有些人在以往學習程式上比較順利，比較知道如何自己找到解學辦法？&lt;br&gt;
對這樣的人來說，要如何把知識傳遞給學習不那麼快的人，就會需要比較多的學習&lt;/p&gt;
&lt;p&gt;回想起我寫程式的歷程，可是一點都不順利&lt;br&gt;
我在寫 Lisp 的時候，連 Syntax Highlight 都不懂&lt;br&gt;
還要不斷數括號數量，才知道程式能不能跑的&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(cond ((eq &amp;#39;a &amp;#39;b) &amp;#39;first)  (atom &amp;#39;a)  &amp;#39;second))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（其實上面有少一個括號 xD）&lt;/p&gt;
&lt;h3 id="_2"&gt;課程正式開始&lt;/h3&gt;
&lt;p&gt;課程的前兩週因為在準備碩士論文口試&lt;br&gt;
我沒有投入教學，也沒辦法整天跟課&lt;br&gt;
但我中午跟晚上幾乎都會去 &lt;del&gt;拿便當、飲料&lt;/del&gt; 關心課程狀況&lt;/p&gt;
&lt;p&gt;課程開始後，我們要不斷看大家的狀況跟課後的回饋來調整課程的進度&lt;br&gt;
因為這是密集課程&lt;br&gt;
所謂的調整課程就是「今天馬上要改完，明天馬上就要上場」&lt;br&gt;
而且助教們晚上也會留下來陪學員晚自習&lt;br&gt;
造成大家幾乎是沒什麼休息的時間&lt;/p&gt;
&lt;p&gt;因為第一次辦，完全無法預期大家的學習速度&lt;br&gt;
只能先用一個版本出來教教看&lt;br&gt;
再來看現場狀況隨時調整&lt;br&gt;
不過有了這次的經驗，明年應該就比較有底了（如果還有明年的話 xD）&lt;/p&gt;
&lt;h2 id="2"&gt;2. 「資料結構」第三天下午的練習&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Exercise ipynb: &lt;a href="http://nbviewer.jupyter.org/github/x-village/data-structure-course/blob/master/DS_Exercise_Day3.ipynb"&gt;DS-Exercise Day3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;雖然先前大概有稍微想了一下準備怎樣的 Exercise&lt;br&gt;
但我前一天下午才口試完&lt;br&gt;
我其實只有大概一個晚上的時間準備 ...&lt;/p&gt;
&lt;p&gt;可是「資料結構」的老師又是我找的&lt;br&gt;
總覺得還是得要負起一些責任&lt;/p&gt;
&lt;p&gt;早上的課程會由老師教理論，下午由助教來帶一些練習&lt;br&gt;
我帶練習的那天早上則是教排序&lt;/p&gt;
&lt;p&gt;在教學上我並沒花多少時間&lt;br&gt;
就是帶了一些影片，讓大家 Recap 一下白天老師教的內容&lt;br&gt;
我主要把時間都花在 Exercise 的設計上&lt;/p&gt;
&lt;h3 id="exercise4-python-ex4py"&gt;Exercise4 用 Python 做排序 (ex4.py)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;some_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;86&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;82&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;93&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;93&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;寫過 Python 的人，一定馬上就會想到用 &lt;code&gt;sort&lt;/code&gt; 或 &lt;code&gt;sorted&lt;/code&gt;&lt;br&gt;
但我故意把練習時間拉長到 20 分鐘&lt;br&gt;
中間一直會有學員、助教問我「真的可以這樣寫嗎？」&lt;br&gt;
&lt;strong&gt;恩，可以哦&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在早上教完「資料結構」後，馬上帶這樣的練習&lt;br&gt;
很容易讓人直接聯想到要實作排序演算法&lt;br&gt;
我想帶來的想法是「在要下手去做什麼之前，先找找是不是有什麼現存的工具」&lt;/p&gt;
&lt;p&gt;回想以前的我，肯定也是埋頭就下去硬幹&lt;br&gt;
甚至我第一次用 Python 爬選課系統的時候，連 json 模組都不會用&lt;br&gt;
只會照著 json 規定的格式，慢慢地做字串處理&lt;br&gt;
e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;json_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;course_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;course_id&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為在我的 Knowledget Base，對函式庫的概念還是很模糊&lt;br&gt;
也不知道為什麼要用，好處在哪&lt;br&gt;
大二下的 C++ 寫的 ncurses 反而感覺像是造成我更多的麻煩 xD&lt;br&gt;
因為我並不知道如果不用 ncurses ，要做同樣的事會多麻煩&lt;/p&gt;
&lt;p&gt;所以試試看讓學員真的做一次很麻煩的處理&lt;br&gt;
透過痛過，來知道為什麼要使用工具&lt;/p&gt;
&lt;h3 id="exercise5-python-ex5md"&gt;Exercise5 深入淺出 Python 排序 (ex5.md)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q1: Python 的 &lt;code&gt;some_list.sort()&lt;/code&gt; 跟 &lt;code&gt;sorted(some_list)&lt;/code&gt; 差別在哪&lt;/li&gt;
&lt;li&gt;Q2: Python 的 &lt;code&gt;sorted()&lt;/code&gt; 是用哪種排序演算法 ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這兩個問題其實並不困難&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一個問題是我以前寫 Python 常遇到的錯誤&lt;br&gt;
  同時也想讓大家去想想「如果有不同的做法都能解決問題，他們不同的地方在哪」&lt;/li&gt;
&lt;li&gt;第二個問題則是想激起大家的好奇心，試著去探究看似理所當然的東西&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後 Exercise 4, 5 我幾乎直接把答案都公佈了&lt;br&gt;
即使是在這之後才用我公布的方法，我也是會計分&lt;br&gt;
因為這個思考的過程才是重要的，答案一點也不重要&lt;/p&gt;
&lt;h3 id="exercise6-python"&gt;Exercise6 用 Python 做排序&lt;/h3&gt;
&lt;p&gt;我給了一筆 PTT 爬下來的資料，根據某個 key 做排序&lt;br&gt;
早上才從八卦版剛爬下來的（好像有爬到一些奇怪的東西 ...）&lt;br&gt;
靈感就只是前一天跟學員聊天，聊到他們的視覺化作業要用 PTT 的資料&lt;/p&gt;
&lt;p&gt;這個練習目的在於用實際的資料&lt;br&gt;
讓大家感受到程式是真的能解決實際的問題&lt;br&gt;
而且並不如想像中的那麼困難&lt;/p&gt;
&lt;p&gt;回想我大一不斷的學習用好的架構寫一個 BMI 的程式&lt;br&gt;
總覺得要寫一個稍微有用的程式是非常非常遙遠的事&lt;br&gt;
所以大二下的 C++ ，對我來我說是寫程式很大的里程碑&lt;/p&gt;
&lt;p&gt;這題的解答也是差不多一行而已&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptt_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;some_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但我認為這對新手來說，已經會是相對挑戰的練習了&lt;br&gt;
至少以初學的我來說，我可能就要花不少時間去 survey 、去思考&lt;/p&gt;
&lt;p&gt;這個練習中，我還埋了一個坑是「key 可能是空的」&lt;br&gt;
&lt;del&gt;我前一天設計這個練習的時候也入坑了，此坑不能只有我入&lt;/del&gt;&lt;br&gt;
我也會下去跟大家討論要怎麼解決這個問題&lt;br&gt;
這個問題本身有很多種不同的解法&lt;br&gt;
我自己的解法是使用 &lt;code&gt;filter&lt;/code&gt; 過濾掉空值&lt;br&gt;
但我也遇到學員們有很多不一樣的想法，我覺得挺好的&lt;/p&gt;
&lt;h3 id="bouns"&gt;Bouns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Bonus 3 實作各種 sort 作法&lt;/li&gt;
&lt;li&gt;Bouns 4 分析各種 sort 適合的情境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因為課程的速度放慢，有些學過的就會覺得比較無聊&lt;br&gt;
這兩個 Bouns 就是設計給這樣的人&lt;br&gt;
至少在這的兩個小時不要是浪費時間&lt;/p&gt;
&lt;p&gt;Bouns 4 我也沒有正確解答&lt;br&gt;
我蠻好奇會不會有人能給我一點想法的&lt;br&gt;
不過這麼機車的題目最後看來是沒人寫 xD&lt;/p&gt;
&lt;h3 id="_3"&gt;「資料結構」練習後記&lt;/h3&gt;
&lt;p&gt;後來有一次跟學員聊天的時候&lt;br&gt;
學員跟我分享他覺得這樣的練習設計，帶著大家思考很有幫助&lt;br&gt;
看來前一天沒什麼睡到是值得的&lt;/p&gt;
&lt;h2 id="3"&gt;3. 「網頁開發、資料庫、雲端運算」第三天後半課程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Slide: &lt;a href="https://speakerdeck.com/leew/x-village-crud-in-flask-1"&gt;CRUD in Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sample Code: &lt;a href="https://github.com/x-village/web-acccounting-example/"&gt;web-acccounting-example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面的課程中有由博安老師指導的 &lt;a href="https://speakerdeck.com/xvillage/cs-foundation-web-5-database"&gt;Database&lt;/a&gt;&lt;br&gt;
 跟 &lt;a href="https://speakerdeck.com/xvillage/cs-foundation-web-6-flask-introduction"&gt;Flask Introduction&lt;/a&gt;&lt;br&gt;
（博安老師的課程可是在 Web 課程中唯一零負評的，真不愧是博安老師！）&lt;br&gt;
而我的內容則會注重在 view 的撰寫上&lt;/p&gt;
&lt;p&gt;我先讓大家對要做的東西有概念 (i.e., 記帳程式 )&lt;br&gt;
在寫程式前，我帶著大家看市面上做出來的記帳程式是長怎樣的？&lt;br&gt;
這些記帳程式有什麼功能？&lt;br&gt;
如果用我們這幾天教的想法，我們要怎麼去思考這個後端的系統？&lt;/p&gt;
&lt;p&gt;接著才真正要進入程式&lt;br&gt;
我基於博安老師前一個半小時的程式碼在做延伸&lt;br&gt;
從最原始的 &lt;a href="https://github.com/x-village/web-acccounting-example/tree/0.1"&gt;0.1&lt;/a&gt; 版&lt;br&gt;
每次只做一點點的修改，每一個修改都給那個 commit 一個 tag&lt;/p&gt;
&lt;p&gt;&lt;img alt="tags" src="/images/posts-image/2018-09-24-x-village-course-design/1-tag.jpg"&gt;&lt;/p&gt;
&lt;p&gt;在 slide 的右下角，也會放目前到哪個版本&lt;br&gt;
也希望能從這樣的做法，帶到 frequent commit 的重要&lt;/p&gt;
&lt;p&gt;講解程式碼之前&lt;br&gt;
我會先讓大家打過程式碼，並確認可以執行&lt;br&gt;
再來才會解釋每一行程式碼在做什麼&lt;br&gt;
但它們組合起來不見得是對的 xD&lt;br&gt;
尤其剛開始講 view 的 &lt;a href="https://github.com/x-village/web-acccounting-example/tree/0.2.0"&gt;0.2&lt;/a&gt; 版更是幾乎沒一個功能是對的&lt;br&gt;
但程式是能跑的&lt;br&gt;
除了聽跟照著做以外&lt;br&gt;
希望能讓大家去發現哪裡有奇怪的地方&lt;br&gt;
試著去想想要怎麼解決這些奇怪的地方&lt;/p&gt;
&lt;p&gt;直到 &lt;a href="https://github.com/x-village/web-acccounting-example/tree/1.0"&gt;1.0&lt;/a&gt; 版才看起來像是一個可以動的網站&lt;br&gt;
但就算到這裡，還是有一個小錯 xD&lt;br&gt;
我想從這裡帶出測試的重要性&lt;/p&gt;
&lt;p&gt;統整一下，我整個課程設計想帶給學員的思考&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何思考一個後端架構 ? → 其他人的記帳程式&lt;/li&gt;
&lt;li&gt;溝通在寫程式是很重要的 → &lt;code&gt;README.md&lt;/code&gt;, &lt;code&gt;requriements.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如何除錯？ → 滿是錯誤的 view, postman 的使用&lt;/li&gt;
&lt;li&gt;為什麼測試是重要的？ → 整個網站雛形都出來了，還有埋錯&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整個構想聽起來是很美好&lt;br&gt;
但這次的嘗試，得到的評價不是很好&lt;br&gt;
其中一份回饋告訴我&lt;br&gt;
「他不太喜歡這樣先複製程式碼在學習如何修改的教學方式&lt;br&gt;
  因為一開始看不懂程式碼，只能照著我說的改，會很不知道自己在改什麼」&lt;br&gt;
很感謝願意給我建設性回饋的學員&lt;/p&gt;
&lt;p&gt;我也在思考&lt;br&gt;
到底是這樣的方式不適合初學者？&lt;br&gt;
還是我沒有把這樣的內容表達好？&lt;br&gt;
如果還有下次的機會&lt;br&gt;
除了思考課程的內容外，我還要多花點時間準備在台上的表達&lt;/p&gt;</content><category term="Gossiping"></category><category term="Education"></category></entry><entry><title>從 Andromoney 到 MOZE</title><link href="https://lee-w.github.io/posts/tech/2018/09/from-andromoney-to-moze" rel="alternate"></link><published>2018-09-09T16:00:00+08:00</published><updated>2018-09-09T16:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2018-09-09:/posts/tech/2018/09/from-andromoney-to-moze</id><summary type="html">&lt;p&gt;最近不小心被 &lt;a href="https://www.mozeapp.com"&gt;MOZE&lt;/a&gt; 的介面燒到&lt;br&gt;
一個衝動就從 &lt;a href="https://web.andromoney.com"&gt;AndroMoney&lt;/a&gt; 轉到 MOZE&lt;br&gt;
這篇算是來記錄從 AndroMoney 把資料轉換到 MOZE 的過程&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近不小心被 &lt;a href="https://www.mozeapp.com"&gt;MOZE&lt;/a&gt; 的介面燒到&lt;br&gt;
一個衝動就從 &lt;a href="https://web.andromoney.com"&gt;AndroMoney&lt;/a&gt; 轉到 MOZE&lt;br&gt;
這篇算是來記錄從 AndroMoney 把資料轉換到 MOZE 的過程&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;一些無關本文的前言&lt;/h2&gt;
&lt;p&gt;雖然 X-Village 暫時告一個段落，好像應該來寫個什麼&lt;br&gt;
但真的要寫起來還要再花一點時間&lt;/p&gt;
&lt;p&gt;上次 Blog 發文都已經是一年前的事了&lt;br&gt;
但點閱率竟然有一點在上升（雖然還是很低 QAQ）&lt;br&gt;
還有一些人看了我在 Logdown 的 LineBot 文跑來找我討論&lt;br&gt;
覺得蠻開心的 xD&lt;br&gt;
但這邊還是一直都沒辦法被找到 QQ&lt;br&gt;
以後考慮同步發到 Medium 好了&lt;/p&gt;
&lt;p&gt;不過好像該進入本文了 xD&lt;/p&gt;
&lt;h2 id="moze"&gt;為什麼換到 MOZE&lt;/h2&gt;
&lt;p&gt;當初在 Android 上使用 AndroMoney 就只是因為他免費，而且還算是好用&lt;br&gt;
剛好換到 iOS 的時候，這款 app 也在 App Store 有上架&lt;br&gt;
懶得轉換資料的情況下就繼續買了&lt;br&gt;
用下來覺得 AndroMoney 好像還是在 Android 上比較好用&lt;br&gt;
AndroMoney 的各種功能都很方便，只是介面上就比較普通 xD&lt;br&gt;
而且 AndroMoney 各個平台都有，就算哪天想換 Android 的手機也不怕轉換問題&lt;br&gt;
但是啊， MOZE 的介面就是好看 xD&lt;/p&gt;
&lt;p&gt;再來就要說說其他我喜歡 MOZE 的原因&lt;/p&gt;
&lt;h3 id="andromoney"&gt;AndroMoney 沒有 (或我不會用) 的功能&lt;/h3&gt;
&lt;h4&gt;借款事件&lt;/h4&gt;
&lt;p&gt;&lt;img alt="3-borrow.png" src="/images/posts-image/2018-09-09-andromoney-to-moze/3-borrow.png"&gt;&lt;/p&gt;
&lt;p&gt;MOZE 會幫我記住我借錢給誰，而且會一直提醒我誰跟我借了錢&lt;br&gt;
以前都還要特地記錄到其他 app&lt;/p&gt;
&lt;p&gt;&lt;img alt="4-borrow.png" src="/images/posts-image/2018-09-09-andromoney-to-moze/4-borrow.png"&gt;&lt;br&gt;
而且借出的錢，不會算在我的支出，所以也不會影響到我的預算&lt;br&gt;
算是蠻方便的功能&lt;/p&gt;
&lt;h4&gt;繳費事件&lt;/h4&gt;
&lt;p&gt;提醒我信用卡要繳費的時間&lt;br&gt;
也會有跟借款事件差不多的提醒&lt;/p&gt;
&lt;h4&gt;動態改變每天剩餘的預算&lt;/h4&gt;
&lt;p&gt;這是一個我還蠻需要的功能&lt;br&gt;
我會想知道前幾天花的錢如何影響我這個月剩下的日子的預算&lt;br&gt;
而不是一個從月初的預算直接除以 30 都不改變的數字&lt;/p&gt;
&lt;h4&gt;帳戶 icon&lt;/h4&gt;
&lt;p&gt;每個帳戶都能加入自己的 icon&lt;br&gt;
只要是付費版的 MOZE 就會有各家銀行的 icon&lt;br&gt;
&lt;img alt="5-icon.jpeg" src="/images/posts-image/2018-09-09-andromoney-to-moze/5-icon.jpeg"&gt;&lt;br&gt;
雖然他說是付費圖示，但其實這幾個是免費的&lt;br&gt;
只有其他類別的彩色圖是要購買&lt;br&gt;
但我是覺得原本的我比較喜歡 xD&lt;br&gt;
另外，也可以自己製作想要的 icon 匯入 ~&lt;/p&gt;
&lt;h4&gt;電子發票載具&lt;/h4&gt;
&lt;p&gt;以前都沒有什麼要用電子載具的誘因&lt;br&gt;
就完全忘了這回事&lt;br&gt;
現在這個可以直接幫我記帳就很吸引我&lt;br&gt;
而且他也有支援 wideget ，給店家掃過後，馬上就能用 Apple Pay&lt;/p&gt;
&lt;p&gt;另外，我原本以為從雲端載下消費紀錄，一定會要再創一個紀錄&lt;br&gt;
但其實這是可以連結到某一筆過去的紀錄&lt;br&gt;
這對我也是蠻重要的功能&lt;/p&gt;
&lt;p&gt;只是目前好像還不能針對轉帳或借款事件歸帳&lt;br&gt;
希望這些能透過 MOZE 3.0 會有的分帳功能解決&lt;/p&gt;
&lt;h4&gt;拆帳 (MOZE 3.0 才有)&lt;/h4&gt;
&lt;p&gt;雖然目前還沒有，但這個功能我現在很期待&lt;br&gt;
所以還是想列一下 xD&lt;/p&gt;
&lt;h3 id="moze_1"&gt;MOZE 沒有 (或我不會用) 的功能&lt;/h3&gt;
&lt;h4&gt;專案不能跨幣別&lt;/h4&gt;
&lt;p&gt;我之前去歐洲的那些紀錄就因為這樣，必須用標籤來分類 QQ&lt;br&gt;
不過聽說 MOZE 3.0 會新增就是&lt;/p&gt;
&lt;h4&gt;不能將單一紀錄不計算在花費中&lt;/h4&gt;
&lt;p&gt;主要是有些特別的花費我不會想要扣在我的預算中&lt;br&gt;
這樣那個月剩下的天數的預算就都會是 0，好像也不太對 ...&lt;/p&gt;
&lt;h4&gt;【AndroMoney 功能教學目錄】&lt;/h4&gt;
&lt;p&gt;這個我真的覺得超棒的&lt;br&gt;
他把目前能用他現有功能做到的事，全部整理起來&lt;br&gt;
現在 MOZE 還是比較需要去爬舊文翻，或直接問粉專&lt;br&gt;
但不得不說 MOZE 回復速度真的超快&lt;/p&gt;
&lt;h2 id="andromoney-to-moze-transformater"&gt;AndroMoney to MOZE transformater&lt;/h2&gt;
&lt;p&gt;身為一個攻城獅，當然還是要寫自動化的程式來幫我轉換資料格式&lt;br&gt;
手動要處理 5、6000 筆帳務紀錄有點太累了&lt;br&gt;
btw MOZE 有說之後會提供 web 版的匯入工具&lt;/p&gt;
&lt;p&gt;在 MOZE 首頁 FAQ 可以找到要如何匯入資料 (&lt;a href="https://docs.google.com/spreadsheets/d/1OeVuhID8l_vhmjHbDKReAXcLkIi0NvDUDIAwD9I8AYQ/edit?usp=sharing"&gt;MOZE 格式&lt;/a&gt;)&lt;br&gt;
基本上就是照著他的格式就能轉換大部分的資料&lt;/p&gt;
&lt;p&gt;當然我也寫了一個小 script&lt;br&gt;
&lt;strong&gt;&lt;a href="https://github.com/Lee-W/AndroMoney_to_MOZE_transformater"&gt;AndroMoney_to_MOZE_transformater&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="script"&gt;Script 使用方式&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python transformater.py --input_file &lt;span class="s2"&gt;&amp;quot;Your input filename&amp;quot;&lt;/span&gt; extract
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在轉換的過程中，會有一些資料還是要手動輸入的&lt;br&gt;
其實後來大多時間是花在這 ...&lt;/p&gt;
&lt;p&gt;會抓出的資料有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帳戶（以及其起始金額）&lt;/li&gt;
&lt;li&gt;專案&lt;/li&gt;
&lt;li&gt;主類別、次類別&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;後來發現還有另一個問題是不同幣別的轉帳， AndroMoney 匯出的資料不會有轉入的金額&lt;br&gt;
所以沒辦法自動化，這點倒是比較麻煩&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python transformater.py transformat --input_file &lt;span class="s2"&gt;&amp;quot;Your input filename&amp;quot;&lt;/span&gt; --output_file MOZE.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來就是要把原本 AndroMoney 的紀錄轉成 MOZE 的格式&lt;br&gt;
只要把這個 &lt;code&gt;MOZE.csv&lt;/code&gt; (一定要是這個檔名) 丟到 Dropbox 的 &lt;code&gt;應用程式/MOZE&lt;/code&gt;&lt;br&gt;
MOZE 就能找到，並能選擇匯入&lt;/p&gt;
&lt;h3 id="_2"&gt;踩到的一些坑&lt;/h3&gt;
&lt;p&gt;寫這個 script 的過程中，其實踩到蠻多坑的&lt;br&gt;
匯入了好幾次才成功&lt;/p&gt;
&lt;p&gt;一來這是我第一次從&lt;a href="https://docs.python.org/3/library/argparse.html"&gt;argparse&lt;/a&gt; 換到&lt;a href="http://click.pocoo.org"&gt;click&lt;/a&gt;&lt;br&gt;
原本想說 argparse 已經算是蠻好用的了&lt;br&gt;
click 真的又更直覺了一點，難怪這麼多人推薦&lt;/p&gt;
&lt;p&gt;第一個遇到的問題就是轉帳的「相關行數」&lt;br&gt;
一開始不知道這個行數是從多少開始&lt;br&gt;
以寫程式來說，我就直接去抓那個 row 的 index&lt;br&gt;
所以抓到的 index 是 0-based&lt;br&gt;
後來想到可以試試看 1-based，還是無法匯入成功&lt;br&gt;
最後才發現還要把標頭也考慮進去&lt;br&gt;
第一個 row 其實 index 是 2&lt;/p&gt;
&lt;p&gt;第二個問題是轉帳的類別&lt;br&gt;
文件其實只說不用「子類別」，沒說「主類別」要怎麼處理 xD&lt;br&gt;
我試了各種可能的類別後&lt;br&gt;
自己去匯出了一筆轉帳紀錄，才解決&lt;br&gt;
原來轉帳的主類別分別會是「轉入」跟「轉出」&lt;br&gt;
&lt;img alt="1-doc.png" src="/images/posts-image/2018-09-09-andromoney-to-moze/1-doc.png"&gt;&lt;/p&gt;
&lt;p&gt;後來弄完後有再去看一下文件，才發現下面其實有寫 ......&lt;br&gt;
&lt;img alt="2-doc.png" src="/images/posts-image/2018-09-09-andromoney-to-moze/2-doc.png"&gt;&lt;/p&gt;
&lt;p&gt;這些問題我都跟作者反應了，他都超快就回了&lt;br&gt;
他是說之後會透過 web 版的工具匯入&lt;/p&gt;
&lt;h2 id="future-improvement"&gt;Future Improvement&lt;/h2&gt;
&lt;p&gt;其實我還是蠻喜歡 AndroMoney 的&lt;br&gt;
所以也許會找個時間寫怎麼把 MOZE 轉回 AndroMoney 的功能會寫個 MOZE to AndroMoney&lt;br&gt;
避免我哪天又想回到 Android 了 xD&lt;/p&gt;</content><category term="Tech"></category><category term="Develop"></category><category term="Utility"></category></entry><entry><title>GitHub Resume</title><link href="https://lee-w.github.io/posts/tech/2017/08/GitHub-Resume" rel="alternate"></link><published>2017-08-01T23:00:00+08:00</published><updated>2017-08-01T23:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-08-01:/posts/tech/2017/08/GitHub-Resume</id><summary type="html">&lt;p&gt;最近發現了這個可以自動從自己的 Github 上產生履歷的東西&lt;br&gt;
&lt;a href="https://github.com/resume/resume.github.com"&gt;GitHub Résumé&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近發現了這個可以自動從自己的 Github 上產生履歷的東西&lt;br&gt;
&lt;a href="https://github.com/resume/resume.github.com"&gt;GitHub Résumé&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;實在有點有趣，就來玩了一下&lt;br&gt;
只要在 repo 上按了 star，你就可以透過&lt;a href="http://resume.github.io"&gt;他的頁面&lt;/a&gt; 產生你的 GitHub 履歷&lt;br&gt;
基本上就是各種以往的專案和貢獻的統整&lt;/p&gt;
&lt;p&gt;&lt;a href="http://resume.github.io/?Lee-W"&gt;我的 GitHub 履歷&lt;/a&gt;&lt;br&gt;
果然我光 Python 跟 Jupyter Notebook 加起來就六成了 XD&lt;/p&gt;</content><category term="Tech"></category><category term="GitHub"></category><category term="Resume"></category></entry><entry><title>Practical Vim</title><link href="https://lee-w.github.io/posts/tech/2017/06/Practical-Vim" rel="alternate"></link><published>2017-06-26T08:50:00+08:00</published><updated>2017-06-26T08:50:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-06-26:/posts/tech/2017/06/Practical-Vim</id><summary type="html">&lt;p&gt;每天一回一回的看，終於把&lt;a href="https://pragprog.com/book/dnvim/practical-vim"&gt;Practical Vim&lt;/a&gt;看完了&lt;br/&gt;
不過到了後期，大部分就真的都看不太懂了＝ ＝&lt;br/&gt;
所以大多還是只記錄了前期我比較看得懂的一些 tip&lt;/p&gt;
</summary><content type="html">&lt;p&gt;每天一回一回的看，終於把&lt;a href="https://pragprog.com/book/dnvim/practical-vim"&gt;Practical Vim&lt;/a&gt;看完了&lt;br/&gt;
不過到了後期，大部分就真的都看不太懂了＝ ＝&lt;br/&gt;
所以大多還是只記錄了前期我比較看得懂的一些 tip&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="ch1-the-vim-way"&gt;Ch1: The Vim Way&lt;/h2&gt;
&lt;h3 id="tip2-dont-repeat-yourself"&gt;Tip2: Don't Repeat Yourself&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; command: Repeat the last change&lt;ul&gt;
&lt;li&gt;Command in normal mode&lt;/li&gt;
&lt;li&gt;The insert mode between two normal mode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="repeatable-action-and-how-to-repeat-them"&gt;Repeatable action and how to repeat them&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Intent&lt;/th&gt;
&lt;th&gt;Act&lt;/th&gt;
&lt;th&gt;Repeat&lt;/th&gt;
&lt;th&gt;Reverse&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Make a change&lt;/td&gt;
&lt;td edit=""&gt;&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scan line for next character&lt;/td&gt;
&lt;td char=""&gt;f&lt;/td&gt;
&lt;td&gt;;&lt;/td&gt;
&lt;td&gt;,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scan line for previous character&lt;/td&gt;
&lt;td char=""&gt;F&lt;/td&gt;
&lt;td&gt;;&lt;/td&gt;
&lt;td&gt;,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scan document for next match&lt;/td&gt;
&lt;td&gt;/pattern&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scan document for previous match&lt;/td&gt;
&lt;td&gt;?pattern&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Perform substitution&lt;/td&gt;
&lt;td&gt;:s/target/replacement&lt;/td&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Execute a sequence of changes&lt;/td&gt;
&lt;td changes=""&gt;qx&lt;/td&gt;
&lt;td&gt;@x&lt;/td&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="ch2-normal-mode"&gt;Ch2: Normal Mode&lt;/h2&gt;
&lt;h3 id="tip10-use-counts-to-do-simple-arithmetic"&gt;Tip10: Use Counts to Do Simple Arithmetic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;C-a&amp;gt;&lt;/code&gt;: Add number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;C-x&amp;gt;&lt;/code&gt;: Sub number&lt;/li&gt;
&lt;li&gt;What if the cursor is not on a number?&lt;ul&gt;
&lt;li&gt;Operate on the number after the cursor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="combine-and-conquer"&gt;Combine and Conquer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Operator + Motion = Action&lt;/li&gt;
&lt;li&gt;When an operator command is invoked in duplicate, it acts upon the current line (e.g. dd)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Trigger&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;Delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;Yank into register&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;g!&lt;/td&gt;
&lt;td&gt;Swap case&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gu&lt;/td&gt;
&lt;td&gt;Make lowercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gU&lt;/td&gt;
&lt;td&gt;Make uppercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;Shift right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;Shift left&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;Autoindent&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="ch3-insert-mode"&gt;Ch3: Insert Mode&lt;/h2&gt;
&lt;h3 id="tip13-make-corrections-instantly-from-insert-mode"&gt;Tip13: Make Corrections Instantly from Insert Mode&lt;/h3&gt;
&lt;p&gt;If we make a mistake while composing text in Insert mode, we can fix it immediately&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keystrokes&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;C-h&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete back one character(backspace)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete back one word&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;C-u&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete back to start of line&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The keystrokes above can also be used in bash shell&lt;/p&gt;
&lt;h3 id="tip14-get-back-to-normal-mode"&gt;Tip14: Get Back to Normal Mode&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;C-o&amp;gt;&lt;/code&gt; Switch to Insert Normal mode&lt;/p&gt;
&lt;h3 id="tip15-paste-from-a-register-without-leaving-insert-mode"&gt;Tip15: Paste from a Register Without Leaving Insert Mode&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;C-r&amp;gt;0&lt;/code&gt;: Paste the text that we just yanked at the current cursor position&lt;/p&gt;
&lt;h3 id="tip19-overwrite-existing-text-with-replace-mode"&gt;Tip19: Overwrite Existing Text with Replace Mode&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt;: Enter replace mode&lt;/p&gt;
&lt;h2 id="ch5-command-line-mode"&gt;Ch5: Command-Line Mode&lt;/h2&gt;
&lt;h3 id="tip28-execute-a-command-on-one-or-more-consecutive-lines"&gt;Tip28: Execute a Command on One or More Consecutive Lines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;range&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:{start, end}&lt;/code&gt;: from line "start" to line "end"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;: current line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;: all lines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tip31-repeat-the-last-ex-commands"&gt;Tip31: Repeat the Last Ex Commands&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@:&lt;/code&gt;: Repeat the last Ex command&lt;/p&gt;
&lt;h3 id="tip32-tab-complete-your-ex-commands"&gt;Tip32: Tab-Complete Your Ex Commands&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;C-d&amp;gt;&lt;/code&gt;: Reveal a list of possible completions&lt;/p&gt;
&lt;h3 id="tip33-insert-the-current-word-at-the-command-prompt"&gt;Tip33: Insert the Current Word at the Command Prompt&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;C-r&amp;gt;&amp;lt;C-w&amp;gt;&lt;/code&gt;: Get the word under cursor in Ex mode&lt;/p&gt;
&lt;h2 id="ch8-navigate-inside-files-with-motions"&gt;Ch8: Navigate Inside Files with Motions&lt;/h2&gt;
&lt;p&gt;This chapter is extremely practical&lt;/p&gt;
&lt;h2 id="ch9-navigate-between-files-with-jumps"&gt;Ch9: Navigate Between Files with Jumps&lt;/h2&gt;
&lt;h3 id="tip55-travel-the-jump-list"&gt;Tip55: Travel the Jump List&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[count]G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to line number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;//pattern&amp;lt;CR&amp;gt;/?pattern&amp;lt;CR&amp;gt;/n/N&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to next/previous occurrence of pattern&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to matching parenthesis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(&lt;/code&gt;/&lt;code&gt;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to start of previous/next sentence&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{&lt;/code&gt;/&lt;code&gt;}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to start of previous/next paragraph&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;H&lt;/code&gt;/&lt;code&gt;M&lt;/code&gt;/&lt;code&gt;L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to top/middle/bottom of screen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to file name under the cursor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;C-]&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to definition of keyword under the cursor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jump to a mark&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="ch12-matching-patterns-and-literals"&gt;Ch12: Matching Patterns and Literals&lt;/h2&gt;
&lt;h3 id="tip74-use-the-v-literal-switch-for-verbatim-searches"&gt;Tip74: Use the \V Literal Switch for Verbatim Searches&lt;/h3&gt;
&lt;p&gt;Put &lt;code&gt;\V&lt;/code&gt; before words when searching can cancel regular expression&lt;/p&gt;
&lt;h2 id="ch13-search"&gt;Ch13: Search&lt;/h2&gt;
&lt;h3 id="tip81-preview-the-first-match-before-execution"&gt;Tip81: Preview the First Match Before Execution&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;&amp;lt;C-r&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; to autocomplete when searching&lt;/p&gt;
&lt;h2 id="ch14"&gt;Ch14&lt;/h2&gt;
&lt;h3 id="tip88-find-and-replace-every-match-in-a-file"&gt;Tip88: Find and Replace Every Match in a File&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;%s/word1/word2/g&lt;/code&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Vim"></category><category term="Note"></category></entry><entry><title>Python@Instagram</title><link href="https://lee-w.github.io/posts/tech/2017/06/Python-at-IG" rel="alternate"></link><published>2017-06-22T22:10:00+08:00</published><updated>2017-06-22T22:10:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-06-22:/posts/tech/2017/06/Python-at-IG</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;Lisa Guo, Hui Ding Keynote PyCon 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2017/keynote-lisa-guo-and-hui-ding-python-at-instagram"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;終於好好花個時間看完今年 IG 在 PyCon US 的 Talk 了&lt;br/&gt;
的確蠻值得大家花這個時間去看的&lt;/p&gt;
</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;Lisa Guo, Hui Ding Keynote PyCon 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/pycon2017/keynote-lisa-guo-and-hui-ding-python-at-instagram"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;終於好好花個時間看完今年 IG 在 PyCon US 的 Talk 了&lt;br/&gt;
的確蠻值得大家花這個時間去看的&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;如果要看懶人包&lt;br/&gt;
Google 一下「PyCon」、「Instagram」有很多很清楚地整理&lt;br/&gt;
我也整理了一點點我覺得特別有意思的&lt;/p&gt;
&lt;h2 id="why-python"&gt;Why Python?&lt;/h2&gt;
&lt;p&gt;(一開始主要是歷史因素，因為當初的創辦人就這麼用了 XD)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use Proven Technology&lt;ul&gt;
&lt;li&gt;Users do not care what database Instagram runs on. They certainly don't care what language Instagram develop in.&lt;/li&gt;
&lt;li&gt;Focus on scoping and solve real problems rather than getting stuck on language detail.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="but-python-is-still-slow-right"&gt;But Python is still slow, right?&lt;/h2&gt;
&lt;p&gt;At instagram, our bottlenecck is development velocity, not pure code execution&lt;/p&gt;
&lt;p&gt;The conclusion is that you can get to a few hundred million users with Python before worrying about the performance of framework and language&lt;/p&gt;
&lt;h2 id="python-efficiency-strategy"&gt;Python Efficiency Strategy&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Build extensive tools to profile and understand performance bottleneck&lt;/li&gt;
&lt;li&gt;Moving stable, citical compenents to C/C++&lt;/li&gt;
&lt;li&gt;Cythonization&lt;/li&gt;
&lt;li&gt;Async? New Python runtime?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="road-to-python3"&gt;Road to Python3&lt;/h2&gt;
&lt;p&gt;這一段講到 Instragram 如何從 Python2 轉到 Python3 的過程&lt;br/&gt;
我覺得很精彩，所以大家就自己去看吧 XD&lt;/p&gt;
&lt;p&gt;我只紀錄一個我覺得特別有趣的東西&lt;br/&gt;
如同大家所知道的 Python2 跟 Python3 一個很大的不同點，就是對於 byte 跟 str 的處理&lt;br/&gt;
這就會導致我們必須先確認他的型態是否符合預期&lt;br/&gt;
如果不符合就要在做 encode 或 decode&lt;/p&gt;
&lt;p&gt;可能就會像下面這樣&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'abc'&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;six&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mymac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hamc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instagram 處理這種問題的功能實作成 &lt;code&gt;ensure_binary&lt;/code&gt;, &lt;code&gt;ensure_str&lt;/code&gt;, &lt;code&gt;ensure_text&lt;/code&gt; 這類的 helper function&lt;/p&gt;
&lt;p&gt;這也是我之前在 trace &lt;a href="https://github.com/pytransitions/transitions"&gt;transitions&lt;/a&gt; 的 source code&lt;br/&gt;
發現有一個&lt;a href="https://github.com/pytransitions/transitions/blob/2cb42916affe167a8d94cdfdf56ab08b41ccd05c/transitions/core.py#L25"&gt;listify&lt;/a&gt; 的 function&lt;br/&gt;
雖然是蠻簡單的小技巧，不過還算蠻實用的&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="PyCon"></category></entry><entry><title>PyCon TW 2017 - Sprint</title><link href="https://lee-w.github.io/posts/tech/2017/06/PyCon-TW-2017-Sprint" rel="alternate"></link><published>2017-06-17T16:07:00+08:00</published><updated>2017-06-17T16:07:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-06-17:/posts/tech/2017/06/PyCon-TW-2017-Sprint</id><summary type="html">&lt;p&gt;這天的 Sprint 是由今年的 Keynote Speaker - Russell Keith-Magee 帶來他的開源專案&lt;a href="https://pybee.org"&gt;BeeWare&lt;/a&gt;&lt;br&gt;
讓大家一起來貢獻&lt;br&gt;
這個專案還蠻有趣的&lt;br&gt;
主要就是要讓 Python 能在各平台上跑 (i.e. web, mobile)&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這天的 Sprint 是由今年的 Keynote Speaker - Russell Keith-Magee 帶來他的開源專案&lt;a href="https://pybee.org"&gt;BeeWare&lt;/a&gt;&lt;br&gt;
讓大家一起來貢獻&lt;br&gt;
這個專案還蠻有趣的&lt;br&gt;
主要就是要讓 Python 能在各平台上跑 (i.e. web, mobile)&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;而且這個專案對新手還蠻友善的，文件中就有提供&lt;a href="https://pybee.org/contributing/how/first-time/what/"&gt;First Time Contributor&lt;/a&gt;&lt;br&gt;
第一次貢獻的人建議貢獻的專案是&lt;a href="https://github.com/pybee/voc"&gt;voc&lt;/a&gt;(Android) 和&lt;a href="https://github.com/pybee/batavia"&gt;batavia&lt;/a&gt;(JavaScript)&lt;br&gt;
而且在裡面的 issue 還會標注 first timer only&lt;br&gt;
&lt;img alt="first-timer-only" src="/images/posts-image/2017-06-12-PyCon-TW-2017-Sprint/1-new-comer.png"&gt;&lt;/p&gt;
&lt;p&gt;雖然我其實對 Java 跟 JavaScript 都不熟&lt;br&gt;
但比起來還是對 JavaScript 多了一點愛&lt;br&gt;
所以我就來貢獻 batavia 了&lt;/p&gt;
&lt;p&gt;雖然其實我的貢獻大多就是文件上少寫跟一些錯誤&lt;br&gt;
最後還有幫 Python 的 list 轉成 js 加了幾個小 method&lt;br&gt;
原本想解決 args 跟 kwargs 的 issue，但果然還是對 JS 太不熟了ＱＱ&lt;br&gt;
不過覺得整體來說是蠻好玩的&lt;/p&gt;
&lt;p&gt;Russell 都會很友善地回答問題&lt;br&gt;
像我一開始採的雷就是 batavia 還沒支援到 Python3.6，他也很熱心幫我解決&lt;br&gt;
我問了好幾個專案的小問題，Russell 都會說 "That's can be a pull request"&lt;br&gt;
只要送了 PR 就可以得到&lt;a href="https://pybee.org/contributing/challenge-coins/"&gt;Challenge Coins&lt;/a&gt;&lt;br&gt;
拿到這個 challenge coin 其實還蠻開心的 xd&lt;/p&gt;
&lt;p&gt;&lt;img alt="Challenge Coin" src="/images/posts-image/2017-06-12-PyCon-TW-2017-Sprint/2-challenge-coin.jpg" style="width:30%"&gt;&lt;/p&gt;
&lt;p&gt;最後再附上在 twitter 上，這次參與 spinrt 的大合照&lt;br&gt;
&lt;img alt="all" src="/images/posts-image/2017-06-12-PyCon-TW-2017-Sprint/3-all.jpg" style="width:50%"&gt;&lt;/p&gt;
&lt;p&gt;2017/6/22&lt;br&gt;
折騰了許久，我的&lt;a href="https://github.com/pybee/batavia/pull/569"&gt;PR&lt;/a&gt; 終於被 merge 回 batavia 了 XD&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這次的 PyCon 2017 大致就到這裡結束了&lt;br&gt;
這幾篇文章大概先整理了，當時做的筆記&lt;br&gt;
也許之後有時間，再好好看一次影片跟 Slide，重新整理一下所有的內容&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Conference"></category><category term="PyCon"></category></entry><entry><title>PyCon TW 2017 - Day 3</title><link href="https://lee-w.github.io/posts/tech/2017/06/PyCon-TW-2017-Day3" rel="alternate"></link><published>2017-06-11T09:00:00+08:00</published><updated>2017-06-18T14:08:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-06-11:/posts/tech/2017/06/PyCon-TW-2017-Day3</id><summary type="html">&lt;p&gt;這天就是 PyCon 的最後一天了&lt;br&gt;
聽說這是 PyCon 第一次引入 Unconference&lt;br&gt;
今年 Unconf 都還蠻有趣的，讓我一直猶豫到底要一般議程還是 Unconference&lt;br&gt;
不過 Unconference 那邊聲音就有點糊聽不太清楚&lt;br&gt;
不知道是不是 R4 場地的關係&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這天就是 PyCon 的最後一天了&lt;br&gt;
聽說這是 PyCon 第一次引入 Unconference&lt;br&gt;
今年 Unconf 都還蠻有趣的，讓我一直猶豫到底要一般議程還是 Unconference&lt;br&gt;
不過 Unconference 那邊聲音就有點糊聽不太清楚&lt;br&gt;
不知道是不是 R4 場地的關係&lt;/p&gt;
&lt;!--more--&gt;

&lt;hr&gt;
&lt;h2 id="_1"&gt;議程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;[Keynote] From Little Things, Big Things Grow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;比美麗的湯更美麗：pyquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;Write Elegant Concurrent Code in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;enjoy type hinting and its benefits (我很想聽這場，不過還是先跑去聽 Unconference 了 XD)&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/masahitojp/the-benefits-of-type-hintss"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHkqR2Dvkb"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coding test-driven Python package with CI and cloud&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;Unconference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;Lightning Talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='1'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="keynote-from-little-things-big-things-grow"&gt;[Keynote] From Little Things, Big things grow.&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Chinese Intro" src="/images/posts-image/2017-06-11-PyCon-TW-2017-Day3/1-Keynote-Chineses.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Russell 開場就講了一串中文，引來如雷的掌聲 xD&lt;br&gt;
他在 PyCon 官網的介紹也很有趣 xD&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;他剩下兩洲就能完成 Python 會議基調演講全大洲制霸；
只要企鵝們願意舉辦 PyCon 南極洲，他很樂意提供演說。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同時，他也在這次 PyCon 的 Sprint 帶來專案跟大家分享&lt;/p&gt;
&lt;p&gt;不過 Russell 的英文語速就真的有點快，超過我能好好做筆記的語速了 QQ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FryvqnPv1-"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="technical-issues-are-often-social"&gt;Technical issues are often social&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Backward Compatibility matters&lt;ul&gt;
&lt;li&gt;But it also has a price&lt;ul&gt;
&lt;li&gt;Hard to introduce new features&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Timing matters&lt;/li&gt;
&lt;li&gt;Messaging matters&lt;/li&gt;
&lt;li&gt;Reading the tea leaves (Trend?)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://headrush.typepad.com/creating_passionate_users/2005/10/getting_users_p.html"&gt;The Kick Ass Curve&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tool-and-ecosystem"&gt;Tool and ecosystem&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Community matters&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="accessibility"&gt;Accessibility&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Toxic shock&lt;/li&gt;
&lt;li&gt;Denial is not a river in Egypt&lt;ul&gt;
&lt;li&gt;Complaining matters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Codes of Conduct in practice&lt;/li&gt;
&lt;li&gt;Outreach is important&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="patches-welcome"&gt;Patches welcome&lt;/h3&gt;
&lt;h3 id="develop-a-funding-culture"&gt;Develop a funding culture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Make it easy to&lt;ul&gt;
&lt;li&gt;spend money and receive money&lt;/li&gt;
&lt;li&gt;do the right things&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Don't assume resources are free&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q-a"&gt;Q &amp;amp; A&lt;/h3&gt;
&lt;p&gt;這好像是我第一次在 R0 舉手提問&lt;br&gt;
最後因為時間關係沒被叫到 QQ&lt;br&gt;
不過我還是跑到前面去問 Russell，如何在 Backward Compatibility 和 New Fatures 中取捨&lt;br&gt;
Russell 的回答是如果專案已經持續很長的一段時間，並且有一定的使用者&lt;br&gt;
Backward Compatibility 就是一件很重要的事&lt;br&gt;
因為我們並不會希望以前的使用者不能在使用&lt;br&gt;
不過如果是新開始的專案，那就從新的開始就好&lt;br&gt;
像他現在的&lt;a href="https://pybee.org"&gt;Bee Ware&lt;/a&gt; 就是全用 Python3&lt;/p&gt;
&lt;p&gt;下午 Russell 會給一場跟 Bee Ware 有關的 Talk - &lt;a href="https://hackmd.io/s/HkqR2Dvkb#1300-1345talk-stranger-in-a-strange-land"&gt;Stranger in Strange Land&lt;/a&gt;&lt;br&gt;
不過因為標了很高的難度，想說我應該也聽不懂，也先沒去聽了 xd&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='2'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pyquery"&gt;比美麗的湯更美麗：pyquery&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aji.tw/slides/pycon2017/#/"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pyquery_1"&gt;&lt;a href="https://github.com/gawel/pyquery"&gt;pyquery&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用 jquery 的方式來做 parsing&lt;/li&gt;
&lt;li&gt;可以做 crawling ( 一個 lib 就做了 requests + bs4 的事啊！ )&lt;/li&gt;
&lt;li&gt;可以拿 selenium 當 opener&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;裝不起來的問題，通常是因為 lxml 沒裝好&lt;/p&gt;
&lt;p&gt;感覺是一個很值得期待的 library&lt;br&gt;
下次要寫爬蟲，再拿它來試試看&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='3'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="write-elegant-concurrent-code-in-python"&gt;Write Elegant Concurrent Code in Python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/mosky/elegant-concurrency"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/HkqR2Dvkb#1115-1200-talk-write-elegant-concurrent-code-in-python"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/moskytw/elegant-concurrency-lab"&gt;Sample Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Concurreny: 一段時間內同時跑&lt;br&gt;
Parallel: 一個時間點同時跑&lt;/p&gt;
&lt;h3 id="why-concurrency"&gt;Why Concurrency?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Get the machine into full play! 不要讓 CPU 空轉！&lt;/li&gt;
&lt;li&gt;通常不會用 Python 解 CPU Bound 的問題，而是 I/O Bound 的問題&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;聽完這場，感嘆自己真的對 Concurrent 還是不太懂＠＠&lt;br&gt;
雖然我沒記什麼筆記&lt;br&gt;
不過 Slide 很清楚，共筆也記了很多&lt;br&gt;
還附上 Sample Code 了&lt;br&gt;
哪天比較懂 Concurrent 的時候再回來看應該會比較有感覺吧&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='5'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="unconference"&gt;Unconference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FrkMXWDTyb"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="line-chatbot"&gt;大會遊戲 line chatbot 黑白亂做&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/adrianliaw/quizbot-2017"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="bot"&gt;懶得答題？寫個 bot 來幫你刷榜&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aweimeow/PyConTW2017-UnConf-Slide"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aweimeow/PyConTW2017-Quiz-Solver"&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;跟著上面那一個 Unconference 做的大會 chat bot&lt;br&gt;
就有會眾分享如何寫一個 bot 自動去達大會的題目 xdd&lt;br&gt;
覺得很有趣&lt;/p&gt;
&lt;h3 id="what-steve-jobs-taught-me-about-software-development-and-life-in-general"&gt;What Steve Jobs Taught Me about Software Development and Life in General&lt;/h3&gt;
&lt;p&gt;這就是 Carosell 待過 Apple 的 VP&lt;br&gt;
大致上覺得跟&lt;a href="http://lee-w.github.io/posts/book/2016/03/essentialism/#essentialism"&gt;少，但是更好&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Saying, "No!" enables focus, flow, success.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to decide when to say "yes"?&lt;ul&gt;
&lt;li&gt;The one that changes your life would be a good one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='6'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="lightning-talk"&gt;Lightning Talk&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHJu2JvTyW"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lightning Talk 大概是 PyCon 最歡樂的時候了&lt;br&gt;
因為只有 5 分鐘，不然就要被拔線了&lt;br&gt;
大家都得講得很快&lt;/p&gt;
&lt;p&gt;今年的 PyCon 金句大概就是 Hisahiro Ohmura 推坑 PyCon JP 的&lt;/p&gt;
&lt;p&gt;&lt;img alt="Buy First, Consider Second" src="/images/posts-image/2017-06-11-PyCon-TW-2017-Day3/2-buy-first.jpg"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;聽不懂日文？
沒關係
我也聽不太懂中文
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外，就像 jserv 的 slide 上說的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;每年的 pycon 好像都有其他語言的東西混進來，像是 15 年有人根本是在講 d3.js
只是用 python 幫忙準備資料 ;
今年是有人全部都在講 Rust，只是我們用 Rust 寫了個 python module XDDD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lightning Talk 馬上就出現一個 julia 了 xddd&lt;br&gt;
記得兩年前的 PyCon 超多 Julia 的&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Conference"></category><category term="PyCon"></category></entry><entry><title>PyCon TW 2017 - Day 2</title><link href="https://lee-w.github.io/posts/tech/2017/06/PyCon-TW-2017-Day2" rel="alternate"></link><published>2017-06-10T09:00:00+08:00</published><updated>2017-06-18T12:37:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-06-10:/posts/tech/2017/06/PyCon-TW-2017-Day2</id><summary type="html">&lt;p&gt;第二天有一整個時段的 Job Fair，可以出去晃晃到各個攤販聊天&lt;br&gt;
最有印象的大概就是 Carousel，跟他們聊得還蠻開心的&lt;br&gt;
還多玩了幾次他們的大家來找碴 XD&lt;br&gt;
在 conf 看到他們這麼多次，第一次知道他們來自新加坡&lt;br&gt;
隔天還會有一位待過 Apple 的 VP 會來 Unconf 分享&lt;/p&gt;
</summary><content type="html">&lt;p&gt;第二天有一整個時段的 Job Fair，可以出去晃晃到各個攤販聊天&lt;br&gt;
最有印象的大概就是 Carousel，跟他們聊得還蠻開心的&lt;br&gt;
還多玩了幾次他們的大家來找碴 XD&lt;br&gt;
在 conf 看到他們這麼多次，第一次知道他們來自新加坡&lt;br&gt;
隔天還會有一位待過 Apple 的 VP 會來 Unconf 分享&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;今年還有音樂會呢，覺得還蠻有趣的&lt;br&gt;
雖然聽完有點晚才去吃晚餐，剩的東西都不多了ＱＱ&lt;/p&gt;
&lt;p&gt;&lt;img alt="Piano" src="/images/posts-image/2017-06-10-PyCon-TW-2017-Day2/1-piano.jpg" style="width:50%"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Symphony" src="/images/posts-image/2017-06-10-PyCon-TW-2017-Day2/2-symphony.jpg" style="width:50%"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="_1"&gt;議程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;[Keynote] Building for Failure: Leraning Lessons from Aviation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[自py系列2] 投資策略驗證系統&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1i5PwAHxXZQ2fewn194_gRU3kMG5s-04s1Pil0yJREHQ/edit#slide=id.g1ce6af9da4_1_8"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FBkMVJwTy-"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;對話機器人的腦子與靈魂 Bot's Brain and Soul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;鄉民教我做的聊天機器人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Why do projects fail?&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/ssuser2cbb78/pycon-tw-2017-why-do-projects-fail-lets-talk-about-the-story-of-sinonpy"&gt;Slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;利用 Python 與人工智慧快速打造人性化聊天機器人 (IBM)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;Chatbot @ E.Sun Bank – 玉山小i隨身金融顧問的兩三事 (玉山)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='1'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="keynote-building-for-failure-learning-lessons-from-aviation"&gt;[Keynote] Building for Failure: Learning Lessons from Aviation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/andrewgodwin/building-for-failure-learning-lessons-from-aviation"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FBk3_mwakZ"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="warnings"&gt;Warnings&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Soft Failure&lt;/th&gt;
&lt;th&gt;Hard Failure&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Obscure errors and try to carry on&lt;/td&gt;
&lt;td&gt;Quit at the first error and log it&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Noisy Warnings&lt;ul&gt;
&lt;li&gt;Engineers ignore logs/notifications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Precise Warnings&lt;ul&gt;
&lt;li&gt;Alert on actionable things, then fix them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Raise clear, verbose exception&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://api.com/user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;RequestError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;APIFetchError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Could not get user list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="testing"&gt;Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;100% Coverage Fallacy&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Too many tests that are fragile so you ignore them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="checklist"&gt;Checklist&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The step between manual and automation&lt;/li&gt;
&lt;li&gt;Cheap and very effective&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="find-the-limits"&gt;Find the limits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The Load Testing&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Netflix/chaosmonkey"&gt;Chaos Monkey&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;測試 server 復原能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Restore from backups&lt;/li&gt;
&lt;li&gt;The "Red Team"&lt;ul&gt;
&lt;li&gt;攻擊系統的工程師們&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="trade-off-between-redundancy-acceptable-loss"&gt;Trade off between Redundancy &amp;amp; Acceptable Loss&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Redundancy&lt;/th&gt;
&lt;th&gt;Acceptable Loss&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;What do you fall back to?&lt;/td&gt;
&lt;td&gt;Quantify the loss, and recovery&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="team"&gt;Team&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No Single Cause → No Blame Culture&lt;ul&gt;
&lt;li&gt;Not someone's mistake&lt;/li&gt;
&lt;li&gt;Systematic Problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clear command chains&lt;ul&gt;
&lt;li&gt;Who makes decisions?&lt;/li&gt;
&lt;li&gt;Who does the fixing?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Leadership can blind&lt;ul&gt;
&lt;li&gt;Debate for what is right&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Crew Resource Management&lt;/li&gt;
&lt;li&gt;Increase your "bus factor"&lt;ul&gt;
&lt;li&gt;People get ill → 一個專案至少要 2 個以上的人懂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Good engineering is not just code&lt;ul&gt;
&lt;li&gt;Communication matters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Slower can be faster&lt;ul&gt;
&lt;li&gt;Testing, Writing Documents make a project slower in short term, but faster in long term&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="speakers-advice"&gt;Speakers Advice&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Checklists&lt;/li&gt;
&lt;li&gt;Restore your backups&lt;/li&gt;
&lt;li&gt;Work out roughly what happens for every part of a system failing, and if you care&lt;/li&gt;
&lt;li&gt;Reward people whose code quietly works, not those who firefight and take the glory&lt;/li&gt;
&lt;li&gt;Checklists&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='3'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="bots-brain-and-soul"&gt;對話機器人的腦子與靈魂 Bot's Brain and Soul&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/Hyt_yvak-#1130-1215-talk-對話機器人的腦子與靈魂-bot’s-brain-and-soul"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這場人太多了，連坐下來的位置都沒有ＱＱ&lt;br&gt;
不過共筆寫得很清楚了&lt;br&gt;
我這裡記錄的是會後跟講者討論的一些問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Q: Language Generation 要怎麼做 Evaluation，怎樣才算是符合文法？怎樣算是合理的回答？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判定很主觀&lt;/li&gt;
&lt;li&gt;很多研究會導入 Human Evaluation&lt;/li&gt;
&lt;li&gt;目前還是一個 Open Question&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: 目前關於情緒判斷，是否已經到了 Production 了？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尚未到 Production&lt;/li&gt;
&lt;li&gt;這樣的問題很難做，其中一個原因在於資料很難收集&lt;/li&gt;
&lt;li&gt;另一個原因是，就算沒有辦法判斷情緒，通常也不會造成太大的問題。不像意圖如果判斷錯誤，就會提供錯誤的服務&lt;/li&gt;
&lt;li&gt;香港科技大學目前有一個可以判斷人格的 Bot( 我找不太到＠＠ )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='4'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;鄉民教我做的聊天機器人&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/RyanChao3/pycon2017-chatbot"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/Hyt_yvak-#1325-1355-talk-鄉民教我做的聊天機器人"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://line.me/R/ti/p/%40nlj2850e"&gt;Line Bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chinese-conversation-data"&gt;Chinese Conversation Data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Movie subtitle&lt;ul&gt;
&lt;li&gt;主題發散，不太容易收斂&lt;ul&gt;
&lt;li&gt;先過去出資料用語&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Seq2seq&lt;ul&gt;
&lt;li&gt;只能回應簡單的問題&lt;/li&gt;
&lt;li&gt;大部分回答都是「我不知道」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PTT&lt;ul&gt;
&lt;li&gt;八卦版標題和推文有應對關係 → 問答&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="backend-platform"&gt;Backend &amp;amp; Platform&lt;/h3&gt;
&lt;p&gt;~48 萬篇文章&lt;/p&gt;
&lt;h3 id="information-retrieval"&gt;Information Retrieval&lt;/h3&gt;
&lt;p&gt;找出文章標題符合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jaccard Similarity&lt;ul&gt;
&lt;li&gt;不能處理介系詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modified BM25&lt;ul&gt;
&lt;li&gt;針對重要的字給予較大的權重&lt;/li&gt;
&lt;li&gt;TF 對短句比較不好用 → 用詞性作為權重&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Tried Improvements&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tokenizer Improvement&lt;ul&gt;
&lt;li&gt;Emoji icon pre-processing&lt;/li&gt;
&lt;li&gt;Improve tokenizer accuracy&lt;/li&gt;
&lt;li&gt;把 jieba 換成用繁體中文字典，並加入 PTT 會用的常見詞彙&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keyword Extraction &amp;amp; Association&lt;ul&gt;
&lt;li&gt;Word2Vec → Query associative term if the original one doesn't exist&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="evaluate"&gt;Evaluate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Represent for document with vector&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Doc2Vec (gensim)&lt;/li&gt;
&lt;li&gt;RNN-encoder (arXiv: 1506.08909v3)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NDCG&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;量化標注&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讓那篇文章的回應當作 ground truth&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;來評斷機器人產生的結果好不好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='6'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="python-ibm"&gt;利用 Python 與人工智慧快速打造人性化聊天機器人 (IBM)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.ng.bluemix.net/tommywu/pyconbot2017/blob/master/run.py"&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;有溫度的聊天機器人&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;輔助性答案 ( 互動性 )&lt;ul&gt;
&lt;li&gt;引導性回饋 → 開放話題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不定時提醒 → 貼近使用者&lt;/li&gt;
&lt;li&gt;隨機答案 → 提高趣味&lt;/li&gt;
&lt;li&gt;學習與進化&lt;/li&gt;
&lt;li&gt;Multi-channel ( 多渠道互動 )&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="watson"&gt;Watson&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NP, ML 的語意理解&lt;/li&gt;
&lt;li&gt;Zero Downtime&lt;/li&gt;
&lt;li&gt;擴充&lt;/li&gt;
&lt;li&gt;可訓練&lt;/li&gt;
&lt;li&gt;搜尋引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="watson-ai-flow"&gt;Watson AI Flow&lt;/h3&gt;
&lt;p&gt;Intent, Parameter, Entity Type&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='7'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="chatbot-esun-bank-i"&gt;Chatbot @ E.Sun Bank – 玉山小i隨身金融顧問的兩三事 (玉山)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B8hlay_yY5e7QTE0U3JDUXloeXM/view"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q-a"&gt;Q &amp;amp; A&lt;/h3&gt;
&lt;p&gt;還有沒有其他的 &lt;del&gt;客訴&lt;/del&gt; 問題呢&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Conference"></category><category term="PyCon"></category></entry><entry><title>PyCon TW 2017 - Day 1</title><link href="https://lee-w.github.io/posts/tech/2017/06/PyCon-TW-2017-Day1" rel="alternate"></link><published>2017-06-09T09:00:00+08:00</published><updated>2017-06-18T11:41:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-06-09:/posts/tech/2017/06/PyCon-TW-2017-Day1</id><summary type="html">&lt;p&gt;今年 PyCon 終於比起上次聽得懂多了！&lt;br&gt;
看來這兩年來，還是有點進步的 XD&lt;/p&gt;
&lt;p&gt;先放上今年的&lt;a href="https://hackfoldr.org/pycontw2017/"&gt;共筆&lt;/a&gt;&lt;br&gt;
這幾篇記錄我參加議程的筆記&lt;br&gt;
有些投影片跟共筆就很清楚的，就直接放連結了&lt;/p&gt;
</summary><content type="html">&lt;p&gt;今年 PyCon 終於比起上次聽得懂多了！&lt;br&gt;
看來這兩年來，還是有點進步的 XD&lt;/p&gt;
&lt;p&gt;先放上今年的&lt;a href="https://hackfoldr.org/pycontw2017/"&gt;共筆&lt;/a&gt;&lt;br&gt;
這幾篇記錄我參加議程的筆記&lt;br&gt;
有些投影片跟共筆就很清楚的，就直接放連結了&lt;/p&gt;
&lt;!--more--&gt;

&lt;hr&gt;
&lt;h2 id="_1"&gt;議程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;[Keynote] Choices for Smarter AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;Python 開源軟體考古 - 以Viper為例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;整合 Slack 與 Docker 搭建 Jupyter 線上程式面試系統&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;[Keynote] The State of Python for &lt;del&gt;Education&lt;/del&gt; Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Building Microservices in Python 個案分享&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/jonascheng3/building-microservices-in-python-pycon2017"&gt;Slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/Sk5LNzQke#1455-1540-talk-building-microservices-in-python-個案分享"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;Understanding Serverless Architecture&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;同場加映：&lt;a href="https://drive.google.com/file/d/0Bz8Kfu_94VuJcVo1a1drQjhReU0/view"&gt;Don't Reinvent Sandwich&lt;/a&gt; (本議程沒供餐 XD)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;Tensorflow &amp;amp; Python: Fault Detection System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='1'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="keynote-choices-for-smarter-ai"&gt;[Keynote] Choices for Smarter AI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHywa7M7Jx"&gt;共筆&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better AI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traditional: 更像人類&lt;/li&gt;
&lt;li&gt;New: 更好用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="choice0-what-language-for-ai"&gt;Choice[0]: What Language for AI?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;現場會眾一致通過是 Python (Bias Sampling XD)&lt;/li&gt;
&lt;li&gt;Useful libs&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dmlc/xgboost"&gt;xgboost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ntucllab/libact"&gt;libact&lt;/a&gt;: Active Learning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="choice1-what-application-should-ai-help"&gt;Choice[1]: What Application Should AI Help?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;AI Starts From Problem Solving&lt;ul&gt;
&lt;li&gt;Motivation&lt;ul&gt;
&lt;li&gt;Publishable (academia), Profitable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feasibility&lt;ul&gt;
&lt;li&gt;Modeling, Timeline, Budge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Big Problems from Big Data&lt;ul&gt;
&lt;li&gt;Velocity: Evolving data, Evolving problems&lt;/li&gt;
&lt;li&gt;Volume: Computational Bottleneck&lt;/li&gt;
&lt;li&gt;Veracity: Modeling with non-textbook data → Noise, Bias&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="choice2-what-route-for-ai"&gt;Choice[2]; What Route for AI&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Human-er&lt;/th&gt;
&lt;th&gt;Machine-er&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Subjective&lt;/td&gt;
&lt;td&gt;Objective&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Domain Knowledge&lt;/td&gt;
&lt;td&gt;Computing Power&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fast Basic Solution&lt;/td&gt;
&lt;td&gt;Continuous Improvement&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Tip: As much human as possible before going to machine&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="choice3-how-to-measure-ai-goal"&gt;Choice[3]: How to Measure AI Goal?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Tip: Start with reasonable, measurable and prioritized goals for AI&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="choice4-what-data-to-or-not-to-use"&gt;Choice[4]: What Data to (or not to) Use?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Choice factors for data&lt;ul&gt;
&lt;li&gt;Utility: Relationship with goal&lt;/li&gt;
&lt;li&gt;Necessity: Uniqueness to goal&lt;/li&gt;
&lt;li&gt;Quality: Noise, Freshness&lt;/li&gt;
&lt;li&gt;Cost&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tip: Start with "minimum viable data"&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="choice5-what-model-to-start"&gt;Choice[5]: What Model to Start?&lt;/h3&gt;
&lt;p&gt;Linear (Simpler) Model First&lt;/p&gt;
&lt;h3 id="choice6-what-improvement-steps-to-take"&gt;Choice[6]: What Improvement Steps to Take?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lose Reason&lt;ul&gt;
&lt;li&gt;Overfitting&lt;/li&gt;
&lt;li&gt;Misfitting&lt;/li&gt;
&lt;li&gt;Over-reusing&lt;ul&gt;
&lt;li&gt;Keep data fresh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="choice-1-how-to-verify-and-deploy"&gt;Choice[-1]: How to verify and Deploy?&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code Deployment Workflow&lt;/th&gt;
&lt;th&gt;AI Deployment Workflow&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Development → Staging → Production&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Offline → Online → Production&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Human Trust matters&lt;ul&gt;
&lt;li&gt;Need a baseline to be compared&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="misc0-no-choice-is-a-choice"&gt;Misc[0]: No Choice is a Choice&lt;/h3&gt;
&lt;h3 id="misc1-learning-from-mistake"&gt;Misc[1]: Learning from Mistake&lt;/h3&gt;
&lt;h3 id="misc2"&gt;Misc[2]: ???&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='2'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="python-viper"&gt;Python 開源軟體考古 - 以 &lt;a href="https://github.com/viper-framework/viper"&gt;Viper&lt;/a&gt; 為例&lt;/h2&gt;
&lt;p&gt;這場很實用，slide 也很清楚&lt;br&gt;
蠻推薦影片出來可以看一下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1HwBrETgmEz6-igEVaPAtQPWyuBljyFyvXtKzHLSVaMk/edit#slide=id.p"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/CYYw7ARgjFBsCsBaMAGYAWR6DMIBMiAnABx7aLzGH4QCmUwxAZiEA===?view#1050-1120-talk-python-開源軟體考古-以-viper-為例"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/18z/viper-research"&gt;viper-research&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;從開源專案學習寫 code&lt;/p&gt;
&lt;h3 id="code"&gt;讀 code 技巧&lt;/h3&gt;
&lt;h4&gt;降低專案複雜度&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;從早期版本追&lt;ul&gt;
&lt;li&gt;如何挑版本？ ( 搭配 tig 服用 )&lt;ul&gt;
&lt;li&gt;重大版本號&lt;/li&gt;
&lt;li&gt;簡單、可運作之版本 (e.g. viper 的 commit hash: &lt;a href="https://github.com/viper-framework/viper/tree/46a2a"&gt;46a2a&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;感覺太複雜？&lt;ul&gt;
&lt;li&gt;砍！&lt;/li&gt;
&lt;li&gt;鎖定特定功能，移除其他雜質&lt;/li&gt;
&lt;li&gt;測試，能動就可以&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;專案程式邏輯架構&lt;/h4&gt;
&lt;p&gt;模組相依性 → 一直 trace 到沒有 import 專案自己寫的 code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tools&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/ronaldoussoren/modulegraph"&gt;modulegraph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tarind.com/depgraph.html"&gt;pydegraph (py2degraph)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://furius.ca/snakefood/"&gt;snackfood&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;數據分析&lt;ul&gt;
&lt;li&gt;e.g. 被用最多的反而不是核心 → 這些程式碼好用、易用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;走訪專案&lt;ul&gt;
&lt;li&gt;建立專案整體架構邏輯&lt;/li&gt;
&lt;li&gt;深度走訪&lt;ul&gt;
&lt;li&gt;由下往上&lt;/li&gt;
&lt;li&gt;仔細閱讀單一程式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;廣度走訪&lt;ul&gt;
&lt;li&gt;由上往下&lt;/li&gt;
&lt;li&gt;解釋特定組合的程式的意義&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;系統化讀 code&lt;/li&gt;
&lt;li&gt;從 Commit 學習&lt;ul&gt;
&lt;li&gt;架構變化&lt;/li&gt;
&lt;li&gt;Commit Message 規則&lt;/li&gt;
&lt;li&gt;Branching Model&lt;/li&gt;
&lt;li&gt;Issue Handling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='3'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="slack-docker-jupyter"&gt;整合 Slack 與 Docker 搭建 Jupyter 線上程式面試系統&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/KevinShyu/slack-docker-jupyter"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kkshyu/pnp-interview"&gt;pnp-interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/CYYw7ARgjFBsCsBaMAGYAWR6DMIBMiAnABx7aLzGH4QCmUwxAZiEA===?view#1145-1230-talk-整合-slack-與-docker-搭建-jupyter-線上程式面試系統"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這場最重要的大概就是 slide &lt;del&gt;第 12 頁&lt;/del&gt; 第 11 頁的架構圖&lt;/p&gt;
&lt;h3 id="tools-used"&gt;Tools Used&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Flask&lt;ul&gt;
&lt;li&gt;Python 中最簡單使用的 web framework&lt;/li&gt;
&lt;li&gt;做小型 web 應用非常適合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Docker&lt;ul&gt;
&lt;li&gt;容器化&lt;/li&gt;
&lt;li&gt;一鍵部署&lt;/li&gt;
&lt;li&gt;限制容器耗費的 CPU, GPU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Slack&lt;ul&gt;
&lt;li&gt;Integration 很好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bugs"&gt;Bugs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pull Image First&lt;ul&gt;
&lt;li&gt;So it can be fast&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Try except for any case&lt;ul&gt;
&lt;li&gt;dockerpy 的雷 xD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;File Permission&lt;ul&gt;
&lt;li&gt;要採 docker 坑，這很重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='4'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="keynote-the-state-of-python-for-education-learning"&gt;[Keynote] The State of Python for &lt;del&gt;Education&lt;/del&gt; Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/willingc/the-state-of-python-for-education"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackfoldr.org/pycontw2017/https%253A%252F%252Fhackmd.io%252Fs%252FHk-NVGXke"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這場 Talk 主要講學習、推廣和社群&lt;/p&gt;
&lt;p&gt;Carol 有提到幾個學習 Python 很棒的資源&lt;br&gt;
其中我覺得最有用的大概就是&lt;a href="http://pyvideo.org"&gt;pyvideo.org&lt;/a&gt; 了&lt;br&gt;
之前回去聽工資管系系友演講，趨勢的學長就有提到看 Talk 是很快的學習方式&lt;/p&gt;
&lt;p&gt;另外，Carol 強力推薦今年 PyCon US，Instagram 給的 Talk&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;Lisa Guo, Hui Ding Keynote PyCon 2017&lt;/a&gt;&lt;br&gt;
之後，應該也會找個時間來看一下&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='6'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="understanding-serverless-architecture"&gt;Understanding Serverless Architecture&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/dawny33/understanding-serverless-architectures"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/Sk5LNzQke#1610-1655-talk-understanding-serverless-architecture"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="serverless"&gt;Serverless&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Function as a service (FaaS)&lt;ul&gt;
&lt;li&gt;e.g. AWS lambda&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advantage&lt;ul&gt;
&lt;li&gt;Don't need to maintain servers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disadvantages&lt;ul&gt;
&lt;li&gt;Functions are allowed to run for only a limited amount of time&lt;/li&gt;
&lt;li&gt;Heavy workloads cannot be run&lt;/li&gt;
&lt;li&gt;No control over containers&lt;/li&gt;
&lt;li&gt;Hard to monitor&lt;/li&gt;
&lt;li&gt;Hard to scale up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It's awesome but not the best choice for everyone.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name='7'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="tensorflow-python-fault-detection-system"&gt;Tensorflow &amp;amp; Python: Fault Detection System&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/EricAhn/tensorflow-and-python-fault-detection-system-pycon-taiwan-2017"&gt;slide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/BJqH4M7kl#1720-1750-talk-tensorflow-amp-python-fault-detection-system"&gt;共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fault: An abnormal condition or defect at the component&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logs&lt;ul&gt;
&lt;li&gt;Usage of CPU&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;Disk I/O&lt;/li&gt;
&lt;li&gt;Network Bandwidth&lt;/li&gt;
&lt;li&gt;System Log&lt;/li&gt;
&lt;li&gt;Application Log&lt;/li&gt;
&lt;li&gt;and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Log is also natural language.&lt;br&gt;
The sequence of words and expression is important sequential data.&lt;/p&gt;
&lt;p&gt;這場我真的就有點聽不太懂了＠＠&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Conference"></category><category term="PyCon"></category></entry><entry><title>Common Neovim Problems</title><link href="https://lee-w.github.io/posts/tech/2017/05/common-neovim-problems" rel="alternate"></link><published>2017-05-14T13:13:00+08:00</published><updated>2017-05-14T13:13:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-05-14:/posts/tech/2017/05/common-neovim-problems</id><summary type="html">&lt;!--more--&gt;

&lt;h2 id="load-vimrc-from-neovim"&gt;Load ~/.vimrc from neovim&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir -p &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;XDG_CONFIG_HOME&lt;/span&gt;&lt;span class="p"&gt;:=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="p"&gt;/.config&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
ln -s ~/.vim &lt;span class="nv"&gt;$XDG_CONFIG_HOME&lt;/span&gt;/nvim
ln -s ~/.vimrc &lt;span class="nv"&gt;$XDG_CONFIG_HOME&lt;/span&gt;/nvim/init.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="no-python-interpreter-found"&gt;No python interpreter found.&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install neovim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/neovim/issues/3536"&gt;.nvimrc doesn't seem to be loaded up or working and it cannot create backups on editing existing files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/neovim/issues/1755"&gt;No python interpreter …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;!--more--&gt;

&lt;h2 id="load-vimrc-from-neovim"&gt;Load ~/.vimrc from neovim&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir -p &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;XDG_CONFIG_HOME&lt;/span&gt;&lt;span class="p"&gt;:=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="p"&gt;/.config&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
ln -s ~/.vim &lt;span class="nv"&gt;$XDG_CONFIG_HOME&lt;/span&gt;/nvim
ln -s ~/.vimrc &lt;span class="nv"&gt;$XDG_CONFIG_HOME&lt;/span&gt;/nvim/init.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="no-python-interpreter-found"&gt;No python interpreter found.&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install neovim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/neovim/issues/3536"&gt;.nvimrc doesn't seem to be loaded up or working and it cannot create backups on editing existing files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/neovim/neovim/issues/1755"&gt;No python interpreter found.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Vim"></category><category term="Neovim"></category></entry><entry><title>[Paper] Deep Learning-Based Document Modeling for Personality Detection from Text</title><link href="https://lee-w.github.io/posts/tech/2017/04/Deep-Learning-Based-Document-Modeling-for-Personality-Detection-from-Text" rel="alternate"></link><published>2017-04-11T17:59:00+08:00</published><updated>2017-04-11T17:59:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-04-11:/posts/tech/2017/04/Deep-Learning-Based-Document-Modeling-for-Personality-Detection-from-Text</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sentic.net/deep-learning-based-personality-detection.pdf"&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implementation: &lt;a href="https://github.com/SenticNet/Personality-Detection"&gt;Personality-Detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Data Set&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mypersonality.org/wiki/doku.php?id=wcpr13"&gt;James Pennebaker and Laura King's stream-of-consciousness essay dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm"&gt;NRC Word-Emotion Association Lexicon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sentic.net/deep-learning-based-personality-detection.pdf"&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implementation: &lt;a href="https://github.com/SenticNet/Personality-Detection"&gt;Personality-Detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Data Set&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mypersonality.org/wiki/doku.php?id=wcpr13"&gt;James Pennebaker and Laura King's stream-of-consciousness essay dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm"&gt;NRC Word-Emotion Association Lexicon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;

&lt;h2 id="practical-application-of-personality-detection"&gt;Practical Application of Personality Detection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Product and Service Recommandation (People with similar personalities might have similar favors)&lt;/li&gt;
&lt;li&gt;Mental Health Diagnosis&lt;/li&gt;
&lt;li&gt;Forensics: Reduce the circle of suspects&lt;/li&gt;
&lt;li&gt;Human Resource: One's suitablitlty for certain jobs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="personality-theory-used-in-this-paper"&gt;Personality Theory Used in This Paper&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Big_Five_personality_traits"&gt;Big Five Personality Trait&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="basic-idea-of-the-method"&gt;Basic Idea of the Method&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Feed sentences from essays to convolution filter → Sentence model in the form of n-gram feature vectors&lt;/li&gt;
&lt;li&gt;Aggregate the vectors of a document's sentences and combine them with Masiresse features to represent the document&lt;/li&gt;
&lt;li&gt;Classification: Feed the document vectors into a fully connected neural network&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="overview-of-the-method"&gt;Overview of the Method&lt;/h2&gt;
&lt;h3 id="1-preprocessing"&gt;1. Preprocessing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Sentence Splitting&lt;/li&gt;
&lt;li&gt;Data Cleaning&lt;/li&gt;
&lt;li&gt;Unification (e.g. lowercase)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-document-level-feature-extraction"&gt;2. Document-level feature extraction&lt;/h3&gt;
&lt;p&gt;Mairesse baseline feature set (e.g. word count, average sentence length)&lt;/p&gt;
&lt;h3 id="3-filtering"&gt;3. Filtering&lt;/h3&gt;
&lt;p&gt;Sentences without personliaty clues are dropped&lt;br/&gt;
(Based on &lt;a href="http://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm"&gt;NRC Word-Emotion Association Lexicon&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id="4-word-level-feature-extraction"&gt;4. Word-level feature extraction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;word2vec&lt;/li&gt;
&lt;li&gt;Variable number of fixed-length word feature vectors → Variable number of sentences → Document&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="5-classfication"&gt;5. Classfication&lt;/h3&gt;
&lt;p&gt;Deep CNN (Conolutional Nerual Network)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Input&lt;ul&gt;
&lt;li&gt;Words: Fixed-length feature vector using word2vec&lt;/li&gt;
&lt;li&gt;Sentences: Variable number of word vectors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Process&lt;ul&gt;
&lt;li&gt;Word Vector is reduced to a fixed length vector of each sentence&lt;/li&gt;
&lt;li&gt;Document: Variable number of such fixed-length sentence vector&lt;/li&gt;
&lt;li&gt;Document vector is then reduced to a fixed-length document vector&lt;/li&gt;
&lt;li&gt;This Document vector is then concatenated with document-level features&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Predict&lt;ul&gt;
&lt;li&gt;Yes / No (5 different personality traits are trained separately)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="network-architecture-in-detail"&gt;Network Architecture in Detail&lt;/h2&gt;
&lt;h3 id="main-steps-7-layers"&gt;Main Steps (7 Layers)&lt;/h3&gt;
&lt;h4&gt;Word Vectorization&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Layer 1: Input&lt;ul&gt;
&lt;li&gt;$R ^{D \times S\times W \times E}$&lt;/li&gt;
&lt;li&gt;Use Google's pretrained word2vec&lt;/li&gt;
&lt;li&gt;In implementation, all the documents contain the same number of sentences.&lt;br/&gt;
  Shorter documents are padded shorter sentences with dummy words.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Sentence Vectorization&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Layer 2: Convolution&lt;ul&gt;
&lt;li&gt;3 convolutional filters: unigram, bigram, trigram&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Layer 3: Max Polling&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Document Vectorization&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Layer 4: 1-max pooling&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Classification: (Yes/No)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Layer 5: Linear with Sigmoid activation&lt;/li&gt;
&lt;li&gt;Layer 6, 7&lt;ul&gt;
&lt;li&gt;2 Neuron (yes/no) Softmax Output (ReLU and tanh perform worse)&lt;/li&gt;
&lt;li&gt;fully connected layer of size 200&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="training"&gt;Training&lt;/h3&gt;
&lt;p&gt;Objective Function: Negative Log Likelihood&lt;/p&gt;</content><category term="Tech"></category><category term="Paper"></category><category term="Deep Learning"></category><category term="Machine Learning"></category><category term="NLP"></category><category term="Big Five Theory"></category><category term="Personality"></category></entry><entry><title>[Paper] Understanding Personality through Social Media</title><link href="https://lee-w.github.io/posts/tech/2017/04/Understanding-Personality-through-Social-Media" rel="alternate"></link><published>2017-04-05T22:30:00+08:00</published><updated>2017-04-05T22:30:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-04-05:/posts/tech/2017/04/Understanding-Personality-through-Social-Media</id><summary type="html">&lt;p&gt;&lt;a href="https://pdfs.semanticscholar.org/1503/fc3acf17b1972c9a16e40b3eba6c2a140624.pdf"&gt;Paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Main Purpose: To see how linguistic features correlate with each personality trait.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="https://pdfs.semanticscholar.org/1503/fc3acf17b1972c9a16e40b3eba6c2a140624.pdf"&gt;Paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Main Purpose: To see how linguistic features correlate with each personality trait.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Use Twitter to predict MBIT personality.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="problem-of-past-researches"&gt;Problem of Past Researches&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Language on social media has richer content that makes the typical linguistic analysis tool perform poorly (e.g. iono → I don't know)&lt;/li&gt;
&lt;li&gt;Gain personality information is costly (e.g. Big Five Questionnaire)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mbti"&gt;MBTI&lt;/h3&gt;
&lt;p&gt;Instead of commonly used big five theory, MBTI is used in this paper.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Myers–Briggs_Type_Indicator"&gt;Myers-Briggs Type Indicator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are 4 types of personality trait&lt;br/&gt;
i.e.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introversion(I) / Extroversion(E)&lt;/li&gt;
&lt;li&gt;Intuition(N) / Sensing(S)&lt;/li&gt;
&lt;li&gt;Feeling(F) / Thinking(T)&lt;/li&gt;
&lt;li&gt;Perception(P) / Judging(J)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Personality can be expressed as a code with 4 letters.&lt;br/&gt;
e.g. ENFJ, INTP&lt;/p&gt;
&lt;h3 id="data"&gt;Data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A Twitter dataset&lt;ul&gt;
&lt;li&gt;Around 90,000 users&lt;/li&gt;
&lt;li&gt;120,000 personality-related tweets from 2006~2015 (out of 1.7 M tweets)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;What is the so-called personliaty-related tweets?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;English Tweets that contain users' own MBIT code.&lt;br/&gt;
    e.g.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"I'm an ENFJ"&lt;/code&gt; is qualified&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"My friend is an ISFJ"&lt;/code&gt; is not qualified&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Heuristic rules is used (e.g. &lt;code&gt;"I'm"&lt;/code&gt;, &lt;code&gt;"I got"&lt;/code&gt;, &lt;code&gt;"I have been a"&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;No classification method is used for ensuring the personality code is indeed the user's&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Distribution&lt;/h4&gt;
&lt;p&gt;Personality distribution of this data is skewed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="MBTI-bar" src="/images/posts-image/2017-04-05-understanding-personliaty-through-social-media/MBTI-bar.png"/&gt;&lt;/p&gt;
&lt;p&gt;However, in the real word, the personality distribution might also be skewed.&lt;/p&gt;
&lt;h3 id="features"&gt;Features&lt;/h3&gt;
&lt;h4&gt;1. n-grams&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Most frequent 1,000 unigram, bigram, trigram words and phrases&lt;/li&gt;
&lt;li&gt;1,000 dimensions vectors for unigram, bigram trigram for each user&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2. Twitter Part-of-speech tags&lt;/h4&gt;
&lt;p&gt;Based on &lt;a href="http://www.cs.cmu.edu/~ark/TweetNLP/gimpel+etal.acl11.pdf"&gt;Part-of-Speech Tagging for Twitter: Annotation, Features, and Experiments&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;25 types with some Twitter-specific tag.&lt;br/&gt;
  e.g.&lt;ul&gt;
&lt;li&gt;hashtag&lt;/li&gt;
&lt;li&gt;at-mention&lt;/li&gt;
&lt;li&gt;URL&lt;/li&gt;
&lt;li&gt;emoticon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3.word vectors&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Word Vector Settings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2,334,564 words&lt;/li&gt;
&lt;li&gt;500 dimension&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extracted Features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Average word vectors&lt;/li&gt;
&lt;li&gt;Weighted average word vectors (weighted according to TF-IDF)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="prediction"&gt;Prediction&lt;/h3&gt;
&lt;p&gt;Logistic Regression is used (Random Forest and SVM produced similar results)&lt;/p&gt;
&lt;h4&gt;Accuracy Measurement&lt;/h4&gt;
&lt;p&gt;Since the data is skewed, AUC is used.&lt;/p&gt;
&lt;h4&gt;Accuracy&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Indivisula Features&lt;ul&gt;
&lt;li&gt;Word Vector Only → (AUC=0.651)&lt;/li&gt;
&lt;li&gt;n-gram only → (AUC=0.607)&lt;/li&gt;
&lt;li&gt;POS only → (AUC=0.585)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Combined Features&lt;ul&gt;
&lt;li&gt;All three features → (AUC=0.661)&lt;/li&gt;
&lt;li&gt;POS + n-gram → (AUC=0.616)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Insight&lt;/h4&gt;
&lt;p&gt;Among the results, word vector performs best which might illustrate that predictions based on social media and language would work.&lt;/p&gt;
&lt;p&gt;During the POS conversion process, information is compressed into 25 tags and might lost some important one.&lt;br/&gt;
This might be the reason why it performs worse.&lt;/p&gt;</content><category term="Tech"></category><category term="Paper"></category><category term="Machine Learning"></category><category term="NLP"></category><category term="MBTI"></category><category term="Personality"></category></entry><entry><title>[Paper] Toward Personality Insights from Language Exploration in Social Media</title><link href="https://lee-w.github.io/posts/tech/2017/04/Toward-Personality-Insights-from-Language-Exploration-in-Social-Media" rel="alternate"></link><published>2017-04-04T18:45:00+08:00</published><updated>2017-04-04T18:45:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-04-04:/posts/tech/2017/04/Toward-Personality-Insights-from-Language-Exploration-in-Social-Media</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wwbp.org/papers/sam2013-dla.pdf"&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wwbp.org/personality_wc.html"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/leew/toward-personality-insights-from-language-exploration-in-social-media"&gt;My Slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main purpose of this paper is to show how social media can be used to gain psychological insights.&lt;/p&gt;
</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wwbp.org/papers/sam2013-dla.pdf"&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wwbp.org/personality_wc.html"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/leew/toward-personality-insights-from-language-exploration-in-social-media"&gt;My Slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main purpose of this paper is to show how social media can be used to gain psychological insights.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Different from other papers in the past which use a pre-compiled word category list (e.g. LIWC),&lt;br&gt;
it uses an open vocabulary approach that allowing discovery of unanticipated language.&lt;/p&gt;
&lt;h3 id="data"&gt;Data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;75,000 Volunteers&lt;ul&gt;
&lt;li&gt;Facebook Status Update&lt;/li&gt;
&lt;li&gt;Age&lt;/li&gt;
&lt;li&gt;Gender&lt;/li&gt;
&lt;li&gt;Personality (Through Standard Personality Questionnaire)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="architecture"&gt;Architecture&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Linguistic Feature Extraction&lt;ul&gt;
&lt;li&gt;N-Gram&lt;ul&gt;
&lt;li&gt;Point-Wise Mutual Information&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Topic&lt;ul&gt;
&lt;li&gt;Probability a person mentioning a topic (Derived from LDA)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Correlation analysis&lt;ul&gt;
&lt;li&gt;Least Squares Linear Regression&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visualization&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wwbp.org/personality_wc.html"&gt;Differential Word Clouds&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Word size represents correlation strength.&lt;/li&gt;
&lt;li&gt;Color represents relative frequency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Standardized Frequency Plot&lt;ul&gt;
&lt;li&gt;Plot the word frequency against age&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="result"&gt;Result&lt;/h3&gt;
&lt;p&gt;Most results confirm what is already known or obvious.&lt;br&gt;
However, I think this method might still be useful to gain insight in other kinds of datasets.&lt;/p&gt;</content><category term="Tech"></category><category term="Paper"></category><category term="Visualization"></category><category term="NLP"></category><category term="Big Five Theory"></category><category term="Personality"></category></entry><entry><title>Create a Telegram EchoBot</title><link href="https://lee-w.github.io/posts/tech/2017/03/create-a-telegram-echobot" rel="alternate"></link><published>2017-03-31T19:24:00+08:00</published><updated>2017-03-31T19:24:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-03-31:/posts/tech/2017/03/create-a-telegram-echobot</id><summary type="html">&lt;p&gt;最近當助教要出一個 Telegram Bot 相關的 Project&lt;br/&gt;
先來寫一篇簡單的教學，減少之後的問題 XDD&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近當助教要出一個 Telegram Bot 相關的 Project&lt;br/&gt;
先來寫一篇簡單的教學，減少之後的問題 XDD&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;如果對 Chat Bot 的基本運作概念不太熟&lt;br/&gt;
可以參考&lt;a href="http://lee-w.github.io/posts/bot/2016/11/introduction-to-chatbot/#introduction-to-chatbot"&gt;[Bot] Introduction to Chatbot&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="what-is-telegram"&gt;What is Telegram&lt;/h2&gt;
&lt;p&gt;在台灣，好像還沒有那麼多人用 Telegram&lt;br/&gt;
簡單來說就跟 Facebook Messenger 或 Line 這類的 IM 差不多&lt;/p&gt;
&lt;h2 id="why-telegram"&gt;Why Telegram&lt;/h2&gt;
&lt;p&gt;至於這次為什麼要選用 Telegram 麻&lt;br/&gt;
是因為上次有聽其他開發者說 Telegram Bot 提供相當多的功能&lt;br/&gt;
就想說來試試看&lt;/p&gt;
&lt;h2 id="web-framework"&gt;Web Framework&lt;/h2&gt;
&lt;p&gt;上次寫 Line EchoBot 的教學是用 django&lt;br/&gt;
這次來試試 Flask&lt;/p&gt;
&lt;p&gt;Source Code 一樣放在 GitHub 上&lt;br/&gt;
這篇文章會用&lt;a href="https://github.com/Lee-W/telegram_echobot/tree/minimal-flask"&gt;minimal-flask&lt;/a&gt; branch 當範例&lt;br/&gt;
只有 31 行 Code，比較容易理解&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Lee-W/telegram_echobot/tree/master"&gt;master&lt;/a&gt; 上也是用 Flask&lt;br/&gt;
只是架構比較複雜，有試一下 Flask 的 blueprint，之後可能還會多加一些奇怪的功能 xd&lt;/p&gt;
&lt;h2 id="apply-a-telegram-bot"&gt;Apply a telegram bot&lt;/h2&gt;
&lt;p&gt;首先當然必須要有&lt;a href="https://telegram.org"&gt;Telegram&lt;/a&gt; 的帳號&lt;br/&gt;
再來要加&lt;a href="https://telegram.me/botfather"&gt;BotFather&lt;/a&gt; 為好友&lt;/p&gt;
&lt;p&gt;跟他說 &lt;code&gt;/newbot&lt;/code&gt;&lt;br/&gt;
接著他會問你，Bot 的 name 跟 username&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name 是 Bot 在聯絡人資訊顯示的名稱&lt;/li&gt;
&lt;li&gt;username 則比較像 id 的概念，而且一定要用 Bot 結尾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之後就會得到剛申請 Bot 的 API Token&lt;br/&gt;
然後你就可以從 &lt;code&gt;https://telegram.me/&amp;lt;bot_username&amp;gt;&lt;/code&gt; 找到剛申請的 bot&lt;/p&gt;
&lt;h2 id="telegram-bot-api-wrapper"&gt;Telegram Bot API Wrapper&lt;/h2&gt;
&lt;p&gt;開發上，我使用的是&lt;a href="https://github.com/python-telegram-bot/python-telegram-bot"&gt;python-telegram-bot&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install python-telegram-bot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它其中一點設計的很不錯的是&lt;br/&gt;
Telegram API 的命名是 CamelCase (e.g. sendMessage)&lt;br/&gt;
但 Python 的命名 convention 卻是 lowercase_separated_by_underscores (e.g. send_message)&lt;br/&gt;
而它是兩種都支援&lt;/p&gt;
&lt;h2 id="star-programming"&gt;Star Programming&lt;/h2&gt;
&lt;p&gt;先附上全部的 code，後面再慢慢解釋&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;telegram&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Your API Token'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_webhook&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_webhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://Your URL/hook'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Webhook setup failed'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/hook'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;webhook_handler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;de_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

        &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'ok'&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_set_webhook&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="setup"&gt;Setup&lt;/h3&gt;
&lt;p&gt;其中有兩個地方，必須要改成自己的設定&lt;/p&gt;
&lt;h4&gt;1. API Token&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Your API Token'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your API Token 要改成剛剛取得的 API Token&lt;/p&gt;
&lt;h4&gt;2. Webhook URL&lt;/h4&gt;
&lt;p&gt;_set_webhook 中的 Your URL&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;statue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_webhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://Your URL/hook'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這裡的 URL 就是設定成你這個 Bot Server 的 URL&lt;br/&gt;
不過 Telegram 一樣要求必須要是 https&lt;br/&gt;
最簡單的方式就是使用 ngrok&lt;br/&gt;
(ngrok 的使用在&lt;a href="http://lee-w.github.io/posts/bot/2016/11/line-echo-bot-on-django/#line-echo-bot-on-django"&gt;[Bot] Line Echo Bot on Django&lt;/a&gt; 最後面有介紹 )&lt;br/&gt;
平常測試使用 ngrok 就很足夠了&lt;br/&gt;
之後要 production 的時候，在 deploy 到適當的 server 就好了&lt;/p&gt;
&lt;h3 id="_set_webhook"&gt;_set_webhook&lt;/h3&gt;
&lt;p&gt;Telegram 有兩種接收訊息的方式&lt;br/&gt;
隨時去監聽的 webhook，和主動去要求更新的 &lt;code&gt;get_updates&lt;/code&gt;&lt;br/&gt;
這裡使用的是 webhook&lt;/p&gt;
&lt;p&gt;這個 function 先設定 Bot 的 webhook URL，如果設定失敗就直接終止程式&lt;br/&gt;
也就是告訴 Telegram 要把 Bot 收到的訊息傳到哪&lt;br/&gt;
而 &lt;code&gt;set_webhook&lt;/code&gt; 前面要有個 _的原因是我不希望它被其他的 code 使用&lt;br/&gt;
但 Python 本身並不支援 Private 的概念，而是慣例上在前面加一個底線&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_webhook&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_webhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://Your URL/hook'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Webhook setup failed'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在最後 run Flask app 前，要先把 webhook URL 設定好&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_set_webhook&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="wehook_handler"&gt;wehook_handler&lt;/h3&gt;
&lt;p&gt;這裡就是 bot 收到訊息要怎麼處理&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/hook'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;webhook_handler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;telegram&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;de_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

        &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'ok'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;app.route&lt;/code&gt; 這個 decorator 是 Flask 的語法&lt;br/&gt;
表示 &lt;code&gt;https:/Your URL/hook&lt;/code&gt; 會導到這個 function，而它只能接受 POST&lt;br/&gt;
這裡設定的 &lt;code&gt;/hook&lt;/code&gt; 也就是為什麼在 &lt;code&gt;_set_webhook&lt;/code&gt; 中的 URL 最後面必須有 &lt;code&gt;/hook&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外還可以發現 webhook_handler 是不帶任何參數的&lt;br/&gt;
跟 django 不同的是&lt;br/&gt;
Flask 把 request 這種幾乎所有 view function 都會用到的參數直接變成全域可讀取的變數&lt;br/&gt;
也就是最一開始的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來 &lt;code&gt;webhook_handler&lt;/code&gt; 內做的就只是把收到的訊息轉成 &lt;code&gt;update&lt;/code&gt;&lt;br/&gt;
再從裡面讀到對方傳來的 &lt;code&gt;text&lt;/code&gt;&lt;br/&gt;
最後用 &lt;code&gt;reply_text&lt;/code&gt; 回傳同樣的 text 回去&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;這是最簡單的 Telegram Bot&lt;br/&gt;
不過我覺得開始學一個東西，還是會希望能在最短時間看到點東西，再慢慢專研&lt;br/&gt;
接下來可以從&lt;a href="https://github.com/python-telegram-bot/python-telegram-bot"&gt;python-telegram-bot&lt;/a&gt; 的&lt;a href="https://github.com/python-telegram-bot/python-telegram-bot/wiki"&gt;wiki&lt;/a&gt;，試更多 Telegram Bot 的功能&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sooyhwang/Simple-Echo-Telegram-Bot"&gt;Simple-Echo-Telegram-Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.30sparks.com/develop-telegram-bot-introduction/"&gt;開發 Telegram Bot 簡介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Chat Bot"></category><category term="Flask"></category></entry><entry><title>[Book] 做工的人</title><link href="https://lee-w.github.io/posts/book/2017/03/worker" rel="alternate"></link><published>2017-03-24T18:48:00+08:00</published><updated>2017-03-24T18:48:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-03-24:/posts/book/2017/03/worker</id><summary type="html">&lt;p&gt;&lt;img alt="做工的人" src="/images/books/SlWTvkO.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;「做工的人」由一個個藍領階級的故事所組成&lt;br/&gt;
說的是那些壓迫、歧視和無奈&lt;br/&gt;
看這本書是會讓人感到很難過的&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="做工的人" src="/images/books/SlWTvkO.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;「做工的人」由一個個藍領階級的故事所組成&lt;br/&gt;
說的是那些壓迫、歧視和無奈&lt;br/&gt;
看這本書是會讓人感到很難過的&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;處於同溫層&lt;br/&gt;
常會覺得世界就只是我們看到的樣子&lt;br/&gt;
但世界並不是單一面貌的&lt;br/&gt;
每個人所看到的、所感受到的世界都是不同的&lt;br/&gt;
而「做工的人」帶我們用不同的角度來看他們所看到的世界究竟是如何的&lt;/p&gt;
&lt;p&gt;不同於以往這書摘&lt;br/&gt;
這篇會多了一點我自己的想法&lt;br/&gt;
同樣的，這也不過是這世界上一個微不足道的人的想法罷了&lt;/p&gt;
&lt;h2 id="_1"&gt;摘錄&lt;/h2&gt;
&lt;p&gt;我想如果只看這些摘錄文字，應該會不知道在說什麼 XD&lt;/p&gt;
&lt;p&gt;不過它們都代表著每一個故事的一小部分&lt;br/&gt;
也是在故事中，讓我有感觸的部分&lt;br/&gt;
記錄下它們，是為了提醒我不要忘了現在看完這本書的感受&lt;/p&gt;
&lt;h3 id="-"&gt;推薦序 - 如果在工地，一個年輕作家的養成&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;他看見，年輕不羈的工人願意將寶特瓶壓扁資源回收，是為了讓附近的低收入戶可以拿去賣錢。
學有專精的電焊師傅，在得知外勞的悲慘待遇後，會願意將一身技藝傾囊相授，好讓弱者掙脫被壓榨的命運。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_2"&gt;阿忠之死&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;晚上，阿忠的嫂嫂說阿忠的喪事已經辦好了，打來是為了要告訴我：「阿忠對於自己沒能還你那五千元，很對不起。」

生命是有層次的，一層一層剝開後，每一片回憶都會讓人流淚。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_3"&gt;台灣媳婦&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;如果我們判斷人的標準，是用刻苦，是用勤奮，是用力爭上游的努力和對於生活的認真，去決定一個人的品格
那我們不可能看不出來她們值得擁有尊敬，我們又怎麼能夠允許這個社會將它們分別列上不同的標籤呢？
我們既然知道以一個人的經濟條件去判定其社會階級以及地位是錯的，並深惡譴責，那又為什麼不改變對她們的看法呢？
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_4"&gt;隔閡&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;那種講理財和產業動態的書從來就無法引起我的興趣。
曾幾何時，我發現自己在看任何文字或是哥與、電影時，總感覺到一股不舒服感。
這些文字似乎與我有著隔閡。
我想，是那種對於內容的不快感使我感到很大的不舒服。
而我很清楚，這來自於我親身的感受和所在的位置，與那些撰書者或是創作者不同。

愈是和這個世界接觸越深，我就愈明白其中的差異。
也因此，我始終不能接受論述式的教科書、自以為高深莫測的經文，也討厭那些成功者的傳記和論述。
我知道，我這樣是畫地自限，為自己設下了這樣的隔閡。

可是會不會哪天我也和那本商周一樣，只能在自己的世界裡，看著自己所要的內容？
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_5"&gt;看板人&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;這社會要求他人有尊嚴活著的，幾乎都是不需為下一餐煩憂，並且收入穩定的人。
而我不是，我能理解他們只是想活著，卑微和努力的活著。
對於那些喊著尊嚴的人，因為那傷痕我無言以對。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_6"&gt;摘錄以外&lt;/h2&gt;
&lt;p&gt;在翻開這本書之前&lt;br/&gt;
我有看到一篇關於它的文章&lt;br/&gt;
下面得回覆就有站在不同立場的師傅的評論&lt;br/&gt;
說它美化了很多不應該存在的錯誤&lt;br/&gt;
並不是每個師傅都會犯這樣的錯，而那些錯並不是這麼的美麗&lt;/p&gt;
&lt;p&gt;但翻完「做工的人」後&lt;br/&gt;
我覺得其實作者並沒有說那些事是對的&lt;br/&gt;
只是敘述了這樣的事情確實存在著，而它們為什麼存在&lt;/p&gt;
&lt;p&gt;「做工的人」不會是這世界的全貌&lt;br/&gt;
也不見得能代表整個藍領階級的故事&lt;br/&gt;
就像前面也提到有不同立場的師傅提出他們的看法&lt;/p&gt;
&lt;p&gt;但我覺得它已經足夠讓我們重新去思考&lt;br/&gt;
那些認為是理所當然的事，並不是那麼理所當然&lt;br/&gt;
自以為是的正義，不見得就是正義&lt;br/&gt;
而我們又是多麼習慣於帶著有色的眼鏡，去看、去批評、去攻擊與我們不同的人們&lt;/p&gt;
&lt;p&gt;我很喜歡張獻忠先生在 TEDx Tainan 2016 說的話&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;如果今天換作是我們遇到同樣的處境

我們真的能處理得更好嗎？
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也許在下次評斷一件事前，去想想這樣的問題，能看到更多&lt;br/&gt;
這樣的同理並不是、也不會讓對的事情變錯的，或錯的事情就變成對的&lt;br/&gt;
而是嘗試去思考，除了對錯以外的事&lt;/p&gt;
&lt;p&gt;最後我想分享一段節錄自實驗室學長在上大學部的課時說過的話&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;回高中聊天的時候，會發現有些在比較後面學校的同學
他們的家境可能並不是那麼好，可能要打工存學費
生存都是件辛苦的事了，很難有餘力在做出太多的改變
而我們是一群夠幸運的人，能順利地唸到成大
所以可以想想，我們是不是能再多做些什麼改變
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了認知到這些幸運不是那麼的理所當然外&lt;br/&gt;
我想再補充的是&lt;br/&gt;
在想想還能做什麼改變的時候&lt;br/&gt;
是不是也能站在那些不那麼幸運的人們的角度，來思考這些改變&lt;br/&gt;
讓這些改變，也可以為他們發聲&lt;/p&gt;</content><category term="Book"></category><category term="Story"></category></entry><entry><title>SITCON 2017</title><link href="https://lee-w.github.io/posts/tech/2017/03/sitcon-2017" rel="alternate"></link><published>2017-03-20T21:07:00+08:00</published><updated>2017-03-20T21:07:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-03-20:/posts/tech/2017/03/sitcon-2017</id><summary type="html">&lt;p&gt;聽說這次 SITCON 一分鐘就賣完了＠＠&lt;br&gt;
還好我申請了開源貢獻票 xdddd&lt;br&gt;
所以大家快來貢獻開源專案，脫離搶票吧（？？？？？&lt;/p&gt;
</summary><content type="html">&lt;p&gt;聽說這次 SITCON 一分鐘就賣完了＠＠&lt;br&gt;
還好我申請了開源貢獻票 xdddd&lt;br&gt;
所以大家快來貢獻開源專案，脫離搶票吧（？？？？？&lt;/p&gt;
&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/GYVgRgHAzALA7ABgLRjCGSYFMBMckCcOAJlEjjAnHAIYBsdIcwAjEA==?edit"&gt;RO 共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/JwdgRgTAjCEQtAMygBhPALBiAOeOBTAYwGZ4ATAVmAMuxUsQxCA=?both"&gt;R1 共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/CwVgnARghlBMAcBaAzAdgGzscDAzRUuUqi8AJrshBAAyqwCMZEQA?both"&gt;R2 共筆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/MwNhBYFMDMCMEMC0BWADARnI85kkbMDogEwDsssJwJAxrGarEA==?both"&gt;R3 共筆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這次大概就這兩場比較印象深刻&lt;/p&gt;
&lt;h2 id="_1"&gt;前端工程的過去、現在與未來&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://slides.com/tz5514/deck-1-2#/"&gt;slide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整體算是給完全不懂前端的我，關於前端的知識 overview&lt;/p&gt;
&lt;h3 id="present"&gt;Present&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://webpack.github.io"&gt;Webpack&lt;/a&gt; 未來可能取代 Gulp 與 grunt&lt;/li&gt;
&lt;li&gt;&lt;a href="https://babeljs.io"&gt;Babel&lt;/a&gt;: 目前最主流的 Javascript Transpiler&lt;ul&gt;
&lt;li&gt;e.g. 轉換 ES6 → ES5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;雖然 ES6 支援模組標準，但瀏覽器尚未有定論，目前前端依然無法支援模組&lt;ul&gt;
&lt;li&gt;可以用 webpack 打包來模擬&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非同步處理 : ES6 Promise, async/await&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;第一次做光劍就上手&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.slideshare.net/mobile/ssuserb8be06/ss-73305383"&gt;slide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;雖然隔壁兩場，一場在講 Chat Bot，一場在講 AI&lt;br&gt;
我好像應該去聽&lt;br&gt;
但身為星戰迷，實在無法抵抗光劍的誘惑&lt;br&gt;
The force is strong in this session&lt;/p&gt;
&lt;p&gt;一把最簡單的光劍大概台幣 1000 可以起來&lt;br&gt;
感覺有時間蠻值得來玩玩的 xD&lt;/p&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="SITCON"></category></entry><entry><title>Tool for Checking Python Coding Style</title><link href="https://lee-w.github.io/posts/tech/2017/03/tools-for-checking-python-coding-style" rel="alternate"></link><published>2017-03-15T19:13:00+08:00</published><updated>2017-03-15T19:13:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-03-15:/posts/tech/2017/03/tools-for-checking-python-coding-style</id><summary type="html">&lt;p&gt;&lt;a href="https://www.pylint.org"&gt;Pylint&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install pylint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;h3 id="generate-a-code-quality-report"&gt;Generate a code quality report&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pylint your_code.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;p&gt;&lt;a href="https://www.pylint.org"&gt;Pylint&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install pylint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;h3 id="generate-a-code-quality-report"&gt;Generate a code quality report&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pylint your_code.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;h3 id="customize-your-pylint-settings"&gt;Customize your pylint settings&lt;/h3&gt;
&lt;p&gt;Some rules in default settings might be too trivial.&lt;br&gt;
(e.g. PEP8 E501: line too long error (no more than 79 characters) )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate &lt;code&gt;pylintrc&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pylint --generate-rcfile &amp;gt; ~/.pylintrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This generate a common used &lt;code&gt;pylintrc&lt;/code&gt;.&lt;br&gt;
For further customization, you'll have to change this file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate a code quality report using you &lt;code&gt;pylintrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pylint --rcfile ~/.pylintrc you_code.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="integrate-with-vim"&gt;Integrate with Vim&lt;/h2&gt;
&lt;h3 id="1-ale"&gt;1. &lt;a href="https://github.com/w0rp/ale"&gt;ale&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="ale-screenshot" src="/images/posts-image/2017-03-15-tools-for-checking-python-coding-style/vwpqY4G.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ale&lt;/code&gt; also supports other linters in other languages.&lt;br&gt;
It uses the new async feature in vim 8.&lt;br&gt;
Thus, it checks your code when you are typing. (You can disable it.)&lt;/p&gt;
&lt;p&gt;The following settings are for pylint in &lt;code&gt;~/.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# The default value is pytlinh&lt;/span&gt;
&lt;span class="c1"&gt;# If your pylint executable is not pylint, it should be set&lt;/span&gt;
&lt;span class="nb"&gt;let&lt;/span&gt; g:ale_python_pylint_executable &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pylint&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# options of your pylint command&lt;/span&gt;
&lt;span class="nb"&gt;let&lt;/span&gt; g:ale_python_pylint_options &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--rcfile ~/.pylintrc&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the available linters are enabled by default.&lt;br&gt;
For Python, &lt;code&gt;flake8&lt;/code&gt;, &lt;code&gt;mypy&lt;/code&gt; are also used.&lt;br&gt;
Thus, you might find that even if you ignore some rules in &lt;code&gt;pylintc&lt;/code&gt;, you are still notified.&lt;/p&gt;
&lt;p&gt;In this case, add the following setting in &lt;code&gt;~/.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;let&lt;/span&gt; g:ale_linters &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="se"&gt;\ &lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pylint&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="se"&gt;\}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This enables &lt;code&gt;pylint&lt;/code&gt; as the only linter for Python&lt;/p&gt;
&lt;p&gt;p.s. &lt;code&gt;mypy&lt;/code&gt;, &lt;code&gt;flake8&lt;/code&gt; are also great linters. I'm just not familiar with it&lt;/p&gt;
&lt;h3 id="2-python-mode"&gt;2. &lt;a href="https://github.com/python-mode/python-mode"&gt;python-mode&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It's a powerful package supports not only linters but also plenty of useful features a python programer would need.&lt;/p&gt;
&lt;p&gt;&lt;img alt="python-mode-screenshot" src="/images/posts-image/2017-03-15-tools-for-checking-python-coding-style/5FffIqN.png"&gt;&lt;br&gt;
Unlike &lt;code&gt;ale&lt;/code&gt;, &lt;code&gt;python-mode&lt;/code&gt; check your code only when you save or open your python file (You can set this in your &lt;code&gt;~/.vimrc&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Add these lines in &lt;code&gt;~/.vimrc&lt;/code&gt;  to enable &lt;code&gt;pylint&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_lint_checkers &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;&amp;#39;pyflakes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pylint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pep8&amp;#39;&lt;/span&gt;]
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:pymode_lint_ignore &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C0111,W0621,E501,F0002&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that space cannot appear in &lt;code&gt;pymode_lint_ignore&lt;/code&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Code Quality"></category><category term="Vim"></category></entry><entry><title>[Book] 此人進廠維修中</title><link href="https://lee-w.github.io/posts/book/2017/03/take-a-rest" rel="alternate"></link><published>2017-03-05T11:40:00+08:00</published><updated>2017-03-05T11:40:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-03-05:/posts/book/2017/03/take-a-rest</id><summary type="html">&lt;p&gt;&lt;img alt="此人進廠維修中" src="/images/books/M5ZXQkh.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;這本書不談情緒管理，而是如何與情緒共處&lt;/p&gt;
&lt;p&gt;我總覺得這些有關情緒的書，要做筆記實在是一件很困難的事&lt;br/&gt;
不過這裡就稍微紀錄比較能紀錄的部分吧&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="此人進廠維修中" src="/images/books/M5ZXQkh.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;這本書不談情緒管理，而是如何與情緒共處&lt;/p&gt;
&lt;p&gt;我總覺得這些有關情緒的書，要做筆記實在是一件很困難的事&lt;br/&gt;
不過這裡就稍微紀錄比較能紀錄的部分吧&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;序： 接受不是認同，而是允許存在&lt;/h2&gt;
&lt;p&gt;身體或心理的痛苦，其實都帶著一些訊號&lt;br/&gt;
當你願意接受、承認這份痛苦的存在，並允許它有存在的空間&lt;br/&gt;
才可以客觀、中立的觀察它要傳達的訊息&lt;/p&gt;
&lt;p&gt;負面情緒從來都不是問題，造成問題的常常是我們面對的方法&lt;br/&gt;
允許這些情緒的存在，把用在對抗負面情緒的能量拿回來，放在理解情緒所帶來的訊息上，從中學習而成長&lt;/p&gt;
&lt;h2 id="ch4-"&gt;Ch4 - 談後悔&lt;/h2&gt;
&lt;p&gt;我們總在問別人：「該怎麼辦？」&lt;br/&gt;
美其名是參考別人的意見，實際上只是想要別人幫我們做決定&lt;br/&gt;
一旦後果不如預期，我們可以將責任歸咎於別人&lt;br/&gt;
但事實上，最後決定是否聽取意見，也還是我們自己決定的&lt;/p&gt;
&lt;p&gt;後悔，是在告訴我們原有的決定行不通了，該轉向了！就只是如此而已&lt;br/&gt;
轉向很麻煩，但比堅持走那條不會抵達的老路還來得有效&lt;/p&gt;
&lt;h2 id="ch5-"&gt;Ch5 - 談孤單&lt;/h2&gt;
&lt;p&gt;孤單提醒我們建立有意義的人際連結&lt;/p&gt;
&lt;p&gt;判定你與某人之間存在著「有意義的人際連結」的一個指標，是你們之間的對話內容&lt;br/&gt;
是不是有大部分會是聚焦在個人化的議題上，也就是個人的思想、觀點、情感、願景、期待、決定 ... 等&lt;/p&gt;
&lt;h2 id="ch8-"&gt;Ch8 - 談憂鬱&lt;/h2&gt;
&lt;p&gt;試圖安慰處於極度傷心難過中的人盡量往好處想，是沒有用的&lt;br/&gt;
反而只是會讓當事人感受到不被理解&lt;br/&gt;
因為這麼做無疑是否定了他們此時此刻的真實感受&lt;/p&gt;
&lt;p&gt;如果真的得做點什麼，讓自己不再憂鬱，就試著做這兩件事吧&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保持正常作息&lt;/li&gt;
&lt;li&gt;出門運動並曬點陽光&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="ch9-"&gt;Ch9 - 談失落&lt;/h1&gt;
&lt;p&gt;沒能好好說再見，常是關係失落中最令人遺憾的事情，也是人無法走出失落的原因之一&lt;/p&gt;
&lt;p&gt;失落的情緒很可能會一在反覆出現，而這是再正常不過的&lt;br/&gt;
一旦來了，就允許它存在&lt;br/&gt;
只要知道，那都是在提醒我們曾經有著一段令我們在意的關係就好了&lt;/p&gt;</content><category term="Book"></category><category term="Emotion"></category></entry><entry><title>[Book] 如何閱讀一本書</title><link href="https://lee-w.github.io/posts/book/2017/03/how-to-read-a-book" rel="alternate"></link><published>2017-03-03T20:41:00+08:00</published><updated>2017-03-03T20:41:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-03-03:/posts/book/2017/03/how-to-read-a-book</id><summary type="html">&lt;p&gt;&lt;img alt="how-to-read-a-book" src="/images/books/D1Obrmf.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="how-to-read-a-book" src="/images/books/D1Obrmf.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="ch2-"&gt;Ch2 - 閱讀的層次&lt;/h2&gt;
&lt;p&gt;法蘭西斯 · 培根：「有些書可以淺嚐即止，有些書是要生吞活剝，只有少數的書是要咀嚼與消化的」&lt;/p&gt;
&lt;h2 id="ch4-"&gt;Ch4 - 閱讀的第二層次：檢視閱讀&lt;/h2&gt;
&lt;p&gt;假設一個常見的狀況「你想要發掘所有的東西，但時間卻很有限」&lt;br/&gt;
這時候得先做的就是略讀&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先看書名頁，有序就先看序&lt;/li&gt;
&lt;li&gt;目錄&lt;/li&gt;
&lt;li&gt;檢視索引&lt;/li&gt;
&lt;li&gt;出版者介紹&lt;/li&gt;
&lt;li&gt;挑幾個跟主題相關的章節看&lt;/li&gt;
&lt;li&gt;隨意在書中挑幾個小段落看&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;頭一次面對一本難讀的書的時候，從頭到尾先讀完一遍，碰到不懂的地方不要停下來查詢或思索&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="ch5-"&gt;Ch5 - 如何做一個自我要求的讀者&lt;/h2&gt;
&lt;h3 id="_1"&gt;主動的閱讀基礎 : 一個閱讀者要提出的四個基本問題&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;整體來說，這本書在談什麼？&lt;/li&gt;
&lt;li&gt;作者細部說了什麼，怎麼說的？&lt;/li&gt;
&lt;li&gt;這本書說得有道理嗎？全部都有道理呢？還是部份有道理？&lt;/li&gt;
&lt;li&gt;這本書跟你有什麼關係？&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="ch7-"&gt;Ch7 - 透視一本書&lt;/h2&gt;
&lt;p&gt;對於「整體內容」這件事，模糊的認知是不夠的&lt;br/&gt;
只有一個方法能知道你是否確切清楚的了解&lt;br/&gt;
你必須要能用幾句話，告訴你自己或別人，這整本書在說的是什麼&lt;/p&gt;
&lt;p&gt;分析閱讀的第一個階段，找出一本書在談些什麼的四個規則：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;依照書本的種類與主題做分類&lt;/li&gt;
&lt;li&gt;用最簡短的句子說出整本書在談些什麼&lt;/li&gt;
&lt;li&gt;按照順序與關係，列出全書的重要部分。將全書的綱要擬出來之後，再將各個部分的綱要也一一列出&lt;/li&gt;
&lt;li&gt;找出作者在問的問題，或作者想要解決的問題&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="ch9-"&gt;Ch9 - 判斷作者的主旨&lt;/h2&gt;
&lt;p&gt;分析閱讀的第二個階段，找出一本書到底在說什麼的規則：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;詮釋作者使用的關鍵字，與作者達到共識&lt;/li&gt;
&lt;li&gt;從最重要的句子中抓出作者的重要主旨&lt;/li&gt;
&lt;li&gt;找出作者的論述，重新架構這些論述的前因後果，以明白作者的主張&lt;/li&gt;
&lt;li&gt;確定作者已經解決了那些問題，還有哪些未解決的。在未解決的問題中，確定哪些是作者認為自己無法解決的&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="ch13-"&gt;Ch13 - 如何閱讀實用型的書&lt;/h1&gt;
&lt;p&gt;任何實用型的書都不能解決該書所關心的實際問題。一本理論性的作品可以解決自己提出的問題。但實際的問題卻只能靠行動解決&lt;/p&gt;</content><category term="Book"></category><category term="Other"></category></entry><entry><title>git ignore-io 與 開源貢獻經驗</title><link href="https://lee-w.github.io/posts/tech/2017/02/git-ignoreio-and-open-source-experience" rel="alternate"></link><published>2017-02-28T21:56:00+08:00</published><updated>2017-02-28T21:56:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-02-28:/posts/tech/2017/02/git-ignoreio-and-open-source-experience</id><summary type="html">&lt;p&gt;雖然已經隔了一年多&lt;br&gt;
當初 git ignore-io 這個小功能，也是花了一兩個月&lt;br&gt;
好不容易才&lt;a href="https://github.com/tj/git-extras"&gt;git extras&lt;/a&gt; merge 回去的&lt;/p&gt;
</summary><content type="html">&lt;p&gt;雖然已經隔了一年多&lt;br&gt;
當初 git ignore-io 這個小功能，也是花了一兩個月&lt;br&gt;
好不容易才&lt;a href="https://github.com/tj/git-extras"&gt;git extras&lt;/a&gt; merge 回去的&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;當初看到這封信的時候，很是感動啊 xd&lt;br&gt;
&lt;img alt="accepted" src="/images/posts-image/2017-02-28-git-ignoreio-and-open-source-experience/1-accepted.jpg"&gt;&lt;/p&gt;
&lt;h2 id="git-ignore-io"&gt;git ignore-io&lt;/h2&gt;
&lt;p&gt;這個工具主要是從&lt;a href="https://www.gitignore.io"&gt;gitignoore.io&lt;/a&gt; 上下載 .gitignore 的範本&lt;br&gt;
e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git ignore-io -a vim osx python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;像這就是 vim 常見的暫存檔們&lt;br&gt;
一般來說應該被忽略掉，不用被 commit&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Created by https://www.gitignore.io/api/vim

### Vim ###
# swap
[._]*.s[a-v][a-z]
[._]*.sw[a-p]
[._]s[a-v][a-z]
[._]sw[a-p]
# session
Session.vim
# temporary
.netrwhist
*~
# auto-generated tag files
tags

# End of https://www.gitignore.io/api/vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;當初可是連文件都要寫好，才會被作者接受&lt;br&gt;
所以我這裡就直接沿用我當初寫的文件了 xD&lt;/p&gt;
&lt;p&gt;Without option, &lt;code&gt;git ignore-io &amp;lt;type&amp;gt;&lt;/code&gt; shows the sample gitignore of specified types on screen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git ignore-io vim

    &lt;span class="c1"&gt;# Created by https://www.gitignore.io/api/vim&lt;/span&gt;

    &lt;span class="c1"&gt;### Vim ###&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;._&lt;span class="o"&gt;]&lt;/span&gt;*.s&lt;span class="o"&gt;[&lt;/span&gt;a-w&lt;span class="o"&gt;][&lt;/span&gt;a-z&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;._&lt;span class="o"&gt;]&lt;/span&gt;s&lt;span class="o"&gt;[&lt;/span&gt;a-w&lt;span class="o"&gt;][&lt;/span&gt;a-z&lt;span class="o"&gt;]&lt;/span&gt;
    *.un~
    Session.vim
    .netrwhist
    *~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To export it to &lt;code&gt;.gitignore&lt;/code&gt; file you can use the following options:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--append&lt;/code&gt; to append the result to &lt;code&gt;.gitignore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--replace&lt;/code&gt; to export &lt;code&gt;.gitignore&lt;/code&gt; with the result&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git ignore-io vim python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For efficiency, &lt;code&gt;git ignore-io&lt;/code&gt; store all available types at &lt;code&gt;~/.gi_list&lt;/code&gt;.&lt;br&gt;
To list all the available types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;-L&lt;/code&gt; : These two options will show the list in different format. Just try it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also search type from the list by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-s &amp;lt;word&amp;gt;&lt;/code&gt; or &lt;code&gt;--search &amp;lt;word&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git ignore-io -s ja

    django
    jabref
    java
    ninja
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h2 id="_1"&gt;為什麼要貢獻開源專案？&lt;/h2&gt;
&lt;p&gt;貢獻開源專案最主要的原因&lt;br&gt;
還是就是&lt;strong&gt;我需要這個功能啊！！！&lt;/strong&gt;&lt;br&gt;
但是就沒有人寫，bug 沒有人修&lt;br&gt;
所以就只好先承認自己就是「沒有人」了 xd&lt;/p&gt;
&lt;p&gt;其實 gitignore.io 本身就有提供一個簡單的 script &lt;a href="https://www.gitignore.io/docs#-install-command-line"&gt;gi&lt;/a&gt;&lt;br&gt;
不過實在有點不夠我用 xD&lt;br&gt;
於是我就寫了&lt;a href="https://github.com/Lee-W/gi_extension"&gt;gi_extension&lt;/a&gt;&lt;br&gt;
後來又覺得，如果整併的 git extras&lt;br&gt;
我就能透過 homebrew 安裝了 (?????&lt;/p&gt;
&lt;p&gt;整個從 pull request 到 merge 的過程其實蠻有趣的&lt;br&gt;
我找到當初我開的&lt;a href="https://github.com/tj/git-extras/pull/439"&gt;pr #439&lt;/a&gt; 和&lt;a href="https://github.com/tj/git-extras/pull/448"&gt;pr #448&lt;/a&gt;&lt;br&gt;
從 shell script 的風格（有人建議我用&lt;a href="https://github.com/koalaman/shellcheck"&gt;shellcheck&lt;/a&gt;）到 command 的 option 為什麼要這樣命名&lt;br&gt;
都有人跟我討論，給我建議&lt;br&gt;
從中也學到了很多&lt;br&gt;
&lt;del&gt;貢獻這些專案還能去申請 SITCON 跟 COSCUP 的開源貢獻票，這樣就不用跟大家搶票了&lt;/del&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Open Source"></category></entry><entry><title>[Book] 看！情緒幹得好事</title><link href="https://lee-w.github.io/posts/book/2017/02/fuck-feelings" rel="alternate"></link><published>2017-02-04T10:16:00+08:00</published><updated>2017-02-04T10:16:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-02-04:/posts/book/2017/02/fuck-feelings</id><summary type="html">&lt;p&gt;&lt;img alt="F*ck Feelings" src="/images/books/tLNg7CJ.jpg"&gt;&lt;/p&gt;
&lt;p&gt;本書鼓勵你接受一切無法改變的事情 (e.g. 你的個性、行為、感情、工作 and etc.)&lt;br&gt;
並提供方法更有效的管理人生難題，而&lt;strong&gt;不是妄想去改變他們&lt;/strong&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="F*ck Feelings" src="/images/books/tLNg7CJ.jpg"&gt;&lt;/p&gt;
&lt;p&gt;本書鼓勵你接受一切無法改變的事情 (e.g. 你的個性、行為、感情、工作 and etc.)&lt;br&gt;
並提供方法更有效的管理人生難題，而&lt;strong&gt;不是妄想去改變他們&lt;/strong&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;上面這段話節錄自這本書的前言&lt;/p&gt;
&lt;p&gt;比起一般心靈勵志的書&lt;br&gt;
這本書更要告訴你的是「面對現實」&lt;br&gt;
我們得接受很多事情不是我們所能改變的&lt;br&gt;
尤其是那些我們以為只要努力就一定可以做到的&lt;/p&gt;
&lt;p&gt;但這本書也試圖提供一些實際的作法，給我們一點面對人生難題的方向&lt;br&gt;
如果努力過還是失敗了，就試著接受無法改變的現實吧&lt;br&gt;
接受，從來就是不是件容易的事&lt;br&gt;
也許就算這麼做了，還是是會不開心&lt;br&gt;
但自我責備和衝動行事，只會一切更糟&lt;br&gt;
試著與這些情緒或無法改變的事共存，並讓自己的人生更好&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這本書的原文書名是 "F*ck Feelings"&lt;br&gt;
每一個章節的原文甚至全都用 Fuck 當作開頭&lt;br&gt;
不過目錄的中文翻譯倒是沒這麼直接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#0"&gt;前言 - 你訂下什麼目標&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1"&gt;該死的做更好的自己&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;該死的自尊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;該死的公平正義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;該死的熱心助人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;該死的心平氣和&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;該死的真愛無敵&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;該死的溝通&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8"&gt;該死的天下無不是的父母&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;該死的混蛋&lt;/li&gt;
&lt;li&gt;&lt;a href="#10"&gt;[Bouns] 該死的治療&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#post"&gt;後記 - 好吧，該死的我&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一個章節都有很多個小問題&lt;br&gt;
每個小問題都會有下面這些內容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;問題概述&lt;/li&gt;
&lt;li&gt;那些你想做到，而做不到的事（e.g. 突然哪天醒來，憂鬱症就好了）&lt;/li&gt;
&lt;li&gt;遇到這個問題，人們許下的願望（真正想達到的事）&lt;/li&gt;
&lt;li&gt;案例分析&lt;/li&gt;
&lt;li&gt;簡易自我診斷表&lt;ul&gt;
&lt;li&gt;無法企及的心願&lt;/li&gt;
&lt;li&gt;切合實際且可達成的目標&lt;/li&gt;
&lt;li&gt;你能做的事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真心話練習腳本 （一個範本，讓你可以帶入各種角色、事件，對你或其他人說）&lt;/li&gt;
&lt;li&gt;不一定會有的額外補充&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="-"&gt;&lt;a name='0'&gt;&lt;/a&gt; 前言 - 你訂下什麼目標&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;接受吧！有些失去就是一輩子的痛，所以別再鑽牛角尖&lt;br&gt;
  請習慣帶著一顆沈重的心活著，努力開創比現在更好的人生&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;&lt;a name='1'&gt;&lt;/a&gt; 該死的做更好的自己&lt;/h2&gt;
&lt;h3 id="_2"&gt;上癮的自我治療&lt;/h3&gt;
&lt;p&gt;自我批評或祈求誘惑那天突然消失，都對戒除上癮沒有幫助，而是要接受癮頭存在的事實&lt;br&gt;
你得用盡全力對付它，才不會把力氣浪費在自我怪罪、虛假希望、絕望與自憐上&lt;/p&gt;
&lt;h2 id="_3"&gt;&lt;a name='2'&gt;&lt;/a&gt; 該死的做更好的自己&lt;/h2&gt;
&lt;h3 id="_4"&gt;克服身障缺陷&lt;/h3&gt;
&lt;p&gt;隱藏疾病或迴避治療往往讓情況更糟&lt;br&gt;
你能做的就是接受它，即便會尷尬或對自己失望&lt;/p&gt;
&lt;p&gt;人們唯有真正了解你的疾病，才會尊重你管理疾病的方式，進而幫助你對付它&lt;br&gt;
說出你真正的問題，並非告解，而是聲明&lt;/p&gt;
&lt;h2 id="_5"&gt;&lt;a name='3'&gt;&lt;/a&gt; 該死的公平正義&lt;/h2&gt;
&lt;h3 id="_6"&gt;洗刷污名&lt;/h3&gt;
&lt;p&gt;當你被不實指控時最大的錯誤就是用事實與理智反擊&lt;br&gt;
你的目的不是要證明敵人錯了，而是要避免你的人生被敵人和他的指控糾纏&lt;/p&gt;
&lt;h3 id="_7"&gt;討公道&lt;/h3&gt;
&lt;p&gt;失去了你覺得不該失去的東西後，也許會發現自己無法走出悲傷&lt;br&gt;
直到找到能平衡不平的東西或賦予「失去」意義&lt;br&gt;
其實你真正需要的是打擊某個根深蒂固的假說，也就是「不會發生不公平的事」&lt;/p&gt;
&lt;p&gt;如果你法停止遺憾，請思考這麼做的代價&lt;br&gt;
體驗美好卻不願放手是要付出代價的&lt;/p&gt;
&lt;p&gt;請建立一套對抗懊悔與渴望公平的哲學，人間本來就不存在公平&lt;/p&gt;
&lt;h2 id="_8"&gt;&lt;a name='4'&gt;&lt;/a&gt; 該死的熱心助人&lt;/h2&gt;
&lt;p&gt;助人的感覺驅使我們努力改變他們，不管做不做得到，也不顧會不會產生意想不到的後果&lt;/p&gt;
&lt;h3 id="_9"&gt;犧牲奉獻做公益&lt;/h3&gt;
&lt;p&gt;這是你想擁有但很可能缺乏的力量之一：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;神奇的後見之明
保證你的援助不會損及對方文化，也不會引發嫉妒
不會因為破壞而造成反彈，更保證人們對你的援助只有感激與敬佩
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_10"&gt;&lt;a name='5'&gt;&lt;/a&gt; 該死的心平氣和&lt;/h2&gt;
&lt;p&gt;緊張、恐懼還或是憤怒，人生所有的都不愉快是無法避免的&lt;br&gt;
另一個角度來看，這些情緒都是有益的，它們讓我們對外在世界多一份警戒&lt;/p&gt;
&lt;p&gt;如果你真的想致力過完全平靜的人生，你只能這麼做&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大腦額葉切除成功，成功過著完全平靜的人生&lt;/li&gt;
&lt;li&gt;因為做不到而自認失敗者&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_11"&gt;我愛你，我不要恨你&lt;/h3&gt;
&lt;p&gt;你可以試著化解造成仇恨的負面情緒&lt;br&gt;
但努力後還是無法不恨的話，也不要對此感到絕望&lt;br&gt;
對自己無法不憎恨而責怪自己，只會讓一切更糟&lt;br&gt;
一旦接受了憤怒不會消失，接下來就想想該如何管理這份憤怒&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無法企及的願望&lt;ul&gt;
&lt;li&gt;不被仇恨玷汙的心&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;切合實際可達成的目標&lt;ul&gt;
&lt;li&gt;與仇恨共處，不會恨自己&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你能做的事&lt;ul&gt;
&lt;li&gt;盡一切阻止惡行，降低與這些行為接觸的機會&lt;/li&gt;
&lt;li&gt;永遠不要因為可恨的人而感到氣餒&lt;/li&gt;
&lt;li&gt;管理好恨意是值得尊敬的事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_12"&gt;治療心痛&lt;/h3&gt;
&lt;p&gt;有些失落是無法復原的，即使有很多支持，工作很努力，也不斷向前走&lt;/p&gt;
&lt;p&gt;很多時候，失落的心痛能否復原由不得自己&lt;br&gt;
帶著一顆破碎的心生活也許很難&lt;br&gt;
但這並不會阻止你活出更好的人生&lt;/p&gt;
&lt;h2 id="_13"&gt;&lt;a name='6'&gt;&lt;/a&gt; 該死的真愛無敵&lt;/h2&gt;
&lt;h3 id="_14"&gt;找一個伴&lt;/h3&gt;
&lt;p&gt;眼光請超越吸引力，想清楚你需要怎樣的人格特質和個性&lt;br&gt;
如果這些特質不存在，要有心理準備不要理會強大的吸引力&lt;/p&gt;
&lt;h2 id="_15"&gt;&lt;a name='7'&gt;&lt;/a&gt; 該死的溝通&lt;/h2&gt;
&lt;p&gt;如果無法與他人達成共識，請花時間弄清楚為什麼溝通無效&lt;br&gt;
也許就是不能溝通呢？&lt;br&gt;
或者更重要的是根本不該溝通&lt;/p&gt;
&lt;p&gt;重要的是知道溝通的能力其實有限&lt;/p&gt;
&lt;h3 id="_16"&gt;說出創傷&lt;/h3&gt;
&lt;p&gt;不要再逼受創傷的人講述自己的故事&lt;br&gt;
人們對復原傷痛都有一套自己的方法，也許把話說開對你最好，卻可能成了別人的痛處&lt;/p&gt;
&lt;p&gt;很多時候，創傷可能無法被解決，不論是透過分享或哄騙他人分享&lt;br&gt;
但你可以學著傾聽自己的需要和在乎的事&lt;br&gt;
儘管你現在必須經驗的焦慮或目睹痛苦&lt;/p&gt;
&lt;h3 id="_17"&gt;宣洩憤怒&lt;/h3&gt;
&lt;p&gt;如果你決定保持沈默好過抒發自我&lt;br&gt;
這不是因為你是懦夫，而是你有比起讓內部火山噴發更具價值的目標&lt;br&gt;
例如維繫家庭、替感情找到最好出路，以及保留談判的力量&lt;/p&gt;
&lt;h2 id="_18"&gt;&lt;a name='8'&gt;&lt;/a&gt; 該死的天下無不是的父母&lt;/h2&gt;
&lt;h3 id="_19"&gt;停止親子衝突&lt;/h3&gt;
&lt;p&gt;如果你對孩子即將變成什麼樣的人感到悲傷&lt;br&gt;
請客觀看待他的長處，不要混肴真正的他與你期望的他，兩者差距有如鴻溝&lt;br&gt;
尤其你的期待可能帶著成見和錯誤&lt;/p&gt;
&lt;h2 id="bouns"&gt;&lt;a name='10'&gt;&lt;/a&gt; [Bouns] 該死的治療&lt;/h2&gt;
&lt;h3 id="_20"&gt;尋求治療&lt;/h3&gt;
&lt;p&gt;透過治療，你想找到問題根源，找得到當然很好，但那只會出現在電影裡&lt;br&gt;
現實人生中，大多數問題成因太多，很多甚至是無法改變的&lt;br&gt;
即便有耀眼的洞察力或痛哭一場也改變不了&lt;br&gt;
如果你還期望這樣的治療能解決問題，一定會覺得自己很失敗&lt;/p&gt;
&lt;p&gt;人們以為心理治療有某種神奇的力量，可以剷除不開心的事&lt;br&gt;
但現實是，這些不切實際的期望把你鎖在無法實現的目標&lt;br&gt;
而它們只會讓你更痛苦而已&lt;/p&gt;
&lt;h3 id="_21"&gt;拒絕就醫者的治療&lt;/h3&gt;
&lt;p&gt;如果有什麼不好的事發生，不要把焦點放在該怪誰&lt;br&gt;
尊重嚴重精神疾病很難忍受的事實，並看重你和他人都盡力幫助這件事&lt;br&gt;
有人說自殺是懦弱的結束，是被愛者失敗的表現&lt;br&gt;
但套句臨床術語來形容那些說這種話的人是「他馬的白痴！」&lt;br&gt;
對病入膏肓且失去大多數原始個性的人&lt;br&gt;
當你持續愛他並關心他，就沒有失敗這回事&lt;br&gt;
當有人每天從床上爬起來與疾病奮戰，就沒有懦弱這件事&lt;br&gt;
即使他們最後連這樣的事都做不了了&lt;/p&gt;
&lt;h2 id="-_1"&gt;&lt;a name='post'&gt;&lt;/a&gt; 後記 - 好吧，該死的我&lt;/h2&gt;
&lt;p&gt;請記得天下沒有「公平」這回事&lt;br&gt;
情緒不過是蠢事&lt;br&gt;
而人生艱難 ...&lt;/p&gt;
&lt;p&gt;如此你的日子大概就會過得比較ＯＫ&lt;br&gt;
即使不快樂，因為你的目標很實際&lt;br&gt;
而為了達成目標付出的努力也會讓你很驕傲&lt;/p&gt;</content><category term="Book"></category><category term="Emotion"></category></entry><entry><title>我如何更有效率的使用時間</title><link href="https://lee-w.github.io/posts/gossiping/2017/02/how-do-i-manage-my-time" rel="alternate"></link><published>2017-02-03T00:53:00+08:00</published><updated>2017-02-03T00:53:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2017-02-03:/posts/gossiping/2017/02/how-do-i-manage-my-time</id><summary type="html">&lt;p&gt;過年整理了好多以前的書摘&lt;br&gt;
好像該來發一點自己的東西了&lt;/p&gt;
&lt;p&gt;前一段時間被找回母系演講&lt;br&gt;
被問了，我是怎麼管理時間的&lt;/p&gt;
</summary><content type="html">&lt;p&gt;過年整理了好多以前的書摘&lt;br&gt;
好像該來發一點自己的東西了&lt;/p&gt;
&lt;p&gt;前一段時間被找回母系演講&lt;br&gt;
被問了，我是怎麼管理時間的&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;當下沒有回答的很好&lt;br&gt;
於是乎就有了這篇文章 XD&lt;/p&gt;
&lt;h2 id="_1"&gt;如何達到一個目標&lt;/h2&gt;
&lt;p&gt;我們常常會給自己定一個很大的目標&lt;br&gt;
像是我要看完 "Learning Python" ( 一本 1400 頁的 Python 教學書）&lt;br&gt;
嗯，聽起來好像也不太大&lt;br&gt;
不過至少這不太容易在一天內完成&lt;/p&gt;
&lt;p&gt;剛定下目標的時候，會很有衝勁的去做&lt;br&gt;
過了一段時間就會發現，怎麼離完成目標還是好遠&lt;br&gt;
再來我們就會去做一些比較容易達成的事，像是滑個 FB、整理一下 e-mail&lt;br&gt;
然後這個目標就會擺在這，等到很久以後再想起它&lt;br&gt;
恩，就像新年新希望一樣&lt;/p&gt;
&lt;h3 id="_2"&gt;怎麼樣才能達到目標呢？&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;每天做一點點
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我非常喜歡&lt;a href="https://youtu.be/by0tCDO36qQ"&gt;Act Small&lt;/a&gt; 這支影片&lt;br&gt;
他把目標比喻成走完一千階的階梯&lt;br&gt;
光是看著這長長的階梯就會讓人感到挫折和疲憊&lt;br&gt;
這時候我們會先去吃個早餐、遛個狗，做些輕鬆可以達到的事&lt;br&gt;
想辦法拖延要爬上這個階梯這件苦差事&lt;br&gt;
但是，如果我們試著不要只專注在很遙遠的目標&lt;br&gt;
而是眼前的每一個小階梯&lt;br&gt;
走一個小階梯，並不會讓人感到壓力&lt;br&gt;
但是每天都走這簡單的一小步，最後就會達到甚至超過這一千階的階梯&lt;/p&gt;
&lt;p&gt;訂下目標後，要把目標拆解成一個個很小很明確的行動&lt;br&gt;
最好是可以小到不會讓人感受到壓力&lt;br&gt;
再來就是每天不斷地完成這些小小的行動&lt;/p&gt;
&lt;p&gt;這部影片是&lt;a href="http://dailysuccessweb.com"&gt;Daily Checklist&lt;/a&gt; 的社群分享的&lt;br&gt;
這個 App 可以幫我們追蹤今天是不是完成了要達成的行動，到了凌晨 12 點就會重設 Checklist&lt;br&gt;
接下來會提到這個 App，如何幫我達成目標&lt;/p&gt;
&lt;h2 id="_3"&gt;如何養成習慣&lt;/h2&gt;
&lt;p&gt;那麼把目標拆解成很小的行動後&lt;br&gt;
要怎麼堅持每天都要走這一小步，而不會半途而廢呢？&lt;/p&gt;
&lt;p&gt;這裡非常推薦大家看「&lt;a href="https://lee-w.github.io/posts/book/2015/11/the-power-of-habit"&gt;為什麼我們這樣生活，那樣工作?&lt;/a&gt;」（連結是我的書摘）&lt;/p&gt;
&lt;p&gt;裡面提到要養成一個習慣的條件有以下四個&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提示&lt;/li&gt;
&lt;li&gt;慣性行為 （習慣）&lt;/li&gt;
&lt;li&gt;獎籌&lt;/li&gt;
&lt;li&gt;創造渴望&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以我最前面說我要看完 "Learning Python" 為例&lt;br&gt;
我會定只要某個時間一到，我就得要看這本書&lt;br&gt;
只要我花了一個小時看它，我就會在 Daily Checklist，按下 check，表示我看完今天的進度了&lt;br&gt;
如果我突然怠惰不想看，就會中斷我連續達成這個行動的累績次數&lt;br&gt;
也會讓我今天的習慣達成率沒辦法達到 100%&lt;br&gt;
這都會驅使我今天就算只做一點點，也要努力再前進一小步&lt;/p&gt;
&lt;p&gt;把這些敘述換成剛剛所提到的四個條件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提示 → 時間到了&lt;/li&gt;
&lt;li&gt;慣性行為 （習慣） → 看 Learning Python&lt;/li&gt;
&lt;li&gt;獎酬 → 在 Checklist 上打個勾&lt;/li&gt;
&lt;li&gt;創造渴望 → 我要讓 Checklist 上的達成率達到 100%&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而且隨著達到的目標越來越多&lt;br&gt;
就會感到更有成就感&lt;br&gt;
越來越相信自己可以做到這些事情&lt;/p&gt;
&lt;p&gt;透過追蹤自己習慣和時間使用&lt;br&gt;
可以讓自己知道接下來要從哪裡修正起&lt;br&gt;
如果自己漸漸有進步，就會有成就感繼續堅持下去&lt;/p&gt;
&lt;p&gt;除了 Daily Checklist，另外也推薦追蹤工作時間用的&lt;a href="https://www.toggl.com"&gt;Toggl&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_4"&gt;一天不做，不會怎樣啦&lt;/h3&gt;
&lt;p&gt;花了好久時間建立的習慣，還是會有想怠惰的時候&lt;/p&gt;
&lt;p&gt;我很喜歡「&lt;a href="https://lee-w.github.io/posts/book/2016/08/how-will-you-measure-your-life"&gt;你如何衡量你的人生&lt;/a&gt;」的一句話&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;百分之百的堅持比百分之九十八容易
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一旦你放下了這個堅持，之後就會更容易放下&lt;br&gt;
反之，如果一直堅持，就會有力量讓自己一直堅持下去&lt;/p&gt;
&lt;h2 id="_5"&gt;時間有限，做出選擇&lt;/h2&gt;
&lt;p&gt;再來可能會再遇到下一個問題&lt;br&gt;
想完成的事情太多，能分配的時間太少&lt;/p&gt;
&lt;p&gt;這就是必須做出選擇的時候了&lt;br&gt;
那麼要怎麼決定那些事情是真的很重要，要留下來的呢？&lt;br&gt;
這裡我要推薦的書是「&lt;a href="https://lee-w.github.io/posts/book/2016/03/essentialism"&gt;少，但是更好&lt;/a&gt;」&lt;br&gt;
不過如果要給一個最簡單的原則，那就是&lt;a href="https://www.youtube.com/watch?time_continue=60&amp;amp;v=1ehWlVeMrqw"&gt;No more yes. It's Either HELL YEAH! Or No&lt;/a&gt;&lt;br&gt;
&lt;code&gt;如果這件事不是「太棒了！我一定要去做！！！」，那麼就不要做了&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外一個更明確的做法是&lt;a href="http://www.artofmanliness.com/2017/01/09/work-deliberately-instead-reactively-rule-3/?utm_source=pocket&amp;amp;utm_medium=email&amp;amp;utm_campaign=pockethits"&gt;Rule of Three&lt;/a&gt;&lt;br&gt;
在一天結束前，為明天定下三件重要而且一定要完成的事&lt;br&gt;
只要三件，&lt;code&gt;可以少，但不可以多&lt;/code&gt;，就算只有一件也很好&lt;br&gt;
只要這三件事情還沒有達成就不能做其他的事&lt;br&gt;
這樣做的好處是可以明確的知道接下來要做什麼，大腦的負擔會比較小&lt;br&gt;
也不會讓自己因為有太多未完成的代辦事項而分心&lt;/p&gt;
&lt;h2 id="_6"&gt;意志力有限&lt;/h2&gt;
&lt;p&gt;人的意志力是非常有限的&lt;br&gt;
所以留給一點彈性給自己吧&lt;br&gt;
不要把整天都排滿工作，適時的排給自己一點休閒&lt;br&gt;
人畢竟不是機器，沒辦法不停的工作&lt;br&gt;
尤其到了越晚，意志力會越來越薄弱&lt;br&gt;
所以我會盡量把重要的習慣，擺在早上做完&lt;/p&gt;
&lt;p&gt;如果真的累了，就休息吧&lt;br&gt;
不論是體力上的疲憊，或只是意志力的消磨殆盡&lt;br&gt;
死撐著也只是無意義的消磨時間，而且還有可能導致工作出錯&lt;/p&gt;
&lt;p&gt;不過休息就真的休息，聽點音樂或什麼的都好&lt;br&gt;
去滑臉書、收信件、看新聞，這些往往會讓意志力恢復得更慢&lt;/p&gt;
&lt;h2 id="_7"&gt;後記&lt;/h2&gt;
&lt;p&gt;其實我一直想花時間，紀錄一下服役時間各種嘗試讓自己更有效率的方法&lt;br&gt;
今天終於下定決心好好的寫這篇文章&lt;/p&gt;
&lt;p&gt;大三、大四的那兩年，好像常常把自己搞得很忙&lt;br&gt;
雖然不算沒有做到事&lt;br&gt;
但總覺得自己好像有點是在瞎忙&lt;br&gt;
明明花這些時間應該可以做更多的事&lt;/p&gt;
&lt;p&gt;服役期間，剛好坐我隔壁的學長很喜歡看書&lt;br&gt;
就漸漸地養成一週至少會看一本書的習慣&lt;br&gt;
上面提到的這些書也都是這段時期看的&lt;br&gt;
後來就漸漸把這些應用在其他我想學想做的事情上&lt;br&gt;
第一次好好上完一個為期三個月的線上課程，其實蠻有成就感的&lt;/p&gt;
&lt;p&gt;再來遇到的問題就是，在這之後我排了太多的線上課程和想看的書&lt;br&gt;
有時候白天工作量比較多，回到宿舍還要持續好幾個小時的 work&lt;br&gt;
實在太讓人吃不消&lt;br&gt;
所以我重新檢視了我的計劃和每天要達成的習慣&lt;br&gt;
哪些是真的重要的&lt;br&gt;
這些事又要怎麼拆解才能不會讓我太費力，或只要多花一點力，不會很容易半途而廢的&lt;/p&gt;
&lt;p&gt;這些只是我嘗試覺得有用的方法&lt;br&gt;
不見得適用於每個人&lt;br&gt;
不過也許都能去嘗試看看，相信總會有一些有幫助的部分&lt;/p&gt;</content><category term="Gossiping"></category><category term="Productivity"></category></entry><entry><title>More than Just Echo Bot</title><link href="https://lee-w.github.io/posts/tech/2016/11/more-than-just-echo-bot" rel="alternate"></link><published>2016-11-29T01:57:00+08:00</published><updated>2016-11-29T01:57:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-29:/posts/tech/2016/11/more-than-just-echo-bot</id><summary type="html">&lt;p&gt;知道怎麼實作一個會 Echo 的 Bot 後&lt;br&gt;
再來就要思考，開發一個 Bot 我們要提供什麼功能&lt;br&gt;
(e.g., 天氣查詢, 訂票, 推薦旅遊景點)&lt;/p&gt;
&lt;p&gt;不過這裡要討論的不是 Bot 的功能&lt;br&gt;
Bot 的功能實作，跟一般網站或 App 的實作並沒有太大的差別&lt;/p&gt;
&lt;p&gt;接下來來談如何從使用者說的話來判斷，使用者要使用的功能&lt;/p&gt;
</summary><content type="html">&lt;p&gt;知道怎麼實作一個會 Echo 的 Bot 後&lt;br&gt;
再來就要思考，開發一個 Bot 我們要提供什麼功能&lt;br&gt;
(e.g., 天氣查詢, 訂票, 推薦旅遊景點)&lt;/p&gt;
&lt;p&gt;不過這裡要討論的不是 Bot 的功能&lt;br&gt;
Bot 的功能實作，跟一般網站或 App 的實作並沒有太大的差別&lt;/p&gt;
&lt;p&gt;接下來來談如何從使用者說的話來判斷，使用者要使用的功能&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;如果使用者問：「今天天氣如何？」「天氣今天好嗎？」&lt;br&gt;
要如何知道，他都是要詢問今天的天氣狀況&lt;br&gt;
也就是使用者的「意圖」&lt;/p&gt;
&lt;h2 id="based-on-keyword"&gt;Based on Keyword&lt;/h2&gt;
&lt;p&gt;上一篇文章，輸入關鍵字就能回傳 template message 的 bot 也是用這樣的方式實作的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;button&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Send ButtonTemplate&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;confirm&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Send ConfirmTemplate&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;carousel&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Send CarouselTemplate&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Echo TextMessage&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;回歸到天氣的問題&lt;br&gt;
可以試著找出「天氣」是否有出現在使用者的問句中&lt;br&gt;
再來判斷「今天」, 「明天」這樣敘述時間的詞&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;天氣&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;今天&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;today_s_weather&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;明天&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tomorrow_s_weather&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="pros"&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不需要其他的背景知識，容易實作&lt;/li&gt;
&lt;li&gt;運算量小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cons"&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;建立規則很麻煩&lt;/li&gt;
&lt;li&gt;規則很容易就會出現例外，很難定義得完整&lt;ul&gt;
&lt;li&gt;只要使用者無法觸發到關鍵字，就無法使用功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一堆 if else 造成程式冗長，不易擴充和維護&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="aiml"&gt;AIML&lt;/h2&gt;
&lt;p&gt;Artificial Intelligence Modelling Language&lt;br&gt;
它是一款基於 XML 的 markup language&lt;/p&gt;
&lt;p&gt;這是最基本的 AIML&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;aiml&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0.1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;encoding=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;category&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt; HELLO ALICE &lt;span class="nt"&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
         Hello User!
      &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/aiml&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要符合特定的 pattern，就回傳指定的 template&lt;br&gt;
也能透過 &lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt; 這樣的 tag，從多種回覆隨機丟一種回傳&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;random&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; response1 &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; response2 &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
   ...
&lt;span class="nt"&gt;&amp;lt;/random&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="pros_1"&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;比起只用 if else 更結構化，較易維護和擴充&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cons_1"&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;依然很難包含所有的狀況&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="other-nlp-service"&gt;Other NLP Service&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wit.ai"&gt;Wit.ai&lt;/a&gt; (Facebook)&lt;ul&gt;
&lt;li&gt;COSCUP 2016 的聊天機器人小啄，就是透過 Wit.ai 實作的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.luis.ai"&gt;LUIS&lt;/a&gt; (Microsoft)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.ai"&gt;API.ai&lt;/a&gt; (Google)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些服務能透過標記和訓練&lt;br&gt;
解析出這句話的每一個片段，所具有的意義&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. 「今天西雅圖天氣如何」&lt;ul&gt;
&lt;li&gt;時間：今天&lt;/li&gt;
&lt;li&gt;地點：西雅圖&lt;/li&gt;
&lt;li&gt;意圖：天氣如何&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="witai"&gt;Wit.ai&lt;/h3&gt;
&lt;p&gt;Wit.ai 跟 LUIS, API.ai 比較不同的地方是&lt;br&gt;
從 Wit.ai 得到的是，我們設定的回覆&lt;br&gt;
而不是一句話解析後的結果&lt;/p&gt;
&lt;h3 id="luis"&gt;LUIS&lt;/h3&gt;
&lt;p&gt;從&lt;a href="https://www.microsoft.com/cognitive-services/en-us/language-understanding-intelligent-service-luis"&gt;這裡&lt;/a&gt; 可以測試兩個訓練過的範例機器人，看看從 LUIS 可以得到什麼&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;how is the weather in the Taipei
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;how is the weather in the Taipei&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;topScoringIntent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;intent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GetCurrentWeather&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.50119406&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;actions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;triggered&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GetCurrentWeather&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;parameters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;entities&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;dialog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;contextId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;80cd646a-d85d-4b40-873d-1b47fa49adc8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Question&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;prompt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Where would you like to get the current weather for?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;parameterName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="apiai"&gt;API.ai&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Question&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Hey Calendar, schedule lunch with
Mary Johnson at 12 pm tomorrow.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;meeting.create&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lunch with Mary Johnson&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;invitees&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mary Johnson&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2014-08-06T12:00:00-07:00&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="implement-through-powerful-libraries"&gt;Implement Through Powerful Libraries&lt;/h2&gt;
&lt;p&gt;不過這些服務，通常會有它的限制&lt;br&gt;
這時候就能用上 Python 強大的函式庫們，來實作自己的版本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.nltk.org"&gt;NLTK&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Python 經典的 NLP 函式庫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://radimrehurek.com/gensim/"&gt;word2vec&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;透過詞向量，找出相似詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fxsjy/jieba"&gt;jieba&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;中文斷詞&lt;/li&gt;
&lt;li&gt;判斷句子中的關鍵詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我在&lt;a href="https://gist.github.com/Lee-W/72f3a59b015cd67b3a939bf8a12680ac"&gt;NLP Libs Sample&lt;/a&gt; 寫了這些函式庫的基本使用範例&lt;/p&gt;
&lt;p&gt;另外，也可以看&lt;a href="https://github.com/warmheartli/ChatBotCourse"&gt;自己动手做聊天机器人教程&lt;/a&gt;&lt;br&gt;
它是一系列聊天機器人教學，談這些做法背後的理論和實作&lt;/p&gt;
&lt;h2 id="beyond-nlp"&gt;Beyond NLP&lt;/h2&gt;
&lt;p&gt;不過就算做了這些分詞、判斷意圖&lt;br&gt;
也不能保證使用者就會買單&lt;/p&gt;
&lt;p&gt;有人稱 Chat Bot 為下一代的 UX Design&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fastcodesign.com/3054934/the-next-phase-of-ux-designing-chatbot-personalities"&gt;The Next Phase Of UX: Designing Chatbot Personalities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="issue"&gt;Issue&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如何讓使用者，在機器人的 Scope 內不會碰壁&lt;/li&gt;
&lt;li&gt;如何讓機器人的判斷足夠 robust，不會每次回答都是不明白&lt;/li&gt;
&lt;li&gt;如何讓使用者在最少的操作下，得到想得到的服務&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更進一步是&lt;br&gt;
如何設計一個有個性、有溫度的機器人&lt;br&gt;
這裡就可以再去研究 NLP 的情感分析&lt;/p&gt;
&lt;h3 id="read-more"&gt;Read More&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.topbots.com/common-chatbot-ux-mistakes-in-bot-design/"&gt;WHEN BOTS GO BAD: COMMON UX MISTAKES IN CHATBOT DESIGN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smashingmagazine.com/2016/11/does-conversation-hurt-or-help-the-chatbot-ux/"&gt;Does Conversation Hurt Or Help The Chatbot UX?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackmd.io/s/SyJUciYWg"&gt;Head First ChatBot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/aiml/index.htm"&gt;AIML Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.devdungeon.com/content/ai-chat-bot-python-aiml"&gt;AI Chat Bot in Python with AIML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wit.ai/docs/quickstart"&gt;Wit.ai Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/warmheartli/ChatBotCourse"&gt;自己动手做聊天机器人教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/ideas/an-overview-of-the-bot-landscape?imm_mid=0eb199&amp;amp;cmp=em-data-na-na-newsltr_20161130"&gt;An overview of the bot landscape&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Chat Bot"></category><category term="NLP"></category><category term="Machine Learning"></category></entry><entry><title>More About Line Messaging API - Template Messages</title><link href="https://lee-w.github.io/posts/tech/2016/11/more-about-line-messaging-api-template-messages" rel="alternate"></link><published>2016-11-27T06:08:00+08:00</published><updated>2016-11-27T06:08:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-27:/posts/tech/2016/11/more-about-line-messaging-api-template-messages</id><summary type="html">&lt;p&gt;除了傳送文字外，Line Bot 還可以傳&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;圖片, 影像, 聲音, 地圖&lt;/li&gt;
&lt;li&gt;貼圖 (Line Bot 所能使用的&lt;a href="https://devdocs.line.me/files/sticker_list.pdf"&gt;貼圖清單&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Imagemap&lt;/li&gt;
&lt;li&gt;Template&lt;ul&gt;
&lt;li&gt;Button&lt;/li&gt;
&lt;li&gt;Confirm&lt;/li&gt;
&lt;li&gt;Carousel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大部分使用上很直覺，可以直接參考&lt;a href="https://devdocs.line.me/en/"&gt;API Reference - Messaging API&lt;/a&gt; 和&lt;a href="https://github.com/line/line-bot-sdk-python"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章主要談 Template Messages 的使用&lt;/p&gt;
</summary><content type="html">&lt;p&gt;除了傳送文字外，Line Bot 還可以傳&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;圖片, 影像, 聲音, 地圖&lt;/li&gt;
&lt;li&gt;貼圖 (Line Bot 所能使用的&lt;a href="https://devdocs.line.me/files/sticker_list.pdf"&gt;貼圖清單&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Imagemap&lt;/li&gt;
&lt;li&gt;Template&lt;ul&gt;
&lt;li&gt;Button&lt;/li&gt;
&lt;li&gt;Confirm&lt;/li&gt;
&lt;li&gt;Carousel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大部分使用上很直覺，可以直接參考&lt;a href="https://devdocs.line.me/en/"&gt;API Reference - Messaging API&lt;/a&gt; 和&lt;a href="https://github.com/line/line-bot-sdk-python"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文章主要談 Template Messages 的使用&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1 id="template"&gt;Template&lt;/h1&gt;
&lt;p&gt;Template 分為 Button, Confirm 跟 Carousel 三種&lt;br&gt;
這些功能也是我認為從 Line Bot Trail 升級到 Line Messaging API 最好用的功能&lt;/p&gt;
&lt;h2 id="example"&gt;Example&lt;/h2&gt;
&lt;p&gt;以下的測試是 bot 收到關鍵字，回傳相對應的訊息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Button&lt;br&gt;
&lt;img alt="button_example" src="/images/posts-image/2016-11-27-more-about-line-messaging-api-template-messages/KYN6kDR.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confirm&lt;br&gt;
&lt;img alt="confirm_example" src="/images/posts-image/2016-11-27-more-about-line-messaging-api-template-messages/pUFboL5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Carousel (如果超出版面，則可以左右滑動)&lt;br&gt;
&lt;img alt="carousel_example" src="/images/posts-image/2016-11-27-more-about-line-messaging-api-template-messages/Pxvj6om.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外必須要注意的是，這些功能目前都只支援手機版&lt;br&gt;
在電腦版上的 Line 看到的訊息會是這樣&lt;br&gt;
&lt;img alt="template_message_on_pc" src="/images/posts-image/2016-11-27-more-about-line-messaging-api-template-messages/ZdGQjc6.png"&gt;&lt;br&gt;
這個文字內容可以透過 template 的 alt_text 參數設定&lt;/p&gt;
&lt;p&gt;上面的例子是&lt;a href="https://github.com/line/line-bot-sdk-python#templatesendmessage---buttonstemplaten"&gt;line-bot-sdk-python&lt;/a&gt; 的使用範例&lt;br&gt;
(&lt;a href="https://github.com/Lee-W/line_echobot/tree/template-message"&gt;可以回傳 template message 的 echo bot&lt;/a&gt;)&lt;br&gt;
大部分都能透過 Code 和 Example 比對，找到需要調整的參數&lt;/p&gt;
&lt;p&gt;接下來談的是那些按鍵的設定&lt;br&gt;
上面所看到的按鍵都是一個 Action&lt;br&gt;
三種 Template 最大的不同，主要是這些 action 擺設的方式不同&lt;br&gt;
限制的數量也不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Button 一次可以支援四個 action&lt;/li&gt;
&lt;li&gt;Confirm 支援三個 action&lt;/li&gt;
&lt;li&gt;Carousel 則可以用 5 個 CarouselColumn，每一個 Column 支援 3 個 Action&lt;ul&gt;
&lt;li&gt;另外需要注意的是 Carousel 中每一個 Column 的 action 數量必須是一樣的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="action"&gt;Action&lt;/h1&gt;
&lt;p&gt;這些 action 的 label 參數，就是顯示在按鍵上的文字，必須在 20 字以內&lt;/p&gt;
&lt;p&gt;text 參數則是按下這個按鍵，會由使用者回傳設定的文字&lt;br&gt;
e.g. 這是我按下上面 Button 的 postback 的效果&lt;br&gt;
&lt;img alt="text_example" src="/images/posts-image/2016-11-27-more-about-line-messaging-api-template-messages/ow2G8wU.png"&gt;&lt;br&gt;
而 text 就是設定為 postback ( 注意並非 label 的 'postback')&lt;/p&gt;
&lt;h2 id="postback"&gt;Postback&lt;/h2&gt;
&lt;p&gt;當使用者按了這個按鍵&lt;br&gt;
Line Server 會傳一個 postback event 給我們，裡面包含著 data 參數中設定的字串&lt;br&gt;
在收到 event 的時候，透過 &lt;code&gt;event.postback.postback.data&lt;/code&gt; 取出 data&lt;/p&gt;
&lt;p&gt;Postback 可以不給 text 參數&lt;/p&gt;
&lt;h2 id="message"&gt;Message&lt;/h2&gt;
&lt;p&gt;text 參數在 Message Action 是必須的，也不能給空字串&lt;br&gt;
如果希望這個按鍵，只有顯示但不會由使用者傳文字過來，可以給一串空白 (e.g. ' ')&lt;/p&gt;
&lt;h2 id="uri"&gt;URI&lt;/h2&gt;
&lt;p&gt;使用者按下這個按鍵就會用 Line 的瀏覽器跳到外部網頁&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devdocs.line.me/en/#template-messages"&gt;API Reference - Messaging API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/line/line-bot-sdk-python#templatesendmessage---buttonstemplate"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Chat Bot"></category></entry><entry><title>Deploy LineBot on Heroku</title><link href="https://lee-w.github.io/posts/tech/2016/11/deploy-linebot-on-heroku" rel="alternate"></link><published>2016-11-27T06:05:00+08:00</published><updated>2016-11-27T06:05:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-27:/posts/tech/2016/11/deploy-linebot-on-heroku</id><summary type="html">&lt;p&gt;上一篇提到如何用 ngrok&lt;br&gt;
讓我們可以不用架 Https Server，直接在本地端測試 Bot&lt;/p&gt;
&lt;p&gt;再來要談的是如何把 Bot 部署到 Heroku 上&lt;/p&gt;
</summary><content type="html">&lt;p&gt;上一篇提到如何用 ngrok&lt;br&gt;
讓我們可以不用架 Https Server，直接在本地端測試 Bot&lt;/p&gt;
&lt;p&gt;再來要談的是如何把 Bot 部署到 Heroku 上&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1 id="why-not-ngrok"&gt;Why not ngrok&lt;/h1&gt;
&lt;p&gt;使用 ngrok 必須要讓你的本地端一直開著才能收到訊息&lt;br&gt;
而且免費版的 ngrok 每次都會更改 url&lt;br&gt;
所以我們需要一個可以讓其他人較長時間測試的 Server&lt;/p&gt;
&lt;p&gt;以我自己的開發習慣&lt;br&gt;
我會使用 ngrok，來做 Bot 的基本除錯&lt;br&gt;
Heroku 則是用來讓其他人測試功能&lt;br&gt;
真的要上線的時候才會自己架一個 Https Server&lt;/p&gt;
&lt;p&gt;Line 的帳號也是 ngrok, heroku 跟上線需要的各申請一個&lt;br&gt;
不過 ngrok 可以好幾個 Line Bot 專案共用一個即可&lt;/p&gt;
&lt;h1 id="heroku"&gt;Heroku&lt;/h1&gt;
&lt;h2 id="create-app"&gt;Create App&lt;/h2&gt;
&lt;p&gt;先上&lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt; 辦個帳號&lt;/p&gt;
&lt;p&gt;到個人的 dashboard&lt;br&gt;
&lt;code&gt;New&lt;/code&gt; → &lt;code&gt;Create New App&lt;/code&gt;&lt;br&gt;
選一個名字，就創好 App 了&lt;/p&gt;
&lt;h2 id="deploy"&gt;Deploy&lt;/h2&gt;
&lt;h3 id="add-remote"&gt;Add Remote&lt;/h3&gt;
&lt;p&gt;在部署之前要先安裝&lt;a href="https://devcenter.heroku.com/articles/heroku-command-line"&gt;Heroku CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再來我們要到原本 line-echobot，將 heroku 加入這個專案的 remote&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;heroku login
heroku git:remote -a leewbot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著用 &lt;code&gt;git remote -v&lt;/code&gt; 就能看到 &lt;code&gt;heroku&lt;/code&gt; 已經被加入 remote 了&lt;br&gt;
以後只要 &lt;code&gt;git push heroku master&lt;/code&gt;，就能部署到 Heroku&lt;br&gt;
不過我們還必須要多做一些設定才能讓 Bot 順利的部署&lt;/p&gt;
&lt;h3 id="environment-variables"&gt;Environment Variables&lt;/h3&gt;
&lt;p&gt;首先是我們原先設定的環境變數&lt;br&gt;
Heroku 是透過這個指令來做設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;heroku config:set &lt;span class="s2"&gt;&amp;quot;env key&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;env value&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者也能到 dashboard 的 &lt;code&gt;Settings&lt;/code&gt; → &lt;code&gt;Config Variables&lt;/code&gt; → &lt;code&gt;Reveal Config Vars&lt;/code&gt; 做設定&lt;/p&gt;
&lt;h3 id="python-environments"&gt;Python Environments&lt;/h3&gt;
&lt;p&gt;因為 Heroku 支援多種不同的語言&lt;br&gt;
所以要讓 Heroku 知道我們使用的是 Python&lt;/p&gt;
&lt;p&gt;Heroku 可過專案中是否有 &lt;code&gt;requirements.txt&lt;/code&gt; 來判斷這個專案是否為 Python 專案&lt;br&gt;
並且安裝 &lt;code&gt;requirements.txt&lt;/code&gt; 內的函式庫&lt;br&gt;
名稱如果打錯，可能會讓 Heroku 不知道這是 Python 專案，導致部署失敗&lt;/p&gt;
&lt;p&gt;另外可以透過 &lt;code&gt;runtime.txt&lt;/code&gt; 來指定 Python 的版本&lt;br&gt;
目前支援這兩種版本
* &lt;code&gt;python-2.7.12&lt;/code&gt;
* &lt;code&gt;python-3.5.2&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="deploy-settings-procfile"&gt;Deploy Settings - Procfile&lt;/h3&gt;
&lt;p&gt;再來必須要讓 Heroku 知道我們執行專案的指令是什麼&lt;br&gt;
這個指令就是寫在 &lt;code&gt;Profile&lt;/code&gt; 中&lt;/p&gt;
&lt;p&gt;這裡使用的部署套件是 gunicorn&lt;br&gt;
先在 &lt;code&gt;requirements.txt&lt;/code&gt; 加入 &lt;code&gt;gunicorn==19.0.0&lt;/code&gt;&lt;br&gt;
再來創一個 &lt;code&gt;Profile&lt;/code&gt;，內容是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;web: gunicorn line_echobot.wsgi --log-file -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果用其他的部署套件，則需要修改 web 後面的指令&lt;/p&gt;
&lt;p&gt;到了這裡就做好所有的設定了&lt;br&gt;
最後只要 &lt;code&gt;git push heroku master&lt;/code&gt; 就會部署到 Heroku 上&lt;/p&gt;
&lt;p&gt;透過 &lt;code&gt;heroku open&lt;/code&gt; 能看到剛剛部署上去的專案&lt;br&gt;
接著把專案的網址加上我們先前設定的 callback url &lt;code&gt;echobot/callback&lt;/code&gt;&lt;br&gt;
設定到 Line Bot 的 Webhook URL，就完成了&lt;/p&gt;
&lt;h1 id="reference"&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/getting-started-with-python#introduction"&gt;Getting Started on Heroku with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/deploying-python"&gt;Deploying Python and Django Apps on Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Heroku"></category><category term="Django"></category><category term="Chat Bot"></category><category term="Deployment"></category></entry><entry><title>Line Echo Bot on Django</title><link href="https://lee-w.github.io/posts/tech/2016/11/line-echo-bot-on-django" rel="alternate"></link><published>2016-11-24T03:26:00+08:00</published><updated>2016-11-24T03:26:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-24:/posts/tech/2016/11/line-echo-bot-on-django</id><summary type="html">&lt;p&gt;單純要寫一個只會 Echo 的 Line Chat Bot&lt;br&gt;
用 flask 只要 85 行的 code 就能解決&lt;br&gt;
官方已經有提供相當清楚的範例&lt;a href="https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-echo"&gt;flask-echo&lt;/a&gt; 了&lt;/p&gt;
&lt;p&gt;這篇文章則是提供了 django 的做法&lt;br&gt;
想直接看 code 也可以參考&lt;a href="https://github.com/Lee-W/line_echobot"&gt;line_echobot&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;單純要寫一個只會 Echo 的 Line Chat Bot&lt;br&gt;
用 flask 只要 85 行的 code 就能解決&lt;br&gt;
官方已經有提供相當清楚的範例&lt;a href="https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-echo"&gt;flask-echo&lt;/a&gt; 了&lt;/p&gt;
&lt;p&gt;這篇文章則是提供了 django 的做法&lt;br&gt;
想直接看 code 也可以參考&lt;a href="https://github.com/Lee-W/line_echobot"&gt;line_echobot&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1 id="line-messaging-api-line-bot-sdk-python"&gt;Line Messaging API (line-bot-sdk-python)&lt;/h1&gt;
&lt;p&gt;詳細的 Line Bot 提供哪些功能，該如何使用&lt;br&gt;
可以在&lt;a href="https://devdocs.line.me/en/"&gt;API Reference - Messaging API&lt;/a&gt; 找到&lt;br&gt;
之後的文章，會談如何使用文字以外的功能&lt;/p&gt;
&lt;p&gt;這裡直接使用官方提供的&lt;a href="https://github.com/line/line-bot-sdk-python"&gt;line-bot-sdk-python&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip3 install line-bot-sdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外官方也提供&lt;a href="https://github.com/line/line-bot-sdk-java"&gt;java&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-go"&gt;go&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-php"&gt;php&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-ruby"&gt;ruby&lt;/a&gt;, &lt;a href="https://github.com/line/line-bot-sdk-perl"&gt;perl&lt;/a&gt; 的版本&lt;/p&gt;
&lt;h1 id="start-project"&gt;Start Project&lt;/h1&gt;
&lt;h2 id="create-project"&gt;Create Project&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create a line_echobot project&lt;/span&gt;
django-admin startproject line_echobot

&lt;span class="c1"&gt;# Create an echobot app&lt;/span&gt;
python3 manage.py startapp echobot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="setup-line-secrets"&gt;Setup Line Secrets&lt;/h2&gt;
&lt;p&gt;接著設定 Line Bot 的 &lt;code&gt;Channel Secret&lt;/code&gt;, &lt;code&gt;Channel Access Token&lt;/code&gt;&lt;br&gt;
( 可以在 Line Bot 的 &lt;code&gt;Line Deverloper&lt;/code&gt; 頁面取得 )&lt;/p&gt;
&lt;p&gt;不過這些值不該被 git 記錄，所以不該被寫死在 &lt;code&gt;settings.py&lt;/code&gt; 中&lt;br&gt;
建議將這些值寫入環境變數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your django secret key&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your line channel access token&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Your line channel secret&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行時，讓設定檔先去讀取這些環境變數&lt;br&gt;
下面的 &lt;code&gt;get_env_variable&lt;/code&gt; 函式是用來取得環境變數&lt;br&gt;
只要有少設定，就會丟出 ImproperlyConfigured 的例外事件中斷執行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# line_echobot/settings.py&lt;/span&gt;

&lt;span class="o"&gt;......&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;error_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Set the &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; environment variable&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ImproperlyConfigured&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error_msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LINE_CHANNEL_ACCESS_TOKEN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_env_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LINE_CHANNEL_SECRET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;......&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;echobot&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過如果只是單純測試用，這些值也可以直接寫死在 settings.py 中&lt;/p&gt;
&lt;p&gt;另外也不要忘了在 &lt;code&gt;INSTLLED_APPS&lt;/code&gt; 加入 echobot&lt;/p&gt;
&lt;p&gt;一般來說，django 產生 project 時&lt;br&gt;
&lt;code&gt;settings.py&lt;/code&gt; 裡面就會有 secret key&lt;br&gt;
這裡的做法是把預設的 secret key 刪掉&lt;br&gt;
設定到環境變數中，避免被 git 記錄下來&lt;br&gt;
如果還需要另外還要重新產生可以透過&lt;a href="https://gist.github.com/mattseymour/9205591"&gt;django-secret-keygen.py&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="setup-line-webhook-url"&gt;Setup Line Webhook URL&lt;/h2&gt;
&lt;p&gt;再來要設定一個 Webhook URL&lt;br&gt;
讓 Line 可以把 Bot 收到的訊息傳給我們&lt;/p&gt;
&lt;p&gt;先在 project 的 &lt;code&gt;urls.py&lt;/code&gt; 設定&lt;br&gt;
讓 project 可以找到 echobot 這個 app 的 &lt;code&gt;urls.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# line_echobot/urls.py&lt;/span&gt;
&lt;span class="o"&gt;......&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;echobot&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^echobot/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echobot.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;......&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著在 echobot 內，創一個 &lt;code&gt;urls.py&lt;/code&gt;&lt;br&gt;
並將 url 再導到 &lt;code&gt;callback&lt;/code&gt;，呼叫 &lt;code&gt;views.py&lt;/code&gt; 裡面的 &lt;code&gt;callback&lt;/code&gt; 函式 ( 接下來才會實作 )&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# echobot/urls.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^callback/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這些都設定完後，要在 Line 那邊設定的 Webhook Url 就是 &lt;code&gt;https://"your domain name"/echobot/callback/&lt;/code&gt;&lt;br&gt;
(&lt;code&gt;your domain name&lt;/code&gt; 要設定什麼，會在這篇文章的&lt;a href="#https-server"&gt;最後&lt;/a&gt; 說明)&lt;/p&gt;
&lt;h2 id="implement-callback-function"&gt;Implement Callback Function&lt;/h2&gt;
&lt;p&gt;接下來就是要在 &lt;code&gt;echobot/views.py&lt;/code&gt; 實作 &lt;code&gt;callback&lt;/code&gt; 了&lt;/p&gt;
&lt;h3 id="initial"&gt;Initial&lt;/h3&gt;
&lt;p&gt;先 import 相關的函式庫&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csrf_exempt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;透過 line_bot_api 傳訊息給 Line，讓 Line 轉傳給使用者&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;line_bot_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="callback-function"&gt;Callback Function&lt;/h3&gt;
&lt;p&gt;有兩種方法可以處理 Line Server 送過來的訊息&lt;br&gt;
這裡先用 Todo 記著，待會再來補上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# TODO: Define Receiver&lt;/span&gt;

&lt;span class="nd"&gt;@csrf_exempt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# TODO: Handler when receiver Line Message&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="validate-signature"&gt;Validate Signature&lt;/h3&gt;
&lt;p&gt;處理訊息之前&lt;br&gt;
先確認這個 request 是不是真的是從 Line Server 傳來的&lt;br&gt;
要確認這件事，需要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;request 的 body&lt;/li&gt;
&lt;li&gt;request header 中的 X-Line-Signature&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是上面的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="handle-received-message"&gt;Handle Received Message&lt;/h3&gt;
&lt;p&gt;取得 body 跟 signature 後&lt;br&gt;
Line Bot API 會在處理訊息的同時，確認這個訊息是否來自 Line&lt;/p&gt;
&lt;p&gt;而處理 Line 傳過來給我們的訊息，有兩種不同的做法&lt;/p&gt;
&lt;h4&gt;WebhookParser&lt;/h4&gt;
&lt;p&gt;WebhookParser 會 Parse 這個訊息的所有欄位&lt;br&gt;
讓我們針對各種不同型別的訊息做個別的處理&lt;br&gt;
e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UserID&lt;/li&gt;
&lt;li&gt;Event Type&lt;/li&gt;
&lt;li&gt;Message Content&lt;/li&gt;
&lt;li&gt;and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;a href="https://github.com/line/line-bot-sdk-python#webhook-event-object"&gt;這裡&lt;/a&gt; 可以找到有哪些欄位&lt;/p&gt;
&lt;p&gt;這段 code 要取代上面的 &lt;code&gt;# TODO: Define Receiver&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面三段 code 則要取代 &lt;code&gt;# TODO: Handler when receiver Line Message&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;parser 會 parse 所有的 event 跟各個 event 中的所有欄位&lt;br&gt;
如果 request 不是從 Line Server 來的，就會丟出 InvalidSignatureError&lt;br&gt;
其他使用錯誤，或 Line Server 的問題都會是丟出 LineBotApiError&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來要判斷收到的事件是什麼事件&lt;br&gt;
這個 Bot 只需要 echo 純文字訊息&lt;br&gt;
所以先判斷這個事件是不是訊息事件，而這個訊息是不是文字訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後的 &lt;code&gt;reply_message&lt;/code&gt; 函式，讓我們傳訊息給 Line Server&lt;br&gt;
第一個參數是要回傳要用的 reply_token，可以從事件中取得 （&lt;code&gt;event.reply_token&lt;/code&gt;）&lt;br&gt;
使用這個 reply_token 做回覆，是不用收費的&lt;br&gt;
不過同一個 reply_token 只能使用一次，而且在一定的時間內就會失效&lt;/p&gt;
&lt;p&gt;第二個參數是這次要回傳的訊息&lt;br&gt;
&lt;a href="https://github.com/line/line-bot-sdk-python#send-message-object"&gt;這裡&lt;/a&gt; 有所有能回傳的訊息&lt;br&gt;
也可以傳一個都是訊息的 list 或 tuple&lt;br&gt;
不過一次最多只能傳 5 個&lt;br&gt;
只要超過就會有 LineBotApiError&lt;/p&gt;
&lt;h4&gt;WebhookHandler&lt;/h4&gt;
&lt;p&gt;WebhookHandler 是針對每一種不同的訊息型態註冊一個處理器&lt;br&gt;
只要收到這樣的訊息，就會丟給對應的處理器&lt;br&gt;
如果確定每一類訊息，在任何情況下都會有相似的處理方式，就很適合這樣的設計&lt;/p&gt;
&lt;p&gt;接下來的三段 code 要取代 &lt;code&gt;# TODO: Define Receiver&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先為 handler 加入，TextMessage 的處理器&lt;br&gt;
參數是接收到的 event&lt;br&gt;
這裡做的也是讀取到原本 event 中的文字，並回傳回去&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_text_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為沒有要處理其他訊息&lt;br&gt;
如果收到其他訊息 (e.g. 貼圖 , 照片 ) 或訊息以外的事件&lt;br&gt;
使用 default 來回傳 "Currently Not Support None Text Message" 的文字訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Currently Not Support None Text Message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面的這段 code 是要取代 &lt;code&gt;# TODO: Handler when receiver Line Message&lt;/code&gt;&lt;br&gt;
handler 判斷完這個訊息，應該被哪個處理器處理，就會傳給那個函式處理&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Full Code&lt;/h4&gt;
&lt;p&gt;由於上面的 code 說明比較分散&lt;br&gt;
這裡附上兩個版本各自的完整版&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WebhookParser&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# line_echobot/echobot/views.py&lt;/span&gt;
&lt;span class="c1"&gt;# WebhookParser version&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csrf_exempt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;

&lt;span class="n"&gt;line_bot_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@csrf_exempt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;WebhookHandler&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# line_echobot/echobot/views.py&lt;/span&gt;
&lt;span class="c1"&gt;# WebhookHandler version&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.csrf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csrf_exempt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;linebot.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt;

&lt;span class="n"&gt;line_bot_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LineBotApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebhookHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINE_CHANNEL_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_text_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;line_bot_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TextSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Currently Not Support None Text Message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@csrf_exempt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_X_LINE_SIGNATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;InvalidSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;LineBotApiError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseBadRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到了這裡，echo bot 實作的部分就完成了&lt;/p&gt;
&lt;p&gt;&lt;a name='https-server'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="https-server-setup-your-domain-name"&gt;Https Server (Setup 'your domain name')&lt;/h2&gt;
&lt;p&gt;使用這些 Bot 的服務時，大多會要求我們一定要先有一個 Https Server&lt;br&gt;
除了自己架 Http Server 外，還透過其他服務，更方便我們做測試&lt;br&gt;
接下來我會分享兩種做法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;架在&lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt; ( 由於篇幅的關係，Heroku 會在接下來的文章談 )&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://ngrok.com"&gt;ngrok&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="ngrok"&gt;ngrok&lt;/h3&gt;
&lt;p&gt;ngrok 提供的服務是&lt;br&gt;
讓外部的訊息先經過 ngrok 的 server，ngrok 再將這個訊息傳給你的 server&lt;br&gt;
回傳時也是從你的 server 傳給 ngrok 的 server，再把訊息傳出去&lt;br&gt;
所以外部都只會看到 ngrok 的 server&lt;/p&gt;
&lt;p&gt;&lt;img alt="ngrok" src="https://ngrok.com/static/img/demo.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Install ngrok on mac&lt;/span&gt;
brew cask install ngrok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先把 django 的 server run 起來&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3  manage.py runserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;預設 django 的 port 是 8000&lt;br&gt;
這裡並不需要使用 0.0.0.0:8000，讓外部可以連到這個 django server&lt;br&gt;
ngrok 會把 request 傳到 local 端相對應的 port&lt;/p&gt;
&lt;p&gt;接著就要用 ngrok 將 request 導到本地端的 port 8000&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ngrok http &lt;span class="m"&gt;8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="1_ngrok_example" src="/images/posts-image/2016-11-24-line-echo-bot-on-django/r525wEI.png"&gt;&lt;/p&gt;
&lt;p&gt;再來到 Line Bot 的 &lt;code&gt;Line Developer&lt;/code&gt; 頁面設定 Webhook URL&lt;br&gt;
這時候填上 ngrok 後的 https 那串 url，再加上 &lt;code&gt;echobot/callback/&lt;/code&gt;( 我們設定的 callback url)&lt;br&gt;
(e.g. &lt;code&gt;https://2.....f.ngrok.io/echobot/callback/&lt;/code&gt;)&lt;br&gt;
&lt;img alt="2_webhook_url" src="/images/posts-image/2016-11-24-line-echo-bot-on-django/qVWlwoK.png"&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是我的 Webhook URL 下面有一個 &lt;code&gt;Read timeout.&lt;/code&gt;&lt;br&gt;
如果按了後面的 Verify，Line Server 會傳一些測試訊息過來&lt;br&gt;
但是那個 reply_token 是無法被回覆的&lt;br&gt;
這時候在 Server 就會丟出 LineBotApiError&lt;br&gt;
不過沒關係，這只是給我們檢查用的&lt;br&gt;
並沒有一定要通過才能使用 Line Bot&lt;/p&gt;
&lt;p&gt;這時候加 Bot 為好友，就可以開始跟它聊天了&lt;br&gt;
&lt;img alt="3_message_sample" src="/images/posts-image/2016-11-24-line-echo-bot-on-django/boxeHoG.png"&gt;&lt;/p&gt;
&lt;p&gt;如果你發現除了 echo 訊息外，還有其他的訊息&lt;br&gt;
可能就是沒有把 Atuo Reply Message 關掉&lt;br&gt;
這時候就可以去 Line Bot 的 &lt;code&gt;LINE@ Manger&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Settings&lt;/code&gt; → &lt;code&gt;Bot Settings&lt;/code&gt; 把它關掉&lt;br&gt;
或者到 &lt;code&gt;Messages&lt;/code&gt; → &lt;code&gt;Auto Reply Message&lt;/code&gt; 做修改訊息內容&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://studyhost.blogspot.tw/2016/10/line-messaging-api-line-bot-v2.html"&gt;新版 Line@ Messaging API 使用心得 (Line Bot v2)&lt;br&gt;
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jiunjiun.logdown.com/posts/2016/10/06/linebot-with-sinatra"&gt;LineBot - Sinatra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ngrok.com"&gt;ngrok&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Django"></category><category term="Chat Bot"></category></entry><entry><title>Apply Line Messaging API</title><link href="https://lee-w.github.io/posts/tech/2016/11/apply-line-messaging-api" rel="alternate"></link><published>2016-11-22T12:43:00+08:00</published><updated>2016-11-22T12:43:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-22:/posts/tech/2016/11/apply-line-messaging-api</id><summary type="html">&lt;p&gt;先到&lt;a href="https://business.line.me/zh-hant/services/bot"&gt;Messaging API&lt;/a&gt; 申請帳號&lt;/p&gt;
&lt;p&gt;&lt;code&gt;開始使用 Messaging API&lt;/code&gt; 和 &lt;code&gt;開始使用 Developer Trial&lt;/code&gt; 申請到的帳號是不同的&lt;br&gt;
之後不能互換，所以一開始就要根據需求來決定申請哪種帳號&lt;/p&gt;
</summary><content type="html">&lt;p&gt;先到&lt;a href="https://business.line.me/zh-hant/services/bot"&gt;Messaging API&lt;/a&gt; 申請帳號&lt;/p&gt;
&lt;p&gt;&lt;code&gt;開始使用 Messaging API&lt;/code&gt; 和 &lt;code&gt;開始使用 Developer Trial&lt;/code&gt; 申請到的帳號是不同的&lt;br&gt;
之後不能互換，所以一開始就要根據需求來決定申請哪種帳號&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;img alt="1_messaging_api" src="/images/posts-image/2016-11-22-apply-line-messaging-api/3i3O1wO.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;開始使用 Messaging API&lt;/code&gt; 會申請免費版的帳號&lt;br&gt;
  之後可以選擇付費升級為入門版等更多功能的版本&lt;br&gt;
  主要拿來做正式發佈用的帳號&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;開始使用 Developer Trial&lt;/code&gt; 則是 Developer 的帳號&lt;br&gt;
  雖然一開始就能使用 Push API，但好友人數只有 50 人&lt;br&gt;
  如果還在開發階段，就適合辦這個帳號來測試&lt;br&gt;
  不過需要注意的是 developer 帳號，並不能接升級成一般帳號&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="2_price" src="/images/posts-image/2016-11-22-apply-line-messaging-api/FmTjOBH.png"&gt;&lt;/p&gt;
&lt;p&gt;再來會詢問業務類別，跟要求設定 Bot 名稱和照片&lt;br&gt;
&lt;img alt="3_apply_account" src="/images/posts-image/2016-11-22-apply-line-messaging-api/VdCT8JX.png"&gt;&lt;/p&gt;
&lt;p&gt;回到&lt;a href="https://business.line.me/zh-hant/"&gt;Line Business Center&lt;/a&gt; 的帳號清單&lt;br&gt;
就能看到帳號已經創好了&lt;br&gt;
&lt;img alt="4_success_apply" src="/images/posts-image/2016-11-22-apply-line-messaging-api/4ViJbIR.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;進入剛剛創好的帳號的 &lt;code&gt;LINE@ Manager&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;頁面左上方，Bot 名稱下方&lt;br&gt;
@ 開頭的就是這個 Bot 的 id&lt;br&gt;
可以從 Line 輸入這個 id 加 Bot 為好友 （需加上 @）&lt;/p&gt;
&lt;p&gt;&lt;img alt="5_bot_page" src="/images/posts-image/2016-11-22-apply-line-messaging-api/8DC4TSG.png"&gt;&lt;/p&gt;
&lt;p&gt;接著到設定頁面左下方，找到 &lt;code&gt;Settings&lt;/code&gt;  → &lt;code&gt;Bot Settings&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;進入以下的畫面開啟 Messaging API&lt;br&gt;
&lt;img alt="6_bot_setting" src="/images/posts-image/2016-11-22-apply-line-messaging-api/BtaSwa5.png"&gt;&lt;/p&gt;
&lt;p&gt;開啟 Bot API 後，就會不能用以下三個功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1-on-1 Chat&lt;/li&gt;
&lt;li&gt;LINE@ app&lt;/li&gt;
&lt;li&gt;Store Chat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之後會進到以下畫面&lt;br&gt;
記得要把 &lt;code&gt;Use webhooks&lt;/code&gt; 調成 &lt;code&gt;Allow&lt;/code&gt;&lt;br&gt;
才能把這個 Line Bot 串到自己的 server 上&lt;br&gt;
&lt;img alt="7_bot_webhook" src="/images/posts-image/2016-11-22-apply-line-messaging-api/yqpw3x7.png"&gt;&lt;/p&gt;
&lt;p&gt;往下拉可以看到更多的選項&lt;br&gt;
&lt;img alt="8_bot_detail" src="/images/posts-image/2016-11-22-apply-line-messaging-api/nKegbk6.png"&gt;&lt;br&gt;
如果不想要 Line 每次收到訊息都自動幫你回覆&lt;br&gt;
就要把 &lt;code&gt;Auto Reply Message&lt;/code&gt; 調成 &lt;code&gt;Don't Allow&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Greeting Message&lt;/code&gt; 則是，剛加 Bot 為好友時的歡迎詞&lt;/p&gt;
&lt;p&gt;如果有需要對這些訊息做設定&lt;br&gt;
都可以在左手邊選單的 &lt;code&gt;Messages&lt;/code&gt; 找到&lt;/p&gt;
&lt;p&gt;再回到帳號清單就會看到，帳號已經開通 Messaging API 了&lt;br&gt;
&lt;img alt="9_finish_all_setting" src="/images/posts-image/2016-11-22-apply-line-messaging-api/io9LuHs.png"&gt;&lt;/p&gt;
&lt;p&gt;進到 &lt;code&gt;LINE Developers&lt;/code&gt; 就能取得你的 Channel Secret 和 Channel Access Token 了&lt;br&gt;
（這些都是運用 Line Messaging API 會用到的）&lt;/p&gt;
&lt;p&gt;&lt;img alt="10_line_developers_page" src="/images/posts-image/2016-11-22-apply-line-messaging-api/cl8k3Mh.png"&gt;&lt;/p&gt;
&lt;p&gt;除了前面提到可以用 ID 加好友，也能透過這裡的 QR code&lt;/p&gt;
&lt;p&gt;另外要注意的是 &lt;code&gt;Webhook URL&lt;/code&gt;&lt;br&gt;
這裡之後要填的就是你的 Server 的 Webhook url&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.line.me/messaging-api/getting-started#apply_messagingapi"&gt;Enable the Messaging API for your LINE@ account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Chat Bot"></category></entry><entry><title>Introduction to Chatbot</title><link href="https://lee-w.github.io/posts/tech/2016/11/introduction-to-chatbot" rel="alternate"></link><published>2016-11-21T08:18:00+08:00</published><updated>2016-11-21T08:18:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-21:/posts/tech/2016/11/introduction-to-chatbot</id><summary type="html">&lt;p&gt;有人說聊天機器人 Chat Bot 將要取代 APP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://venturebeat.com/2016/08/02/why-chatbots-are-replacing-apps/"&gt;Why chatbots are replacing apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chatbotslife.com/this-is-how-chatbots-will-kill-99-of-apps-2fd938a22c99#.tdfugot4m"&gt;This is how Chatbots will Kill 99% of Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各大軟體公司也爭相提供 Bot 的服務&lt;/p&gt;
</summary><content type="html">&lt;p&gt;有人說聊天機器人 Chat Bot 將要取代 APP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://venturebeat.com/2016/08/02/why-chatbots-are-replacing-apps/"&gt;Why chatbots are replacing apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chatbotslife.com/this-is-how-chatbots-will-kill-99-of-apps-2fd938a22c99#.tdfugot4m"&gt;This is how Chatbots will Kill 99% of Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各大軟體公司也爭相提供 Bot 的服務&lt;/p&gt;
&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://messengerplatform.fb.com"&gt;Facebook Messenger Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.line.me/messaging-api/overview"&gt;Line Messaging API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.slack.com"&gt;Slack API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://core.telegram.org/bots/api"&gt;Telegram Bot Platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-can-bot-do"&gt;What can Bot Do?&lt;/h2&gt;
&lt;p&gt;那 Chat Bot 究竟能幹嘛呢 ?&lt;/p&gt;
&lt;p&gt;先來看段影片吧&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=C7ZuzJe24y4"&gt;【公式】BOT &amp;amp; THE NEW WORLD by LINE&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;影片中出現了什麼？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;預約餐廳&lt;/li&gt;
&lt;li&gt;訂車&lt;/li&gt;
&lt;li&gt;偵測 Beacon 提供 coupon&lt;/li&gt;
&lt;li&gt;遠端控制家中的 IoT 設備澆水&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原本在 App 上處理的這些服務&lt;br&gt;
未來都有可能逐漸被 Chat Bot 所取代&lt;/p&gt;
&lt;h3 id="_2"&gt;背後發生了什麼事&lt;/h3&gt;
&lt;p&gt;e.g. 預約餐廳&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User 傳一個訊息給 Bot 的帳號&lt;/li&gt;
&lt;li&gt;Bot 把訊息傳給服務提供者的 Server&lt;/li&gt;
&lt;li&gt;服務提供者的 Server 把訊息，傳給指定的 Server&lt;/li&gt;
&lt;li&gt;指定的 Server 做了適當的運算和判斷，把結果回傳給服務提供者 Server&lt;/li&gt;
&lt;li&gt;服務提供者 Server 收到後，再傳給 User 的帳號&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;e.g. Line Chat Bot 架構&lt;br&gt;
&lt;img alt="Line Chat Bot Architect" src="https://developers.line.me/media/messaging-api/overview/messaging-api-architecture-ee0356bd.png"&gt;&lt;/p&gt;
&lt;h2 id="why-chat-bot"&gt;Why Chat Bot?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;市面上 App 太多了，要開發使用者黏著度高的 App 很困難&lt;/li&gt;
&lt;li&gt;每一個 App 都有自己的介面，對使用者都是一次學習成本&lt;ul&gt;
&lt;li&gt;不如把服務嵌入現在使用者常用的 App&lt;br&gt;
  (e.g. Facebook Messenger, Line)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文字是人類相對直覺的溝通方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-not-chat-bot"&gt;Why not Chat Bot?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;設計彈性不如 App&lt;ul&gt;
&lt;li&gt;雖然 Chat Bot 大多提供按鍵等功能，但使用上的彈性不像 App 那麼大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文字處理依然不夠好&lt;ul&gt;
&lt;li&gt;簡單的 Bot，如果使用者一直無法對應到相對的關鍵字，就無法觸發功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-to-design-a-bot"&gt;How to Design a Bot?&lt;/h2&gt;
&lt;p&gt;那麼開發一個 Bot 需要什麼呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;選擇使用的 Bot 平台 (e.g., Facebook Messenger Platform, Line Messaging API and etc.)&lt;/li&gt;
&lt;li&gt;寫一些服務 (e.g., 訂票、新聞推播)&lt;/li&gt;
&lt;li&gt;把服務架在一台 https server&lt;/li&gt;
&lt;li&gt;用 Bot 平台提供的 sdk，把 Server 跟平台串起來&lt;/li&gt;
&lt;li&gt;用 NLP 判斷使用者的意思，串接到服務上&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="chatbot-platform-line-messaging-api"&gt;Chatbot Platform - Line Messaging API&lt;/h2&gt;
&lt;p&gt;既然看了 Line Bot 的新功能&lt;/p&gt;
&lt;p&gt;接下來的幾篇文章會談要如何在 Line 平台上&lt;br&gt;
做一個最簡單只會 Echo 的 Chat Bot&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;p&gt;這篇文章整理了相當多的相關資源&lt;br&gt;
&lt;a href="https://stanfy.com/blog/the-rise-of-chat-bots-useful-links-articles-libraries-and-platforms/"&gt;The Rise of Chat Bots: Useful Links, Articles, Libraries and Platforms&lt;/a&gt;&lt;br&gt;
相當推薦對 ChatBot 有興趣的人參考&lt;/p&gt;
&lt;h2 id="slide"&gt;Slide&lt;/h2&gt;
&lt;p&gt;如果有點不喜歡看文章的，也可以看看&lt;a href="https://hackmd.io/p/HkW8LjRfl#/"&gt;slide&lt;/a&gt; 的版本&lt;/p&gt;</content><category term="Tech"></category><category term="Chat Bot"></category></entry><entry><title>TEDx Tainan 2016 - 0 到 1</title><link href="https://lee-w.github.io/posts/gossiping/2016/11/tedx-tainan-2016" rel="alternate"></link><published>2016-11-21T03:27:00+08:00</published><updated>2016-11-21T03:27:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-21:/posts/gossiping/2016/11/tedx-tainan-2016</id><summary type="html">&lt;p&gt;趁著昨天才剛結束&lt;br&gt;
把一些感受記錄下來&lt;/p&gt;
</summary><content type="html">&lt;p&gt;趁著昨天才剛結束&lt;br&gt;
把一些感受記錄下來&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;第一次來現場聽 TED&lt;br&gt;
感受真的跟看影片很不同&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="_1"&gt;劉致昕&lt;/h3&gt;
&lt;p&gt;這場的主題是敘利亞戰事&lt;br&gt;
談 ISIS 和敘利亞難民到歐洲避難過的生活&lt;br&gt;
而這些都是在台灣不會接受到的訊息&lt;br&gt;
雖然平常有在看 CNN，多少有接觸到這樣的訊息&lt;br&gt;
但不同的情境不同的講者，同樣的故事還是有很不同的溫度&lt;/p&gt;
&lt;p&gt;最後講者阿富汗朋友的一句話，讓我印象很深刻&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;雖然現在是黑夜
但在黑夜中期待光
很美
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h3 id="_2"&gt;貓不&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;當一個溫柔的人，也要當一個有原則的人
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;赫然發現 google 一下找得到講者在其他地方講的&lt;br&gt;
大概就是&lt;a href="https://m.facebook.com/story.php?story_fbid=1198442380183468&amp;amp;substory_index=0&amp;amp;id=1117359298291777&amp;amp;_ft_=top_level_post_id.1198442380183468%3Atl_objid.1198442380183468%3Athid.1117359298291777%3A306061129499414%3A69%3A0%3A1454313599%3A-3981313943175971342&amp;amp;__tn__=*s"&gt;原文&lt;/a&gt; 的第 5, 6 點吧 XD&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="_3"&gt;張獻忠&lt;/h3&gt;
&lt;p&gt;這場主要談的是街友議題&lt;br&gt;
講者分享遇到的各個街友的故事&lt;br&gt;
顛覆一些人認為街友總是好吃懶做的印象&lt;/p&gt;
&lt;p&gt;最後結尾時的這句話，才讓我去反思，這場說了這麼多街友的故事，背後想帶出的意義&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;如果今天換作是我們遇到同樣的處境

我們真的能處理得更好嗎？
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Gossiping"></category><category term="Inspiring"></category><category term="TEDx"></category></entry><entry><title>[Paper] Mining Online Social Data for Detecting Social Network Mental Disorders</title><link href="https://lee-w.github.io/posts/tech/2016/11/mining-online-social-data-for-detecting-social-network-mental-disorders" rel="alternate"></link><published>2016-11-18T16:53:00+08:00</published><updated>2016-11-18T16:53:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-11-18:/posts/tech/2016/11/mining-online-social-data-for-detecting-social-network-mental-disorders</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www2016.net/proceedings/proceedings/p275.pdf"&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/leew/mining-online-social-data-for-detecting-social-network-mental-disorders"&gt;My Slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This paper proposes a model named SNMDD to detect Social Network Mental Disorder (SNMD) through users' behaviors on online social networks (OSN) instead of asking their mental condition.&lt;/p&gt;
</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www2016.net/proceedings/proceedings/p275.pdf"&gt;Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/leew/mining-online-social-data-for-detecting-social-network-mental-disorders"&gt;My Slide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This paper proposes a model named SNMDD to detect Social Network Mental Disorder (SNMD) through users' behaviors on online social networks (OSN) instead of asking their mental condition.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;In addition, multi-source learning (FB and IG) is used to improve performance through STM.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SNMDD is a classification model based on TSVM&lt;br&gt;
The use of domain knowledge from psychology to extract features is the core of this model.&lt;br&gt;
The most interesting part is choosing features as the proxy features to replace ones that are hard to detect.&lt;br&gt;
For example, distinguishing whether a social capital is a strong tie or a weak tie is crucial to the detection of SNMD. However, it's hard to detect through OSNs data. Thus, it guesses that friends you interacts (e.g. posts, likes, comments) with might be the strong tie ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STM is a tensor model based on Tucker Decomposition&lt;br&gt;
Through Tucker Decomposition, it's possible to combine data from different sources and extract new features vectors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Paper"></category><category term="Social Network"></category><category term="Machine Learning"></category></entry><entry><title>[Book] 所有問題都是一場賽局</title><link href="https://lee-w.github.io/posts/book/2016/10/how-to-think-like-a-game-theorist" rel="alternate"></link><published>2016-10-15T11:04:00+08:00</published><updated>2016-10-15T11:04:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-10-15:/posts/book/2016/10/how-to-think-like-a-game-theorist</id><summary type="html">&lt;p&gt;&lt;img alt="How to think like a game theorist" src="http://pic.eslite.com/Upload/Product/201402/m/635279634797871250.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="How to think like a game theorist" src="http://pic.eslite.com/Upload/Product/201402/m/635279634797871250.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;序章 : 用賽局來思考，培養解決問題的「三種能力」&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;賽局理論 : 分析兩人以上的玩家，其決策和行動的理論&lt;/li&gt;
&lt;li&gt;學賽局理論的目的&lt;ol&gt;
&lt;li&gt;掌握賽局的整體樣貌 （對問題的分析能力）&lt;/li&gt;
&lt;li&gt;預測即將發生的未來&lt;/li&gt;
&lt;li&gt;找到適當的解決方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;贏不了的賽局，就改變規則吧&lt;ul&gt;
&lt;li&gt;e.g. 減少排放二氧化碳有損國家經濟，所有國家都不願意，然而破壞環境卻對大家都是不好的&lt;ul&gt;
&lt;li&gt;→ 獎勵二氧化碳排放少的國家，讓二氧化碳變成對經濟有利&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch1"&gt;Ch1: 合理的下一步是 ......? 「囚犯賽局」與「合理的豬」&lt;/h2&gt;
&lt;h3 id="_2"&gt;囚犯賽局&lt;/h3&gt;
&lt;p&gt;相信接觸過賽局理論的人，一定會聽過囚犯賽局&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;假設今天有兩個囚犯 A 和 B，他們被分開訊問，並且知道
如果都不認罪的話，兩個人都會被關一年
都認罪的話，兩個人都會被關兩年
但是要是一方認罪，另一方不認罪的話，則認罪方無罪釋放，不認罪方要關三年
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;將上述狀況畫成表格就會像下面這樣&lt;br/&gt;
( 每一格左邊的數字代表左邊參與者的獲益，右邊的數字代表上面參與者的獲益 )&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;B 認罪&lt;/th&gt;
&lt;th&gt;B 沈默&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A 認罪&lt;/td&gt;
&lt;td&gt;-2, -2&lt;/td&gt;
&lt;td&gt;0, -3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A 沈默&lt;/td&gt;
&lt;td&gt;0, -3&lt;/td&gt;
&lt;td&gt;-1, -1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在考量了對方所會做的最佳選擇後，所做的最佳選擇就會導向 A 和 B 都認罪&lt;br/&gt;
然而對他們來說共同的最大利益，卻是都保持沈默&lt;/p&gt;
&lt;p&gt;最後導向的這個點就是所謂的奈許均衡 (Nash Equilibrium)&lt;/p&gt;
&lt;h2 id="ch2-"&gt;Ch2: 協調賽局 - 為何你拿蘋果、用微軟&lt;/h2&gt;
&lt;p&gt;參加賽局的玩家，透過協調讓雙方得到利益&lt;/p&gt;
&lt;h3 id="_3"&gt;協調賽局&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;以朋友出去玩作為案例
假設 A, B 有音樂劇和電影兩個方案
兩人一起去看音樂劇，滿足度是 10
一起去看電影是 9
分開去的兩種結果，雙方滿意度都是 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;B 音樂劇&lt;/th&gt;
&lt;th&gt;B 電影&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A 音樂劇&lt;/td&gt;
&lt;td&gt;10, 10&lt;/td&gt;
&lt;td&gt;0, 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A 電影&lt;/td&gt;
&lt;td&gt;0, 0&lt;/td&gt;
&lt;td&gt;9, 9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;此時的奈許均衡有兩個，就是雙方選擇同樣行動的兩個點&lt;/p&gt;
&lt;p&gt;這時候只要有一方先做了選擇，則另一方就會趨向於&lt;strong&gt;一樣的選擇&lt;/strong&gt;&lt;br/&gt;
協調賽局的根本就是「和大家一樣」&lt;/p&gt;
&lt;h4&gt;協調的失敗&lt;/h4&gt;
&lt;p&gt;協調賽局中，有多個奈許均衡點&lt;br/&gt;
但最後仍有可能落在對大家都不利的均衡點上 (e.g. 以上面的例子來說就是看電影 )&lt;br/&gt;
而且協調賽局具有「穩定了就很難改變」的性質&lt;br/&gt;
所以陷入這個不好的平衡點是相當危險的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;實際案例&lt;ul&gt;
&lt;li&gt;病態的過度加班 （有人加班，其他人不敢走）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch3-"&gt;Ch3: 知彼知己，百戰不殆 - 三種賽局，搞懂你的對手&lt;/h2&gt;
&lt;h3 id="_4"&gt;膽小鬼賽局&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;假設兩人各開一台車，朝向牆壁全速前進
看誰能不採煞車前，到離牆最近的地方 → 先踩剎車的人就輸了
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;B 踩剎車&lt;/th&gt;
&lt;th&gt;B 不踩煞車&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A 踩煞車&lt;/td&gt;
&lt;td&gt;0, 0&lt;/td&gt;
&lt;td&gt;-5, 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A 不踩剎車&lt;/td&gt;
&lt;td&gt;5, -5&lt;/td&gt;
&lt;td&gt;-20, -20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;奈許均衡有兩個&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;對方先踩剎車，則自己不踩&lt;/li&gt;
&lt;li&gt;對方不踩剎車，則自己先踩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實際案例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;古巴危機&lt;ul&gt;
&lt;li&gt;美國要蘇聯撤除軍備，蘇聯要美國認同蘇聯裝設核子飛彈&lt;/li&gt;
&lt;li&gt;如果都不讓步，就會爆發核子戰爭&lt;/li&gt;
&lt;li&gt;不存在都讓步的情況&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;誰都不願意做的事，為什麼有人做&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;膽小鬼賽局雖然是決定誰是膽小鬼的賽局，但不要只是讚賞勝利者&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;犧牲自己成為膽小鬼的那一方也應該獲得注目&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;猜銅板賽局&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;某個城市中，有警察和小偷
警察的選擇是「巡邏」和「偷懶」
小偷則是「進入偷竊」和「不進入」
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;小偷進入偷竊&lt;/th&gt;
&lt;th&gt;小偷不進入&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;警察巡邏&lt;/td&gt;
&lt;td&gt;1, -1&lt;/td&gt;
&lt;td&gt;-1, 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;警察不巡邏&lt;/td&gt;
&lt;td&gt;1, 1&lt;/td&gt;
&lt;td&gt;0, 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;這樣的賽局並不存在奈許均衡&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果改變規則，則賽局構造也會改變&lt;ul&gt;
&lt;li&gt;e.g. 增加警察抓到小偷的利益，或沒抓到的懲罰&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_6"&gt;霍特琳賽局&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;某片沙灘上，A, B 兩家冰淇淋店都想開店
沙灘約 100m，遊客也均勻分散
那兩家店的老闆會在哪開店呢
左右兩邊是海，一個 - 代表離沙灘 10m

1.

         A B
|- - - - - - - - - - -|

左邊的 50m 都是 A 的範圍，反之亦然
但所有顧客都要走 50m

2.
     A           B
|- - - - - - - - - - -|
對顧客最方便，因為對顧客來說最遠也不過就走 30m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後的奈許平衡會是 1，即使 2 才是最好的結果&lt;br/&gt;
然而當 A 想要設店在離海 30m 的地方的時候&lt;br/&gt;
B 就會像把店往左移，如此就能吸引到更大範圍的顧客&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;實際案例&lt;ul&gt;
&lt;li&gt;日本拉麵店都集中在車站&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch4-"&gt;Ch4: 動態賽局 - 時間，可以解決問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;動態賽局並不是一個特定賽局，而是一種統稱&lt;ul&gt;
&lt;li&gt;隨著時間經過，賽局發展也會產生變化的結構&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_7"&gt;擴散型賽局&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;假設目前城市中已經有一家 A 工廠，B 工廠在考慮是否進入
A 工廠的選項是「戰鬥」和「合作」
B 工廠是「進入」和「不進入」

原本 A 工廠的利益是 3
如果 B 工廠不加入的話，自身利益是 0
如果 B 工廠加入，而 A 工廠選擇合作，則雙方利益為 1
如果 B 工廠加入，A 工廠選擇戰鬥則雙方都是 -1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果用原本的 2x2 表格來做計算&lt;br/&gt;
可以發現奈許均衡在「A 戰鬥 Ｘ B 不進入」「A 合作 X B 進入」&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;B 進入&lt;/th&gt;
&lt;th&gt;B 不進入&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A 戰鬥&lt;/td&gt;
&lt;td&gt;-1, -1&lt;/td&gt;
&lt;td&gt;3, 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A 合作&lt;/td&gt;
&lt;td&gt;1, 1&lt;/td&gt;
&lt;td&gt;3, 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不過「A 戰鬥 X B 不進入」是不會發生的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這時候就可以透過「賽局樹」來觀察時間流&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                            - 戰鬥 → (-1, -1)
                    A 工廠
        - 進入 →
                            - 合作 → (1, 1)
B 工廠
        - 不進入 → (3, 0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這種賽局要使用反向歸納（backward induction），排除「奇怪的奈許均衡」&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果 B 工廠進入，A 工廠就會合作&lt;/li&gt;
&lt;li&gt;則「A 戰鬥 X B 進入」可以被排除&lt;/li&gt;
&lt;li&gt;再來 B 工廠去比較「A 合作 X B 不進入」和「B 不進入」&lt;/li&gt;
&lt;li&gt;就能消除不進入的選項&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="-"&gt;時間矛盾的問題 - 空包彈式的威脅&lt;/h3&gt;
&lt;p&gt;就前面的 A, B 工廠例子來說&lt;br/&gt;
A 工廠進入市場前的最佳行動是戰鬥，所以一定會表現出強硬的姿態&lt;br/&gt;
然而 B 工廠一旦進入，A 工廠就會為了利益選擇合作&lt;br/&gt;
像這樣 A 工廠的強勢姿態就只是「空包彈」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;實際案例&lt;ul&gt;
&lt;li&gt;不 ... 的話，就會 ...。 然而這樣的情況卻沒發生，久而久之就無效了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;解決方案之一 - 創造出必須遵守約定的狀況&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;製藥特許權制度&lt;ul&gt;
&lt;li&gt;製藥需要很大的成本，如果沒給予製藥公司製藥成功有販售的特許權&lt;/li&gt;
&lt;li&gt;製藥公司就會不願意投入，最後人民會受害&lt;/li&gt;
&lt;li&gt;所以這個特許權必須被法定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高級品決不降價&lt;ul&gt;
&lt;li&gt;一旦降價，就會產生「等一段時間，價格會下降」的想法&lt;/li&gt;
&lt;li&gt;以後的物品更不可能用原價把商品賣出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;「重複賽局」和「扣板機策略」&lt;/h3&gt;
&lt;p&gt;回到最一開始的囚犯賽局&lt;br/&gt;
如果這個賽局會執行不止一次&lt;br/&gt;
最終兩人就會選擇都不認罪的最佳利益&lt;/p&gt;
&lt;p&gt;這兩人本來就已經知道最好的選擇是都不認罪&lt;br/&gt;
但因為無法抹去「如果對方背叛了 ...」的想法，才會不做出最佳選擇&lt;br/&gt;
但是如果「對方背叛我，我就讓他好看」的策略成為可能&lt;br/&gt;
就會產生某種信賴關係，讓兩人都導向選擇不認罪&lt;/p&gt;
&lt;p&gt;將無限重複的賽局視為大型賽局，而會成為奈許均衡的選項，即是採取合作關係&lt;br/&gt;
這稱為「無名氏定理」(folk theorem)&lt;br/&gt;
就算是在短期關係中極可能背叛對方的狀況&lt;br/&gt;
只要關係變成長期的，就有可能表現出能好好維持合作的關係&lt;/p&gt;
&lt;h2 id="ch5-"&gt;Ch5: 人為什麼無法理性？ - 情感和賽局理論&lt;/h2&gt;
&lt;p&gt;所有的賽局都是在一個共通條件上成立的 - &lt;strong&gt;玩家只考慮自己的利益，各自做出符合理性的行動&lt;/strong&gt;&lt;br/&gt;
而這個前提卻是常常不會成立的&lt;/p&gt;
&lt;h3 id="-_1"&gt;人能預測未來嗎？ - 蜈蚣賽局&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;爸爸手上有 100 枚硬幣，要分配給 A, B 兩個兒子
但必須遵循以下兩個規定
首先，爸爸會在 A 面前放 1 枚
A 可以選擇「停止」或「繼續」
如果選擇「停止」就結束
選擇「繼續」，則爸爸會從 A 那邊拿起 1 枚 ( 即使後期 A 有不止 1 枚，還是只會拿 1 枚 )
並且再加上手上的 1 枚，2 枚一起給 B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這個狀況用反向歸納預測的結果是「A 在第一回合就應該選擇停止」&lt;br/&gt;
如此 A 便能獲得比 B 還多的硬幣&lt;br/&gt;
但是在實際實驗中，卻沒有人做出了這樣的決定&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;人並沒有辦法預測未來&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="-_2"&gt;拍賣賽局 - 證明人會從理性到瘋狂&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;與一般拍賣不同
競標成功後，未得標的前一位出價者，需要付他喊出的價錢
而這個東西依然會給得標者
也就是，前一位出價者付了錢卻什麼都拿不到
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這種賽局一直執行下去，玩家就必須一直往高價喊&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;實際案例&lt;ul&gt;
&lt;li&gt;選舉的燒錢比賽&lt;/li&gt;
&lt;li&gt;泡沫經濟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;「你沒想清楚後果」確實是個問題，但是你還要考慮的是「其他人沒想清楚後果的可能性」&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="_9"&gt;只用金錢，無法驅動人心&lt;/h3&gt;
&lt;p&gt;利益並非唯一能影響人心的，往往情感也是&lt;/p&gt;
&lt;h4&gt;最後通牒賽局&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A, B 兩位玩家憑空得到 1000 元
由 B 決定分配方式，A 有同意或否決權
A 同意的話則造這個分配方式
A 否決的話就都拿不到錢
只執行一次賽局
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果人是理性的，A 即使只拿到 1 元都應該接受&lt;br/&gt;
然而實際上這樣的狀況卻幾乎不會發生&lt;/p&gt;
&lt;h4&gt;獨裁者賽局 (Dicatator game)&lt;/h4&gt;
&lt;p&gt;跟上面同樣的情境&lt;br/&gt;
只是這次 A 沒有任何決定權，只能接受 B 的分配&lt;br/&gt;
此時 B 的最佳選擇就是 1000 元全部拿走&lt;br/&gt;
然而實驗結果，相當多的人依然會給對方一定程度的金額&lt;/p&gt;</content><category term="Book"></category><category term="Game Theory"></category></entry><entry><title>[Book] 穀倉效應</title><link href="https://lee-w.github.io/posts/book/2016/10/the-silo-effect" rel="alternate"></link><published>2016-10-04T15:00:00+08:00</published><updated>2016-10-04T15:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-10-04:/posts/book/2016/10/the-silo-effect</id><summary type="html">&lt;p&gt;&lt;img alt="The silo effect" src="/images/books/MTSd8sY.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="The silo effect" src="/images/books/MTSd8sY.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h3 id="_1"&gt;什麼是穀倉？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;組織內各部門自成一格&lt;ul&gt;
&lt;li&gt;後續可能造成，組織內資訊不流通，組織各部門內鬥&lt;/li&gt;
&lt;li&gt;然而在現在專業分工的時代，聚集專業人士的穀倉也是必須存在的&lt;ul&gt;
&lt;li&gt;這本書用案例說明穀倉會帶來的問題和如何減少那些問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="outline"&gt;Outline&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第 1 章介紹如何透過人類學的概念來思考&lt;/li&gt;
&lt;li&gt;2~4 章是穀倉效應造成問題的案例&lt;ul&gt;
&lt;li&gt;第 2 章是 sony 的案例，即使他們已經發現穀倉的問題，卻也還是無法解決&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5~7 章則是打破穀倉的實際案例&lt;ul&gt;
&lt;li&gt;第 6 章是 Facebook 的案例&lt;/li&gt;
&lt;li&gt;第 7 章是克理夫蘭臨床醫學中心&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第 8 章則是在穀倉造成問題及打破穀倉各提一些&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要快速看過，建議順序是&lt;/p&gt;
&lt;p&gt;&lt;code&gt;前言 → ( 第 1 章，可看可不看 ) → 2~4 選一章 → 5~7 選一章 → 結語&lt;/code&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="_2"&gt;前言：彭博市府的機密任務&lt;/h2&gt;
&lt;h3 id="_3"&gt;廢油處理問題 （跨部門的合作）&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;餐廳多半趁深夜偷偷倒油，數年來讓當局一直束手無策。
弗勞爾斯小組從環保部取得廢油污染的資料，跟餐廳執照、退稅紀錄與廚房火警等不同資料互相比對。
他們標定並未申請廢油處理的餐廳，列出可能偷倒廢油的餐廳名單。
然後到市府另一個負責廣生柴油的部門，詢問部門人員時否願意跟食安稽查員與消防單位合作，
說服餐廳不再偷倒廢油，而是把廢油賣給回收單位。
福勞爾斯說：「現在稽查員發現餐廳偷倒廢油時，不會只是走上前說：『喂，搞什麼鬼啊！罰緩二萬五千美元！』
他們改成說：『別傻了，拿這些來換錢吧！賣給生質柴油公司吧！外頭一大堆公司巴不得要購買這些廢油呢！』」
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ch1-"&gt;Ch1 - 局外人：從人類學照見穀倉&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;環境裡的習性不僅反映我們頭腦裡的心理地圖與分類系統，還會加以強化&lt;/li&gt;
&lt;li&gt;由於菁英階級樂於維持現狀，他們會設法強化既有的文化、規則與分類方式&lt;/li&gt;
&lt;li&gt;沈默具有意義，特定議題遭到忽略，是因為大家早已經把這些議題視為無趣、禁忌、平淡或無禮&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch2-"&gt;Ch2 - 章魚甕：穀倉如何拖累革新&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;儘管專業化穀倉讓公司顯得更有效率，至少短期如此，但有利也有弊&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理階層發現要自負盈虧，他們開始試著「保護」自己的部分&lt;br/&gt;
  不只對抗公司外的競爭對手，也對抗公司裡的其他部門&lt;/li&gt;
&lt;li&gt;不願彼此分享點子&lt;/li&gt;
&lt;li&gt;優秀人員不在跨部門輪調，合作程度降低&lt;/li&gt;
&lt;li&gt;連創新實驗與長期投資也逐漸減少，大家短視近利，不願承受風險。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Satya Nadella 說：「一但你太過依賴過往的成功，就容易不願互相合作 ... 但外頭競爭對手才不管你們內部有什麼問題」&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch4-"&gt;Ch4 - 俄羅斯娃娃：穀倉如何造成狹隘視野&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;決策者看不見危機的最大原因在於整個系統過度分工&lt;br/&gt;
  e.g.&lt;ul&gt;
&lt;li&gt;總體經濟研究者關注經濟數字，卻忽略金融系統的細微變化&lt;/li&gt;
&lt;li&gt;銀行監管機關監督個別銀行，卻忽略其他金融機構&lt;/li&gt;
&lt;li&gt;有些民營銀行相當了解影子銀行，但沒有跟中央銀行人員交流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch6-"&gt;Ch6 - 改寫社會規則：打開穀倉大門&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每一個進入臉書的員工都必須參加新兵訓練營，在不同部門論調，藉此了解整間公司，透過這個想達到是的是兩件事&lt;ul&gt;
&lt;li&gt;人員分為不同的專案團隊，各自專門負責特定任務&lt;br/&gt;
  編寫程式需要針對特定專案進行密切的團隊合作&lt;br/&gt;
  穀倉是臉書這類的公司的必要之惡&lt;br/&gt;
  如果沒有專業部門和團隊，根本無法完成工作，也難以集中火力與區分權責&lt;/li&gt;
&lt;li&gt;讓不同專案團隊的成員之間斯底亞有第二套人際關係，不受正式的部分區分所限&lt;br/&gt;
  藉此避免專案團隊變得僵化與封閉，讓人員不只對所屬團隊有感情，也對整個公司有向心力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch7-"&gt;Ch7 - 取下鏡片：醫生如何避免經濟專家的錯誤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;透過建築空間來鼓勵人員打破穀倉&lt;ul&gt;
&lt;li&gt;Facebook 的 Hacker 廣場&lt;/li&gt;
&lt;li&gt;克理夫蘭臨床醫學中心的空橋&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;李透說：「長年傳統與慣例只在不得不時才會改變。哈佛不必改變，哈佛就是哈佛，具有悠久歷史，還是世上募款能力最強的名校。但我們（克理夫蘭臨床醫學中心）試衣間不太賺錢的醫院，位於人口逐漸減少的夕陽工業成，不得不做得更好，並發揮創意。」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;結語 像人類學家一樣看世界，換你主宰穀倉&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;世界上穀倉造成的問題&lt;ul&gt;
&lt;li&gt;官僚部門之間缺乏溝通&lt;/li&gt;
&lt;li&gt;公司內部團隊明爭暗鬥，把資訊扣在自己手上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;破除穀倉的啟示&lt;ol&gt;
&lt;li&gt;大型組織不仿讓團隊界線保持彈性&lt;ul&gt;
&lt;li&gt;讓不同部門一起激盪與合作&lt;/li&gt;
&lt;li&gt;透過空間設計讓人員不期而遇&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;組織必須反思薪資與獎勵，當人員報酬完全取決於團隊表現，不同團隊容易彼此內鬥&lt;/li&gt;
&lt;li&gt;資訊流通的重要&lt;/li&gt;
&lt;li&gt;跳脫一般想像的分類方式&lt;ul&gt;
&lt;li&gt;多數人幾乎始終把既有的分類、制度視為理所當然&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Team"></category></entry><entry><title>COSCUP 2016 小啄如何實作的</title><link href="https://lee-w.github.io/posts/tech/2016/10/coscup-2016-how-to-implement-small-pecks" rel="alternate"></link><published>2016-10-01T11:50:00+08:00</published><updated>2016-10-01T11:50:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-10-01:/posts/tech/2016/10/coscup-2016-how-to-implement-small-pecks</id><summary type="html">&lt;p&gt;今年 COSCUP 的聊天機器人「小啄」&lt;br&gt;
終於在今天宣告退休了&lt;br&gt;
退休前他讓我們詢問了「你是如何實作的」&lt;br&gt;
這邊是我測試的所有結果&lt;br&gt;
跟大家分享一下 XD&lt;/p&gt;
</summary><content type="html">&lt;p&gt;今年 COSCUP 的聊天機器人「小啄」&lt;br&gt;
終於在今天宣告退休了&lt;br&gt;
退休前他讓我們詢問了「你是如何實作的」&lt;br&gt;
這邊是我測試的所有結果&lt;br&gt;
跟大家分享一下 XD&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;總結&lt;/h2&gt;
&lt;h3 id="_2"&gt;技術相關&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主要用 Python 開發&lt;/li&gt;
&lt;li&gt;使用 Flask + Gunicorn + Nginx，達到系統輕量化與多執行緒&lt;/li&gt;
&lt;li&gt;用 redis 作為文本儲存，SQL Injection 無效&lt;/li&gt;
&lt;li&gt;後台文本管理使用 google sheet&lt;ul&gt;
&lt;li&gt;使用 Python 的&lt;a href="https://github.com/burnash/gspread"&gt;gspred&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;文案編輯完後，對 bot 下同步指令，將 google sheet 資料更新到後端資料庫&lt;/li&gt;
&lt;li&gt;跟吃飯喝水一樣簡單，連麻瓜劇本管理員都會用（？？？？？？）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用&lt;a href="https://wit.ai/home"&gt;wit.ai&lt;/a&gt; （這是我直接問開發者的，不是小啄回答的）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;小啄回覆的原文&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;小啄的後台文本管理使用 google sheet，透過 Python 的 gspread 套件進行溝通；當文案編輯完畢後，對 bot 下同步指令，後端就會透過 gspread 將 google sheet 的資料同步到後端資料庫唷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄的後台文本管理使用 google sheet，python 有個套件叫 gspread，讓你存取 google sheet 跟吃飯喝水一樣簡單！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄的後台文本管理使用 google sheet，python 有個套件叫 gspread，讓你存取 google sheet 跟吃飯喝水一樣簡單！&lt;br&gt;
    真的超簡單的，連麻瓜劇本管理員都會用！（麻瓜忍不住一定要再說一次）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄使用的佈署環境是 Flask + Gunicorn + Nginx 的組合，藉此達成系統輕量化與多執行緒的接收訊息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄使用 redis 作為文本儲存系統，因此不要再試著 SQL Injection 喇，這是沒用的!!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄是採用 Python 做為主要的程式語言開發喔，因應短暫兩個禮拜的開發時間，可以快速建置的 Python 成為最佳選項！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄開發團隊核心人物有 4+1 個：三個寫扣手，一個文案小編，一個文案小編的助理．我們白天都有正職！文案小編和文案小編的助理是程式麻瓜&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你知道後台文本管理的劇本是怎麼產生出來的嗎？是劇本管理員在夜深人靜、抱著電腦想著所有使用者可能在使用中遇到哪些問題，套用哪些回應可以又好笑又不無聊、絞盡腦汁想出來的；也因此好幾天發現窗外鳥兒演唱會都在清晨五點左右開唱。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你有選英文模式小啄嗎？真抱歉人力不足，沒有能力提供好笑有趣的回饋讓大家使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(舉起誠實樹) 因為缺乏英文小編寫幽默風趣的回饋，所以團隊人員最後放棄英文幽默版小啄。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄 @LINE 開發時程只有兩週，要申請正式帳號前須到 LINE 本部進行 DEMO，當時大會還有些 API 沒開好、攤位集點巔峰賽還沒有畫好圖。嚴格說起來是大會團隊在忙其他緊急事件延遲了 BOT 開發時程，請大家多包容唷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小啄 @LINE 上線前需要經過 LINE 內部審核，然後才會投單到日本總部申請上限；內部審核當天其實有些功能還沒做完啊啊啊啊啊&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;很可惜今年閃電秀沒有 COSCUP LINE BOT 的分享；而實際上我們是有報名的，只是沒有被抽到 QQ，想在明年看到團隊在議程上分享秘辛，請用力回饋：明年想看 小啄 @LINE 分享&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開發團隊有報名閃電秀，可惜沒有被抽到，想進一步鼓勵團隊明年投稿，歡迎用力回饋：明年想看 小啄 @LINE 分享&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="COSCUP"></category><category term="Chat Bot"></category></entry><entry><title>Basic Git Tutorial</title><link href="https://lee-w.github.io/posts/tech/2016/09/basic-git-tutorial" rel="alternate"></link><published>2016-09-16T15:41:00+08:00</published><updated>2016-09-16T15:41:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-09-16:/posts/tech/2016/09/basic-git-tutorial</id><summary type="html">&lt;p&gt;最近終於下定決定把很久以前的這份&lt;a href="https://lee-w.github.io/posts/tech/2014/02/git-and-git-hub"&gt;Git and GitHub&lt;/a&gt; 改版了&lt;br&gt;
聽說這份在我進實驗室前，就已經被不想教大家 Git 的學長拿去流傳 ...&lt;/p&gt;
&lt;p&gt;新版： &lt;a href="https://lee-w.github.io/git-tutorial/#/"&gt;Git Tutorial&lt;/a&gt;&lt;br&gt;
</summary><content type="html">&lt;p&gt;最近終於下定決定把很久以前的這份&lt;a href="https://lee-w.github.io/posts/tech/2014/02/git-and-git-hub"&gt;Git and GitHub&lt;/a&gt; 改版了&lt;br&gt;
聽說這份在我進實驗室前，就已經被不想教大家 Git 的學長拿去流傳 ...&lt;/p&gt;
&lt;p&gt;新版： &lt;a href="https://lee-w.github.io/git-tutorial/#/"&gt;Git Tutorial&lt;/a&gt;&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;新版主要加了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何寫好 commit&lt;/li&gt;
&lt;li&gt;tag&lt;/li&gt;
&lt;li&gt;stash&lt;/li&gt;
&lt;li&gt;rebase&lt;/li&gt;
&lt;li&gt;submodule&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;還有各種我這些年開發上有用到的 Git 功能&lt;br&gt;
順便來練習一直想學的 reveal.js&lt;/p&gt;
&lt;p&gt;因為用了 external.js，一開始 load 的時間會稍微久一點&lt;/p&gt;</content><category term="Tech"></category><category term="Git"></category><category term="Tutorial"></category></entry><entry><title>Using GitHub to Develop Software Collaboratively</title><link href="https://lee-w.github.io/posts/tech/2016/09/using-github-to-develop-software-collaboratively" rel="alternate"></link><published>2016-09-15T01:26:00+08:00</published><updated>2016-09-15T01:26:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-09-15:/posts/tech/2016/09/using-github-to-develop-software-collaboratively</id><summary type="html">&lt;p&gt;這是兩年前 GitHub 來成大教育課程的筆記&lt;br/&gt;
最近在整理 git 的筆記才翻出來&lt;br/&gt;
因為當時是以英文進行，課程筆記就也用英文做了&lt;br/&gt;
這篇的內容可能比較雜亂，之後還會再整理進另一篇 git 的筆記&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這是兩年前 GitHub 來成大教育課程的筆記&lt;br/&gt;
最近在整理 git 的筆記才翻出來&lt;br/&gt;
因為當時是以英文進行，課程筆記就也用英文做了&lt;br/&gt;
這篇的內容可能比較雜亂，之後還會再整理進另一篇 git 的筆記&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="introduction-to-git-hub-company"&gt;Introduction to Git Hub (Company)&lt;/h2&gt;
&lt;p&gt;There are around 2600 staffs in GitHub and 40% of them live in San Fransisco.&lt;br/&gt;
Among them, there is one Taiwanese.&lt;/p&gt;
&lt;h2 id="git"&gt;Git&lt;/h2&gt;
&lt;p&gt;Wrote by Linus Torvalds.&lt;/p&gt;
&lt;h3 id="why-version-control"&gt;Why version control?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Historical propose&lt;/li&gt;
&lt;li&gt;Collaboration&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="tutorial"&gt;Tutorial&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git init &lt;span class="s2"&gt;"path"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.git&lt;/code&gt; is just a folder with normal file&lt;br/&gt;
There is no daemon or background progress&lt;br/&gt;
Everything is operated in file&lt;br/&gt;
Never &lt;code&gt;rm -rf .git&lt;/code&gt; XD&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git stauts
touch README.mdd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are three main stages&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;working&lt;/li&gt;
&lt;li&gt;staging&lt;/li&gt;
&lt;li&gt;repo&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Stage&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Stage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;working&lt;/td&gt;
&lt;td&gt;&lt;code&gt;add&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;→&lt;/td&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;staging&lt;/td&gt;
&lt;td&gt;&lt;code&gt;commit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;→&lt;/td&gt;
&lt;td&gt;repo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;working&lt;/td&gt;
&lt;td&gt;←&lt;/td&gt;
&lt;td&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repo&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we're ready&lt;br/&gt;
&lt;code&gt;git commit -m "add a blank commit"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After README.md is modified&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add README.md
git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now this file is in staging area&lt;/p&gt;
&lt;p&gt;So, how to go back to history?&lt;br/&gt;
&lt;code&gt;git reset README.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Take a look at our history&lt;br/&gt;
&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Go back to history&lt;br/&gt;
&lt;code&gt;git checkout "SHA1"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;br/&gt;
Everything comes back&lt;/p&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt; is the default branch name of git. It is a default word but not reserved.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout -b "branch_name"&lt;/code&gt; create a branch and checkout to it&lt;/p&gt;
&lt;h3 id="diff"&gt;diff&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt;: View the difference between working and staging&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff --staged&lt;/code&gt;: Difference between staging and repo&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff "SHA1"&lt;/code&gt;: Difference between current version and SHA1&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff master~1&lt;/code&gt;: difference between current and the one before master&lt;br/&gt;
&lt;code&gt;git diff master^&lt;/code&gt; → master~1&lt;br/&gt;
&lt;code&gt;git diff master^^&lt;/code&gt; → master~2&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff a b&lt;/code&gt;: Show the change from a to b&lt;/p&gt;
&lt;h3 id="branch"&gt;branch&lt;/h3&gt;
&lt;p&gt;In git, branch is not copy. It's like bookmark&lt;br/&gt;
Actually &lt;code&gt;git branch -d "name"&lt;/code&gt; just delete the pointer but not the entry.&lt;/p&gt;
&lt;p&gt;HEAD: the pointer points to current entry&lt;/p&gt;
&lt;h4&gt;detach error&lt;/h4&gt;
&lt;p&gt;If you go back to a entry not in certain branch, a detach error might occur.&lt;br/&gt;
For example, checkout to a commit that is parent of more than one branch and then append a new commit to it.&lt;br/&gt;
In such case, this new appended commit might not be able to be referenced.&lt;br/&gt;
&lt;em&gt;The solution to this problem is to create a new branch for it.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="log"&gt;log&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git log --decorate&lt;/code&gt;: Show also branch info&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log --all&lt;/code&gt;: Show all branch&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log --graph&lt;/code&gt;: Show graph&lt;/p&gt;
&lt;h4&gt;The difference between log and show&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;: Only the first line&lt;br/&gt;
&lt;code&gt;git show&lt;/code&gt;: All the message, not only the first line&lt;/p&gt;
&lt;h2 id="github"&gt;GitHub&lt;/h2&gt;
&lt;h3 id="push"&gt;push&lt;/h3&gt;
&lt;p&gt;origin is a short hand name of that remote url. In other word, your repo.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;upload &lt;em&gt;master&lt;/em&gt; to &lt;em&gt;origin&lt;/em&gt;&lt;br/&gt;
8 -u tell git the default url to push for that branch(master) is origin, it would also make &lt;code&gt;git pull&lt;/code&gt; remember&lt;ul&gt;
&lt;li&gt;Do &lt;code&gt;-u&lt;/code&gt; and after that you can just use &lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pull"&gt;pull&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git push --all&lt;/code&gt;: push all branch&lt;br/&gt;
&lt;code&gt;git pull --prune&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="difference-between-fetch-and-pull"&gt;difference between fetch and pull&lt;/h3&gt;
&lt;p&gt;git fetch : go to remote and copy it&lt;br/&gt;
git pull → fetch + merge&lt;/p&gt;
&lt;h3 id="on-site"&gt;on-site&lt;/h3&gt;
&lt;p&gt;pull request on GitHub&lt;br/&gt;
&lt;code&gt;@person-name&lt;/code&gt; → notification&lt;br/&gt;
Have a conversation with the whole team&lt;/p&gt;
&lt;p&gt;Write "fix #2 ...." in git commit → special meaning → specify the bug in issue on GitHub&lt;br/&gt;
Wiki → documentation&lt;/p&gt;
&lt;h2 id="how-to-write-a-good-git-commit"&gt;How to write a good git commit&lt;/h2&gt;
&lt;h3 id="principle"&gt;Principle&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Separate each commit&lt;/li&gt;
&lt;li&gt;Let the commit tell a story&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="more-specific"&gt;More specific&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One line 80 character&lt;/li&gt;
&lt;li&gt;Use present tense instead of past tense&lt;/li&gt;
&lt;li&gt;Don't repeat what can be found in &lt;code&gt;git diff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If more detail is to be written, left the second line to be blank.&lt;/li&gt;
&lt;li&gt;Write more detail about why this change happened after the third line.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="other-issue"&gt;Other issue&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git config --global -e&lt;/code&gt;: Edit your .gitconfig file.&lt;/p&gt;
&lt;p&gt;Not include binary files and executable&lt;br/&gt;
Don't version control these kinds of files.&lt;br/&gt;
Also, large files are not recommended to add to git.&lt;br/&gt;
If it's needed, try &lt;code&gt;git-annex&lt;/code&gt;(web-site).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git revert "SHA1"&lt;/code&gt; → save another entry of undo&lt;/p&gt;
&lt;p&gt;If you commit the password → &lt;code&gt;git rebase&lt;/code&gt; can change commit, but it is not that recommended.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git submodule&lt;/code&gt; create a sub-module&lt;/p&gt;</content><category term="Tech"></category><category term="Git"></category><category term="GitHub"></category></entry><entry><title>[Book] 賈伯斯傳</title><link href="https://lee-w.github.io/posts/book/2016/09/jobs" rel="alternate"></link><published>2016-09-14T04:53:00+08:00</published><updated>2016-09-14T04:53:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-09-14:/posts/book/2016/09/jobs</id><summary type="html">&lt;p&gt;記得我去上海交通大學交換的時候&lt;br&gt;
一門有關創新的課，老師跟我們說一定要看喬布斯傳&lt;br&gt;
終於把他看完了，算一算竟然花了 11 個小時&lt;/p&gt;
</summary><content type="html">&lt;p&gt;記得我去上海交通大學交換的時候&lt;br&gt;
一門有關創新的課，老師跟我們說一定要看喬布斯傳&lt;br&gt;
終於把他看完了，算一算竟然花了 11 個小時&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img alt="Steve Jobs" src="/images/books/7zs4aDC.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;亞特金森也用高階程式語言 Pascal，為蘋果二號寫程式。&lt;br&gt;
賈伯斯本來認為蘋果二號只要用 Basic 就夠了，&lt;br&gt;
但他還是告訴亞特金森：「&lt;code&gt;既然你這麼喜歡 Pascal，我給你六天的時間證明我是錯的。&lt;/code&gt;」&lt;br&gt;
&lt;strong&gt;亞特金森果然做到了，賈伯斯自此對他更加尊敬&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在蘋果公開上市三十年後，賈伯斯曾回想一夕之間億萬在手的心情&lt;/p&gt;
&lt;p&gt;我向來不曾為了錢傷腦筋。我生長在中產階級的家庭，從不擔心自己會餓死。&lt;br&gt;
我在雅達利工作過，知道我還能以工程師混口飯吃，生活一定過得去。&lt;br&gt;
上大學和去印度那段時間會那麼窮，是為了體驗清貧的感覺。&lt;br&gt;
我的生活一向簡單，上班之後也一樣。我經歷過窮苦的日子。&lt;br&gt;
我覺得很棒，反正沒錢，就用不著為了錢掛心。&lt;br&gt;
後來變得非常富有，錢多到數不完，也不必擔心錢的事。&lt;/p&gt;
&lt;p&gt;我看到蘋果工作的一些人賺了大錢，便覺得自己飛過另一種生活不可。&lt;br&gt;
有人買了勞斯萊斯和好幾棟豪宅，每一棟都得請管家來管理，之後又得找個經理來管這些管家。&lt;br&gt;
他們的老婆紛紛去整形，最後變得怪裡怪氣。&lt;br&gt;
實在很瘋狂。這不是我要的生活。我對自己承諾：&lt;code&gt;我決不讓金錢破壞我的人生&lt;/code&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;賈伯斯很喜歡跟人說一件事：他每次做對一件事情的時候，都是因為先前有機會讓自己暫停、按一下倒帶鈕。&lt;br&gt;
每一次，他發現事情不夠完美，一定重新再做一次。&lt;br&gt;
&lt;code&gt;「如果你發現有些事情不對勁，你不能當作沒看見，之後再回頭來處理」賈伯斯說：「那是別家公司的作法，不是蘋果的做法」&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;從一開始，我就知道蘋果必須仰賴智慧財產的保護，才能蓬勃發展。&lt;br&gt;
如果大家都盜用我們的軟體，我們根本就沒戲唱了。&lt;br&gt;
如果智慧財產不能受到保護，我們就沒有任何動力，去創造新的軟體或打造新的設計。&lt;br&gt;
一旦沒有了智慧財產權的保護，靠創意存活的企業也將消失，或根本不會出現，&lt;br&gt;
但最根本的原因還是：偷竊就是不對。不止傷害別人，也有損自己的人格。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;賈伯斯的企業經營原則是，決不害怕吃掉自既有的市場。&lt;br&gt;
他說：「你不自己吃，別人也會吃下去！」&lt;br&gt;
因此，即使 iPhone 有可能侵蝕 iPod 的市場，iPad 也可能吃掉蘋果筆電的是長，賈伯斯也從不卻步。&lt;/p&gt;</content><category term="Book"></category><category term="Autobiography"></category></entry><entry><title>[Book] 一個人的會議時間</title><link href="https://lee-w.github.io/posts/book/2016/08/meeting-with-youself" rel="alternate"></link><published>2016-08-27T00:50:00+08:00</published><updated>2016-08-27T00:50:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-08-27:/posts/book/2016/08/meeting-with-youself</id><summary type="html">&lt;p&gt;&lt;img alt="一個人的會議時間" src="/images/books/ZZTHLlJ.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;這本書其實是我幾年前買的&lt;br/&gt;
最近開始覺得好想應該檢視一下自己每天的生活到底過得如何&lt;br/&gt;
突然才想起還有這樣的一本書&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;學會跟自己開會，才懂得怎麼經營「自己」這家公司&lt;/strong&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="一個人的會議時間" src="/images/books/ZZTHLlJ.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;這本書其實是我幾年前買的&lt;br/&gt;
最近開始覺得好想應該檢視一下自己每天的生活到底過得如何&lt;br/&gt;
突然才想起還有這樣的一本書&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;學會跟自己開會，才懂得怎麼經營「自己」這家公司&lt;/strong&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="ch2-3"&gt;Ch2-3 問題對策會議&lt;/h2&gt;
&lt;p&gt;人們大多愛瞎操心&lt;br/&gt;
問題本身不見得是大問題&lt;br/&gt;
反而是「有問題還沒處理」所引發的這種煩躁造成了問題&lt;/p&gt;
&lt;p&gt;試著全都寫下來&lt;br/&gt;
即使被事情壓得喘不過氣&lt;br/&gt;
把它們寫下來就能讓自己心安許多&lt;/p&gt;
&lt;p&gt;接著將他們分類成以下四種&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;「何時要做」（列入 TO-Do）&lt;/li&gt;
&lt;li&gt;「拜託、請教別人」（列入 To-Do）&lt;ul&gt;
&lt;li&gt;成功、達成目標的人，大多是「擅長拜託別人」的人&lt;/li&gt;
&lt;li&gt;訣竅在於弄清楚要「拜託誰」、「拜託什麼」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「接受」（煩惱也沒用的事）&lt;/li&gt;
&lt;li&gt;「捨棄」（丟掉那些對人生並不是那麼重要的事）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="ch2-8"&gt;Ch2-8 行程會議的訣竅：醞釀期待感&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;列出「如果有 5 分鐘，要做的事」&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;試著總是把明天排成令人期待的日子&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch3-2"&gt;Ch3-2 自己的行動方式&lt;/h2&gt;
&lt;p&gt;如何將 To-Do 迅速地付諸行動&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;不得不做，只好做了&lt;/del&gt;&lt;ul&gt;
&lt;li&gt;長久以來內心會累&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要不要試著做一點點&lt;ul&gt;
&lt;li&gt;即使沒有太多成果也無所謂&lt;/li&gt;
&lt;li&gt;訣竅在於不努力&lt;/li&gt;
&lt;li&gt;將做這些事變成習慣，而是不是努力要去做的&lt;/li&gt;
&lt;li&gt;這樣就能輕鬆地做到這些事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch3-3"&gt;Ch3-3 回覆的方式&lt;/h2&gt;
&lt;p&gt;E-mail 從新的開始回覆，就可以令對方感到「回應的速度真快」&lt;br/&gt;
若從舊的開始依序回覆，新的就會變成舊的&lt;br/&gt;
如果舊的真的很重要，對方就會打電話或再寫 E-mail 來催促&lt;/p&gt;
&lt;p&gt;忙碌的時候要從新的工作開始處理&lt;/p&gt;
&lt;h2 id="ch4-2"&gt;Ch4-2 一個月跟自己開一次進階版會議&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;推薦的問題&lt;ul&gt;
&lt;li&gt;小時候，你喜歡什麼呢？&lt;/li&gt;
&lt;li&gt;如果沒有限制，你期望怎樣的將來？&lt;/li&gt;
&lt;li&gt;自己在什麼時候最耀眼？&lt;/li&gt;
&lt;li&gt;人生中最痛苦的時候是怎麼重新站起來的？&lt;/li&gt;
&lt;li&gt;有 30 個你不認識的人，和他們打成一片的過程中，你會想替他們做什麼？&lt;/li&gt;
&lt;li&gt;自己擅長和不擅長的事是什麼呢？&lt;/li&gt;
&lt;li&gt;該請誰幫忙呢？&lt;/li&gt;
&lt;li&gt;臨終時，你會後悔什麼呢？&lt;/li&gt;
&lt;li&gt;你現在想見的人是誰呢？&lt;/li&gt;
&lt;li&gt;你在人生中的什麼時候實現了夢想？&lt;/li&gt;
&lt;li&gt;人生在最耀眼那一瞬間的情緒？&lt;/li&gt;
&lt;li&gt;目標是什麼？什麼進展得順利？什麼又不順利呢？該做什麼？透過這些問題，獲得了什麼？&lt;/li&gt;
&lt;li&gt;該怎麼做才能改變現在的狀況？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bonus"&gt;Bonus 跟自己開會的步驟&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;將「跟自己開會」排進 To-Do&lt;/li&gt;
&lt;li&gt;找到能夠一個人思考的地方&lt;/li&gt;
&lt;li&gt;宣告「現在開始跟自己開會」&lt;/li&gt;
&lt;li&gt;向自己報告近況&lt;/li&gt;
&lt;li&gt;五種跟自己開會的形式&lt;ol&gt;
&lt;li&gt;主題會議&lt;ul&gt;
&lt;li&gt;提出主題&lt;/li&gt;
&lt;li&gt;變成怎樣才好呢&lt;/li&gt;
&lt;li&gt;該怎麼做才會變成那樣&lt;/li&gt;
&lt;li&gt;記下 To-Do&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;問題對策會議&lt;ul&gt;
&lt;li&gt;寫下面對的問題&lt;/li&gt;
&lt;li&gt;變成怎樣才好呢&lt;/li&gt;
&lt;li&gt;該怎麼做才會變成那樣&lt;/li&gt;
&lt;li&gt;記下 To-Do&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自由會議&lt;ul&gt;
&lt;li&gt;不斷寫下心中浮現的想法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;行程會議&lt;ul&gt;
&lt;li&gt;當自己的秘書，將 To-Do 記下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;蒐集資訊會議&lt;ul&gt;
&lt;li&gt;隨意瀏覽，只記下心中有感的內容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;一個月跟自己開一次進階版的會議&lt;/li&gt;
&lt;/ol&gt;</content><category term="Book"></category><category term="Productivity"></category></entry><entry><title>[Book] 你如何衡量你的人生</title><link href="https://lee-w.github.io/posts/book/2016/08/how-will-you-measure-your-life" rel="alternate"></link><published>2016-08-26T03:26:00+08:00</published><updated>2016-08-26T03:26:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-08-26:/posts/book/2016/08/how-will-you-measure-your-life</id><summary type="html">&lt;p&gt;&lt;img alt="你要如何衡量你的人生" src="http://pic.eslite.com/Upload/Product/201207/m/634778514624800000.jpg"/&gt;&lt;br/&gt;
最近發現竟然沒有把這本還蠻喜歡的書 po 上來&lt;br/&gt;
就好好的把之前整理的書摘，再重新整理過一遍&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="你要如何衡量你的人生" src="http://pic.eslite.com/Upload/Product/201207/m/634778514624800000.jpg"/&gt;&lt;br/&gt;
最近發現竟然沒有把這本還蠻喜歡的書 po 上來&lt;br/&gt;
就好好的把之前整理的書摘，再重新整理過一遍&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1 id="part-1"&gt;Part 1 發現生涯之樂&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;希望你也能有這種感覺 — 每天一睜開眼睛，為了可以做自己喜歡的事而欣喜&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有很多人看什麼是最緊急就花時間在上面，或是把心血注入到最快得到回饋的事 。&lt;br/&gt;
  這都是建構策略時必須小心的陷阱&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch2"&gt;Ch2 如何讓你的熱情燃燒 ( 誘因理論 )&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;為什麼經理人在營運的時候不考慮股東的最佳利益？&lt;br/&gt;
  因為你付多少錢給經理人，他們就做多少事&lt;br/&gt;
  只有經理人的利益跟股東的利益相連才能解決這個問題&lt;br/&gt;
  e.g., 公司股價上升，經理人也獲得較高的酬勞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個理論是否可靠，最好的驗證方式就是找出反常的例子，也就是該理論無法解釋的現象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g., 最先研究飛行的先驅認為羽毛是必要&lt;ul&gt;
&lt;li&gt;卻發現蝙蝠沒羽毛會飛，鴕鳥有羽毛卻不會飛&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="vs"&gt;保健因素 vs 動機因素&lt;/h3&gt;
&lt;p&gt;保健因素 : 工作的某些因素如果出問題，讓我們覺得不滿意，這些就是保健因素&lt;/p&gt;
&lt;p&gt;有趣的是，薪水對於工作來說只是保健因素&lt;br/&gt;
即使不斷改善工作的保健因素，也不能讓一個人熱愛工作，頂多就是不討厭而已&lt;br/&gt;
需要的是動機因素&lt;/p&gt;
&lt;p&gt;追逐薪水頂多緩和工作的挫折感&lt;br/&gt;
為了發掘真正的快樂，你必須不斷找尋有意義的機會，讓你得以學到新的東西，肩負更多責任&lt;br/&gt;
如果你找到你愛的工作，你將沒有一天覺得自己在工作，而是在做一件有意義的事&lt;/p&gt;
&lt;h2 id="ch3"&gt;Ch3 計劃與變化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在工作生涯當中，你會發現你最喜歡的領域是甚麼，最後必然可找到能滿足保健因素，也能使動機因素發揮最大效用的工作&lt;br/&gt;
最重要的是，&lt;strong&gt;你一定要走出去嘗試&lt;/strong&gt;，才能知道甚麼樣的工作最符合你的才能和興趣&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果要工作愉快，哪些假設必須證明為真 ?&lt;br/&gt;
  接受這份工作的動機是出自內在，還是外在因素 ?&lt;br/&gt;
  為什麼你認為自己可以愉快勝任 ?&lt;br/&gt;
  每次考慮換工作時，請你想想最重要的假設是甚麼，如何去證明他 ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch4"&gt;Ch4 策略的試金石&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;個人的誘因跟公司長遠目標衝突，是常見的現象&lt;ul&gt;
&lt;li&gt;e.g. 立委任期為四年&lt;ul&gt;
&lt;li&gt;一個好的國家計劃要五年十年&lt;/li&gt;
&lt;li&gt;然而要讓自己繼續連任，只有提出短期能有成效的計劃才能達到讓自己連任的目標&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要同時顧及個人及團體，是非常不容易的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="part-2"&gt;Part 2 圓滿的人際關係&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在做資源分配時，你必須注意是否與心中的優先順序相符&lt;br/&gt;
  對你來說，什麼是成功 ? 什麼是不重要的 ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;沒有結果並非代表你失敗了，只能證明你用的方法還不對&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch5"&gt;Ch5 時鐘滴答響&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在所有成功的公司當中，有 93% 都必須改變最初的策略&lt;br/&gt;
  所以&lt;strong&gt;不一定要訂定一個固定的生涯目標，而是隨著自己不斷的成長而一直改變&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;稍微想想，就會發現在忙碌時我們疏忽了哪些人&lt;br/&gt;
  你或許覺得家人很愛你，你和朋友友誼深厚，他們不會在乎被疏忽&lt;br/&gt;
  其實不然&lt;br/&gt;
  長久不花時間、精力去培養人際關係，身邊的人最後還是會離你而去&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch6"&gt;Ch6 一杯奶昔的任務&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每一個成功的產品或服務之所以能大受歡迎，是因為這種東西&lt;strong&gt;幫我們完成了不得不做的工作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一個人開發出一種有趣的產品，但沒能幫上消費者的忙，這種東西就難以成功&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我們可以為伴侶做任何事情，但是如果做得並不是她最需要的，就會面對挫折與困惑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即使我們用心良善，也有深切的愛，還是常常誤解彼此需要的&lt;/li&gt;
&lt;li&gt;請問自己「另一半需要我做甚麼 ?」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch7"&gt;Ch7 席瑟司之船&lt;/h2&gt;
&lt;h3 id="_1"&gt;別把未來外包&lt;/h3&gt;
&lt;p&gt;你得了解未來要成功必須具備的能力，無論如何都別把這樣的能力外包了，否則就是把未來交給別人&lt;br/&gt;
e.g., DELL 逐步將個人電腦的技術包給華碩，最後華碩自創品牌，DELL 就不再具有優勢了&lt;/p&gt;
&lt;p&gt;「我父母給我最好的禮物並非他們為我做了甚麼，而是他們沒為我做的」&lt;/p&gt;
&lt;h2 id="ch8"&gt;Ch8 經驗學校&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;很有趣的統計，企業主管認為自己所用非人約有 25%&lt;ul&gt;
&lt;li&gt;換言之，主管時常用錯人&lt;/li&gt;
&lt;li&gt;他們在產品製造或服務上追求零瑕疵&lt;/li&gt;
&lt;li&gt;但在挑選人才時，出錯機率卻高達 25%&lt;/li&gt;
&lt;li&gt;然而他們卻認為這樣的錯誤率是可接受的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch9"&gt;Ch9 一隻看不見的手&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在孩子還小，尚未面臨困難的選擇時，就必須培養他們心中設定優先順序的能力&lt;br/&gt;
  長大以後，他們才知道如何評估各種選擇，做出最好的決定&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;企業文化&lt;/h3&gt;
&lt;p&gt;文化不是管理階級花時間和員工溝通、講述就可以形成的，當然也不是寫寫標語就好了&lt;br/&gt;
文化會建立在員工做的一連串決定上&lt;br/&gt;
每次碰到問題或挑戰時，如何去解決他的決定&lt;br/&gt;
例如 :「新產品是不是品質尚可就達到出貨標準了 ?」&lt;br/&gt;
如果面對這樣的問題，負責的人討論後決定只要品質尚可就能出貨&lt;br/&gt;
下一次員工面臨類似問題的時候就會做出同樣的決定&lt;br/&gt;
碰到問題時，不只是解決就好了，還必須從解決的過程了解什麼是最重要的&lt;/p&gt;
&lt;p&gt;同樣的道理，如果你希望家人都能在家庭文化的影響下&lt;br/&gt;
依循依定的優先順序做事，這樣的優先順序則必須跟文化相符合&lt;br/&gt;
例如你希望家裡有和善的文化，那麼在孩子第一次碰到跟和善相關的選擇，你就得幫他做決定&lt;br/&gt;
若孩子沒這麼做，你就得針對這件事指導孩子，並解釋為什麼他們該採取和善的做法&lt;/p&gt;
&lt;h2 id="ch10"&gt;Ch10 就這麼一次 ...&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;百分之百的堅持比百分之九十八來得容易
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有很多人都相信自己真的只是一次妥協，下不為例&lt;br/&gt;
如果是小小的選擇，我們都有很好的理由&lt;br/&gt;
這些選擇往往不是攸關一生的重大決定。乍看之下邊計成本都很低&lt;br/&gt;
然而一個又一個決定累積下來，你就會慢慢走上不歸路，變成不一樣的人&lt;/p&gt;
&lt;p&gt;百分之百堅守原則，比百分之九十八來得容易&lt;br/&gt;
如果你不越界，個人道德界限的力量就會很強大&lt;br/&gt;
要是你用好理由說服自己，那就成了一個沒有原則的人，甚麼事都做得出來&lt;/p&gt;
&lt;p&gt;為了變成自己理想中的，每一個人的過程都不同。不管如何，你應該要能回答這樣的問題 :「我真的想要變成那樣的人嗎 ?」&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;「如果我將每日禱告、反思的時間拿來研究迴歸分析，我將後悔莫及。
 每年，我用到計量經濟學工具不過只有幾次，而我對人生目的的認知卻天天都可派上用場」
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Book"></category><category term="Inspiring"></category></entry><entry><title>[Paper] A Learning-based Framework to Handle Multi-round Multi-party Influence Maximization on Social Networks</title><link href="https://lee-w.github.io/posts/tech/2016/08/a-learning-based-framework-to-handle-multi-round-multi-party-inflence-maximization-on-social-networks" rel="alternate"></link><published>2016-08-22T16:53:00+08:00</published><updated>2016-08-22T16:53:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-08-22:/posts/tech/2016/08/a-learning-based-framework-to-handle-multi-round-multi-party-inflence-maximization-on-social-networks</id><summary type="html">&lt;p&gt;&lt;a href="http://dl.acm.org/citation.cfm?id=2783392"&gt;Paper&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="http://dl.acm.org/citation.cfm?id=2783392"&gt;Paper&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="1-introduction"&gt;1. Introduction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Problem Description&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A company intends to select a small set of customers to distribute praises of their trial products to a larger group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Influence maximization&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goal: Identify a small subset of seed nodes that have the best chance to influence the most number of nodes&lt;/li&gt;
&lt;li&gt;Competitive Influence Maximization (CIM)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assumption&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Influence is exclusive (Once a node is influenced by one party, it will not be influenced again)&lt;/li&gt;
&lt;li&gt;Each round all parties choose one node and then the influence propagates before the next round starts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STORM (STrategy-Oriented Reinforcement-Learning based influence Maximization) performs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data Generation&lt;ul&gt;
&lt;li&gt;the data, which is the experience generated through simulation by applying the current model, will become the feedbacks to refine the model for better performance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model Learning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="difference-with-others"&gt;Difference with Others&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Known strategy → Both know and unknown&lt;ul&gt;
&lt;li&gt;Known or Unknown but available to compete → Train a model to learn strategy&lt;/li&gt;
&lt;li&gt;Unknown → Game-theoretical solution to seek the Nash equilibrium&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Single-roung → Multi-round&lt;/li&gt;
&lt;li&gt;Model driven → learning-based, data-drivern&lt;/li&gt;
&lt;li&gt;Not considering different network topology → General to adapt both opponent's strategy and environment setting (e.g. underlying network topology)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="2-problem-statement"&gt;2. Problem Statement&lt;/h2&gt;
&lt;h3 id="def-1-competitive-linear-threshold-clt"&gt;Def 1: Competitive Linear Threshold (CLT)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CLT model is a multi-party diffusion model&lt;/li&gt;
&lt;li&gt;The party who has the highest influence occupied the node&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="def-2-multi-round-competitive-influence-maximization-mrcim"&gt;Def 2: Multi-Round Competitive Influence Maximization (MRCIM)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Max its overall relative influence&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="4-methodology"&gt;4. Methodology&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NP-hardness of MRCIM → looks for approxmiate solution&lt;/li&gt;
&lt;li&gt;Max the inflence for each round does not guarantee overall max&lt;ul&gt;
&lt;li&gt;Due to the fact that each round are not independent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="41-preliminary-reinforcement-learning"&gt;4.1 Preliminary: Reinforcement Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learn a policy $\pi(s)$ to determine which action to take state s (environment)&lt;/li&gt;
&lt;li&gt;How to estimated $\pi$?&lt;ul&gt;
&lt;li&gt;Expected Accmulated Reward of a state (V function)&lt;ul&gt;
&lt;li&gt;$ V^\pi(s) = E_\pi{R_t|S_t=s}=...$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Expected Accmulated Reward of a state-action pair (Q function)&lt;ul&gt;
&lt;li&gt;$ Q^\pi(s, a) = E_\pi{R_t|S_t=s, a_t=a}=...$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The optimal $\pi$ can be obtained through Q functinon&lt;/p&gt;
&lt;p&gt;$ \pi = \arg \min_{a\in A}Q(s,a)$&lt;/p&gt;
&lt;p&gt;(i.e. For all "a" in A, find the "a" such that min Q(s, a))&lt;/p&gt;
&lt;h3 id="42-strategy-oriented-reinforcement-learning"&gt;4.2 Strategy-Oriented Reinforcement-Learning&lt;/h3&gt;
&lt;h4&gt;Setup&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Env&lt;ul&gt;
&lt;li&gt;Influence propagation process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reward&lt;ul&gt;
&lt;li&gt;Delay Reward: The difference of activated nodes between parties at the last round&lt;ul&gt;
&lt;li&gt;After the last round, rewards are propagated to the previous states through Q-function updating&lt;/li&gt;
&lt;li&gt;Slow but more accurate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Action&lt;ul&gt;
&lt;li&gt;&lt;del&gt;Choosing certain node to activate&lt;/del&gt;&lt;ul&gt;
&lt;li&gt;too many&lt;/li&gt;
&lt;li&gt;overfit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Single Party IM strategies&lt;ul&gt;
&lt;li&gt;Namely, which strategy to choose given the current state&lt;/li&gt;
&lt;li&gt;The size can be reduced to strategies chosen&lt;/li&gt;
&lt;li&gt;Chosen Strategies&lt;ul&gt;
&lt;li&gt;sub-greedy&lt;/li&gt;
&lt;li&gt;degree-first&lt;/li&gt;
&lt;li&gt;block&lt;/li&gt;
&lt;li&gt;max-weight&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;State&lt;ul&gt;
&lt;li&gt;Represents&lt;ul&gt;
&lt;li&gt;network&lt;/li&gt;
&lt;li&gt;environment status&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;del&gt;record the occupation status of all nodes&lt;/del&gt;&lt;ul&gt;
&lt;li&gt;$3^{|V|}$, too many&lt;/li&gt;
&lt;li&gt;overfit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Features Designed&lt;ul&gt;
&lt;li&gt;Number of free nodes&lt;/li&gt;
&lt;li&gt;Sum of degrees of all nodes&lt;/li&gt;
&lt;li&gt;Sum of weight of the edges for which bot h vertices are free&lt;/li&gt;
&lt;li&gt;Max degree among all free nodes&lt;/li&gt;
&lt;li&gt;Max sum of free out-edge weight of a node among nodes which are the first player's neighbors&lt;/li&gt;
&lt;li&gt;Second player's&lt;/li&gt;
&lt;li&gt;Max activated nodes of a node for the first player alter two rounds of influence propagation&lt;/li&gt;
&lt;li&gt;Second player's&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The feautres are quantize into&lt;ul&gt;
&lt;li&gt;low&lt;/li&gt;
&lt;li&gt;medium&lt;/li&gt;
&lt;li&gt;high&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Totally, $3^9$ states&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Data For Training&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Propagation model is known (e.g. LT in the experiments)&lt;/li&gt;
&lt;li&gt;Strategies served as actions are predefined&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In training phase, train the agent against a certain strategy and see how it performs on the given network&lt;br/&gt;
These data can be used to learn the value functions&lt;/p&gt;
&lt;h4&gt;Training Against Opponents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Opponent Strategy&lt;ul&gt;
&lt;li&gt;Known: Simulate the strategy during training&lt;/li&gt;
&lt;li&gt;Unknown but available during training: Same as above&lt;/li&gt;
&lt;li&gt;Unknown: More General Model in 4.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Phase&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Phase 1: Training&lt;ul&gt;
&lt;li&gt;The agent update its Q function from the simulation experiences throughout the training rounds&lt;/li&gt;
&lt;li&gt;Update $\pi$ in the meantime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Phase 2: Competition&lt;ul&gt;
&lt;li&gt;The agent would not update Q-table&lt;/li&gt;
&lt;li&gt;Generates $\pi$ according to Q-table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="43-storm-with-strategy-known"&gt;4.3 STORM with Strategy Known&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Training the model compete against the strategy to learn $\pi$&lt;/li&gt;
&lt;li&gt;STORM-Q&lt;ul&gt;
&lt;li&gt;Update Q-function following the concept of Q-learning&lt;ul&gt;
&lt;li&gt;Q-Learning: $Q(S_t, a_t) = Q(S_t, a_t) + \alpha * (r_{t+1} + \gamma * max_{a}Q(S_{t+1}, a) -Q(S_t, a_t))$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$\epsilon$-greedy&lt;ul&gt;
&lt;li&gt;Determine strategies on the current policy derived from Q-table.&lt;/li&gt;
&lt;li&gt;Explore the new directions to avoid local optimum&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pure Strategy&lt;ul&gt;
&lt;li&gt;The most likely strategy is chosen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ Algorithm $&lt;/p&gt;
&lt;h2 id="44-storm-with-strategy-unknown"&gt;4.4 STORM with Strategy Unknown&lt;/h2&gt;
&lt;h3 id="unknown-but-available-to-train"&gt;Unknown but available to train&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The differece between the known case is that experience cannot be obtained through simulation&lt;/li&gt;
&lt;li&gt;Train against unknown opponent's strategy during competition&lt;ul&gt;
&lt;li&gt;It's feasible because STORM-Q only needs to know the seed-selection outcoms of the opponent to update the Q-table, not exact strategy it takes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unknown"&gt;Unknown&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Goal: Create a general model to compete a variety of rational strategies&lt;/li&gt;
&lt;li&gt;Assumption: The oppoent is rational (Wants to max influence and knows its oppoent wants so)&lt;/li&gt;
&lt;li&gt;STORM-QQ&lt;ul&gt;
&lt;li&gt;Two STROM-Q compete and update Q-tabale at the same time&lt;/li&gt;
&lt;li&gt;Using current Q-table during training phase&lt;/li&gt;
&lt;li&gt;Pure Strategy&lt;ul&gt;
&lt;li&gt;Does Not guarantee that equilibrium exists in MRCIM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STORM-MM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mix Strategy (Samples an action from the distribution of actions in each state)&lt;/li&gt;
&lt;li&gt;In two-player zero-sum game&lt;ul&gt;
&lt;li&gt;Nash equilibrium is graranteed to exist with miexed strategies&lt;/li&gt;
&lt;li&gt;Use MINMAX theorem to find the equilibrium&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$Q(s, a, o)$: The reward of first party when using strategy $a$ against oppoent's strategy $o$ in state $s$&lt;/li&gt;
&lt;li&gt;$Q_{t+1}(s_t, a_t, o_t) = (1-\alpha)Q_t(s_t, a_t, o_t)+\alpha[r_{t+1}+\gamma V(s_{t+1})]$&lt;/li&gt;
&lt;li&gt;Operations  Research&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The differece between STROM-QQ and STORM-MM&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;STROM-QQ&lt;/th&gt;
&lt;th&gt;STROM-MM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Max the reward in their own Q-table&lt;/td&gt;
&lt;td&gt;Finds equilibrium with one Q-table and determines both side's $a$ at the same time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pure Strategies&lt;/td&gt;
&lt;td&gt;Mixed Strategies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Choose strategy by greedy&lt;/td&gt;
&lt;td&gt;Samples from the mixed strategy $\pi_a$ or $\pi_o$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Ideally, they should have similar result in two-party MRCIM. In practice, the result might not due to&lt;ul&gt;
&lt;li&gt;STORM-QQ does not guarantee equilibrium&lt;/li&gt;
&lt;li&gt;Although equilibrium exists in STORM-MM. It does not guarantee to be found due to lack of training data or bad init or such problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Paper"></category><category term="Social Network"></category><category term="Machine Learning"></category><category term="Game Theory"></category></entry><entry><title>COSCUP 2016</title><link href="https://lee-w.github.io/posts/tech/2016/08/coscup-2016" rel="alternate"></link><published>2016-08-22T15:36:00+08:00</published><updated>2016-08-22T15:36:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-08-22:/posts/tech/2016/08/coscup-2016</id><summary type="html">&lt;p&gt;&lt;a href="http://beta.hackfoldr.org/coscup2016/"&gt;hackholder 共筆&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="http://beta.hackfoldr.org/coscup2016/"&gt;hackholder 共筆&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="day1"&gt;Day1&lt;/h2&gt;
&lt;h3 id="r"&gt;R 語言翻轉教室簡介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why R ？&lt;ul&gt;
&lt;li&gt;統計人多用 R，所以最新的統計演算法，最可能最早被實作在 R 上&lt;/li&gt;
&lt;li&gt;R 套件的易開發性&lt;/li&gt;
&lt;li&gt;易讓非工程背景者上手&lt;/li&gt;
&lt;li&gt;先進的視覺化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;教 or 學 R 的挑戰&lt;ul&gt;
&lt;li&gt;函數名稱不一致&lt;/li&gt;
&lt;li&gt;同樣的方法可以用太多方式達成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/R_Language/index.html"&gt;PTT R 版&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;聽說對新手很友善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://datascienceandr.org"&gt;R 語言翻轉教室&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="python-rpi"&gt;開源軟硬體實做全套電子鼓 (python + RPi)&lt;/h3&gt;
&lt;p&gt;第一場在中研院的演場會 (?)&lt;br&gt;
我到的時候就差不多在&lt;a href="https://www.youtube.com/watch?v=WZMPEVGUpgg&amp;amp;t=29m50s"&gt;live demo&lt;/a&gt; 了&lt;br&gt;
算是剛好沒錯過精彩的部份 XD&lt;/p&gt;
&lt;h3 id="_1"&gt;商業公司如何建立開發者生態系統&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;B2D(Business to Developere)&lt;/li&gt;
&lt;li&gt;Open Source 跟 Open API，對於商業公司來說有什麼價值&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Open Source&lt;/th&gt;
&lt;th&gt;OpenAPI&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;開放程式碼&lt;/td&gt;
&lt;td&gt;開放呼叫功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read/Write model&lt;/td&gt;
&lt;td&gt;Read-Only model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;貢獻者社群&lt;/td&gt;
&lt;td&gt;使用者社群&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;產業聯盟 → 產業標準&lt;/td&gt;
&lt;td&gt;相互競爭 → 寡佔市場&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;另外比較有趣的是&lt;br&gt;
華為有個部門就是專門在預測未來哪種 Open Source 會火&lt;br&gt;
作為下一個貢獻的 Open Source 專案&lt;br&gt;
早期投入那項技術&lt;/p&gt;
&lt;h3 id="_2"&gt;自己的樂器自己做：第一把開放硬體設計的電烏克麗麗&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ukulele.design/tw/"&gt;閃電麗麗&lt;/a&gt;&lt;br&gt;
之所以閃電麗麗這麼不像一般的烏克麗麗&lt;br&gt;
是因為一般 3D 印表機，印不了那麼長&lt;br&gt;
講者有提到他如何去構思該做出怎樣的改變，才有辦法符合 3D 印表機的限制&lt;br&gt;
好像是弦要到那樣的長度才能剛好發出烏克麗麗的聲音&lt;br&gt;
其他的部分就能改用不同的方式取代，不用受限於制式的樣式&lt;br&gt;
於是閃電麗麗就誕生了&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="day2"&gt;Day2&lt;/h2&gt;
&lt;h3 id="opensource-5g"&gt;Opensource 將如何對第五代行動通訊 (5G) 造成革命性的改變&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;4G 到 5G 的改變&lt;ul&gt;
&lt;li&gt;使網路能以軟體的速度成長，而非硬體的速度&lt;ul&gt;
&lt;li&gt;將以往綁在硬體商的部分虛擬化&lt;ul&gt;
&lt;li&gt;SDN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NFV&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;讓各種不同的服務可以有各自不同需求的網路特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/ChiahanWu/opensource5g?ref=http://www.slideshare.net/ChiahanWu/slideshelf"&gt;講者的 slideshare&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="debater"&gt;Debater 辯論家：網路筆戰大亂鬥&lt;/h2&gt;
&lt;p&gt;講者直接在 hackpad 寫她不會脫稿演出，可以直接看&lt;a href="https://docs.google.com/presentation/d/1RxJxZ_HAWZkDNIy9y2UZPZ3M7oNIxcdLJd6UzIO9egc/edit"&gt;投影片 + Note&lt;/a&gt;&lt;br&gt;
所以我就也放她的連結就好 XD&lt;/p&gt;
&lt;p&gt;講者有提到&lt;a href="https://hackmd.io"&gt;HackMD&lt;/a&gt;&lt;br&gt;
主要是用來 Markdown 協作&lt;br&gt;
之前一直覺得 Hackpad 的 Markdown support 沒有很好&lt;br&gt;
終於有人做出這個東西了 XD&lt;/p&gt;
&lt;h2 id="_3"&gt;開放公司文化之下的軟體開發 / 如何用開源軟體賺錢？&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;找到使用者的痛，解決他
如果其中部份剛好有開源軟體可用，算你撿到的
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_4"&gt;我們如何用開源軟體&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;觀察客戶要甚麼&lt;/li&gt;
&lt;li&gt;加上重要功能，甚至比原來的軟體還大&lt;/li&gt;
&lt;li&gt;願意自己重寫&lt;/li&gt;
&lt;li&gt;甚至徹底改變商業模式&lt;/li&gt;
&lt;li&gt;建置世界級的大系統&lt;/li&gt;
&lt;li&gt;注重使用者體驗&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="lightning"&gt;Lightning&lt;/h2&gt;
&lt;p&gt;今年 Lightning 也有很多有趣的主題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MRT &amp;amp; GIT&lt;ul&gt;
&lt;li&gt;用 git branch 來畫台北捷運的路線圖&lt;ul&gt;
&lt;li&gt;不要亂玩 git branch 啊 XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/othree/taipei-mrt/network"&gt;othree/taipei-mrt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;徵音梅林新歌發表&lt;ul&gt;
&lt;li&gt;講者完全沒說到話，真的就是新歌發表到三分鐘結束 XD&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=daAI2agxzs0"&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;今年的&lt;a href="http://beta.hackfoldr.org/coscup2016/https%253A%252F%252Fhackpad.com%252FCOSCUP2016-5wENY4uxqSX"&gt;COSCUP2016 梗全集&lt;/a&gt;，還蠻有趣的 XD&lt;/p&gt;</content><category term="Tech"></category><category term="Conference"></category><category term="COSCUP"></category></entry><entry><title>Scrollable RISE</title><link href="https://lee-w.github.io/posts/tech/2016/08/scrollable-rise" rel="alternate"></link><published>2016-08-15T03:22:00+08:00</published><updated>2016-08-15T03:22:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-08-15:/posts/tech/2016/08/scrollable-rise</id><summary type="html">&lt;p&gt;RISE 是一套結合&lt;a href="http://jupyter.org"&gt;jupyter-notebook&lt;/a&gt; 和&lt;a href="http://lab.hakim.se/reveal-js/#/"&gt;reveal.js&lt;/a&gt; 的專案&lt;br&gt;
讓我們能在 jupyter notebook 直接開啟如同 reveal.js 的 slide&lt;/p&gt;
</summary><content type="html">&lt;p&gt;RISE 是一套結合&lt;a href="http://jupyter.org"&gt;jupyter-notebook&lt;/a&gt; 和&lt;a href="http://lab.hakim.se/reveal-js/#/"&gt;reveal.js&lt;/a&gt; 的專案&lt;br&gt;
讓我們能在 jupyter notebook 直接開啟如同 reveal.js 的 slide&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;不過如過 notebook cell 中的內容太長&lt;br&gt;
在播放的時候就會導致內容被裁剪&lt;br&gt;
而 RISE 預設是無法用滑鼠滾動的&lt;br&gt;
所以這裡記錄該如何讓 RISE 可以滾動&lt;/p&gt;
&lt;p&gt;進入 jupyter notebook 的任一個 notebook 後&lt;br&gt;
在上方工具列點選 &lt;code&gt;Edit&lt;/code&gt; → &lt;code&gt;Edit Notebook Metadata&lt;/code&gt;&lt;br&gt;
接著在裡面加入 livereveal 的設定&lt;br&gt;
如下 （只需加入 livereveal 的部分）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;kernelspec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;livereveal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;scroll&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;不過開發者其實有說，開啟滾動會造成不少問題&lt;br&gt;
所以預設上才會設定為不能滾動&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;damianavila commented on Jul 12&lt;/strong&gt;&lt;br&gt;
After several and long discussions with a lot of people, we have arrived to the conclusion that scrolling on reveal.js based slideshows brings more problems than benefits, so I will not add the scrolling as a default option BUT we should clearly document how to get scrolling slides with the config option available. I will mark this as a docs issue and prioritize properly.&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/damianavila/RISE/issues/185"&gt;scrolling vertically #185&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Jupyter"></category><category term="reveal.js"></category></entry><entry><title>[Book] 引誘科學</title><link href="https://lee-w.github.io/posts/book/2016/08/captivology-the-science-of-capturing-people-s-attention" rel="alternate"></link><published>2016-08-07T12:11:00+08:00</published><updated>2016-08-07T12:11:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-08-07:/posts/book/2016/08/captivology-the-science-of-capturing-people-s-attention</id><summary type="html">&lt;p&gt;&lt;img alt="captivology-the-science-of-capturing-people-s-attention" src="http://pic.eslite.com/Upload/Product/201605/m/635988115711024504.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="captivology-the-science-of-capturing-people-s-attention" src="http://pic.eslite.com/Upload/Product/201605/m/635988115711024504.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="ch1-"&gt;Ch1 - 注意力有三種 : 即時、短期、長期，怎樣抓住&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;顏色應用的一般性原則&lt;ul&gt;
&lt;li&gt;藍色多代表平靜&lt;/li&gt;
&lt;li&gt;最令人喜歡的顏色或組合：藍色、藍綠色、綠色、綠紫色、紅紫色、紫色&lt;/li&gt;
&lt;li&gt;最不討喜：綠黃色、黃色&lt;/li&gt;
&lt;li&gt;令人感到興奮、激勵或警覺，應該選用暖色系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch3-"&gt;Ch3 - 框架誘因&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;認定某樣東西很受歡迎不會改變其價值，但如果認定某樣東西本來就是限量的，則會提高其身價&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch5-"&gt;Ch5 - 獎勵誘因：不只給錢、祭優惠、送獎品，怎樣獎勵最有效&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;幾年前的某個晚上，我和一群科技界的朋友，在舊金山一家高級餐廳聚餐，主客是遠道來的米娜拉。
可是我們竟然集體冷落她，每個人都在低頭防著滑手機、寫簡訊、看推特、回電郵，簡直像在比賽誰能一直盯著手機似的。

看不下去的米娜拉提議大家來玩手機疊疊樂遊戲，每個人都要交出手機，並疊在另一支手機上，第一個伸手去拿手機的人要負責買單。

後來再也沒有人去碰手機了，我們終於有機會開懷大聊。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;內源性獎勵&lt;ul&gt;
&lt;li&gt;外源性獎勵和內源性獎勵的差異，在於想要得到獎勵的東擊是不同的&lt;br/&gt;
  我們會為外源性獎勵而去注意或做某件事&lt;br/&gt;
  內源性獎勵的動機則是來自事情本身，我們會去注意或從事我們認為值得的事，不在乎是否能得到任何外源性獎勵&lt;/li&gt;
&lt;li&gt;通用內源性獎勵&lt;ul&gt;
&lt;li&gt;權力&lt;/li&gt;
&lt;li&gt;獨立&lt;/li&gt;
&lt;li&gt;好奇&lt;/li&gt;
&lt;li&gt;接納&lt;/li&gt;
&lt;li&gt;秩序&lt;/li&gt;
&lt;li&gt;收藏&lt;/li&gt;
&lt;li&gt;榮譽&lt;/li&gt;
&lt;li&gt;理想&lt;/li&gt;
&lt;li&gt;社會接觸&lt;/li&gt;
&lt;li&gt;家庭&lt;/li&gt;
&lt;li&gt;地位&lt;/li&gt;
&lt;li&gt;報復&lt;/li&gt;
&lt;li&gt;飲食&lt;/li&gt;
&lt;li&gt;體能活動&lt;/li&gt;
&lt;li&gt;平靜（安全）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch7-"&gt;Ch7 - 懸念誘因：弔胃口、待解之謎 讓完成強迫症發作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;懸念誘因必須具備懸而未決、情感投入、逆轉劇情以及結局未卜四個要件，才能持續吸引注意力&lt;/li&gt;
&lt;li&gt;如果個人或公司遇上了危機，而且社會大眾和媒體都睜大眼睛等著下一步作為時，正確的收尾行動乃是第一要務&lt;br/&gt;
  因為這樣事件才能做個了斷。如果你的收尾行動無法讓人滿意，就會留下一個結局未卜的小缺口，讓人們有機會不斷議論及報導&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="ch8-"&gt;Ch8 - 肯定誘因：想被認得、想被賞識、想被同理心對待&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;「球場蓋好，人就會來」在現代世界裡事行不通的&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Sales"></category></entry><entry><title>[Book] 增強你的意志力</title><link href="https://lee-w.github.io/posts/book/2016/06/willpower" rel="alternate"></link><published>2016-06-27T02:55:00+08:00</published><updated>2016-06-27T02:55:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-06-27:/posts/book/2016/06/willpower</id><summary type="html">&lt;p&gt;&lt;img alt="willpower" src="http://pic.eslite.com/Upload/Product/201307/m/635093011219915000.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="willpower" src="http://pic.eslite.com/Upload/Product/201307/m/635093011219915000.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="-"&gt;前言 - 意志力：人類最強大的力量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;意志力就肌肉一樣，會因為過度使用而疲乏，但也能透過長期鍛鍊來強化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch1-"&gt;Ch1 - 意志力不只是一種比喻&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;控制情緒反應會折損意志力。即使是假裝的也會累&lt;/li&gt;
&lt;li&gt;從自我耗損研究歸納出來的法則：&lt;strong&gt;一次專注一項工作&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch2-"&gt;Ch2 - 意志力的能量從哪裡來&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;沒有葡萄糖，就沒有意志力&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;當你的身體要對面對疾病，就會消耗大量葡萄糖，所以這個時候就要避免去做需要自我控制的事&lt;/li&gt;
&lt;li&gt;血糖過低者受刺激時，會比一般人更難專心和控制自己的負面情緒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;餵飽怪獸&lt;ul&gt;
&lt;li&gt;如果你有考試、重要會議、或攸關重大的計畫&lt;/li&gt;
&lt;li&gt;不要在缺乏葡萄糖的情況下匆匆上場&lt;/li&gt;
&lt;li&gt;e.g.&lt;ul&gt;
&lt;li&gt;別在午餐四個小時後和老闆吵架&lt;/li&gt;
&lt;li&gt;別在晚餐前和另一半討論嚴重的問題&lt;/li&gt;
&lt;li&gt;到歐洲浪漫之旅時，別在晚上七點才開進城牆包圍的中古小鎮，企圖餓著肚子找到你的旅館&lt;ul&gt;
&lt;li&gt;就算你的車能在錯綜複雜的石板路穿梭無礙，你和伴侶的關係也可能經不起這個考驗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;飲食應該挑選熱量燃燒慢的食物&lt;ul&gt;
&lt;li&gt;升糖指數高的食物（e.g. 白麵包、馬鈴薯、白飯、零食）會產生大起大落的循環&lt;/li&gt;
&lt;li&gt;想維持穩定的自制力，應該吃蔬菜、堅果、水果、起司、魚類、肉類、橄欖油這類的升糖指數低的食物  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;累了就睡覺&lt;ul&gt;
&lt;li&gt;休息可以降低身體對葡萄糖的需要，還能提高對血液裡的葡萄糖的利用能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch3-"&gt;Ch3 - 待辦事項的大學問&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Zeigarnik Effect: 未完成的工作和未達成的目標會盤旋在心中。等到工作完成、目標達成，不斷提醒的狀況變嘎然而止。&lt;ul&gt;
&lt;li&gt;e.g. 聽一首歌，聽到一半突然關掉。稍微過一段時間，這首歌的某個片段可能不斷著在心中唱著&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch4-"&gt;Ch4 - 決策疲勞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;做決定需要意志力，而在意志力耗損的情況下，人們會竭盡一切延遲或躲避決定。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;「關掉其中一個選項感覺上等於是損失，為了避免這種損失的感覺，人們寧願付出代價」&lt;ul&gt;
&lt;li&gt;這麼做有時候很有道理，但我們多半太想保留選擇的自由，而沒看到我們長期付出的代價，或別人付出的代價。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch5-"&gt;Ch5 - 錢都花到哪去了？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;遠視：太過擔心未來，而損及眼前的生活。&lt;ul&gt;
&lt;li&gt;這樣的吝嗇心態會讓人花更多時間、與朋友疏離、讓家人抓狂也讓自己痛苦&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch6-"&gt;Ch6 - 意志力可以鍛鍊嗎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「讓你的大腦習慣訂定小目標，並加以達成，能幫助你做到原本做不到的大事情」&lt;ul&gt;
&lt;li&gt;不光為了練習特定的技能，還要把困難度加高，決不寬貸，如此一來，你才會行有餘力，超過原本設定的目標。對我來說，這就是紀律。全靠不斷重複和練習而來」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;練習控制情緒並不能強化意志力。意志力也無法用來控制情緒&lt;ul&gt;
&lt;li&gt;控制情緒一般得靠其他技巧，像是改變對眼前問題的看法，或者讓自己分心&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;試著改變一些習慣性的動作（e.g. 坐姿坐正、右撇子用左手寫字），都是自我控制的練習&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch8-"&gt;Ch8 - 戒癮的真相&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;對許多人來說，停下來喝一杯也許無傷大雅，之後好幾個月也不會酗酒&lt;ul&gt;
&lt;li&gt;可是如果是無法控制喝酒的人，就不能把偶爾一次喝酒當成獨立事件&lt;/li&gt;
&lt;li&gt;最好的方法，就是離酒吧遠一點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;明確界線&lt;ul&gt;
&lt;li&gt;如果你只承諾自己「適量」，這並不是明確界線。模糊的界線會漸漸讓你沒發現自己已經失控&lt;/li&gt;
&lt;li&gt;零容忍才是明確界線&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ch10-"&gt;Ch10 - 節食風暴&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What-the-hell Effect&lt;ul&gt;
&lt;li&gt;e.g., 節食者已經定下每日最高卡路里攝取量，當他們因為某種原因而吃進超標的熱量時，例如實驗喝下兩大杯奶昔，他們便認為當日的節食努力告吹。這時候就會放縱自己去享受，甚至讓自己吃比原本超標的量還多得多的食物&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;延遲享樂 vs 不&lt;ul&gt;
&lt;li&gt;告訴自己「我待會再吃」對大腦的作用等同於「現在就吃」&lt;/li&gt;
&lt;li&gt;拒絕甜點需要意志力&lt;ul&gt;
&lt;li&gt;對於大腦來說，等一下顯然比永遠不來得輕鬆一點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;時間拉長，你的慾望降低，吃進的食物也變少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="-_1"&gt;結語 - 你可以更有意志力，只要你不拖延&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;減輕生活壓力的最佳方式就是停止搞砸生活&lt;ul&gt;
&lt;li&gt;你得好好規劃人生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自制力強的人花在拒絕慾望的時間少於其他人&lt;ul&gt;
&lt;li&gt;他們不會把意志力當成經常性策略&lt;/li&gt;
&lt;li&gt;他們妥善安排生活，所以能避免麻煩，避免生活出現需要意志力的事件&lt;/li&gt;
&lt;li&gt;他們用意志力來避免危機，而不是度過危機&lt;/li&gt;
&lt;li&gt;早在汽車故障錢就送車去保養，並遠離吃到飽的自助餐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;意志力的運用過程比結果重要&lt;ul&gt;
&lt;li&gt;如果你企圖抗拒誘惑、最後屈服，因為你曾經掙扎過，還是會耗損意志力，屈服並不會補充意志力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你必須隨時維持至少五年的籠統願景，然後訂出較具體的立即目標&lt;ul&gt;
&lt;li&gt;要知道你在當月要完成什麼，以及如何做到&lt;/li&gt;
&lt;li&gt;預留一些彈性，也要做好失敗的心理準備&lt;/li&gt;
&lt;li&gt;月底檢討時，要記得你&lt;strong&gt;不需要每一次都達成目標&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更重要的是，你的人生逐月進步&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;「在管理上，我們要求公司主管和其他員工訂出每週的優先目標，目標不能超過三個，小於三個也沒關係。我們每週逐一檢討上週的成果。如果三個目標中，你只完成一個或兩個，無妨，但在前三個目標未完成前，你不能進行其他目標，就這樣，這就是我們的管理方式。它很簡單，但能強迫你先處理最優先的事情，而且嚴格執行」&lt;/li&gt;
&lt;li&gt;正向拖延的力量&lt;ul&gt;
&lt;li&gt;等一下再享受&lt;/li&gt;
&lt;li&gt;把惡習拖延，最後可能就不會去做&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保存意志力的持久技巧：習慣&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Productivity"></category></entry><entry><title>解決更新 gcc 找不到 libgfortran.3.dylib (Octave,R)</title><link href="https://lee-w.github.io/posts/tech/2016/06/solve-libgfortran3dylib-not-found" rel="alternate"></link><published>2016-06-11T03:13:00+08:00</published><updated>2016-06-11T03:13:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-06-11:/posts/tech/2016/06/solve-libgfortran3dylib-not-found</id><summary type="html">&lt;p&gt;最近在 mac 上更新了 gcc 6 後，不管是開 Octave 還是 R&lt;br&gt;
都會出現以下的錯誤訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dyld: Library not loaded: /usr/local/lib/gcc/5/libgfortran.3.dylib
  Referenced from: /usr/local/Cellar/r/3.3.0/R.framework/Versions/3.2/Resources/lib/libR.dylib
  Reason: image not found
Trace/BPT trap: &lt;span class="m"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;p&gt;最近在 mac 上更新了 gcc 6 後，不管是開 Octave 還是 R&lt;br&gt;
都會出現以下的錯誤訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dyld: Library not loaded: /usr/local/lib/gcc/5/libgfortran.3.dylib
  Referenced from: /usr/local/Cellar/r/3.3.0/R.framework/Versions/3.2/Resources/lib/libR.dylib
  Reason: image not found
Trace/BPT trap: &lt;span class="m"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;p&gt;這是因為原本的 lib 會去找 /usr/local/lib/gcc/5/ 下的 lib&lt;br&gt;
但是更新過後已經被變成 /usr/local/lib/gcc/6/ 了&lt;br&gt;
所以只要從 &lt;code&gt;/usr/local/lib/gcc/5/&lt;/code&gt; 建立 soft link 到 &lt;code&gt;/usr/local/lib/gcc/6/&lt;/code&gt; 即可&lt;br&gt;
( 版本號則要根據自身 gcc 的版本來做修改 )&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ln -s /usr/local/lib/gcc/5/ /usr/local/lib/gcc/6/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Homebrew/legacy-homebrew/issues/39929"&gt;R and julia won't start after upgrade (perhaps gcc 5.1, Xcode 6.3.2, or Command Line Tools 6.3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="R"></category><category term="mac"></category></entry><entry><title>[Book] 最後的演講</title><link href="https://lee-w.github.io/posts/book/2016/06/the-last-lecture" rel="alternate"></link><published>2016-06-06T08:32:00+08:00</published><updated>2016-06-06T08:32:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-06-06:/posts/book/2016/06/the-last-lecture</id><summary type="html">&lt;p&gt;&lt;img alt="最後的演講" src="http://pic.eslite.com/Upload/Product/200806/m/633519138950888496.jpg"&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="最後的演講" src="http://pic.eslite.com/Upload/Product/200806/m/633519138950888496.jpg"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不論在工作上還是感情關係裡，就算自己居於主導地位，也絕對不能為所欲為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「就算你做在駕駛座上，也不表示你一定要輾過別人」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你發現自己某件事做得不好，可是卻沒有人告訴你，那可就糟了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你也許不喜歡聽到別人批評，可是你的批評者其實是在說他們仍然愛你，仍然關心你，希望你自己能夠變得更好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假動作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;讓孩子去參予組織化的運動，通常不是希望他們真的精通那項運動&lt;/li&gt;
&lt;li&gt;而是希望他們學到團隊合作、堅忍不拔、運動家精神、努力的價值，以及克服逆境的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阻礙我們前進的磚牆，不會無緣無故擋在我們前面。這種磚牆的存在目的不是為了把我們排除在外，而是要讓我們有機會證明自己多想要一件東西&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;計劃可以隨時改變，可是前提是必須先有計劃&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讓團隊不必花時間再猜測對方在想什麼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「你永遠不用擔心我在想些什麼。不論好壞，我都一定會讓你知道我的想法」&lt;/li&gt;
&lt;li&gt;「我如果沒說話，你就不必擔心」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讓別人把話說完&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要打斷別人的話。說話比較大聲或者比較快，不表示你的意見就比較好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不情不願或不真誠的道歉，通常比不道歉更糟糕，因為接受道歉的對方會覺得這種道歉是一種汙辱。草率的道歉就像是在傷口上灑鹽&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;典型惡例&lt;ul&gt;
&lt;li&gt;「很抱歉我的行為讓你受傷。」( 這麼說表示你有意安輔對方的情緒，可是明顯可以看出你根本不打算彌合傷口 )&lt;/li&gt;
&lt;li&gt;「我為我的行為道歉，但你必須為你的行為向我道歉」( 這不叫道歉，這叫作要求對方道歉 )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;適當的道歉要有的要素&lt;ul&gt;
&lt;li&gt;我做的事情是錯的&lt;/li&gt;
&lt;li&gt;我對自己傷害到你感到很難過&lt;/li&gt;
&lt;li&gt;我該怎麼做才能彌補過錯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開口問吧，不用怕。獲得肯定答案的機會，一定比你想像的還要頻繁。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Inspiring"></category></entry><entry><title>[Book] 演算法統治世界</title><link href="https://lee-w.github.io/posts/book/2016/05/automate-this-how-algorithms-came-to-rule-our-world" rel="alternate"></link><published>2016-05-04T12:00:00+08:00</published><updated>2016-05-04T12:00:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-05-04:/posts/book/2016/05/automate-this-how-algorithms-came-to-rule-our-world</id><summary type="html">&lt;p&gt;&lt;img alt="automate-this-how-algorithms-came-to-rule-our-world" src="http://pic.eslite.com/Upload/Product/201407/m/635416147773839348.jpg"&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="automate-this-how-algorithms-came-to-rule-our-world" src="http://pic.eslite.com/Upload/Product/201407/m/635416147773839348.jpg"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;演算法可以被視為由一連串二元決策構成的大型決策樹&lt;br&gt;
  我們所做的幾乎每件事，從開車到買賣股票乃至擇偶，都可以根據二元的輸入訊息被細分成一串二元決策&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;撰寫合乎常態分配的演算法比較容易，儘管歷史一再告訴世人，人類行為不能以正常視之，但一些駭客寧可只考慮常態分配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常態分配的假設可以在 100 天中賺 100 天，但是 1987 年的黑色星期五、1998 年的俄羅斯倒債危機以及 2010 年的閃電崩盤等都屬於第 101 天，可能毀了那些使用謹守高斯分配原則的演算法來做交易的人&lt;/li&gt;
&lt;li&gt;就連高斯本人早在 200 多年前都曾警告世人，常態分配也可能發生各種強度不一的錯誤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;創意工作者以為，緩緩蔓延的機器人革命碰不到他們，認為演算法無法創新，機器人不懂得創造&lt;br&gt;
  但我們現在漸漸知道，這些假設很危險&lt;/li&gt;
&lt;li&gt;為何要讓優秀的人背負例行公事、詢問他這個領域的專家每天面對的案例？&lt;ul&gt;
&lt;li&gt;把疑難雜症留給優秀的人，把其他問題交給演算法&lt;/li&gt;
&lt;li&gt;例如你上禮拜的感冒或者去年的鼻腔感染。演算法既便宜又精準，而且一天比一天聰明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Algorithm"></category></entry><entry><title>[Book] 內向者的優勢</title><link href="https://lee-w.github.io/posts/book/2016/04/leise-menschen-starke-wirkung" rel="alternate"></link><published>2016-04-19T11:55:00+08:00</published><updated>2016-04-19T11:55:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-04-19:/posts/book/2016/04/leise-menschen-starke-wirkung</id><summary type="html">&lt;p&gt;&lt;img alt="leise-menschen-starke-wirkung" src="http://pic.eslite.com/Upload/Product/201404/m/635319380267441240.jpg"&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="leise-menschen-starke-wirkung" src="http://pic.eslite.com/Upload/Product/201404/m/635319380267441240.jpg"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;與恐懼周旋&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有意識地去感知恐懼&lt;/li&gt;
&lt;li&gt;讓自己看清楚，為什麼你想做的事情是重要的，而且重要的即便心中恐懼也願意冒險&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;內向者經營單身生活的策略，下列是幾個值得參考的建議&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每年嘗試一種新嗜好&lt;/li&gt;
&lt;li&gt;每年兩次認識一個新地方&lt;/li&gt;
&lt;li&gt;每兩週可以參觀一下展覽，或看看電影、舞台劇或舞蹈表演&lt;/li&gt;
&lt;li&gt;每個月參與一場慶祝會或社交活動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;藉由親自會面建立起來的人脈，動輒需要一兩年的時間，才能成為固定成員，並與他人建立穩定的互動，而且前提還是你的確很積極，掛名成員是產生不了什麼實質的互動&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;請在時間管理中預留固定的時段給數位人際互動。你該定期活動，盡可能每週一次以上。你可以發表文章、確認你認為合適的互動請求、讀一讀網頁上的留言，若有必要則回應一下。&lt;strong&gt;這也表示：當你在進行其他活動時，不要因為一直顧著看推特的時間軸或臉書的留言而分心&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;當你身為會議主持人，請特別留意會場裡的內向者，他們可能需要較長的時間才願意表達意見，而且他們說起話來往往比外向的與會者小聲。設法讓這些內向者也能暢所欲言&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Emotion"></category></entry><entry><title>[Book] 隨機騙局</title><link href="https://lee-w.github.io/posts/book/2016/04/fooled-by-randomness" rel="alternate"></link><published>2016-04-05T14:02:00+08:00</published><updated>2016-04-05T14:02:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-04-05:/posts/book/2016/04/fooled-by-randomness</id><summary type="html">&lt;p&gt;&lt;img alt="fooled by randomness" src="http://pic.eslite.com/Upload/Product/201405/m/635359124106127500.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="fooled by randomness" src="http://pic.eslite.com/Upload/Product/201405/m/635359124106127500.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;序：不必把知識看得那麼重&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「有錢人想的跟你不一樣」點出百萬富翁跟一般人不同的一些特質&lt;ul&gt;
&lt;li&gt;韌性和勤勞&lt;ul&gt;
&lt;li&gt;就算所有的百萬富翁都是這樣的人，並不會使韌性跟勤勞的人變成百萬富翁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;百萬富翁共同的特質可能還有冒險犯難&lt;ul&gt;
&lt;li&gt;這是大獲成功的必要條件，也是失敗的必要條件&lt;/li&gt;
&lt;li&gt;要是對破產公民做出相同的研究，他們肯定也是喜愛冒險犯難&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;前言：雲中的清真寺&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所謂的「勇氣」可能是來自低估隨機性在某些事物佔有的份量&lt;ul&gt;
&lt;li&gt;經濟「冒險者」比較像是某種錯覺的受害者，他們低估可能的不利結果，結果過度樂觀和自信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;怪異的會計衡量方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;現實遠比俄羅斯輪盤惡毒&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，它射出致命子彈的次數相當少。如果把現實比喻為左輪手槍，那麼它的彈夾能裝上千發，而不是六發。&lt;/li&gt;
&lt;li&gt;試射了實際次都沒問題後，我們便會&lt;strong&gt;產生虛假的安全感&lt;/strong&gt;，忘了裡面還有一顆子彈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;副現象 (epiphenomenalism): 看著你的風險，你能有效的降低風險 ? 還是你因此給自己一種感覺，覺得你已經盡了本份 ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;從組織的觀點來看，風險經理的存在，和為了實際降低風險比較沒有關係，和將低風險的印象比較有關係&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;用數學沈思歷史&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在短暫的時間增量內，我們觀察到的是投資組合的變異性，不是報酬率。換言之，我們看到的是變異。一個人觀察到的，頂多就是變異和報酬的組合，不只是報酬&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;隨機性、胡說八道和科學知識份子&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我們可能不需要什麼事都那麼理性和科學，只有在會傷害我們和威脅我們生存的狀況下，才需要&lt;ul&gt;
&lt;li&gt;有趣的是，現代生活卻要我們做相反的事&lt;/li&gt;
&lt;li&gt;談到宗教和個人行為等事物，我們變得極其實務和知性&lt;/li&gt;
&lt;li&gt;談到由隨機性主宰的事物（e.g. 投資組合或不動產投資），卻盡可能的不用理性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="-"&gt;最不適者生存 - 進化有可能被隨機性愚弄嗎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所謂的最適者，可能是適應了現在的這一個樣本路徑&lt;ul&gt;
&lt;li&gt;而這種生物生存的越久不曾遇到稀有事件，他們就越脆弱&lt;/li&gt;
&lt;li&gt;如果時間無限延長，那麼稀有事件就會發生，於是物種會滅絕&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;進化的意思說只是應一個時間序列，而不是適應所有可能環境的平均值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_6"&gt;歸納的問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;下面的一段話是單純解讀過去的資料所發生的問題&lt;ul&gt;
&lt;li&gt;我剛對布希總統的一生進行完整的統計檢視。從五十八年來，接近二萬一千次的觀察值，發現他不曾一次死掉。所以我可以宣稱他將萬壽無疆，而且統計顯著性很高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當一個人使用的策略可能包含偏態，也就是大賠的機率低，小賺的機率高，則將贏的機率極大化，不會使競賽的期望值極大化&lt;ul&gt;
&lt;li&gt;如果你用的是俄羅斯輪盤式的策略，大賠的機率低，也就是每隔幾年才會使你破產，那麼幾乎所有樣本中，你都是贏家，除了你死掉的那年&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_7"&gt;維根斯坦的尺&lt;/h2&gt;
&lt;p&gt;除非你對尺的可靠度有信心，否則當你用尺去量桌子，你可能也同時用桌子在量尺&lt;/p&gt;
&lt;h2 id="_8"&gt;再談隨機性的好處&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一點小小的不確定性，可以讓我們當個足夠滿意者，而不是極大滿意者&lt;/li&gt;
&lt;li&gt;你的行為展現輕微的不可預測性，可以在發生衝突的情況保護自己&lt;ul&gt;
&lt;li&gt;如果你一定要被罵了十七次，才在第十八次生氣，這樣的行為就很容易被操縱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Other"></category></entry><entry><title>External.js - Load HTML in Reveal.js</title><link href="https://lee-w.github.io/posts/tech/2016/03/external-js-load-html-in-reveal-js" rel="alternate"></link><published>2016-03-23T01:23:00+08:00</published><updated>2016-03-23T01:23:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-03-23:/posts/tech/2016/03/external-js-load-html-in-reveal-js</id><summary type="html">&lt;p&gt;reavel.js 提供了 &lt;code&gt;data-markdown="example.md"&lt;/code&gt; 這個 tag 可以載入外部的 markdown&lt;br&gt;
卻沒提供可以載入 html 的 tag&lt;br&gt;
於是就有人寫了這個&lt;a href="https://github.com/calevans/external"&gt;External.js&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;reavel.js 提供了 &lt;code&gt;data-markdown="example.md"&lt;/code&gt; 這個 tag 可以載入外部的 markdown&lt;br&gt;
卻沒提供可以載入 html 的 tag&lt;br&gt;
於是就有人寫了這個&lt;a href="https://github.com/calevans/external"&gt;External.js&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;有了 External.js，就可以不用把所有的內容都寫在 &lt;code&gt;index.html&lt;/code&gt; 裡面&lt;/p&gt;
&lt;h1 id="install"&gt;Install&lt;/h1&gt;
&lt;h2 id="method1-download"&gt;Method1: Download&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;到 &lt;a href="https://github.com/calevans/external"&gt;external&lt;/a&gt; 下載&lt;/li&gt;
&lt;li&gt;把 extneral 裡面的 external 資料夾放到 plugin 裡面&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;index.html&lt;/code&gt; 中的 &lt;code&gt;Reveal.initalize&lt;/code&gt; 這個 block 加入下面的內容&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;plugin/external/external.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[data-external]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="method2-submodule"&gt;Method2: Submodule&lt;/h2&gt;
&lt;p&gt;不過為了讓他的更新也能被追蹤，我使用了 git submodule&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git submodule&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git submodule add https://github.com/calevans/external plugin/external
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;index.html&lt;/code&gt; 中的 &lt;code&gt;Reveal.initalize&lt;/code&gt; 這個 block 加入下面的內容&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;plugin/external/external/external.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[data-external]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;( 注意兩種方式加入的內容有些微的不同 )&lt;/p&gt;
&lt;h1 id="usage"&gt;Usage&lt;/h1&gt;
&lt;p&gt;之後就能使用 &lt;code&gt;data-external&lt;/code&gt; 這個 tag 來載入外部的 html&lt;/p&gt;
&lt;h2 id="indexhtml"&gt;原本的 index.html&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;data-external&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;module_01/index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="html"&gt;外部 html&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- module_01/index.html --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; This is external &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="html_1"&gt;載入後的 html&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;data-external&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;module_01/index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- module_01/index.html --&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; This is external &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Tech"></category><category term="JavaScript"></category><category term="reveal.js"></category></entry><entry><title>男子漢理論</title><link href="https://lee-w.github.io/posts/tech/2016/03/article-man-theory" rel="alternate"></link><published>2016-03-15T02:13:00+08:00</published><updated>2016-03-15T02:13:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-03-15:/posts/tech/2016/03/article-man-theory</id><summary type="html">&lt;p&gt;這篇文實在太有趣了，還是該留下來做個紀錄 XD&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這篇文實在太有趣了，還是該留下來做個紀錄 XD&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1 id="_1"&gt;男子漢理論&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;真正的男子漢 programmer 是不會用那些亂七八糟，花枝招展的，所謂整合開發環境。
真正的男子漢 programmer 就是直接用 emacs, 或是 vi 這些男子漢編輯器直接寫程式。
如果你不知道這是甚麼東東，簡單來說，就是男子漢用的”記事本”。
當然在花枝招展，看來很娘的 Wxxxxws下要找到這些男子漢編輯器有一定難度，
但這絕對難不倒一個真正的男子漢 programmer。

另外真正的男子漢也不會用那些亂七八糟，花枝招展的所謂應用程式寫網頁。
真正的男子漢就是直接用 emacs, 或是 vi 這些男子漢編輯器直接寫 HTML，
因為那些亂七八糟，花枝招展的所謂應用程式寫出來的網頁
加了一大堆亂七八糟的 tag 根本沒有人看得懂。

真正的男子漢也不會用那些亂七八糟，花枝招展的所謂應用程式寫論文。
真正的男子漢就是直接用 emacs, 或是 vi 這些男子漢編輯器直接寫 latex。
因為那些亂七八糟，花枝招展的所謂應用程式寫出來的論文，字型醜的要命，
圖還會亂跑，換一台電腦就換一個樣子，一點也不像男子漢做出來的東西。

最後你可以看出真正的男子漢 programmer 不管做什麼事，
都只用男子漢編輯器就能搞定，這就是成為男子漢 programmer 的重點。
當然最好還是用 ed 這種神物，只是現存看過 ed 的 programmer
可能比看過”真理”的煉金術士還少，在此就不苛求了。

--Re: 男子漢理論,pangfeng (P老師)@pangfeng, ptt2.cc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From &lt;a href="http://cpmarkchang.logdown.com/pages/about-me"&gt;MARK CHANG'S BLOG - About Me&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Inspiring"></category><category term="Vim"></category></entry><entry><title>[Book] 少，但是更好</title><link href="https://lee-w.github.io/posts/book/2016/03/essentialism" rel="alternate"></link><published>2016-03-11T14:29:00+08:00</published><updated>2016-03-11T14:29:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-03-11:/posts/book/2016/03/essentialism</id><summary type="html">&lt;p&gt;&lt;img alt="Essentialism" src="/images/books/zJS927h.jpg"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Weniger aber besser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;德語的 Less is more&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="Essentialism" src="/images/books/zJS927h.jpg"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Weniger aber besser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;德語的 Less is more&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;如何成為「精‧簡‧準」的人&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;專準主義 (Essentialism) 者之道摒棄「我們甚麼都可以做」&lt;ul&gt;
&lt;li&gt;而這需要費心去做出真正的取捨和艱難的決定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果你不替自己的生活排定優先次序，別人就會為你代勞&lt;/li&gt;
&lt;li&gt;彼得杜拉克 :「幾百年後，當以長遠的角度書寫我們這個時代的歷史時，歷史學者看見的最重要事件，很可能不是科技，不是網路，不是電子商務，而是人類形勢前所未有的改變。這是第一次─真的是史上頭一遭─有為數可觀且級數增加的人們&lt;strong&gt;擁有選擇&lt;/strong&gt;的餘地。這是第一次，他們將不得不管理自己。而社會對此毫無準備。」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;懂得取捨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「我要如何兩者兼顧 ?」&lt;ul&gt;
&lt;li&gt;不，那是非專準主義者的想法&lt;/li&gt;
&lt;li&gt;專準主義者會想「我想要哪一個問題」&lt;ul&gt;
&lt;li&gt;更審慎的做出取捨&lt;/li&gt;
&lt;li&gt;經濟學家 Thomas Sowell:「沒有解決方案。唯有取捨」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;專準主義者者視取捨位生活中固有的一部份&lt;ul&gt;
&lt;li&gt;不會問「我必須放棄什麼」&lt;/li&gt;
&lt;li&gt;而是「我該在哪方面全力以赴」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;玩樂&lt;/h2&gt;
&lt;p&gt;玩不只幫助我們，探索必要的事物。它本身就是不可或缺的事。&lt;/p&gt;
&lt;h2 id="_4"&gt;睡眠&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果對自己投資得不夠，這裡指的是我們的身心靈，我們便會損害用來做出最高貢獻的必備工具&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;非專準主義者&lt;/th&gt;
&lt;th&gt;專準主義者&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;少睡一小時等於多了一個小時的生產力&lt;/td&gt;
&lt;td&gt;多睡一個小時等於多了更有生產力的幾小時&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;睡眠是奢侈品&lt;/td&gt;
&lt;td&gt;睡眠是優先事項&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;睡眠滋生懶惰&lt;/td&gt;
&lt;td&gt;睡眠孕育創造力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;睡眠讓你無法「全部都做」&lt;/td&gt;
&lt;td&gt;睡眠能使新制做出最高程度的貢獻&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_5"&gt;嚴選&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?time_continue=60&amp;amp;v=1ehWlVeMrqw"&gt;No more yes. It's Either HELL YEAH! Or No&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;如果答案不是明確的好，那它就應該是不&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_6"&gt;釐清&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;普通&lt;/th&gt;
&lt;th&gt;具體&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;鼓舞人心&lt;/td&gt;
&lt;td&gt;願景 / 使命&lt;/td&gt;
&lt;td&gt;必要意圖 ( 只做出一個決定 )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;平凡無奇&lt;/td&gt;
&lt;td&gt;價值&lt;/td&gt;
&lt;td&gt;季目標&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;問「我們怎麼知道自己做到了 ?」&lt;ul&gt;
&lt;li&gt;e.g. 「消除世間的飢餓」 ⇔ 「位住在低久區的家庭打造一百五十間經濟實惠、環保，又能抵抗暴風的住家」(Make It Right)&lt;ul&gt;
&lt;li&gt;後者回答了「我們怎麼之道自己成功了」，而他也成功鼓舞人心&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_7"&gt;取消承諾&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;沉沒成本偏誤&lt;ul&gt;
&lt;li&gt;對已知虧本的生亦持續投入時間、金錢或精力的傾向&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免沉沒成本偏誤&lt;ul&gt;
&lt;li&gt;假設你還沒擁有它&lt;ul&gt;
&lt;li&gt;「如果我不是已經在這個專案投入這麼多，我現在會投入多少 ?」&lt;/li&gt;
&lt;li&gt;「如果我現在種指這個專案，這些時間金錢還能用來做甚麼 ?」&lt;/li&gt;
&lt;li&gt;「如果我沒有這樣東西，我願意付多少錢買它 ?」&lt;/li&gt;
&lt;li&gt;「如果我沒有這個機會，我願意為了得到它，做出多少犧牲 ?」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不介意停損&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_8"&gt;界限&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不推辭的成本往往更高，它會使我們在選擇生命中最重要的事情上變得無能為力&lt;ul&gt;
&lt;li&gt;找出那些你不該接受的絆腳石&lt;ul&gt;
&lt;li&gt;只要你覺得被某人的要求侵犯或欺騙&lt;/li&gt;
&lt;li&gt;它不見得會以某種極端的方式被你注意到。即使那只有一點惱怒，都是發現自己隱含界線的線索&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_9"&gt;進展&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;當我們從小地方著手並獎勵進展時，最後所達到的成就，將比訂下偉大、崇高卻往往遙不可及的目標時更大&lt;ul&gt;
&lt;li&gt;更棒的是，積極強化自身成孤的舉懂，能使從這個過程獲得更多的樂趣和滿足&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_10"&gt;心流&lt;/h2&gt;
&lt;p&gt;習慣的力量 ( 可以參考&lt;a href="https://lee-w.github.io/posts/book/2015/11/the-power-of-habit"&gt;「為什麼我們這樣生活，那樣工作」&lt;/a&gt;)&lt;/p&gt;</content><category term="Book"></category><category term="Productivity"></category></entry><entry><title>Reveal.js 安裝錯誤</title><link href="https://lee-w.github.io/posts/tech/2016/02/reveal-s-installation-error" rel="alternate"></link><published>2016-02-20T03:57:00+08:00</published><updated>2016-02-20T03:57:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-02-20:/posts/tech/2016/02/reveal-s-installation-error</id><summary type="html">&lt;p&gt;當我安裝步驟執行到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會跳出很多錯誤訊息&lt;/p&gt;
</summary><content type="html">&lt;p&gt;當我安裝步驟執行到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會跳出很多錯誤訊息&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;這才發現 Reveal.js 要用 python &amp;gt;= 2.5 and &amp;lt; 3.0.0&lt;br&gt;
而我預設的 python 是 python3.5&lt;br&gt;
所以只要像下面的指令把 python 指到 python2 就可以了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm install --python&lt;span class="o"&gt;=&lt;/span&gt;python2.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;--python=&lt;/code&gt; 後面是 python2 的執行擋，需要根據自己的設定做調整&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hakimel/reveal.js/"&gt;Reveal.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="JavaScript"></category><category term="reveal.js"></category></entry><entry><title>解決安裝 IRKernel 缺少 zmq.h</title><link href="https://lee-w.github.io/posts/tech/2016/02/resolve-irkernel-missing-zmqh" rel="alternate"></link><published>2016-02-20T03:42:00+08:00</published><updated>2016-02-20T03:42:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-02-20:/posts/tech/2016/02/resolve-irkernel-missing-zmqh</id><summary type="html">&lt;!--more--&gt;

&lt;h2 id="irkernel"&gt;安裝 IRKernel&lt;/h2&gt;
&lt;p&gt;進入 R 的命令列，輸入下面的指令&lt;br&gt;
就能安裝 IRKernel，以後就能在 jupyter 中使用 R&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;install.packages(c(&amp;#39;rzmq&amp;#39;,&amp;#39;repr&amp;#39;,&amp;#39;IRkernel&amp;#39;,&amp;#39;IRdisplay&amp;#39;),
                 repos = c(&amp;#39;http://irkernel.github.io/&amp;#39;, getOption(&amp;#39;repos&amp;#39;)))
IRkernel::installspec()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt;錯誤訊息&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;interface.cpp:22:10: fatal error: &amp;#39;zmq.h&amp;#39; file not found
#include &amp;lt;zmq.h&amp;gt;
         ^
1 error generated.
make: *** [interface.o …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;!--more--&gt;

&lt;h2 id="irkernel"&gt;安裝 IRKernel&lt;/h2&gt;
&lt;p&gt;進入 R 的命令列，輸入下面的指令&lt;br&gt;
就能安裝 IRKernel，以後就能在 jupyter 中使用 R&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;install.packages(c(&amp;#39;rzmq&amp;#39;,&amp;#39;repr&amp;#39;,&amp;#39;IRkernel&amp;#39;,&amp;#39;IRdisplay&amp;#39;),
                 repos = c(&amp;#39;http://irkernel.github.io/&amp;#39;, getOption(&amp;#39;repos&amp;#39;)))
IRkernel::installspec()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt;錯誤訊息&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;interface.cpp:22:10: fatal error: &amp;#39;zmq.h&amp;#39; file not found
#include &amp;lt;zmq.h&amp;gt;
         ^
1 error generated.
make: *** [interface.o] Error 1
ERROR: compilation failed for package &amp;#39;rzmq&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_2"&gt;解決&lt;/h2&gt;
&lt;p&gt;這時候就要將缺少的套件補齊&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew install czmq zmq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再執行一次最上面的安裝指令&lt;/p&gt;
&lt;p&gt;接著在指令列執行輸入下面的指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;jupyter qtconsole --kernel&lt;span class="o"&gt;=&lt;/span&gt;ir
jupyter console --kernel&lt;span class="o"&gt;=&lt;/span&gt;ir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安裝成功後就可以看到&lt;br&gt;
&lt;img alt="R_in_jupyter" src="/images/posts-image/2016-02-20-resolve-irkernel-missing-zmqh/pWf6j0q.png"&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/IRkernel/IRkernel/issues/50"&gt;Failed to install rzmq #50&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/IRkernel/IRkernel"&gt;IRkernel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="R"></category><category term="Jupyter"></category></entry><entry><title>[Book] 蘋果橘子經濟學</title><link href="https://lee-w.github.io/posts/book/2016/02/freakonomics" rel="alternate"></link><published>2016-02-09T11:52:00+08:00</published><updated>2016-02-09T11:52:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-02-09:/posts/book/2016/02/freakonomics</id><summary type="html">&lt;p&gt;&lt;img alt="freakonomics" src="http://pic.eslite.com/Upload/Product/201001/m/633996933876873707.JPG"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="freakonomics" src="http://pic.eslite.com/Upload/Product/201001/m/633996933876873707.JPG"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;誘因&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;誘因&lt;ul&gt;
&lt;li&gt;促使人多做好事、少做壞事的手段&lt;/li&gt;
&lt;li&gt;多數誘因並非自然發生，而是由某些人（e.g. 經濟學者、政治人物或父母）所發明設計&lt;/li&gt;
&lt;li&gt;這樣的誘因主要分為經濟、社會與道德，不過單一誘因通常三者兼備&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;托兒所常有家長遲到接小孩的問題。如果我們提出遲到十分鐘以上的人要罰三美元，結果會如何呢？

遲到的人竟然大幅增加了！
因為這是用經濟誘因（三美元）取代道德誘因（愧疚感），而低額的罰款似乎也在告訴家長這不是一件很嚴重的事
然而很有趣的是，之後取消了罰款制度，遲到的人數並未因此減少
因為他們遲到不用罰款，也不再覺得於心不安
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;如果捐血可以得到一些錢，是否會增加捐血的人數呢？

肯定會的
那是要增加到 50 元、500 元或甚至 5000 元呢？
然而也會讓有些事情變得不同，每項誘因都有黑暗的一面
如果 500cc 的血值 5000 元，可能會有人偷採別人的血，或用豬血混充
不論誘因如何，總會有不誠實的人想盡各種辦法來謀取利益
這樣的欺騙是一種本能的經濟行為：以更少的代價來獲得更多
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_2"&gt;資訊&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在很多狀況下，與專家面對面接觸可能使資訊不對稱更為嚴重 —— 專家更可以利用資運優勢讓你覺得自己愚蠢無知&lt;/li&gt;
&lt;li&gt;就算資訊不真正的存在，只要別人認定你擁有資訊，這樣的假定就能有很大的影響力&lt;/li&gt;
&lt;li&gt;資訊犯罪的特點之一就是犯行曝光者很少。資訊犯罪會浮上檯面，必然是因為發生重大事件&lt;/li&gt;
&lt;li&gt;專家透過資訊讓人們害怕就能產生很巨大的操控力&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;因果關係&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;美國殺人案比率偏高，部分要歸咎於槍枝取得太容易。研究結果的確也支持這樣的說法
不過槍枝並非唯一的原因
以瑞士為例，政府發給每名成年男子一把步槍作為民兵服役用，而且可以存放家中
瑞士擁有了相當高的武器持有率，卻被認為幾乎是最安全的地方
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我們習慣把因果關係連結到周遭可以實際接觸戶感受的事物上，而不是遙遠或不易理解的狀況&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我們尤其相信短期的因果關係，你的朋友被蛇咬了一口，之後死了&lt;/li&gt;
&lt;li&gt;我們會推論蛇咬是他的死因&lt;/li&gt;
&lt;li&gt;這種推論大多數時候是正確的&lt;/li&gt;
&lt;li&gt;然而談到因果關係，這種簡單直接的思考往往存有陷阱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;就算兩件事相關，也不一定有因果關係。只代表他們之間存在某種關係&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假設這兩件事是 X, Y，可能Ｘ導致Ｙ，也可能Ｙ導致Ｘ，甚至是另一個因素Ｚ同時影響Ｘ、Ｙ    - 回歸分析所能顯示的是相關性，但無法證明因果性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Economics"></category></entry><entry><title>[Book] 每天最重要的兩小時</title><link href="https://lee-w.github.io/posts/book/2016/01/two-awesome-hours" rel="alternate"></link><published>2016-01-10T02:31:00+08:00</published><updated>2016-01-10T02:31:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-01-10:/posts/book/2016/01/two-awesome-hours</id><summary type="html">&lt;p&gt;&lt;img alt="Two Awesome Hours" src="/images/books/KQpJ2Gh.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="Two Awesome Hours" src="/images/books/KQpJ2Gh.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;在日常事務中辨識每個決定點&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;遇到決定點（一個事件結束或被打斷的時候）的時候，花五分鐘的思考再進行下一件事&lt;ul&gt;
&lt;li&gt;看似浪費了這五分鐘，實際上卻是有意識的決定該做的事，讓接下來時間運用得更有效率&lt;/li&gt;
&lt;li&gt;如果總以「效率」為理由，略過這些決定點，隨便找一件事做，最後會落入事情做不完的迴圈，而做的那些事很可能都不是最重要或最適合的，這樣想想反而損失了更多的時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我們常常面對了很多「緊急」的事，然後那些「重要，但不急迫」的事往後放，漸漸的我們就會忘記處理這些真正重要的事，最後這些事情就變得「重要且急迫」&lt;/li&gt;
&lt;li&gt;利用決定點的秘訣&lt;ul&gt;
&lt;li&gt;珍惜決定點&lt;/li&gt;
&lt;li&gt;事先計劃在決定點要做的事&lt;/li&gt;
&lt;li&gt;在沒意識決定接下來該做的事前，別急著做下件事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;計劃「不要做 ...」通常會不成功，應該要計畫「如果 ... 就 ...」&lt;ul&gt;
&lt;li&gt;前者是抑制衝動，後者是實際選擇採取的行動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;管理你的心智能量，善用好情緒跟壞情緒&lt;/h2&gt;
&lt;p&gt;做決定會導致心智疲倦，即使不是很大的決定&lt;/p&gt;
&lt;h3 id="_3"&gt;負面情緒&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;生氣： 當你知道某件事是對的，卻因為害怕風險而不做，這時候激將法就是很有用的&lt;/li&gt;
&lt;li&gt;悲傷： 悲傷讓我們比較公平不自私，傾向慎重，也會努力讓自己傳遞的訊息有說服力&lt;/li&gt;
&lt;li&gt;焦慮： 焦慮讓我們高度警覺、隨時能做出反應&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當然這些不是在鼓勵負面情緒，而是提出在特定情況下，負面情緒也可能有用&lt;/p&gt;
&lt;h3 id="_4"&gt;正面情緒&lt;/h3&gt;
&lt;p&gt;好心情有助於創意、迅速做出決定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主動讓自己進入正面情緒&lt;ul&gt;
&lt;li&gt;放鬆看幾分鐘的書&lt;/li&gt;
&lt;li&gt;做點運動&lt;/li&gt;
&lt;li&gt;回想開心的事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;減輕心智疲勞&lt;/h3&gt;
&lt;p&gt;學會辨識那些最可能顯著消耗心智能量的事物&lt;br/&gt;
從事重要的工作前，避免去做那些消耗心智能量的事&lt;/p&gt;
&lt;p&gt;那麼該如何判斷的？&lt;br/&gt;
如果這件事做完後會感到疲倦，那在某種程度上都已經使用到自制力&lt;/p&gt;
&lt;p&gt;實際上我們不可能完全避開消耗心智的事，也不實際&lt;br/&gt;
我們不是機器，不用隨時都表現得很好&lt;br/&gt;
&lt;strong&gt;與其讓自己時時刻刻表現傑出，應該策略性的選擇待辦事項的執行順序&lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;在大腦不疲憊的時候，創造出最高效率的時段，最優異的完成重要的事物&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下列四點是減輕心智疲勞的策略&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;早上優先完成最重要的工作，避免腦力被小決定消耗&lt;ul&gt;
&lt;li&gt;這裡指的優先，指的是第一件事，而且是在檢查任何訊息或查看任何媒體前&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;區分待辦事項，「重要」、「創意」、「雜項」&lt;ul&gt;
&lt;li&gt;將雜項安排在心智力最弱的時候&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;偶爾試著只在下午花一個小時看郵件和回郵件&lt;/li&gt;
&lt;li&gt;在非常重要或忙碌的工作日前一晚，先做出一些決定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果心智已經十分疲勞了，下列三點可以讓你恢復精神&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;緩慢地深呼吸&lt;/li&gt;
&lt;li&gt;設法讓自己大笑&lt;/li&gt;
&lt;li&gt;小睡十分鐘，研究指出十分鐘可以回復人體的認知功能，大約可維持兩小時半&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;好好選擇在何時有巔峰表現，並且大方做出其他犧牲&lt;br/&gt;
&lt;strong&gt;為了好好善用心智能量，應該把少數的事做到優異，而不是企圖做完所有的事&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="_6"&gt;調整對抗分心的方法，學會放自己一馬&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;靜坐，有助於鍛鍊專注力&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;沒關係就讓大腦分心吧&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;人類的注意力系統天生就會刷新，以對抗臨時產生的事件&lt;ul&gt;
&lt;li&gt;但別讓思緒回不來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;下列不會造成認知能力的沈重負擔，都是分心時可以試試的&lt;ul&gt;
&lt;li&gt;欣賞景色&lt;/li&gt;
&lt;li&gt;簡單收拾桌面&lt;/li&gt;
&lt;li&gt;聽聽音樂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;而避免做以下的事，因為他們會讓你心智疲勞&lt;ul&gt;
&lt;li&gt;歸檔文件&lt;/li&gt;
&lt;li&gt;閱讀新聞、動態&lt;/li&gt;
&lt;li&gt;回覆電子郵件&lt;/li&gt;
&lt;li&gt;做有難度的解謎，如填字遊戲或數學遊戲&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果想長時間持續做一件事，不要盲目地對抗分心，但也別盲目的屈服&lt;ul&gt;
&lt;li&gt;當你的心思漫遊時，它只是需要一分鐘做一些其他事，想要提神或更新資訊，讓它去吧&lt;/li&gt;
&lt;li&gt;但不要轉換去做別的事務&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_7"&gt;掌握運動和飲料的訣竅，你就能表現得出色&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;曼德拉：「我發現，在身體狀況良好的情況下，我可以把工作做得更好、思考更清楚。因此，鍛鍊身體變成我生活中必不可少的紀律之一」&lt;/li&gt;
&lt;li&gt;做完溫和的運動後，能有效提升正面情緒&lt;ul&gt;
&lt;li&gt;然而如果是較劇烈或長時間的運動，這方面的效果反而沒有那麼大&lt;/li&gt;
&lt;li&gt;那麼何謂「適量」?&lt;ul&gt;
&lt;li&gt;20~30 分鐘的高強度運動（呼吸有點喘、流了很多汗）&lt;/li&gt;
&lt;li&gt;30~40 分鐘的中等強度運動（稍微出汗，但離極限還有一段距離）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;運動就像是重設鈕，是改善心智表現有效且快速的策略&lt;ul&gt;
&lt;li&gt;當感到精神不濟、無法專注，出去辦公室走一走&lt;/li&gt;
&lt;li&gt;在令人感到焦慮的會議前，適量運動&lt;/li&gt;
&lt;li&gt;當天有特別消耗心力的事務時，當天早上做點運動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當你在必須處於最佳狀態，而又一、兩小時沒喝水，趕快去喝點水吧，不要低估一杯水在保持心智活力的效用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;咖啡因&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;攝取咖啡因的同時，最好再加上一點其他食物&lt;ul&gt;
&lt;li&gt;如果只是黑咖啡，只會在半小時後提振精神，之後可能會令你感到更疲倦，甚至提高敵意&lt;/li&gt;
&lt;li&gt;如果混著其他東西，能使咖啡因的正面作用持續更久（只加糖也不夠）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多少咖啡因含量才有提振生產力的效益呢？&lt;ul&gt;
&lt;li&gt;自己嘗試吧，因人而異&lt;/li&gt;
&lt;li&gt;「所有的東西都是毒物，沒有東西是無毒的。唯有適當的劑量能使一項東西變成不是毒物」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;咖啡因要三十分鐘後才會產生效果，在此之前請不要再喝，否則再感受到它的助益前，會先感受到它導致的焦慮&lt;ul&gt;
&lt;li&gt;即使在你很累的時候，也只應該攝取正常的量&lt;/li&gt;
&lt;li&gt;如果咖啡因沒辦法提升你的注意力，喝再多可能也沒用，請考慮小睡一下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_9"&gt;噪音、光線、雜物？自己動手打造最有益的工作環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安靜是最有助益的工作環境&lt;ul&gt;
&lt;li&gt;聽音樂雖然能產生正面情緒，但在也會降低專注力上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;桌邊的雜亂會影響專注力&lt;ul&gt;
&lt;li&gt;因為桌上的那些東西都會使你分心&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_10"&gt;總結&lt;/h2&gt;
&lt;p&gt;看完這本書後，不要再想盡辦法擠出更多時間工作，而是試著去調整作法，讓自己每天都能有穩定高工作成效的時段，留一點時間來品味生活&lt;/p&gt;</content><category term="Book"></category><category term="Productivity"></category></entry><entry><title>在 mac 上安裝 gcc</title><link href="https://lee-w.github.io/posts/tech/2016/01/install-gcc-on-mac" rel="alternate"></link><published>2016-01-06T06:40:00+08:00</published><updated>2016-01-06T06:40:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-01-06:/posts/tech/2016/01/install-gcc-on-mac</id><summary type="html">&lt;p&gt;最近用 brew 來安裝 gcc 5.3，一直卡在 &lt;code&gt;make --bootstrap&lt;/code&gt;&lt;br&gt;
放了幾個小時還是停在這&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近用 brew 來安裝 gcc 5.3，一直卡在 &lt;code&gt;make --bootstrap&lt;/code&gt;&lt;br&gt;
放了幾個小時還是停在這&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;之後才查到，要用 xcode 的命令來安裝&lt;br&gt;
&lt;code&gt;xcode-select --install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;主要是因為 homebrew 下載的是還沒 compile 過的版本&lt;br&gt;
而 compile gcc 需要非常長的時間&lt;br&gt;
根據 Reference 中的文章，至少要超過 45 分鐘 ( 雖然我放了一天還是沒好 )&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/24966404/brew-install-gcc-too-time-consuming"&gt;brew install gcc too time consuming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/788256/brew-install-gcc-mac-os-10-9-mavericks"&gt;brew install gcc /Mac OS 10.9 Mavericks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="C++"></category><category term="mac"></category><category term="Deprecated"></category></entry><entry><title>[Book] IDEA 物語</title><link href="https://lee-w.github.io/posts/book/2016/01/the-art-of-innovation" rel="alternate"></link><published>2016-01-01T11:39:00+08:00</published><updated>2016-01-01T11:39:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-01-01:/posts/book/2016/01/the-art-of-innovation</id><summary type="html">&lt;p&gt;&lt;img alt="the-art-of-innovation" src="http://im1.book.com.tw/image/getImage?i=http://www.books.com.tw/img/001/018/29/0010182963.jpg&amp;amp;v=3c3d169c&amp;amp;w=348&amp;amp;h=348"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="the-art-of-innovation" src="http://im1.book.com.tw/image/getImage?i=http://www.books.com.tw/img/001/018/29/0010182963.jpg&amp;amp;v=3c3d169c&amp;amp;w=348&amp;amp;h=348"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;創新始於雙眼&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;跳脫慣有的節奏，到國外旅行、新運動、體驗新活動，創新就是從這些地方開始的&lt;/li&gt;
&lt;li&gt;不管藝術、科學或商業，靈感通常來自&lt;strong&gt;親身體驗&lt;/strong&gt;&lt;br/&gt;
  即使是網路時代，地理位置依然重要&lt;br/&gt;
  這就是為什麼高科技發源地是矽谷不是康乃狄克州  &lt;/li&gt;
&lt;li&gt;「當個左撇子」哲學： 我們應該關懷消費者的需要，即使是習慣不同於一般人的消費者&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;完美的動腦會議&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;動腦會議&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;60~90 分鐘就綽綽有餘，不要耗掉一整個早上或下午&lt;/li&gt;
&lt;li&gt;不用簡報&lt;/li&gt;
&lt;li&gt;不用覺得像是工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扼殺動腦會議的六大計畫&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;老闆率先發言&lt;/li&gt;
&lt;li&gt;輪流發言&lt;/li&gt;
&lt;li&gt;專家至上&lt;/li&gt;
&lt;li&gt;異地開會&lt;/li&gt;
&lt;li&gt;不准有蠢點子&lt;/li&gt;
&lt;li&gt;勤做筆記&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;活力團隊創造優質企業&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Francis Jehl: 「愛迪生實際上是眾人之力的集合詞」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;孤獨天才的傳說是阻礙公司創新與創造力的絆腳石&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boston Phiharmonic 的指揮 Benjamin Zander 在上課的第一天告訴學生，每個人的成績都會是Ａ，唯一的條件只有，他們必須在學期中告訴他自己憑什麼得Ａ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立學生信心&lt;/li&gt;
&lt;li&gt;學生為了得到Ａ努力&lt;/li&gt;
&lt;li&gt;比傳統由老師評分給Ａ，學生為了得到自己心中的Ａ付出更多的努力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每個人都應該有表演的機會，每個人的立足點是平等的，然後接受各種挫折的機會&lt;br/&gt;
  IDEO 通常會讓新人在新專案中擔任吃重的角色，甚至負責整個專案&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;原型製造是創新的捷徑&lt;/h2&gt;
&lt;p&gt;使用自動提款機時，如果有人在旁邊常會令我們感到不自在甚至害怕&lt;br/&gt;
所以當 IDEO 接到這個銀行專案時，先觀察消費者使用自動提款機的行為，然後腦力激盪各種可能的方案，包括昂貴的攝影機&lt;br/&gt;
結果發現，只要在自動提款機上頭裝上一個 1.8 美元的魚眼睛，就有良好的效果&lt;br/&gt;
當然，也可以找出更高科技、更貴的解決方法&lt;br/&gt;
但製作原型後能提醒你，有時候最簡單、便宜的方式往往也是最有效的方案&lt;/p&gt;
&lt;h2 id="_5"&gt;跨越障礙&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;海洋和文化差異都是難以改變的巨大障礙，手機這類高科技消費性產品，之所以能大舉入侵各種不同文化並不令人意外，因為大家對手機沒有歷史的情節或傳統的包袱&lt;br/&gt;
  然而，像家具或廚具這類有悠久傳統的產品，便問題重重。&lt;/li&gt;
&lt;li&gt;除了用起來好用以外，還要看起來好用&lt;/li&gt;
&lt;li&gt;真正優良的設計來自和人們的接觸&lt;/li&gt;
&lt;li&gt;人們對改變的容忍程度沒有一個準。但如果你執意要改變一種大家鍾愛的儀式，那將會吃力不討好&lt;ul&gt;
&lt;li&gt;易碎的軟酒瓶塞就是個好例子，因為每個人都認為高級酒要用好的軟木塞，即時這絕對不是保持好酒品質最好的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不能忽略傳統到創新之間的橋樑，否則消費者會不知道這是什麼產品&lt;/li&gt;
&lt;li&gt;即使是一項史無前例的重大創新，還是得具備傳教士的銷售精神&lt;/li&gt;
&lt;li&gt;產品的價值固然重要，但真正對潛在客戶和消費者銷售的，還有設計過的使用經驗&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Design"></category></entry><entry><title>[Book] 行銷前必修的購物心理學</title><link href="https://lee-w.github.io/posts/book/2016/01/decoded" rel="alternate"></link><published>2016-01-01T03:16:00+08:00</published><updated>2016-01-01T03:16:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2016-01-01:/posts/book/2016/01/decoded</id><summary type="html">&lt;p&gt;&lt;img alt="decode" src="http://im1.book.com.tw/image/getImage?i=http://www.books.com.tw/img/001/061/88/0010618819.jpg&amp;amp;v=529dcf77&amp;amp;w=348&amp;amp;h=348"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="decode" src="http://im1.book.com.tw/image/getImage?i=http://www.books.com.tw/img/001/061/88/0010618819.jpg&amp;amp;v=529dcf77&amp;amp;w=348&amp;amp;h=348"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="anchoring"&gt;定錨 (anchoring)&lt;/h2&gt;
&lt;p&gt;Steve Jobs 在推出 iPad 的時候說「我們應該給他設定何種價格？如果你聽信自以為聰明的人，我們會把它的價格訂在 1000 美元以下」&lt;br/&gt;
螢幕出現了 999，然後「我很高興地向大家宣佈，iPad 的起價不是 999 美元，而是只要 499 美元」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這麼做降低了知覺成本，因為已經被一開始的 999 給定錨了。第二次的價格就會被拿來跟第一次的錨比較&lt;/li&gt;
&lt;li&gt;另外，他沒有拿來跟筆電比較，維護了產品的獨特性，也不減少筆電的行銷&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="-"&gt;「價值 - 成本」是相對的&lt;/h2&gt;
&lt;p&gt;下面三種，哪種會最多人訂閱？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;電子版       59.00 美元&lt;/li&gt;
&lt;li&gt;紙本         125.00 美元&lt;/li&gt;
&lt;li&gt;紙本 + 電子版 125.00 美元&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;答案是「紙本 + 電子報」，紙本則不被考慮&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那下面兩種呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;電子版        59.00 美元&lt;/li&gt;
&lt;li&gt;紙本 + 電子版 125.00 美元&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;只訂電子版的大大的增加了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看似沒用的「紙本」選項，實際上很有用，影響了「價值 - 成本」關係的計算&lt;br/&gt;
我們必須凸顯出人們正在尋找的那個價值，而且這個價值必須要能讓系統一偵測和知覺到&lt;/p&gt;
&lt;h2 id="-_1"&gt;購買決策： 「淨值 ＝ 報償 - 痛苦」，淨值越高帶來越大的購買&lt;/h2&gt;
&lt;h3 id="_1"&gt;如何提升淨值？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;價值 ( 報償 )&lt;ul&gt;
&lt;li&gt;外顯價值&lt;/li&gt;
&lt;li&gt;內隱價值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;成本 ( 痛苦 )&lt;ul&gt;
&lt;li&gt;外顯成本 ( 財務 )&lt;/li&gt;
&lt;li&gt;內隱成本 ( 行為 )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt;知覺流暢性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果健身房要你每年付 600 英鎊年費或每月付 50 英鎊，哪個容易讓你頻繁地去健身房？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;答案是 50 英鎊的月費&lt;/li&gt;
&lt;li&gt;為每次付費後都會特別有感覺。費用就會變得具體&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;「有巧克力的健康天然食品」和「內含天然成分的巧克力」，哪個比較受歡迎呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「內含天然成分的巧克力」&lt;/li&gt;
&lt;li&gt;消費者買巧克力可不是想獲取健康養分，要先滿足消費者的基本目標 - 大快朵頤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Just Noticeable Difference （恰辨差）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;750 萬畫素的照相功能才能給消費者帶來有差別的感受&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Sales"></category></entry><entry><title>[Book] 為什麼我們這樣生活，那樣工作 ?</title><link href="https://lee-w.github.io/posts/book/2015/11/the-power-of-habit" rel="alternate"></link><published>2015-11-30T05:43:00+08:00</published><updated>2015-11-30T05:43:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-11-30:/posts/book/2015/11/the-power-of-habit</id><summary type="html">&lt;p&gt;&lt;img alt="The Power of Habit" src="/images/books/Mo2J3YW.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="The Power of Habit" src="/images/books/Mo2J3YW.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Wiliam James: 「我們這輩子所做所為均已定型，一切不過是習慣的總和」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我們看似的深思熟慮，其實常常都只是因為習慣&lt;/li&gt;
&lt;li&gt;2006 年杜克大學的論文提出，人們每天的活動中，40% 是習慣使然，而非決定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;習慣：刻意或深思後而做了選擇，過了一段時間後，不經思考卻依然繼續、往往每天在做的行為。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g., 早餐吃什麼？ 什麼時候去跑步？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;大腦的渴求&lt;/h2&gt;
&lt;h3 id="_2"&gt;養成新的習慣&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;找出簡單又醒目的提示訊號&lt;/li&gt;
&lt;li&gt;清楚界定獎籌內容&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Examples&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;白速得牙膏&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;牙齒上的黏斑&lt;/li&gt;
&lt;li&gt;一口白牙&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;慢跑習慣&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下班&lt;/li&gt;
&lt;li&gt;無罪惡感地放鬆休息&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cont"&gt;養成新的習慣 (Cont.)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;提示&lt;/li&gt;
&lt;li&gt;慣性行為 （習慣）&lt;/li&gt;
&lt;li&gt;獎籌&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創造渴望 （之前沒提到的）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;電腦或手機的提示音響起&lt;/code&gt; (1)，&lt;code&gt;習慣打開訊息&lt;/code&gt; (2)，&lt;code&gt;以便自己可以有短暫的分心&lt;/code&gt; (3)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;如果這份期待跟渴望沒被滿足，就會讓人充滿焦躁不安&lt;/code&gt; (4)&lt;/li&gt;
&lt;li&gt;其實這些訊息可能根本無關緊要&lt;/li&gt;
&lt;li&gt;所以可以用關掉手機或 Do Not Disturb 來關閉提示訊號，就能專心工作了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你想養成每天晨跑的習慣&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡單的提示 (e.g. 早餐前綁好鞋帶、把慢跑鞋擺在床邊 )&lt;/li&gt;
&lt;li&gt;清楚的獎籌 (e.g. 中午大吃一頓、記錄慢跑里程的成就感、腦內啡的分泌 )&lt;/li&gt;
&lt;li&gt;除此之外還必須要讓大腦對獎籌有期待才有辦法養成習慣 (e.g. 渴望這份成就感或腦內啡 )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_3"&gt;渴望的養成&lt;/h3&gt;
&lt;p&gt;渴望是建立全新慣性模式很重要的一環&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想建立新的飲食習慣嗎？&lt;ul&gt;
&lt;li&gt;成功節食的人通常有吃早餐的習慣，而成功減重的人另外還會預設獎籌，告訴自己只要嚴守節食計畫就能得到獎籌&lt;/li&gt;
&lt;li&gt;獎籌必須經過仔細挑選，所以誘惑或讓人分心的事出現時，才能不為所動，專注於對獎籌的渴望&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;扭轉習慣的黃金律&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;沿用相同的提示訊號和獎籌，加入新的慣性行為&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;改變舊習，和培養新習慣不同&lt;br/&gt;
  必須同時顧及根深柢固的舊渴望&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只要察覺習慣的運作方式，以及清楚知道提示訊息和獎籌是什麼，就成功一半了 ( 反轉訓練 )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="example"&gt;Example&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;假設你想戒掉上班吃點心的習慣&lt;ul&gt;
&lt;li&gt;你是為了什麼吃點心？&lt;ul&gt;
&lt;li&gt;為了消除飢餓？&lt;/li&gt;
&lt;li&gt;為了擺脫無聊？&lt;/li&gt;
&lt;li&gt;或只是短暫放鬆 ?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果只是短暫放鬆，上網三分鐘，散個步都是可以達到的目的，但那卻不會讓你變胖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_5"&gt;相信&lt;/h3&gt;
&lt;p&gt;還有很重要的一點，你必須相信改變是會成真的&lt;br/&gt;
戒酒無名會就是仰賴團體的力量，讓個體學習相信&lt;br/&gt;
而在團體中，人比較容易去相信&lt;/p&gt;
&lt;h3 id="_6"&gt;總結&lt;/h3&gt;
&lt;p&gt;想改變習慣，要&lt;strong&gt;找到替代舊習慣的行為模式&lt;/strong&gt;&lt;br/&gt;
如果能的話，加入某個互助團體，跟著大家一起努力改掉舊習，成功的機率會大增&lt;br/&gt;
&lt;strong&gt;必須相信人可以改變&lt;/strong&gt;。而相信得靠他人幫忙，即使只是兩人的團體也沒關係&lt;/p&gt;
&lt;h2 id="_7"&gt;星巴克讓人成功的習慣&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;意志力不是一種技能，比較像是一種肌肉，用得越多就會越累，所以還要用在其他事情上面的時候就會剩下比較少&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;意志力是可以訓練的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這就是為什麼讓孩子上鋼琴課或參加運動是重要的。不是一定要培養這些技能，而是強迫自己練習和運動的過程，增加自我規範的力量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;星巴克的員工手冊詳細地寫出員工遇到困難時應該採取什麼樣的措施&lt;br/&gt;
  提供員工意志力的習慣迴路，讓他們知道如何處理不愉快的情況&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_8"&gt;危機就是轉機&lt;/h2&gt;
&lt;p&gt;危機是非常珍貴的契機，有智慧的領導者通常會故意延長危機感，讓大家正視問題&lt;/p&gt;
&lt;h2 id="_9"&gt;連鎖零售商搶先知道你要什麼&lt;/h2&gt;
&lt;p&gt;以推銷新歌的例子 ( 兩首舊歌中間夾一首新歌 )&lt;br/&gt;
如果你能&lt;strong&gt;用舊習慣包裝新東西&lt;/strong&gt;，就能讓大眾比較接受新東西。&lt;/p&gt;
&lt;h2 id="_10"&gt;蒙哥馬利公車抵制事件&lt;/h2&gt;
&lt;p&gt;格蘭若維特發現如果&lt;strong&gt;要找到工作，弱連結的點頭之交時常比強連結的朋友更為重要&lt;/strong&gt;，因為弱連結可以讓我們進入我們不屬於的社交網路。&lt;br/&gt;
我們隨時都在跟親密的朋友相處，他們聽到新的機會時，我們大概也已經知道&lt;br/&gt;
另一方面，弱連結則可以告訴我們，我們原本不知道的&lt;/p&gt;
&lt;h2 id="_11"&gt;自由意志的神經學&lt;/h2&gt;
&lt;p&gt;習慣是讓我們能「第一次做一件困難的事，但很快那件事就會越來越簡單，最後有了充分的練習後，就可以半機械式地做下去，或是幾乎不需要任何的意識」&lt;br/&gt;
人們會朝他們練習的方式前進，就像一張紙，一旦被摺過，之後就容易折成相同的摺&lt;/p&gt;
&lt;h2 id="_12"&gt;附錄：習慣改造指南&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;方法架構&lt;ul&gt;
&lt;li&gt;認出慣性行為&lt;/li&gt;
&lt;li&gt;做實驗找出獎勵&lt;ul&gt;
&lt;li&gt;那些造成習慣的渴望&lt;/li&gt;
&lt;li&gt;用不同的行為來測試自己是否有滿足了&lt;ul&gt;
&lt;li&gt;如果做完這件事，還是想重複原本的習慣，代表這個不是獎勵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;篩選提示&lt;ul&gt;
&lt;li&gt;事先選好要檢查哪種行為類別，可以歸為下列五大類&lt;ul&gt;
&lt;li&gt;地點&lt;/li&gt;
&lt;li&gt;時間&lt;/li&gt;
&lt;li&gt;情緒狀態&lt;/li&gt;
&lt;li&gt;其他人&lt;/li&gt;
&lt;li&gt;緊接在前的行為&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;訂定計畫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Productivity"></category></entry><entry><title>[Book] 為什麼他接的案子比我多</title><link href="https://lee-w.github.io/posts/book/2015/11/burn-your-portfolio-stuff-they-don-t-teach-you-in-design-school-but-should" rel="alternate"></link><published>2015-11-29T12:16:00+08:00</published><updated>2015-11-29T12:16:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-11-29:/posts/book/2015/11/burn-your-portfolio-stuff-they-don-t-teach-you-in-design-school-but-should</id><summary type="html">&lt;p&gt;&lt;img alt="burn-your-portfolio" src="http://pic.eslite.com/Upload/Product/201403/m/635309876178920000.jpg"&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="burn-your-portfolio" src="http://pic.eslite.com/Upload/Product/201403/m/635309876178920000.jpg"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;隨時趕在對方需要以前，讓他們大吃一驚&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上司要求下午三點要東西，兩點就備妥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;設計師要期待任何批評跟忠告的場合，能把你推到更高層次的意見是重要的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跟同事抱怨，除了放大問題外，沒有任何作用，往上呈報，有助於產生正向的轉機&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搶救雷恩大兵 「跟上頭抱怨，不是跟手下」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開會應有的準備&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;準備好寫筆記&lt;/li&gt;
&lt;li&gt;先看過題材，在腦中溫習主題&lt;/li&gt;
&lt;li&gt;寫下幾個好問題，鼓起發問的勇氣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;為了避免最後變成「一案各表」，可以先界定好這些規格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尺寸&lt;/li&gt;
&lt;li&gt;構想&lt;/li&gt;
&lt;li&gt;特色&lt;/li&gt;
&lt;li&gt;功能&lt;/li&gt;
&lt;li&gt;包含的內容&lt;/li&gt;
&lt;li&gt;排除的內容&lt;/li&gt;
&lt;li&gt;可修改次數&lt;/li&gt;
&lt;li&gt;專案持續時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;腦力激盪的點子有九成的淘汰率，但為了那一成的好點子，我們仍然要去思考更多的點子&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不管甚麼情況，隨即回復收到的 e-mail，是個好習慣&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收到信了，謝謝&lt;/li&gt;
&lt;li&gt;謝謝您的詢問，我目前無法回答，在像某人詢問後，在某時給您答覆&lt;/li&gt;
&lt;li&gt;完成了&lt;/li&gt;
&lt;li&gt;謝謝，您的回覆我們很受用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;善意的告知進度，尤其在各階段時間拉得很長的時候&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想像手術室的家屬，如果沒有護士告知進度會有多焦急&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;絕對不能讓客戶空等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果趕不上，一定要事先告知&lt;/li&gt;
&lt;li&gt;讓客戶空等，會急遽減低客戶對你的信賴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在有時差的地方，交件日期會受到時區影響&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最好的方式是在當天早上，甚至前一天就交件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;弄懂你的客戶關係圖，並且確保這些人滿意度很高，這些人脈變成金流的機會相當的高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要使用帶有負面觀感的用詞，別用導致狀況升溫的用字遣詞&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;病人的狀況普普，還有許多需要即刻處置的地方 → 病人的狀況尚佳，有些地方需要積極的調整&lt;/li&gt;
&lt;li&gt;修改 → 微調 or 修正&lt;/li&gt;
&lt;li&gt;趕緊 → 積極處理&lt;/li&gt;
&lt;li&gt;問題 → 要素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;料想到顧客的需求，預先執行你的計畫，往往好過於問客戶笨問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;當你察覺到客戶花了一個鐘頭在談話，聲音有點沙啞，不要問要不要喝水，而是找個機會插話 :「你等一下，我去拿杯水」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;撰寫提案時，絕對不能出現「等等」或「及其他等等」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;詳細、清楚的界定各部份的細節&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正常的合約應該兼顧雙方的利益。如果有一份奇怪的條款，別傻傻的簽下去，去問律師。放掉客戶往往比簽下不平等的條款好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要過度假設客戶甚麼都知道，為「狀況外」的客戶提供指示和教學&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. 「期待收到您度商標樣搞的回饋意見」 → 「為了讓商標設計盡善盡美，請提供下列回饋意見。您喜歡的商標跟理由 ? 您不喜歡的商標跟理由 ? 哪個配色跟搭配最接近您的期望？您想不想混合、搭配不同商標上面的元素」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讓數字幫你說明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;碰到不合理的要求，試著用數字算清楚，說明哪裡是不可行的，說不定一場火爆場面就化解了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;訂好自己的「義工」守則&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回饋社會&lt;/li&gt;
&lt;li&gt;充實作品&lt;/li&gt;
&lt;li&gt;一次一件： 不要讓自己身上扛太多免費案子&lt;/li&gt;
&lt;li&gt;界定範圍： 作超過多少就超出免費範圍，是需要收費的&lt;/li&gt;
&lt;li&gt;收成本價&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不會只是「見面聊聊」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次開會，你都應該準備好，做一場驚人的簡報&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;天有不測風雲，每天都要備份 !!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創業的人會在工作上更有「彈性」，但肯定是不會更「自由」的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不管如何都別做尚未白紙黑字的工作，千萬不要！一定要先確認要做的是甚麼！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;替人幹活沒有白紙黑字，就像是在做善事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下一個籌錢日&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;銀行現金 + 應收款 + 當月剩餘請款 + 次月剩餘請款 * 稅金 ( 季稅金預留 ) * 救急金 = 現金流量&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;現金流量 / 每月經常開支 = 現金流量覆蓋月數&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;現金流量覆蓋月數 - 1 個月 = 下一個籌錢日&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成功的全職接案者，在某些時間點，必須放手一搏雇用人手，來處理一些不必親自處理的簡單事務&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Design"></category></entry><entry><title>在 jupyter 中同時使用 Python2 Python3</title><link href="https://lee-w.github.io/posts/tech/2015/11/used-in-the-jupyter-python2-python3" rel="alternate"></link><published>2015-11-02T15:12:00+08:00</published><updated>2015-11-02T15:12:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-11-02:/posts/tech/2015/11/used-in-the-jupyter-python2-python3</id><summary type="html">&lt;p&gt;先安裝 Python2 和 Python3 的 ipython notebook&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip2 install ipython notebook
pip3 install ipython notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分別用各自的 ipython 執行下面的指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ipython2 kernelspec install-self
ipython3 kernelspec install-self
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;p&gt;先安裝 Python2 和 Python3 的 ipython notebook&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip2 install ipython notebook
pip3 install ipython notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分別用各自的 ipython 執行下面的指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ipython2 kernelspec install-self
ipython3 kernelspec install-self
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;p&gt;就能在 ipython notebook 裡面同時使用兩種版本的 Python 了&lt;br&gt;
&lt;img alt="1_jupyter" src="/images/posts-image/2015-11-02-used-in-the-jupyter-python2-python3/IxopQfG.png"&gt;&lt;br&gt;
Python2 上面是另一個也被 jupyter notebook 支援的語言 julia&lt;br&gt;
最近才剛開始碰，有機會再來分享 julia 的心得&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/30492623/using-both-python-2-x-and-python-3-x-in-ipython-notebook"&gt;Using both Python 2.x and Python 3.x in IPython Notebook&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Jupyter"></category></entry><entry><title>No More Zero Day</title><link href="https://lee-w.github.io/posts/gossiping/2015/10/no-more-zero-day" rel="alternate"></link><published>2015-10-27T06:53:00+08:00</published><updated>2015-10-27T06:53:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-10-27:/posts/gossiping/2015/10/no-more-zero-day</id><summary type="html">&lt;p&gt;決定開始來寫些程式以外的內容&lt;br&gt;
整理之前看過的書或文章，跟大家分享心得或書摘&lt;br&gt;
反正都寫了，不分享一下也是蠻可惜的 (?)&lt;/p&gt;
</summary><content type="html">&lt;p&gt;決定開始來寫些程式以外的內容&lt;br&gt;
整理之前看過的書或文章，跟大家分享心得或書摘&lt;br&gt;
反正都寫了，不分享一下也是蠻可惜的 (?)&lt;/p&gt;
&lt;!--more--&gt;

&lt;hr&gt;
&lt;p&gt;&lt;a href="https://www.ptt.cc/bbs/t-management/M.1399297547.A.A5E.html"&gt;[分享] 走出零產出低潮:nonzero days&lt;/a&gt;&lt;br&gt;
這是在 PTT 上看到一篇還不錯的文章&lt;br&gt;
原作者還做了這麼一張圖激勵大家&lt;/p&gt;
&lt;p&gt;&lt;img alt="No More Zero Day" src="http://i.imgur.com/Eqf9wO1.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="1"&gt;1. 從今天開始不再有「零成就日」&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;零成就日&lt;ul&gt;
&lt;li&gt;一整天什麼事情都沒做的日子&lt;/li&gt;
&lt;li&gt;一整天都沒有任何對於你的目標而努力的日子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;今天一整天啥都沒做，而現在已經是 23:58 了？&lt;ul&gt;
&lt;li&gt;寫一個句子。做一下伏地挺身。讀完課本一章節的其中一頁。&lt;/li&gt;
&lt;li&gt;每天只要這樣做下去就有很大的差別&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生產力來自於持續每天都維持在「非零狀態」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2"&gt;2. 對三個「我」心存感激&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;過去我、現在我、未來我&lt;/li&gt;
&lt;li&gt;對「過去我」所做過任何正面的事情心存感激&lt;ul&gt;
&lt;li&gt;昨天不是「零成就日」因為你寫了兩百（不過，這是你最大的能力了嗎？）字？謝謝過去的自己。存了一點錢而可以買你想要的好東西？謝謝過去的自己。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把「未來我」當作你最好的朋友，現在做任何事都要像是為你最好的朋友付出一樣拼命&lt;ul&gt;
&lt;li&gt;你必須幫「未來我」一個忙，就像幫你最好的朋友一個忙一樣&lt;/li&gt;
&lt;li&gt;累得要死但還是無法放下網路和電玩嗎？去你的，「現在我」，我現在要替「未來我」做點事了。&lt;/li&gt;
&lt;li&gt;鬧鐘響了但是床太舒服？去你的，「現在我」，我現在要替我最好的朋友「未來我」做點事了，我要起來跑個 5 公里（或是 25 尺，無所謂，只要不是 0 就好）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你現在能過的一點好生活都源自於過去的努力。這樣子「努力」和「感謝」的循環模式就是讓你維持生產力和感恩之心的源頭&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3"&gt;3. 原諒自己&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;責備自己只會讓你更沒有生產力。&lt;ul&gt;
&lt;li&gt;昨天試著想避免「零成就日」卻失敗了嗎？那又怎樣！&lt;/li&gt;
&lt;li&gt;過去的自己。我原諒你！&lt;/li&gt;
&lt;li&gt;但是今天呢？今天是要盡你最大的能力發揮「非零成就日」的威力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="4"&gt;4. 書和運動&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每天持續運動真的會讓你更聰明。當你運動時身體會釋放讓你快樂的物質&lt;/li&gt;
&lt;li&gt;至於書？所有我們能想得到的想法，或是感受、經驗、體驗、欲望、或是想知道怎麼做某件事，不管是什麼東西，都已經被某個人想出來了&lt;/li&gt;
&lt;li&gt;讀網路上關於減重的文章並將他納入你的運動準則中&lt;/li&gt;
&lt;li&gt;閱讀就像是瑪莉歐電玩中的水管快速通道，他是你到達下一個層級的快速捷徑。&lt;/li&gt;
&lt;/ul&gt;</content><category term="Gossiping"></category><category term="Productivity"></category></entry><entry><title>[Book] 思考的技術</title><link href="https://lee-w.github.io/posts/book/2015/10/thinking-technique" rel="alternate"></link><published>2015-10-18T11:45:00+08:00</published><updated>2015-10-18T11:45:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-10-18:/posts/book/2015/10/thinking-technique</id><summary type="html">&lt;p&gt;&lt;img alt="thinking-technique" src="http://pic.eslite.com/Upload/Product/201506/m/635696947482798750.jpg"&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="thinking-technique" src="http://pic.eslite.com/Upload/Product/201506/m/635696947482798750.jpg"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解決問題不能只是把問題倒過來，就當作想到辦法了&lt;br&gt;
    e.g.「商品沒競爭力，所以要加強商品競爭力」&lt;br&gt;
    該如何增加商品競爭力才是重點！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;測試知識不再能判斷一個人是否能勝任工作，要測驗的是思考模式&lt;br&gt;
  得到正確答案也不見得該錄取，應該注重推理過程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先說前提，才說對策&lt;br&gt;
  e.g. 「如果明天要你去坦桑尼雅出差？只能帶一個背包，你會帶什麼？」&lt;br&gt;
  「我並不清楚坦桑尼雅在哪，但是如果以這是一個非洲的國家為前提，來回答這個問題的話 ......」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具備「有前提就有結論」的思考模式的人，不容易陷入恐慌&lt;br&gt;
  就算前提變了，還是能導出不同的結論，這就是麥肯錫需要的人才&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;投資自己最糟糕的就是半途而廢&lt;br&gt;
  會一點鋼琴、會一點小提琴，但卻都無法在他人面前演奏&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能否突破的差別在於，遇到沒遇過的經驗時，是逃避選擇旁路，還是「不管如何先踏入再說，說不定會有些什麼」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlearn，或者「歸零」，這是很困難的，對於成績好的人尤其困難&lt;br&gt;
  抱持著謙遜的態度，重新學習，就像自己才剛上小學一樣，才能在這個時代生存&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;練習題&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;拿出去年的記事本，試著分析時間&lt;br&gt;
   除了睡覺以及吃飯的時間，統計一下你花了多少的時間在通勤及工作上&lt;br&gt;
   然後想想&lt;/li&gt;
&lt;li&gt;「預定表上空白的時間，佔了多少醒著的時間？」&lt;/li&gt;
&lt;li&gt;「在這些空白的時間裡，你做了什麼？」&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;「在接下來的一年裡，你還會用同樣的方法，運用你的時間嗎？」&lt;br&gt;
  為自己預算下一年的時間要怎麼分配，並研擬為自我投資計畫&lt;br&gt;
  試著在大腦裡描繪一年後自己的模樣&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讀完每天的報紙後，提出五個疑問&lt;br&gt;
   接著提出自己可以運用怎樣的方式、進行怎樣的調查，是否可以提出完成度更高的報導內容&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Book"></category><category term="Thinking"></category></entry><entry><title>[Book] 創新是一種態度</title><link href="https://lee-w.github.io/posts/book/2015/10/innovation-is-an-attitude" rel="alternate"></link><published>2015-10-06T12:04:00+08:00</published><updated>2015-10-06T12:04:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-10-06:/posts/book/2015/10/innovation-is-an-attitude</id><summary type="html">&lt;p&gt;&lt;img alt="innovation-is-an-attitude" src="http://pic.eslite.com/Upload/Product/201506/m/635689172041107500.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="innovation-is-an-attitude" src="http://pic.eslite.com/Upload/Product/201506/m/635689172041107500.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;想解決問題，先突破框架&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;講師在安排課程的時候&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一種是講聽眾想聽的&lt;/li&gt;
&lt;li&gt;更好的做法是講出那些聽眾需要的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;給魚不如給釣竿 ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;那教他釣竿怎麼做呢 ?&lt;/li&gt;
&lt;li&gt;或者教他甚麼是釣竿的原理 ? (bachelor)&lt;/li&gt;
&lt;li&gt;為什麼一定要用釣竿 ? (master)&lt;/li&gt;
&lt;li&gt;為什麼一定要吃魚 ? (doctor)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PHD (Doctor of Philosophy)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;博士要有自己的哲學和思想理念&lt;/li&gt;
&lt;li&gt;不能只是把別人的東西做得很好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;隱含假設 : 控制你思考方向的寄生蟲&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「1+1=?」 「2」&lt;ul&gt;
&lt;li&gt;?&lt;/li&gt;
&lt;li&gt;在自然數的系統下也許是&lt;/li&gt;
&lt;li&gt;在 Computer Science 的布林邏輯運算則是 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果沒把隱含假設搞清楚的話，答案就不會是正確的，很容易變成雞同鴨講&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;上下文、環境關係與現實限制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;上下文很重要 !!!&lt;ul&gt;
&lt;li&gt;再看一段文章時，不用專牛角尖。先記下來，再繼續看下去，也許就懂了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;漸進式創新 : 點子是可以偷來的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「先求有，再求好」反而可能變成「先求惡名昭彰，再來就沒下文了」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;「人才是企業資產」不是口號&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;誰闖了禍不重要，重要的是誰能解決問題，更重要的是防止問題再發生&lt;ul&gt;
&lt;li&gt;「誰的錯」 → 「我們的制度有甚麼問題」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;曾有一個故事，IBM 一個經理人犯了重大錯誤，賠了公司兩百萬美金，他慚愧的像老闆辭職。老闆拍桌大罵 :「你這個人做事怎麼這麼沒責任感」還沒等他開口說自己是辭職以示負責，老闆就說「我們才花了兩百萬幫你上了一課，你現在就想跑」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_6"&gt;機會成本，才是公司最大的成本&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;為了省辦公成本，去做限制，卻剝奪了員工可能產出公司營收的創新想法，這才是最浪費成本的事&lt;/li&gt;
&lt;li&gt;台達電不會因為公司業務少了就砍人，而這麼作是為了在未來景氣回升的時候，能有更大的產能，擴大市占率&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Innovation"></category></entry><entry><title>解決 django-admin 在 mac 找不到 django.core</title><link href="https://lee-w.github.io/posts/tech/2015/05/solve-django-admin-cant-find-the-djangocore-on-mac" rel="alternate"></link><published>2015-05-10T23:42:00+08:00</published><updated>2015-05-10T23:42:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-05-10:/posts/tech/2015/05/solve-django-admin-cant-find-the-djangocore-on-mac</id><summary type="html">&lt;h2 id="_1"&gt;問題&lt;/h2&gt;
&lt;p&gt;在 mac 上，用 pip3 安裝完 django 1.8.1 後&lt;br&gt;
執行 &lt;code&gt;django-admin&lt;/code&gt; 出現了以下的錯誤訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;/usr/local/bin/django-admin&amp;quot;, line 2, in &amp;lt;module&amp;gt;
    from django.core import management
ImportError: No module named django.core
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


</summary><content type="html">&lt;h2 id="_1"&gt;問題&lt;/h2&gt;
&lt;p&gt;在 mac 上，用 pip3 安裝完 django 1.8.1 後&lt;br&gt;
執行 &lt;code&gt;django-admin&lt;/code&gt; 出現了以下的錯誤訊息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;/usr/local/bin/django-admin&amp;quot;, line 2, in &amp;lt;module&amp;gt;
    from django.core import management
ImportError: No module named django.core
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;!--more--&gt;

&lt;h2 id="_2"&gt;解決&lt;/h2&gt;
&lt;p&gt;找到 &lt;code&gt;/usr/local/lib/python3.4/site-packages/django/bin/django-admin.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;把第一行的 &lt;code&gt;#!/usr/bin/env python&lt;/code&gt; 改成 Python 的路徑&lt;br&gt;
以我為例，我改成 &lt;code&gt;#!/usr/local/bin/python3.4&lt;/code&gt;&lt;br&gt;
之後就可以執行了&lt;/p&gt;</content><category term="Tech"></category><category term="Python"></category><category term="Django"></category><category term="mac"></category></entry><entry><title>rename - 批次更改檔名</title><link href="https://lee-w.github.io/posts/tech/2015/02/rename" rel="alternate"></link><published>2015-02-22T15:06:00+08:00</published><updated>2015-02-22T15:06:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-02-22:/posts/tech/2015/02/rename</id><summary type="html">&lt;p&gt;只是要改變一兩個檔案的檔名，只要 &lt;code&gt;mv&lt;/code&gt; 就很夠用了&lt;br&gt;
但如果要一次改很多相似的檔名就用到 &lt;code&gt;rename&lt;/code&gt; 指令就會更有效率&lt;br&gt;
</summary><content type="html">&lt;p&gt;只是要改變一兩個檔案的檔名，只要 &lt;code&gt;mv&lt;/code&gt; 就很夠用了&lt;br&gt;
但如果要一次改很多相似的檔名就用到 &lt;code&gt;rename&lt;/code&gt; 指令就會更有效率&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;安裝&lt;/h2&gt;
&lt;h3 id="ubuntu-linux-mint"&gt;Ubuntu, Linux Mint&lt;/h3&gt;
&lt;p&gt;預設就已經安裝好了&lt;/p&gt;
&lt;h3 id="mac"&gt;Mac&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew install rename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_2"&gt;使用&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rename s/pattern1/pattern2/ files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把 files 中的檔案符合 pattern1 替代成 pattern2&lt;br&gt;
files 要使用萬用字元，pattern 則是使用 regular expression&lt;/p&gt;
&lt;p&gt;在改檔名之前，會想先看會改成什麼樣子&lt;br&gt;
這時候就要加上參數 &lt;code&gt;-n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;需要特別注意要跳脫的字元&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
可以參考下面這篇文章整理需要跳脫的保留字&lt;br&gt;
&lt;a href="http://awei791129.pixnet.net/blog/post/53319618-%5Bregular-expression%5D-使用正規表達時需要-escape-的"&gt;[Regular Expression] 使用正規表達時需要 escape 的保留字&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;保留原本檔名的片段&lt;/h2&gt;
&lt;p&gt;而在批量更改檔名時，常常會需要保留 pattern1 的某些片段&lt;br&gt;
這就需要用到 regular expression 的 group&lt;/p&gt;
&lt;p&gt;例如，我們希望把檔名從 01~05 這五個檔案改成 01A~05A&lt;br&gt;
我們如果只用 &lt;code&gt;rename -n s/\[0-\9]{2}/\[0-9\]{2}A/ *&lt;/code&gt; 就會錯誤&lt;br&gt;
必須要改成像下面這樣&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rename -n s/&lt;span class="se"&gt;\(\[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;-&lt;span class="se"&gt;\9&lt;/span&gt;&lt;span class="o"&gt;]{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\)&lt;/span&gt;/&lt;span class="se"&gt;\$&lt;/span&gt;1A/ *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;扣除跳脫用的 &lt;code&gt;\&lt;/code&gt;&lt;br&gt;
這個例子在 &lt;code&gt;[0-9]{2}&lt;/code&gt; 外面加上 &lt;code&gt;()&lt;/code&gt;，將他們視為群組&lt;br&gt;
在 pattern2 用 &lt;code&gt;$1&lt;/code&gt;，代替第一個 group&lt;/p&gt;
&lt;p&gt;&lt;img alt="1_mac_rename" src="/images/posts-image/2015-02-22-rename/h1NV6ro.png"&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mix.bruceli.net/2011/01/ubuntu-linuxrename.html"&gt;ubuntu linux 用 rename 指令批次改檔名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/20718/substitute-text-with-sed-and-keep-part-of-the-original-text"&gt;regular expression - Substitute text with sed and keep part of the original text - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Linux-Unix"></category><category term="Shell Script"></category></entry><entry><title>[Book] Zero to One</title><link href="https://lee-w.github.io/posts/book/2015/02/zero-to-one" rel="alternate"></link><published>2015-02-16T08:57:00+08:00</published><updated>2015-02-16T08:57:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-02-16:/posts/book/2015/02/zero-to-one</id><summary type="html">&lt;p&gt;&lt;img alt="Zero to One" src="/images/books/O3Uaatb.jpg"&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="Zero to One" src="/images/books/O3Uaatb.jpg"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="book"&gt;Book&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;從 1 到 n，只是複製別人的做法 → 全球化&lt;br&gt;
  從 0 到 1，則是創新 → 科技的進步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;「有什麼是你跟其他人有不同看法，但是你覺得很重要的事實？」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商業版：「哪些有價值的公司還沒創立」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新創產業運作的原則就是必須和其他人合作完成工作，而且組織要小到能讓所有事情順利運作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大膽冒險比無聊瑣碎好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;壞計畫比沒計畫好&lt;/li&gt;
&lt;li&gt;競爭市場賺不到錢&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;銷售與產品同樣重要&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只有獨佔者能考慮賺錢以外的事&lt;br&gt;
  完全競爭下，企業會專注在今天的利潤，無法規劃場遠的未來&lt;br&gt;
  只有一件事可以讓企業超越求生的日常廝殺，創造新的東西，就是獨佔利潤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在完全競爭下，長期來看，沒有公司可以得到經濟利潤&lt;br&gt;
  有利可圖則新公司加入，促使大家降低利潤&lt;br&gt;
  反之，若無利可圖，則公司倒閉，利潤恢復。最終到無利潤的平衡&lt;br&gt;
  只有獨佔企業才能達到利潤最大化&lt;br&gt;
  如果想要創造、並長久留住價值，不該建立一個沒有差異化的商品模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;獨佔企業不會扼殺創新。新的獨佔事業會帶來改變&lt;br&gt;
  長達數十年的獨佔利潤提供強大的發明誘因&lt;br&gt;
  獨佔可以讓發明持續，因為利潤讓他們得以擬定長程計畫&lt;br&gt;
  在競爭的狀態下，公司無法花時間再創新的計畫&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要執著於競爭，競爭會讓大家在毫無機會的時候幻想機會存在&lt;br&gt;
  如果這場仗不值得打，每個人都是輸家&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所謂一家有價值的企業，不但必須成長，還必須能夠&lt;strong&gt;持續成長&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;這事業 10 年後還在嗎？&lt;/strong&gt;&lt;br&gt;
  許多創業家都僅專注在短期成長&lt;br&gt;
  藉口是「成長容易衡量，但持續就很難了」。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你可能聽過創業的「先發優勢」&lt;br&gt;
  但這只是種策略，而不是目標&lt;br&gt;
  真正重要的是能在未來產生現金流&lt;br&gt;
  如果有其他人會追上並超越你，就算你是第一個做的人也不會有好處&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;「做什麼不重要，做得好就行」這可能不是正確的&lt;br&gt;
  要做什麼很重要，你該全神貫注在擅長的事情上&lt;br&gt;
  在此之前，你要想清楚你擅長的是在未來是否有前景。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;對於新創事業招募員工，一個要先問自己的問題「能到 Google 享受高新和地位的人為什麼會想加入你的公司成為第 20 位工程師」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工程問題： 你創造的是一個突破的科技，還是微幅改善的方法？ 你必須有比替代品好上 10 倍的專利技術。市面上常碰到誇大不實的廣告，你的微幅進步很難讓人相信。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;時機問題： 現在是開始這個事業的正確時機嗎？&lt;/li&gt;
&lt;li&gt;獨佔問題： 你一開始就現在小型市場搶得高市佔率嗎？&lt;/li&gt;
&lt;li&gt;人員問題： 你有合適的團隊嗎？&lt;/li&gt;
&lt;li&gt;銷售問題： 你除了有開發產品的能力，還有銷售計劃嗎？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="speech"&gt;Speech&lt;/h2&gt;
&lt;p&gt;Wow, Taiwan is his first stop.&lt;/p&gt;
&lt;h3 id="speech-content"&gt;Speech content&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Don't outsource your future to a big institution. Figure it out yourself.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;It is large &lt;strong&gt;market share&lt;/strong&gt; that matters instead of a big market.&lt;/li&gt;
&lt;li&gt;All happy companies are unique. The others are those who stuck in compete.&lt;/li&gt;
&lt;li&gt;Well defined, well differentiate jobs&lt;/li&gt;
&lt;li&gt;&lt;del&gt;run away from big data or clouding XD&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;What makes facebook valuable might not be purely social networking but real identity in social networking.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="qa"&gt;Q&amp;amp;A&lt;/h3&gt;
&lt;h4&gt;Q: How to tell the different between crazy ideas and new ideas?&lt;/h4&gt;
&lt;p&gt;It's hard to answer.&lt;br&gt;
Is the idea that no one does it or no one does it for good reason? Is it valuable and no others did it?&lt;br&gt;
Be honor yourself, don't be over-optimistic.&lt;br&gt;
Get to be the best in the world rather than best in Taipei or Taiwan.&lt;/p&gt;
&lt;h4&gt;Q: Startup after having some working experience?&lt;/h4&gt;
&lt;p&gt;It's true for business or management.&lt;br&gt;
Startup is something new and by definition, you will not learn from others.&lt;br&gt;
Thus, you might not be able to learn from working experience.&lt;br&gt;
Idea matters.&lt;br&gt;
Although management is important, when it compares to the new idea, it might be not that important.&lt;br&gt;
e.g., Twitter&lt;/p&gt;
&lt;p&gt;Somebody might say that they gonna startup 5 or 10 years later.&lt;br&gt;
However, that's rare.&lt;br&gt;
The fact is that most of these people would be stuck in many different problems and not that willing to take risks.&lt;br&gt;
There is no particular moment for one to startup.&lt;br&gt;
If you have a good idea, it's the time.&lt;/p&gt;
&lt;h4&gt;Q: Why Thiel Fellowship support only drop-out students?&lt;/h4&gt;
&lt;p&gt;It's stop-out instead drop-out.&lt;br&gt;
For one who wanna startup, full time working is needed.&lt;/p&gt;
&lt;h4&gt;Q: Does there exist any character or special of entrepreneurs?&lt;/h4&gt;
&lt;p&gt;Not easily give up, listen to others, and not to easily to be influenced.&lt;br&gt;
How well a team working together is important to a startup.&lt;br&gt;
The team members have to get along with each other.&lt;br&gt;
Thus, those who performs well in college aren't necessarily good entrepreneurs.&lt;/p&gt;
&lt;h4&gt;Q: How to pick a startup team partner?&lt;/h4&gt;
&lt;p&gt;No formula.&lt;br&gt;
It works best if you know they enough.&lt;br&gt;
Complementary skills and alike interests would be good.&lt;/p&gt;
&lt;h4&gt;Q: Education problems. How about the flip classroom or MOOCS?&lt;/h4&gt;
&lt;p&gt;It's education bubble.&lt;br&gt;
Peter cannot give an ultimate way to replace the university system.&lt;br&gt;
The suggestion is that don't get up the same or similar track.&lt;/p&gt;
&lt;p&gt;What makes education bubbles is that everyone treats university as church or religion.&lt;br&gt;
If you don't go into a college, your life would ruin.&lt;br&gt;
Such thought is the main problem.&lt;/p&gt;
&lt;h4&gt;Q: How do startups in Taiwan get into the world and get resource?&lt;/h4&gt;
&lt;p&gt;The first capital is the most difficult part and it's super difficult.&lt;br&gt;
This is the core challenge.&lt;br&gt;
Convincing people that your idea is real and gonna work is really hard.&lt;/p&gt;
&lt;p&gt;There are some great parts in Silicon Valley but also some bad parts.&lt;br&gt;
For example, office and hiring people there is expensive.&lt;/p&gt;
&lt;h4&gt;Q: What the key point to convince peter to invest?&lt;/h4&gt;
&lt;p&gt;......&lt;/p&gt;
&lt;h4&gt;Q: Does Peter admire any other entrepreneurs?&lt;/h4&gt;
&lt;p&gt;Mark Zuckerberg.&lt;br&gt;
......&lt;/p&gt;
&lt;h4&gt;Q: Does Peter have any setback, failure? How to deal with that?&lt;/h4&gt;
&lt;p&gt;It was the law school story wrote in the book.&lt;br&gt;
The interesting part is that this failure turns out to be not failure.&lt;br&gt;
Failure is overrated.&lt;br&gt;
The most important part of failure is not to give up.&lt;/p&gt;</content><category term="Book"></category><category term="Startup"></category></entry><entry><title>vimspell - vim 檢查英文文法的套件</title><link href="https://lee-w.github.io/posts/tech/2015/02/vim-spell-check" rel="alternate"></link><published>2015-02-14T09:59:00+08:00</published><updated>2015-02-14T09:59:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-02-14:/posts/tech/2015/02/vim-spell-check</id><summary type="html">&lt;p&gt;&lt;a href="http://www.vim.org/scripts/script.php?script_id=465"&gt;vimspell&lt;/a&gt; 是一套提供 vim 根據字典來檢查文法的套件&lt;br&gt;
有了 vimsepll，寫 Markdown 或 LaTeX 的時候，就不用再怕拼錯字了&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="http://www.vim.org/scripts/script.php?script_id=465"&gt;vimspell&lt;/a&gt; 是一套提供 vim 根據字典來檢查文法的套件&lt;br&gt;
有了 vimsepll，寫 Markdown 或 LaTeX 的時候，就不用再怕拼錯字了&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="vundle"&gt;用 vundle 安裝&lt;/h2&gt;
&lt;p&gt;在 vimrc 中加入下面這行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Bundle &lt;span class="s1"&gt;&amp;#39;vimspell&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著用 &lt;code&gt;:BundleInstall&lt;/code&gt; 安裝&lt;/p&gt;
&lt;h2 id="_1"&gt;字典檔&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://archive.services.openoffice.org/pub/mirror/OpenOffice.org/contrib/dictionaries/"&gt;下載字典檔&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我下載的是 &lt;code&gt;en_US.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解壓縮完後，用 vim 開啟街壓縮完的資料夾&lt;br&gt;
應該會看到下面這樣&lt;br&gt;
&lt;img alt="1_directory" src="/images/posts-image/2015-02-14-vim-spell-check/gLWMnmW.png"&gt;&lt;/p&gt;
&lt;p&gt;接著進入 vim 在 normal mode 輸入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;mkspell&lt;/span&gt; &lt;span class="k"&gt;en&lt;/span&gt; en_US
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;en&lt;/code&gt; 可以自己定義，&lt;code&gt;en\_US&lt;/code&gt; 必須是 .aff 和 .dic 的檔名&lt;br&gt;
檢查一下 vim 資料夾下的 spell 資料夾有沒有新增字典檔，確定有了後就新增完成了&lt;/p&gt;
&lt;h2 id="_2"&gt;設定&lt;/h2&gt;
&lt;p&gt;首先要先定義要根據哪個字典檔&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;spelllang&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;en&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;en 就是剛剛所定義的名稱&lt;/p&gt;
&lt;p&gt;接著 &lt;code&gt;:set spell&lt;/code&gt; 就可以開啟了&lt;br&gt;
&lt;code&gt;:set nospell&lt;/code&gt; 則是關閉&lt;/p&gt;
&lt;p&gt;如果每次都要設定一次，就太麻煩了&lt;br&gt;
我在 vimrc 加入了下面這些&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;spelllang&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;en&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F7&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;spell&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
autocmd &lt;span class="nb"&gt;BufRead&lt;/span&gt; *.txt&lt;span class="p"&gt;,&lt;/span&gt;*.md&lt;span class="p"&gt;,&lt;/span&gt;*.tex &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="k"&gt;spell&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二行是每次按 F7 就能開啟或關閉 vimspell，也可以換成自己想要的快捷鍵&lt;br&gt;
第三行則是每次遇到副檔名是 txt, md, tex 時就自動開啟 vimspell&lt;/p&gt;
&lt;h2 id="_3"&gt;使用&lt;/h2&gt;
&lt;p&gt;vimspell 被開啟後，就會自動把拼錯的字反白起來&lt;br&gt;
如果有其他的語言一樣會被反白起來&lt;br&gt;
&lt;img alt="2_vimspell_sample" src="/images/posts-image/2015-02-14-vim-spell-check/MGjdAoq.png"&gt;&lt;/p&gt;
&lt;h3 id="_4"&gt;指令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;]s&lt;/code&gt; : 跳到下一個錯字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[s&lt;/code&gt; : 跳到上一個錯字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;z=&lt;/code&gt; : 開啟建議，可以參考下面的圖，選擇完按 enter 後，就會替換原本的字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zg&lt;/code&gt; : 將目前游標上的字加入字典&lt;br&gt;
         新增的字都會被加到 &lt;code&gt;~/.vim/spell/en.utf-8.add&lt;/code&gt;( 根據語言不同，檔名會不同 )&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zug&lt;/code&gt;: 復原加入字典的字 (刪除)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zw&lt;/code&gt; : 加入壞字字典，壞字也會被加入同樣的檔案中，最後面會另外加上 &lt;code&gt;/!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zuw&lt;/code&gt;: 復原加入壞字字典的字 (刪除)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="3_choose_word" src="/images/posts-image/2015-02-14-vim-spell-check/NWHCakj.png"&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vimdoc.sourceforge.net/htmldoc/spell.html"&gt;Vim documentation: spell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.go2linux.org/linux/2010/10/how-use-spell-check-vim-795"&gt;How to use spell check with vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ithelp.ithome.com.tw/question/10055602"&gt;[Reply] 如何在 vim 裡用拼字檢查 - iT 邦幫忙 ::IT 知識分享社群&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://henry.precheur.org/vim/create_spell_file_for_vim"&gt;Create a spell file for VIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7286207/automatically-enabling-spell-checking-in-vimrc"&gt;vim - Automatically enabling spell checking in vimrc - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Vim"></category></entry><entry><title>gitignore.io</title><link href="https://lee-w.github.io/posts/tech/2015/02/gitignoreio" rel="alternate"></link><published>2015-02-03T05:58:00+08:00</published><updated>2015-02-03T05:58:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-02-03:/posts/tech/2015/02/gitignoreio</id><summary type="html">&lt;p&gt;每次開一個 git 專案，要為它找適當的 .gitignore，都要上網找模板蠻麻煩的&lt;br&gt;
能不能有個簡單的方法，我開什麼專案就產生怎樣的 .gitignore&lt;br&gt;
然後我就發現了&lt;a href="https://www.gitignore.io"&gt;gitignore.io&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;每次開一個 git 專案，要為它找適當的 .gitignore，都要上網找模板蠻麻煩的&lt;br&gt;
能不能有個簡單的方法，我開什麼專案就產生怎樣的 .gitignore&lt;br&gt;
然後我就發現了&lt;a href="https://www.gitignore.io"&gt;gitignore.io&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;簡單來說 gitignore.io 提供各式各樣的 gitignore，而且可以自動合併成一個 file&lt;br&gt;
最棒的是它有提供 api 讓我們在 command line 上使用&lt;/p&gt;
&lt;h2 id="gitignoreio-on-command"&gt;gitignore.io on command&lt;/h2&gt;
&lt;p&gt;這是 gitignore.io 的官方文件&lt;br&gt;
&lt;a href="https://www.gitignore.io/docs"&gt;doc&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;設定&lt;/h3&gt;
&lt;p&gt;以 mac 的 zsh 的使用者為例，只要在執行下面這段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者在 ~/.zshrc 加入下面這段後，執行 &lt;code&gt;source ~/.zshrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; gi&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; curl -L -s https://www.gitignore.io/api/&lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定完成後就可以使用 gi 的功能&lt;/p&gt;
&lt;h3 id="_2"&gt;使用&lt;/h3&gt;
&lt;p&gt;基本上只有兩種用法&lt;br&gt;
首先當然要先看 gi 支援哪些 .gitignore&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gi list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行完會看到一長串的結果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;actionscript,ada,agda,android...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著在 gi 後面輸入想產生的 .gitignore 的 types&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gi &lt;span class="s2"&gt;&amp;quot;types&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果有超過一個必須用 &lt;code&gt;,&lt;/code&gt; 隔開&lt;br&gt;
e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gi vim,osx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過這樣還不會產生 .gitignore，只會顯示在螢幕上&lt;br&gt;
還要再使用 output redirection 才會有 .gitignore&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gi vim,osx &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="my-custom-gi"&gt;My Custom gi&lt;/h2&gt;
&lt;p&gt;但用起來還是有點小小的不順手&lt;br&gt;
尤其每次要看 list 都要重新連上網抓一次，挺浪費時間&lt;br&gt;
所以就自己寫了一個新的 gi&lt;br&gt;
我把它放在我的 GitHub 上&lt;br&gt;
&lt;a href="https://github.com/Lee-W/gi_extension"&gt;gi_extension&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那我的 Custom gi 到底多支援了什麼呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;線下查看 gitignore.io 支援的類型，用更適合閱讀當方式印出&lt;/li&gt;
&lt;li&gt;將 output redirection 寫成一個 option&lt;/li&gt;
&lt;li&gt;支援以空格作為類型的分隔 ( 逗號依然支援 )&lt;br&gt;
   e.g., &lt;code&gt;vim,osx&lt;/code&gt; → &lt;code&gt;vim osx&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_3"&gt;安裝&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/Lee-W/gi_extension &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; gi_extension
sudo cp gi_extension.sh /usr/bin/gi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果之前有在 shell 的設定檔中，設定過 gitignore.io 提供的 gi&lt;br&gt;
記得要把它註解掉，不然那個 gi 會蓋過我的 gi&lt;/p&gt;
&lt;p&gt;如果想移除掉&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/Lee-W/gi_extension &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; gi_extension
sudo rm gi_extension.sh /usr/bin/gi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_4"&gt;使用&lt;/h2&gt;
&lt;p&gt;第一次使用的時候要先下 &lt;code&gt;gi -u&lt;/code&gt;&lt;br&gt;
將原本 &lt;code&gt;gi list&lt;/code&gt; 的 output，儲存到 &lt;code&gt;~/.gi_list&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="_5"&gt;顯示支援類型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以表格的方式輸出支援的類型&lt;br&gt;
   目前設定一個 row 容納 5 個 column，每個 column 長度為 25  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gi -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="1_gi_l.png" src="/images/posts-image/2015-02-03-gitignoreio/WjrHpdZ.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以字母的順序輸出&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gi -L
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="2_gi_L.png" src="/images/posts-image/2015-02-03-gitignoreio/9j2PdP4.png"&gt;&lt;/p&gt;
&lt;h3 id="gitignore"&gt;顯示 .gitignore 的內容&lt;/h3&gt;
&lt;p&gt;跟原本的 gi 一樣，只是多支援了以空白作為分隔&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gi &lt;span class="s2"&gt;&amp;quot;types&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# e.g., gi vim osx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="gitignore_1"&gt;輸出 .gitignore&lt;/h3&gt;
&lt;p&gt;將結果加入目前資料夾下的 .gitignore&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gi -a &lt;span class="s2"&gt;&amp;quot;types&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# e.g., gi -a vim osx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在目前的資料夾產生一份新的 .gitignore 取代舊有的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gi -e &lt;span class="s2"&gt;&amp;quot;types&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# e.g.,e.g.,, gi -e vim osx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;更新本地端的支援列表&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gi -u
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其實每次 gi 被執行的時候，都會在 background 更新列表&lt;br&gt;
但是這次的更新，下次才能被使用&lt;br&gt;
所以如果想要強制更新就可以用上這個指令&lt;/p&gt;</content><category term="Tech"></category><category term="Git"></category><category term="Deprecated"></category><category term="Utility"></category></entry><entry><title>[Book] 點子都是偷來的</title><link href="https://lee-w.github.io/posts/book/2015/01/steal-like-an-artist-10-things-nobody-told-you-about-being-creatvie" rel="alternate"></link><published>2015-01-31T08:43:00+08:00</published><updated>2015-01-31T08:43:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-01-31:/posts/book/2015/01/steal-like-an-artist-10-things-nobody-told-you-about-being-creatvie</id><summary type="html">
&lt;p&gt;Steal Like an Artist - 10 Things Nobody Told You about Being Creatvie&lt;br/&gt;
&lt;img alt="Show Your Work" src="/images/books/GQNwobG.jpg"/&gt;&lt;/p&gt;
</summary><content type="html">
&lt;p&gt;Steal Like an Artist - 10 Things Nobody Told You about Being Creatvie&lt;br/&gt;
&lt;img alt="Show Your Work" src="/images/books/GQNwobG.jpg"/&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;所有的建言都只是經驗談&lt;/p&gt;
&lt;h3 id="1-steal-like-an-artist"&gt;1. Steal like an artist&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Wiliam Ralph Inge: 「什麼是原創？就是沒被人看出來的抄襲」&lt;/li&gt;
&lt;li&gt;Garbage in Garbage out&lt;ul&gt;
&lt;li&gt;藝術是搜集好的想法，但不是囤積狂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Save Your Theft for Latter&lt;ul&gt;
&lt;li&gt;隨時都要養成紀錄的習慣。存在紀錄裡的東西是死的，只又讓它再重新被使用才會活過來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Steal from yourself. e.g. Dream, Memory&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-dont-wait-until-you-know-who-youre-until-you-get-started"&gt;2. Don't wait until you know who you're until you get started.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fake it'til you make it&lt;/li&gt;
&lt;li&gt;如果你只有受到某一個人的影響，大家會說你是下一個誰誰誰；但如果你偷學的對象有一百個，大家就會說你是渾然天成&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-write-the-book-you-want-to-read"&gt;3. Write the book you want to read&lt;/h3&gt;
&lt;h3 id="4-use-your-hand"&gt;4. Use your hand&lt;/h3&gt;
&lt;p&gt;只有動腦的作品是不會出色的&lt;/p&gt;
&lt;h3 id="5-side-projects-and-hobbies-are-important"&gt;5. Side projects and hobbies are important&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果你有兩、三樣熱情，不要覺得自己非得擇一不可。留著每一項熱情！&lt;/li&gt;
&lt;li&gt;讓各種興趣交流，就會產生變化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="6-the-secret-do-good-work-and-share-it-with-people"&gt;6. &lt;strong&gt;&lt;em&gt;The Secret&lt;/em&gt;&lt;/strong&gt;: Do good work and share it with people&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一開始，不受注意是好事。一旦人們開始注意你，隨性的自由就不再復返。盡力享受和善用未成名的時期&lt;/li&gt;
&lt;li&gt;Step 1: Wonder at Something.&lt;br/&gt;
  Step 2: Invite Others to Wonder with You.&lt;/li&gt;
&lt;li&gt;Howard Aiken: 「別擔心別人偷你的構想，若你的想法真的很棒，你會盡力說服別人接受」&lt;br/&gt;
  Don't worry about people stealing your ideas. If your ideas are any good, you'll have to ram them down people's throats.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="7-geography-is-no-longer-our-master"&gt;7. Geography is no longer our master.&lt;/h3&gt;
&lt;p&gt;在日常環境裡，大腦會開始變得安逸，所以你必須顛覆現狀&lt;br/&gt;
旅行讓世界變得新鮮，也能活化大腦運作&lt;/p&gt;
&lt;h3 id="8-be-nice-the-world-is-a-small-town"&gt;8. Be nice. (The world is a small town.)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stand Next to Talent ← Garbage in Garbage out&lt;/li&gt;
&lt;li&gt;Write Fan Letters&lt;ul&gt;
&lt;li&gt;不用直接寫信給偶像。用行動、作品來像他致敬吧！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="9-be-boring-its-the-only-way-to-get-work-done"&gt;9. Be boring. (It's the only way to get work done.)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gustave Flaubert: 「生活維持常態和規律」，工作上才有衝刺的動力和原創的靈感。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Make sure how much sleep you get.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Get yourself a calendar.&lt;ul&gt;
&lt;li&gt;在行事曆上記下每日的目標。完成後在行事曆畫一個叉，並且持續維持這個叉的連線&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="10-creatvity-is-subtraction"&gt;10. Creatvity is subtraction&lt;/h3&gt;
&lt;hr/&gt;
&lt;h2 id="whats-next"&gt;What's Next?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Take a walk&lt;/li&gt;
&lt;li&gt;Start you swipe file&lt;/li&gt;
&lt;li&gt;Go to the library&lt;/li&gt;
&lt;li&gt;Buy a notebook and use it&lt;/li&gt;
&lt;li&gt;Get yourself and calendar&lt;/li&gt;
&lt;li&gt;Start your logbook&lt;/li&gt;
&lt;li&gt;Give a copy of this book away (?)&lt;/li&gt;
&lt;li&gt;Start a blog&lt;/li&gt;
&lt;li&gt;Take a nap&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Design"></category></entry><entry><title>驅動 BCM43228 網卡在 Linux 的無線功能</title><link href="https://lee-w.github.io/posts/tech/2015/01/enable-bcm43228-wifi-on-linux" rel="alternate"></link><published>2015-01-28T08:52:00+08:00</published><updated>2015-01-28T08:52:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-01-28:/posts/tech/2015/01/enable-bcm43228-wifi-on-linux</id><summary type="html">&lt;p&gt;最近本來下定決心要來玩 arch linux&lt;br&gt;
結果竟然被筆電的網卡搞死了&lt;br&gt;
抓了官網的驅動竟然不能 build...&lt;/p&gt;
&lt;p&gt;沒想到改成灌 Linux mint 17，依然有問題＝＝&lt;br&gt;
最後找到一個解決的辦法&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近本來下定決心要來玩 arch linux&lt;br&gt;
結果竟然被筆電的網卡搞死了&lt;br&gt;
抓了官網的驅動竟然不能 build...&lt;/p&gt;
&lt;p&gt;沒想到改成灌 Linux mint 17，依然有問題＝＝&lt;br&gt;
最後找到一個解決的辦法&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;先確定你的網卡是不是 BC43228&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;lspci &lt;span class="p"&gt;|&lt;/span&gt; grep Network
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果是的話就能開始進行安裝了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install linux-headers-generic
sudo apt-get install --reinstall bcmwl-kernel-source
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果成功的話，Wifi 應該馬上就能用了&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wiki.beyondlogic.org/index.php?title=Ubuntu14.04_Acer_Aspire_V5_571_Broadcom_BCM43228_WiFi"&gt;Ubuntu14.04 Acer Aspire V5 571 Broadcom BCM43228 WiFi - BeyondLogic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Linux-Unix"></category><category term="Dual Boot"></category></entry><entry><title>Gitbook on Command Line</title><link href="https://lee-w.github.io/posts/tech/2015/01/gitbook-on-command-line" rel="alternate"></link><published>2015-01-23T07:34:00+08:00</published><updated>2015-01-23T07:34:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-01-23:/posts/tech/2015/01/gitbook-on-command-line</id><summary type="html">&lt;p&gt;最近比較認真在寫 Gitbook，順便記錄一下該怎麼用&lt;br&gt;
簡單來說 Gitbook 就是可以使用 Markdown 來寫書的平台，可以轉成各種電子書的格式&lt;br&gt;
目前已經支援的有 html, pdf, ePUB, MOBI&lt;/p&gt;
</summary><content type="html">&lt;p&gt;最近比較認真在寫 Gitbook，順便記錄一下該怎麼用&lt;br&gt;
簡單來說 Gitbook 就是可以使用 Markdown 來寫書的平台，可以轉成各種電子書的格式&lt;br&gt;
目前已經支援的有 html, pdf, ePUB, MOBI&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;之前寫了一本 Clean Code 的筆記&lt;br&gt;
最近又開始寫一本 FreeBSD 和網管相關的 Gitbook&lt;br&gt;
如果有興趣可以到&lt;a href="https://www.gitbook.com/@lee-w"&gt;我的 Gitbook&lt;/a&gt; 上看看 XD&lt;/p&gt;
&lt;p&gt;目前 Gitbook 主要支援網站上的 Editor，不過我比較習慣在本地端進行編輯&lt;br&gt;
雖然有 Gitbook 編輯器，但有時候用起來還是會出點問題&lt;br&gt;
所以最後還是決定來學如何用 command line + sublime 寫 Gitbook&lt;/p&gt;
&lt;h2 id="gitbook"&gt;安裝 Gitbook&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm install gitbook -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="gitbook_1"&gt;開始撰寫 Gitbook&lt;/h2&gt;
&lt;p&gt;一本 Gitbook 一般都會包含 &lt;code&gt;SUMMARY.md&lt;/code&gt;, &lt;code&gt;README.md&lt;/code&gt;, &lt;code&gt;package.json&lt;/code&gt;, &lt;code&gt;book.json&lt;/code&gt;&lt;br&gt;
像我的 Learning Python 筆記的檔案架構大概長的是這樣&lt;br&gt;
&lt;img alt="1_learning_python_project_structure" src="/images/posts-image/2015-01-23-gitbook-on-command-line/6RDgdVZ.png"&gt;&lt;/p&gt;
&lt;p&gt;README.md 是這本書的簡介&lt;br&gt;
package.json 是額外使用的 package 的定義和設定&lt;br&gt;
book.json 是這本書的額外設定&lt;br&gt;
這裡不會多做介紹，可以參考&lt;a href="#Reference"&gt;Reference&lt;/a&gt; 的網站，裡面有很詳細的介紹&lt;/p&gt;
&lt;p&gt;最重要的是 SUMMARY.md，它會定義整本 gitbook 的架構&lt;br&gt;
每個章節下面都還可以給予更多的小節&lt;br&gt;
下面是我 Learning Python 的 SUMMARY.md&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;# Summary&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Introduction&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;README&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Getting&lt;/span&gt; &lt;span class="n"&gt;Started&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;_getting_started&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;README&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;_getting_started&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a_python_q&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a_session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Runs&lt;/span&gt; &lt;span class="n"&gt;Programs&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;_getting_started&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;how_python_runs_programs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;Run&lt;/span&gt; &lt;span class="n"&gt;Programs&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;_getting_started&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;how_you_run_programs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Types&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Operations&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_types_and_operations&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;README&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Introducing&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_types_and_operations&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;introducing_python_object_types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Numeric&lt;/span&gt; &lt;span class="n"&gt;Types&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_types_and_operations&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numeric_types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;Typing&lt;/span&gt; &lt;span class="n"&gt;Interlude&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_types_and_operations&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;the_dynamic_typing_interlude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這是預覽的結果&lt;br&gt;
&lt;img alt="2_learning_python_web" src="/images/posts-image/2015-01-23-gitbook-on-command-line/d3NP0xi.png"&gt;&lt;/p&gt;
&lt;p&gt;下了這個指令後就會根據 SUMMARY.md 的定義，自動產生相對應資料夾和檔案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gitbook init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著就可以開始編輯裡面的檔案了&lt;/p&gt;
&lt;h2 id="_1"&gt;預覽&lt;/h2&gt;
&lt;p&gt;寫完之後當然預覽一下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gitbook serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用了這個指令後就會為目前的目錄開一個預覽 HTML 的 port&lt;br&gt;
只要在瀏覽器上輸入 &lt;code&gt;http://localhost:4000&lt;/code&gt;&lt;br&gt;
就可以預覽剛剛寫的 Gitbook&lt;br&gt;
只要有更新後存擋，重新整理就能看到更新後的結果&lt;/p&gt;
&lt;h2 id="_2"&gt;輸出&lt;/h2&gt;
&lt;p&gt;在 export 前，需要為 pdf, epub, mobi 三種格式多安裝程式才能使用&lt;br&gt;
先到的官網下載 &lt;a href="http://calibre-ebook.com/download"&gt;Calibre&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以 mac 為例&lt;br&gt;
需要下面這個指令，為 ebook-covert 建立一個捷徑，讓 gitbook 可以找到這個功能&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下的四個指令依序可以產生 html, pdf, epub, mobi&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gitbook build ./
gitbook pdf ./
gitbook epub ./
gitbook mobi ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;後面可以多指定一個參數 &lt;code&gt;--output="Directory"&lt;/code&gt;&lt;br&gt;
"Directory" 換成你要的位置或檔名&lt;br&gt;
如果不指定，預設 html 會 export 到 _book 裡面，其他檔案則會以 book 命名&lt;/p&gt;
&lt;h2 id="publish-gitbookcom"&gt;Publish 到 Gitbook.com 上&lt;/h2&gt;
&lt;p&gt;先到&lt;a href="https://www.gitbook.com"&gt;Gitbook 官網&lt;/a&gt; 上註冊帳號&lt;br&gt;
接著 create a new book，到 setting 頁面往下拉，就會看到一個 URL&lt;/p&gt;
&lt;p&gt;接下來的操作就跟 git 基本上是一樣的，init, add, commit ... 等&lt;br&gt;
只有在 remote 的設定有點不同&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git remote add gitbook &lt;span class="s2"&gt;&amp;quot;URL&amp;quot;&lt;/span&gt;
git push -u gitbook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡要輸入的帳號、密碼是 gitbook 上的，不是與其連結的帳號的&lt;br&gt;
如果還沒設定就要再去自己的 profile 內設定&lt;/p&gt;
&lt;p&gt;&lt;a name="reference"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GitbookIO/gitbook"&gt;Gitbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://help.gitbook.io/index.html"&gt;GitBook Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codedata.com.tw/social-coding/gitbook-self-publishing/"&gt;深入淺出 GitBook 寫作與自助出版，電子書也能多人協作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Git Book"></category></entry><entry><title>[Book] Clean Coder</title><link href="https://lee-w.github.io/posts/book/2015/01/Soft" rel="alternate"></link><published>2015-01-17T09:35:00+08:00</published><updated>2015-01-17T09:35:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-01-17:/posts/book/2015/01/Soft</id><summary type="html">&lt;p&gt;&lt;img alt="Clean Coder" src="/images/books/5a0LzcS.jpg"&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="Clean Coder" src="/images/books/5a0LzcS.jpg"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果非專業人事把事情搞砸了，收拾爛攤子的往往是僱主&lt;br&gt;
  而專業人事如果犯了錯，只好自己收拾殘局。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;當然，你說的沒錯。軟體發展太複雜了，不可能沒什麼 bug&lt;br&gt;
  但很不幸，這個理由並不能為你開脫&lt;br&gt;
  人體太複雜了，不可能完全理解，但醫生仍誓言不傷害病人&lt;br&gt;
  如果他們都不拿人體的複雜性作託辭，我們又怎麼能拿上述的理由，開脫自己的責任呢？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程式難免會出現 bug，但這並不意味著你不用對它們負責&lt;br&gt;
  沒人能寫出完美的軟體，但這並表示你不用對不完美負責&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把自己沒把握的程式碼發送給 QA 這麼做本身就是不專業&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每次 QA 找出問題時，或者更糟糕的是「用戶找出問題」時，你都該震驚羞愧，並決心以此為戒&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你希望自己的軟體靈活可變，那就應該時常修改它！&lt;br&gt;
  讓軟體保持固定並不變才是危險的！！&lt;br&gt;
  如果一直不重構程式碼，等到最後不得不重構的時候，你就會發現程式碼已經「僵化了」&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你應該計劃每週工作 60 小時&lt;br&gt;
  前 40 個小時是給僱主的，後 20 小時是給自己的&lt;br&gt;
  這剩餘的 20 小時裡，也就是每天 3 小時，你應該看書、練習、學習，或者做其他提升職業能力的事&lt;br&gt;
  那 20 小時你不用為僱主工作。相反，你該為自己的職業發展工作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Software Engineering"></category><category term="Code Quality"></category></entry><entry><title>[Book] 人月神話</title><link href="https://lee-w.github.io/posts/book/2015/01/the-mythical-man-month" rel="alternate"></link><published>2015-01-17T09:30:00+08:00</published><updated>2015-01-17T09:30:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-01-17:/posts/book/2015/01/the-mythical-man-month</id><summary type="html">&lt;p&gt;&lt;img alt="人月神話" src="/images/books/yEzGf5d.jpg"&gt;&lt;br&gt;
</summary><content type="html">&lt;p&gt;&lt;img alt="人月神話" src="/images/books/yEzGf5d.jpg"&gt;&lt;br&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;因為溝通的時間，人力和工時互換是不成立的，別用人月來衡量工作規模大小&lt;br&gt;
  溝通又可分為，訓練和相互交流&lt;br&gt;
  訓練的成本可以是線性關係，但相互交流花的時間可多了&lt;br&gt;
  所以為了趕上時程而增加的人力，通常不會只會讓進度更落後。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系統設計的時候，保有概念整體性是很重要的原則&lt;br&gt;
  寧可忽略掉新奇或更好的特色，來反映同一組設計理念&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系統的目的是使用便利性，所以功能概念複雜度比才是系統設計的最終測試標準&lt;br&gt;
  好的設計不可以單獨偏重功能性，也不可只偏重簡單性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;產品測試小組代表顧客，就是為了挑出產品毛病存在&lt;br&gt;
  隨著時間的投入，細心的產品測試人員將找出設計意圖並未正確傳達之處，也就是設計的決策沒有被正確了解或準確實作的地方&lt;br&gt;
  基於這個理由，測試小組絕對有必要與設計意念傳達的過程相結合，並且必須在造其跟根設計的工作一起同時進行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在大部分的專案中，第一次出爐的系統絕少是有用的&lt;br&gt;
  因此，無需考慮是否要做一個試探性的系統，然後把他丟棄，因為這是必然的問題&lt;br&gt;
  所以應該要預先規劃去做一個本來就要丟掉的試驗品&lt;br&gt;
  在規劃時程的時候，把必然的一次失敗納入正式計劃之中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;規劃軟體開發專案的文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;目標&lt;/li&gt;
&lt;li&gt;產品規格&lt;/li&gt;
&lt;li&gt;時程&lt;/li&gt;
&lt;li&gt;預算&lt;/li&gt;
&lt;li&gt;場地配置&lt;/li&gt;
&lt;li&gt;組織編制圖&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;為使用程式而寫的文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;目的&lt;ul&gt;
&lt;li&gt;程式主要功能為何？&lt;/li&gt;
&lt;li&gt;為什麼要寫這支程式？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;環境&lt;ul&gt;
&lt;li&gt;程式要在哪種機器上跑？&lt;/li&gt;
&lt;li&gt;硬體和作業系統的組態該如何設定？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;輸入值域與輸出值域&lt;ul&gt;
&lt;li&gt;程式輸入與輸出資料的合理範圍為何？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;欲達成的功能與使用的演算法&lt;ul&gt;
&lt;li&gt;精確的說出程式到底要做什麼事情 ?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;輸出入格式&lt;ul&gt;
&lt;li&gt;要精確而完整的描述&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;執行過程中的指示  &lt;ul&gt;
&lt;li&gt;包括運行正常時，或因異常而終止時，在控制台或任何輸出裝置上應該要看得到的任何提示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選項&lt;ul&gt;
&lt;li&gt;使用者在功能上有哪些選擇彈性？&lt;/li&gt;
&lt;li&gt;這些選項該如何正確的加以指定？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;執行時間&lt;ul&gt;
&lt;li&gt;對於某個工作，在某個組態所指定的空件大小限制之下，程式要花多少時間來完成？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;輸出結果的精確度與檢驗方式&lt;ul&gt;
&lt;li&gt;預期的結果必須精確到什麼程度？&lt;/li&gt;
&lt;li&gt;跟這種精確度相搭配的檢驗方式為何？&lt;/li&gt;
&lt;li&gt;將文件維護的負擔剪到最小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;借助那些基於語言的要求而必須存在的語&lt;br&gt;
  儘可能容納更多訊息在裡頭&lt;br&gt;
  標籤、宣告、符號名稱都可以用來表達某些函意&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;善用留白或固定格式來增加可讀性，表現出從屬和巢狀的關係&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以註解的形式在程式中加入一些註解&lt;br&gt;
  但許多程式為了這個逐行加入註解，這更會讓人感到困惑&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Book"></category><category term="Software Engineering"></category><category term="Team"></category></entry><entry><title>MacBook Pro Retina 開箱</title><link href="https://lee-w.github.io/posts/gossiping/2015/01/mbpr-out-of-the-box" rel="alternate"></link><published>2015-01-02T04:14:00+08:00</published><updated>2015-01-02T04:14:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2015-01-02:/posts/gossiping/2015/01/mbpr-out-of-the-box</id><summary type="html">&lt;p&gt;這篇只是想給自己換 MacBook Pro Retina 留下一個紀念&lt;br&gt;
順便紀錄一些從 Ubuntu 轉過來不習慣的地方&lt;br&gt;
想要看更專業的開箱文就要再去翻別篇囉ＸＤ&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這篇只是想給自己換 MacBook Pro Retina 留下一個紀念&lt;br&gt;
順便紀錄一些從 Ubuntu 轉過來不習慣的地方&lt;br&gt;
想要看更專業的開箱文就要再去翻別篇囉ＸＤ&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;先附上幾張照片&lt;br&gt;
&lt;img alt="1_mac" src="/images/posts-image/2015-01-02-mbpr-out-of-the-box/cZp8mpJ.jpg"&gt;&lt;br&gt;
&lt;img alt="2_mac" src="/images/posts-image/2015-01-02-mbpr-out-of-the-box/NgvObR9.jpg"&gt;&lt;br&gt;
&lt;img alt="3_mac" src="/images/posts-image/2015-01-02-mbpr-out-of-the-box/vc6HXcm.jpg"&gt;&lt;/p&gt;
&lt;p&gt;從 Ubuntu 轉過來 MacBook，不用一天就上手了&lt;br&gt;
不過也可能是我常常把 Ubuntu 改得很像 MacBook 吧ＸＤ&lt;br&gt;
轉過來 MacBook 最大的好處就是超強大的觸控板&lt;/p&gt;
&lt;p&gt;不過還是有一些比較不習慣的地方&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;沒有 guake terminal&lt;br&gt;
guake terminal 實在太好用了啊ＸＤ&lt;br&gt;
雖然可以用 iTerm2 做出類似的效果，但感覺還是不太對&lt;br&gt;
&lt;a href="http://ivanvillareal.com/osx/setup-iterm2-to-behave-like-guake/"&gt;SETUP ITERM2 TO BEHAVE LIKE GUAKE&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不支援 NTFS 寫入&lt;br&gt;
下面這裡提供一個在 PTT 找到的解決方案&lt;br&gt;
不過寫入速度好像只有 USB 2.0&lt;br&gt;
&lt;a href="https://www.ptt.cc/bbs/MAC/M.1419789197.A.546.html"&gt;[軟體] NTFS for Mac OSX Yosemite 10.10&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;無法直接讀到 Android 手機的檔案&lt;br&gt;
雖然可以用 Android File Transfer 解決，但不知道為什麼遇到我的手機很容易死當＝＝&lt;br&gt;
&lt;a href="https://www.android.com/filetransfer/"&gt;Android File Transfer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;總之我現在也是個 MacBook user 了 lol&lt;/p&gt;</content><category term="Gossiping"></category><category term="mac"></category><category term="unboxing"></category></entry><entry><title>Android Studio + Genymotion 安裝</title><link href="https://lee-w.github.io/posts/tech/2014/12/android-studio-and-genymotion-installation" rel="alternate"></link><published>2014-12-29T09:26:00+08:00</published><updated>2014-12-29T09:26:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-12-29:/posts/tech/2014/12/android-studio-and-genymotion-installation</id><summary type="html">&lt;p&gt;Android Studio 最近 Google 在推行的 Android IDE，前身是 IntelliJ IDEA&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Android Studio 最近 Google 在推行的 Android IDE，前身是 IntelliJ IDEA&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;它的檔案架構跟 eclipse 差蠻多的，所以用不同的 IDE 來協作會有點麻煩&lt;br/&gt;
就我的經驗 Android Studio 比 eclipse 來得穩定一些&lt;br/&gt;
反正現在還有 Google 在背後支持它，就來試試看吧 XD&lt;/p&gt;
&lt;p&gt;Android Studio 正式版已經發布了，現在好像完全無法把 sdk 放在 Android Studio 資料夾內&lt;br/&gt;
所以之前沒有把 sdk 獨立出來的，記得要獨立出來，不然可能會發生無法更新的問題&lt;/p&gt;

&lt;h1 id="installation"&gt;Installation&lt;/h1&gt;
&lt;h2 id="download-android-studio"&gt;Download Android Studio&lt;/h2&gt;
&lt;p&gt;先到&lt;a href="https://developer.android.com/sdk/installing/studio.html"&gt;官網&lt;/a&gt;下載 Android Studio ( 這篇文以 Windows 為例 )&lt;/p&gt;
&lt;p&gt;&lt;img alt="1_download" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/iFQ6JJY.png"/&gt;&lt;/p&gt;
&lt;p&gt;下載後會進入到下面的教學頁面&lt;br/&gt;
其實寫得還蠻清楚的，所以如果可以接受就可以跳過以下的教學了 XD&lt;br/&gt;
&lt;img alt="2_Installation_Guide" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/gkttlS9.png"/&gt;&lt;/p&gt;
&lt;h2 id="install-jdk"&gt;Install JDK&lt;/h2&gt;
&lt;p&gt;在安裝 Android Studio 前，要先安裝好 JDK&lt;br/&gt;
現在最新的版本是 JDK 8，可以到&lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html"&gt;這個連結&lt;/a&gt;下載&lt;/p&gt;
&lt;p&gt;&lt;img alt="3_jdk1" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/0om5D2M.png"/&gt;&lt;br/&gt;
選好自己的作業系統&lt;br/&gt;
&lt;img alt="4_jdk2" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/D0G7XLq.png"/&gt;&lt;br/&gt;
再來就是一直下一步囉 XD&lt;/p&gt;
&lt;h3 id="_1"&gt;設定環境變數&lt;/h3&gt;
&lt;p&gt;安裝完 JDK 後，我們還需要設定環境變數&lt;br/&gt;
以 Win7 為例&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;電腦  內容 → 進階系統設定 → 進階 → 環境變數&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接著在 &lt;code&gt;系統變數&lt;/code&gt; 這個欄位按下 &lt;code&gt;新增&lt;/code&gt;&lt;br/&gt;
變數名稱 輸入 &lt;code&gt;JAVA_HOME&lt;/code&gt; ( 可能會因為 Android Studio 的版本而不同 )&lt;br/&gt;
變數值 輸入 你安裝 JDK 的路徑 (e.g. &lt;code&gt;C:\Program Files\Java\jdk1.8.0_20&lt;/code&gt;)&lt;br/&gt;
&lt;img alt="5_env_var" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/KYG8pBO.png"/&gt;&lt;/p&gt;
&lt;h2 id="install-android-studio"&gt;Install Android Studio&lt;/h2&gt;
&lt;p&gt;安裝過程中會問要讓&lt;strong&gt;目前使用者&lt;/strong&gt;使用還是&lt;strong&gt;所有使用者&lt;/strong&gt;使用&lt;br/&gt;
再來會要你選安裝目錄&lt;br/&gt;
如果不想理它，就一直下一步吧&lt;br/&gt;
除了 Android Studio 外，可能還會安裝一些 Dependent 的套件&lt;br/&gt;
不過就放著讓他跑就可以了&lt;/p&gt;
&lt;h2 id="install-sdk-manager"&gt;Install SDK manager&lt;/h2&gt;
&lt;p&gt;自從 0.8.14 版之後，SDK Manager 就不會再跟 Android Studio 綁在一起&lt;br/&gt;
所以要額外&lt;a href="https://developer.android.com/sdk/index.html?hl=i"&gt;下載 SDK tools&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;如果是在 0.8.14 版前安裝的也不用擔心，更新後需要多做設定
Android Studio 會自動幫你把 SDK 的路徑設定到原本的位置
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把網頁往下拉會看到 SDK Tools Only&lt;br/&gt;
&lt;img alt="18_sdk_download" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/TctIzTa.png"/&gt;&lt;br/&gt;
下載完解壓縮到你要的路徑&lt;br/&gt;
之後設定 SDK manager 設定到這個路徑就可以了&lt;/p&gt;
&lt;p&gt;開始 Android Studio&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Configure → Project Default → Project Structure&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="20_set_sdk_1" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/Tj82hvs.png"/&gt;&lt;/p&gt;
&lt;p&gt;記得要把 SDK 的路徑改成剛剛安裝的路徑&lt;br/&gt;
&lt;img alt="21_set_sdk_2" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/ETqkNhX.png"/&gt;&lt;/p&gt;
&lt;h2 id="sdk-setup"&gt;SDK setup&lt;/h2&gt;
&lt;p&gt;接著我們要設定 SDK&lt;br/&gt;
現在最新的版本是 Android 5.0 (API 21)&lt;/p&gt;
&lt;p&gt;先開啟 Android Studio，進入 &lt;code&gt;Configure&lt;/code&gt;&lt;br/&gt;
&lt;img alt="6_SDK1" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/c8rDZxZ.png"/&gt;&lt;br/&gt;
進入 &lt;code&gt;SDK Manager&lt;/code&gt;&lt;br/&gt;
&lt;img alt="7_SDK2" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/pBVHp7S.png"/&gt;&lt;br/&gt;
把選單拉到 API 21 選起來&lt;br/&gt;
&lt;img alt="19_sdk_21" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/3lytBi2.png"/&gt;&lt;/p&gt;
&lt;p&gt;接著把選單拉到最後選&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Android Support Repository&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Android support Library&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Coogle Play services&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Repository&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google USB Driver&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Intel X86 Emulator Accelerator(HAXM installer)&lt;/strong&gt;&lt;br/&gt;
    最後的這個 HAXM 是為了讓模擬器加速用的，從 SDK manager 下載完之後，還有另外的安裝步驟&lt;br/&gt;
&lt;img alt="9_SDK4" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/UM8w30n.png"/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;安裝到這裡 Android Studio 已經可以使用了&lt;/strong&gt;，不過還可以再做一些設定讓手機模擬器跑得更快&lt;/p&gt;
&lt;h2 id="emulator-accelerator"&gt;Emulator Accelerator&lt;/h2&gt;
&lt;p&gt;在安裝 HAXM 前要先確定 Intel VT-x 是否有在你的 BIOS 被啟用&lt;br/&gt;
我沒遇到這個問題，所以我也不知道怎麼解決＠＠&lt;br/&gt;
可以在 cmd 下 &lt;code&gt;sc query intelhaxm&lt;/code&gt; 來看有沒有開啓，只要有看到 Running 應該就是沒問題了&lt;/p&gt;
&lt;p&gt;再來到 Android Studio 的目錄下找到 HAXM 的安裝檔&lt;br/&gt;
它被放在 &lt;code&gt;...\android-studio\sdk\extras\intel\Hardware_Accelerated_Execution_Manager&lt;/code&gt;&lt;br/&gt;
... 指的是安裝的目錄&lt;/p&gt;
&lt;p&gt;看到 &lt;code&gt;intelhaxm&lt;/code&gt; 按下去 !&lt;br/&gt;
&lt;img alt="10_Intel_accelator" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/NX8lULd.png"/&gt;&lt;br/&gt;
一直按下一步就大功告成了&lt;/p&gt;
&lt;p&gt;不過 ...&lt;br/&gt;
這樣還是不夠快，我們需要更快的模擬器！&lt;br/&gt;
Genymotion ！！！&lt;/p&gt;
&lt;h1 id="genymotion"&gt;Genymotion&lt;/h1&gt;
&lt;p&gt;安裝 Genymotion 的模擬器前，我們必須先到&lt;a href="http://www.genymotion.com/"&gt;官網&lt;/a&gt;註冊&lt;/p&gt;
&lt;h2 id="download"&gt;Download&lt;/h2&gt;
&lt;p&gt;進入下載頁面後，往下拉會看到 Windows，mac 和 Liunx 版&lt;/p&gt;
&lt;p&gt;Windows 只要直接安裝就可以了，它會連 Oracle Virtual Box 一起安裝&lt;br/&gt;
&lt;img alt="11_genymotiong_win" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/4oUXeea.png"/&gt;&lt;/p&gt;
&lt;p&gt;mac 和 Linux 還要額外先安裝 &lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;Oracle Virtual Box&lt;/a&gt;&lt;br/&gt;
&lt;img alt="12_genymotion_Unix" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/NMQD2Jc.png"/&gt;&lt;/p&gt;
&lt;h2 id="install-ide-plug-in"&gt;Install IDE plug-in&lt;/h2&gt;
&lt;p&gt;在下載頁面往下拉會看到 genymotion 在 IDE 上的 plugin，可以讓我們從 IDE 內直接開啟 Genymothion&lt;br/&gt;
Android Studio 屬於 IntelliJ IDEA，所以我們就照著他上面的指示設定&lt;br/&gt;
&lt;img alt="13_genymotion_plug in" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/7C0d8aU.png"/&gt;&lt;/p&gt;
&lt;p&gt;開啟 Android Studio&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;File → Settings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="14_plug-in" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/vemudkb.png"/&gt;&lt;/p&gt;
&lt;p&gt;找到 Plungins ，接著點 Browse repositories&lt;br/&gt;
&lt;img alt="15_plug-in2" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/UnP1hiQ.png"/&gt;&lt;/p&gt;
&lt;p&gt;上方輸入 Genymotion 就可找到，接著就安裝它吧&lt;br/&gt;
&lt;img alt="16_plug-in3" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/xzjsTmz.png"/&gt;&lt;/p&gt;
&lt;p&gt;安裝完記得重新啟動 Android Studio，就會在工具列看到多一個按鈕，Genymotion 就安裝完成囉&lt;br/&gt;
&lt;img alt="17_plug-in4" src="/images/posts-image/2014-11-23-android-studio-and-genymotion-installation/I2RbFEG.png"/&gt;&lt;/p&gt;
&lt;p&gt;第一次使用會要求設定 Genymotion 安裝的資料夾 (e.g. &lt;code&gt;C:\Program Files\Genymobile\Genymotion&lt;/code&gt;)&lt;br/&gt;
設定完就可以開始使用 Genymotion 了&lt;/p&gt;
&lt;h2 id="plugins"&gt;Plugins&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IdeaVim: 如果你是重度 Vim 狂熱者，這絕對是你不能不裝的 plugin!!!&lt;/li&gt;
&lt;li&gt;MarkDown: 這個 Plugin 提供直接在 Android Studio 中，Preview Markdown 的功能&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="Android"></category></entry><entry><title>Dual Boot FreeBSD Using GRUB2</title><link href="https://lee-w.github.io/posts/tech/2014/10/dual-boot-freebsd-using-grub2" rel="alternate"></link><published>2014-10-21T08:56:00+08:00</published><updated>2014-10-21T08:56:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-10-21:/posts/tech/2014/10/dual-boot-freebsd-using-grub2</id><summary type="html">&lt;p&gt;其實原本的標題是 &lt;code&gt;Dual Boot FreeBSD with Ubuntu&lt;/code&gt;&lt;br&gt;
這篇文章寫的都是用 Ubuntu 測試的&lt;br&gt;
不過我想只要是 grub2 應該都差不多吧 XD&lt;/p&gt;
</summary><content type="html">&lt;p&gt;其實原本的標題是 &lt;code&gt;Dual Boot FreeBSD with Ubuntu&lt;/code&gt;&lt;br&gt;
這篇文章寫的都是用 Ubuntu 測試的&lt;br&gt;
不過我想只要是 grub2 應該都差不多吧 XD&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="freebsd-grub"&gt;加入 FreeBSD 到 grub 開機選單&lt;/h2&gt;
&lt;h3 id="grub"&gt;更改 grub 的設定檔&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vi /etc/grub.d/40_Custom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;加入下面這幾行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;menuentry &amp;quot;FreeBSD (/boot/loader)&amp;quot; {
    insmod ufs2
    set root=(hd0,1,a)
    kfreebsd /boot/loader
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;FreeBSD (/boot/loader)&lt;/code&gt; 是在開機時顯示的名稱&lt;br&gt;
&lt;code&gt;(hd0,1,a)&lt;/code&gt; 要根據你的 FreeBSD 灌在磁碟的哪一塊決定&lt;/p&gt;
&lt;h3 id="grub_1"&gt;更新 grub 設定檔&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo update-grub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就會在開機選單上看到 FreeBSD 了&lt;/p&gt;
&lt;p&gt;其實還有一些其他的設定方法&lt;br&gt;
可以參考&lt;a href="http://unix.stackexchange.com/questions/16886/set-up-grub2-to-boot-freebsd-using-either-ubuntu-tools-or-liveusb-to-find-what-p"&gt;Set up Grub2 to boot Freebsd&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="grub_2"&gt;換 grub 開機順序&lt;/h2&gt;
&lt;p&gt;如果希望改變預設的開機順序，就必須要修改下面的檔案 &lt;code&gt;/etc/default/grub&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vi /etc/default/grub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會看到下面這串&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GRUB_DEFAULT=0
#GRUB_HIDDEN_TIMEOUT=0
GRUB_HIDDEN_TIMEOUT_QUIET=true
GRUB_TIMEOUT=10
GRUB_DISTRIBUTOR=`lsb_release -i -s 2&amp;gt; /dev/null || echo Debian`
GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash&amp;quot;
GRUB_CMDLINE_LINUX=&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把第 1 行設定為多少 (注意是從 0 開始)，就會預設從那裡開機&lt;/p&gt;
&lt;h2 id="ubuntu-mount-freebsd"&gt;在 ubuntu mount FreeBSD&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo mount -t ufs -r -o &lt;span class="nv"&gt;ufstype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ufs2 /dev/sda4 ~/freebsd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Tech"></category><category term="Linux-Unix"></category><category term="Dual Boot"></category></entry><entry><title>powerline on zsh, vim, tmux</title><link href="https://lee-w.github.io/posts/tech/2014/07/powerline-on-zsh-vim-tmux" rel="alternate"></link><published>2014-07-30T15:01:00+08:00</published><updated>2014-07-30T15:01:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-07-30:/posts/tech/2014/07/powerline-on-zsh-vim-tmux</id><summary type="html">&lt;p&gt;用了 vim 的 powerline 後覺得很酷，就找了很多的 powerline 來玩&lt;br&gt;
於是這篇文章產生了 XDD&lt;/p&gt;
</summary><content type="html">&lt;p&gt;用了 vim 的 powerline 後覺得很酷，就找了很多的 powerline 來玩&lt;br&gt;
於是這篇文章產生了 XDD&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;這是各個 powerline 的預覽圖&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;vim&lt;br&gt;
&lt;img alt="1_vim" src="/images/posts-image/2014-07-30-powerline-on-zsh-vim-tmux/VTM4866.png"&gt;&lt;/li&gt;
&lt;li&gt;tmux&lt;br&gt;
&lt;img alt="2_tmux" src="/images/posts-image/2014-07-30-powerline-on-zsh-vim-tmux/LLJ9xjk.png"&gt;&lt;/li&gt;
&lt;li&gt;zsh&lt;br&gt;
&lt;img alt="3_zsh" src="/images/posts-image/2014-07-30-powerline-on-zsh-vim-tmux/tOvzhK3.png"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="powerline"&gt;powerline 字體&lt;/h2&gt;
&lt;p&gt;安裝這些 powerline 之前要先下載 powerline 字體&lt;br&gt;
不然可能會無法正常顯示&lt;br&gt;
在 &lt;a href="https://github.com/Lokaltog/powerline-fonts"&gt;powerline-fonts&lt;/a&gt; 下載後，之後安裝就完成了&lt;br&gt;
&lt;em&gt;記得要把終端機的字體條成這些有 powerline 結尾的字體，我當初就是沒用這個卡了很久 = =&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/Lokaltog/powerline-fonts /tmp/git/clone
sudo mv /tmp/git-clone/powerline-fonts /usr/share/fonts/powerline-fonts
sudo fc-cache -v -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="zsh"&gt;zsh&lt;/h2&gt;
&lt;p&gt;其實 oh-my-zsh 本身就有 agnoster 了&lt;br&gt;
但我更推薦 &lt;a href="https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme"&gt;oh-my-zsh-powerline-theme&lt;/a&gt;&lt;br&gt;
安裝完之後記得再 zshrc 中加入&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ZSH_THEME="powerline"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果要更多客制化設定可以參考 repo 內的設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme /tmp/oh-my-zsh-powerline-theme
/tmp/oh-my-zsh-powerline-theme/oh-my-zsh-powerline-theme/install_in_omz.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="vim"&gt;vim&lt;/h2&gt;
&lt;p&gt;其實我也不是用 vim-powerline&lt;br&gt;
而是 vim-airline&lt;br&gt;
不過基本上好像是差不多的東西，而且 vim-airline 比較輕量化&lt;br&gt;
建議直接用 vundle 這類的套件管理安裝比較方便&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/bling/vim-airline"&gt;vim-airline&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="tmux"&gt;tmux&lt;/h2&gt;
&lt;p&gt;tmux 有非常多的東西可以客製化設定&lt;br&gt;
在各系統也有不同的安裝方式，就自己看 repo 的 readme 文件吧 XD&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/erikw/tmux-powerline"&gt;tmux-powerline&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Linux-Unix"></category><category term="Utility"></category></entry><entry><title>解決 Win 8、Ubuntu 雙系統無法掛載 NTFS 分割區問題</title><link href="https://lee-w.github.io/posts/tech/2014/02/solution-to-win-8-ubuntu-dual-system-cannot-mount-ntfs-parition-problem" rel="alternate"></link><published>2014-02-25T15:40:00+08:00</published><updated>2014-02-25T15:40:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-02-25:/posts/tech/2014/02/solution-to-win-8-ubuntu-dual-system-cannot-mount-ntfs-parition-problem</id><summary type="html">&lt;p&gt;現在安裝了 Win8 和 Ubuntu 雙系統&lt;br&gt;
每次只要開 Win 8 ，再重新開機進到 Ubuntu 就會出現 file system 無法掛載的問題&lt;br&gt;
然後我在兩個系統間共同的 data 分割區就會無法掛載&lt;br&gt;
可是再重開一次 Win 8，問題就神祕的解決了 @@&lt;br&gt;
後來才發現原來是因為 Win 8 的 &lt;strong&gt;Fast Boot&lt;/strong&gt;  造成的&lt;/p&gt;
</summary><content type="html">&lt;p&gt;現在安裝了 Win8 和 Ubuntu 雙系統&lt;br&gt;
每次只要開 Win 8 ，再重新開機進到 Ubuntu 就會出現 file system 無法掛載的問題&lt;br&gt;
然後我在兩個系統間共同的 data 分割區就會無法掛載&lt;br&gt;
可是再重開一次 Win 8，問題就神祕的解決了 @@&lt;br&gt;
後來才發現原來是因為 Win 8 的 &lt;strong&gt;Fast Boot&lt;/strong&gt;  造成的&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2 id="_1"&gt;解決&lt;/h2&gt;
&lt;p&gt;&lt;img alt="win8_start_up" src="/images/posts-image/2014-02-25-solution-to-win-8-ubuntu-dual-system-cannot-mount-ntfs-parition-problem/ohEfCkR.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;控制台 \ 硬體和音效 \ 電源選項 \ 系統設定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只要把 &lt;code&gt;開啟快速啟動&lt;/code&gt; 取消掉就可以了&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://askubuntu.com/questions/291864/cannot-mount-ntfs-partition-in-ubuntu-13-04"&gt;Cannot mount NTFS partition in Ubuntu 13.04 [duplicate]&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Linux-Unix"></category><category term="Dual Boot"></category></entry><entry><title>Git and Git Hub</title><link href="https://lee-w.github.io/posts/tech/2014/02/git-and-git-hub" rel="alternate"></link><published>2014-02-22T16:18:00+08:00</published><updated>2014-02-22T16:18:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-02-22:/posts/tech/2014/02/git-and-git-hub</id><summary type="html">&lt;p&gt;這份筆記已經是舊的版本了&lt;br&gt;
請參考&lt;a href="https://lee-w.github.io/git-tutorial/#/"&gt;新版&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這份筆記已經是舊的版本了&lt;br&gt;
請參考&lt;a href="https://lee-w.github.io/git-tutorial/#/"&gt;新版&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;最近因為專題需要，所以寫了一份簡單的 Git 筆記&lt;br&gt;
裡面大概就是我常用的指令&lt;br&gt;
因為我也只是剛開始使用 Git 沒多久，內容不會太深入&lt;/p&gt;
&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/31515684" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="https://www.slideshare.net/ssuser5e1963/git-and-git-hub-31515684" title="Git and git hub" target="_blank"&gt;Git and git hub&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/ssuser5e1963" target="_blank"&gt; 唯 李 &lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Git"></category><category term="Tutorial"></category><category term="Deprecated"></category></entry><entry><title>Guake terminal</title><link href="https://lee-w.github.io/posts/tech/2014/02/guake-terminal" rel="alternate"></link><published>2014-02-09T07:02:00+08:00</published><updated>2014-02-09T07:02:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-02-09:/posts/tech/2014/02/guake-terminal</id><summary type="html">&lt;p&gt;隱藏在背景的 terminal&lt;br&gt;
並且可以隨時呼叫 (預設是 F12)&lt;/p&gt;
</summary><content type="html">&lt;p&gt;隱藏在背景的 terminal&lt;br&gt;
並且可以隨時呼叫 (預設是 F12)&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;img alt="1_guake" src="/images/posts-image/2014-02-09-guake-terminal/0L95Qtg.png"&gt;&lt;/p&gt;
&lt;h2 id="guake-terminal"&gt;安裝 Guake Terminal&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install guake
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt;設定&lt;/h2&gt;
&lt;h3 id="_2"&gt;滑鼠一移開就自動隱藏&lt;/h3&gt;
&lt;p&gt;從「偏好設定 （Preferences)」勾選「Hide on lost focus」&lt;br&gt;
&lt;img alt="2_hide on focus" src="/images/posts-image/2014-02-09-guake-terminal/Ibp8MX0.png"&gt;&lt;/p&gt;
&lt;h2 id="guake-terminal_1"&gt;開機就啟動 Guake Terminal&lt;/h2&gt;
&lt;p&gt;在「初始應用程式 （Startup Applications) 」把 guake terminal 加上去&lt;br&gt;
&lt;img alt="3_guake start up" src="/images/posts-image/2014-02-09-guake-terminal/sYQ6Klw.png"&gt;&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.arthurtoday.com/2012/08/ubuntu-install-guake-terminal.html#.UvcpWx9KiXo"&gt;Ubuntu 安裝 Guake Terminal&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Linux-Unix"></category><category term="Utility"></category></entry><entry><title>autojump - 在 terminal 中快速跳轉資料夾</title><link href="https://lee-w.github.io/posts/tech/2014/02/autojump" rel="alternate"></link><published>2014-02-01T16:58:00+08:00</published><updated>2014-02-01T16:58:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-02-01:/posts/tech/2014/02/autojump</id><summary type="html">&lt;p&gt;快速跳轉資料夾的工具&lt;/p&gt;
</summary><content type="html">&lt;p&gt;快速跳轉資料夾的工具&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;e.g.,&lt;br&gt;
有個資料夾是 /a/b/c/d/e/f/g/h&lt;br&gt;
原本要輸入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /a/b/c/d/e/f/g/h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可是現在有了 autojump，而且你也去過這個 h 資料夾，你就可以&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;j h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很方便吧！！！&lt;/p&gt;
&lt;h2 id="_1"&gt;安裝&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
git clone https://github.com/joelthelion/autojump
&lt;span class="nb"&gt;cd&lt;/span&gt; autojump
chmod +x install.py
./install.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後把下面這行加入 shell 的設定檔 (e.g. ~/.bashrc  ,  ~/.zshrc)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;amp;&amp;amp; . ~/.autojump/etc/profile.d/autojump.sh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最後只要重開 shell 就完成了&lt;/p&gt;
&lt;h2 id="_2"&gt;使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;最基本的功能當然就是跳轉囉&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;j word
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果有重複的名稱 (e.g. worda, wordb)，就在打一次同樣的指令，就會跳到下一個&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list 現在 autojump 可以跳到的資料夾&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;j -s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;刪除已經背改變路徑或刪除的紀錄&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; j --purge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/joelthelion/autojump/blob/master/README.md"&gt;autojump readme&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Linux-Unix"></category><category term="Utility"></category></entry><entry><title>Linux 開機自動掛載分割區</title><link href="https://lee-w.github.io/posts/tech/2014/02/auto-mount-disk-after-boot" rel="alternate"></link><published>2014-02-01T16:44:00+08:00</published><updated>2014-02-01T16:44:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2014-02-01:/posts/tech/2014/02/auto-mount-disk-after-boot</id><summary type="html">&lt;p&gt;分割區的掛載資訊，存在 /etc/fstab 中，所以需要自動掛載分割區時可以針對此檔案做修改&lt;br&gt;
需要注意的是，如果設定不好，可能會沒辦法開機的！！！&lt;/p&gt;
</summary><content type="html">&lt;p&gt;分割區的掛載資訊，存在 /etc/fstab 中，所以需要自動掛載分割區時可以針對此檔案做修改&lt;br&gt;
需要注意的是，如果設定不好，可能會沒辦法開機的！！！&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;我們先來看一下 /etc/fstab 內的東西&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo cat /etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# /etc/fstab: static file system information.
#
# Use &amp;#39;blkid&amp;#39; to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# &amp;lt;file system&amp;gt; &amp;lt;mount point&amp;gt;   &amp;lt;type&amp;gt;  &amp;lt;options&amp;gt;       &amp;lt;dump&amp;gt;  &amp;lt;pass&amp;gt;
# / was on /dev/sda1 during installation
UUID=c5744283-f105-47e9-8a2e-21f477d895b7 /               ext4    errors=remount-ro 0       1
# swap was on /dev/sda5 during installation
UUID=72b6a10a-f0b6-43ef-927d-0d74673febe7 none            swap    sw              0       0
#data
UUID=571F168F3D98D759 /media/lee/data ntfs auto,rw 0 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;# 是註解&lt;br&gt;
最後六行是比較重要的&lt;br&gt;
1~2 是 root 的掛載&lt;br&gt;
3~4 是 swap 的掛載&lt;br&gt;
5~6 是我自己的 data 的掛載&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#data
UUID=571F168F3D98D759 /media/lee/data ntfs auto,rw 0 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;總共有 6 個欄位&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;掛載硬碟的標籤&lt;ul&gt;
&lt;li&gt;掛載硬碟的標籤我用的是 UUID 的標籤，可以用下面的指令查詢&lt;br&gt;
&lt;code&gt;ls -l /dev/disk/by-uuid/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;也可以直接使用 /dev/sda1 這樣的格式，只是如果硬碟的代號改變，就要再去手動改變比較麻煩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;掛載位置&lt;ul&gt;
&lt;li&gt;掛載的位置要是一個已經存在的位置，建議是一個空的資料夾&lt;/li&gt;
&lt;li&gt;如果不是空的，裏面的東西應該都會被清空&lt;/li&gt;
&lt;li&gt;另外，一個掛載點只能掛載一個 disk&lt;/li&gt;
&lt;li&gt;另外，注意在 Linux 中大小寫是不同的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分隔區格式&lt;ul&gt;
&lt;li&gt;而一般的檔案朝的分割驅格式都是都是 ntfs，不過也可以用指令來查詢&lt;br&gt;
&lt;code&gt;df&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選項&lt;/li&gt;
&lt;li&gt;是否被 dump 備份指令作用&lt;/li&gt;
&lt;li&gt;是否以 fsck 檢驗磁區&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本上 4 5 6 我也沒去研究，如果有興趣的話可以在我最後面附上的參考資料中找到&lt;/p&gt;
&lt;h2 id="_1"&gt;測試&lt;/h2&gt;
&lt;p&gt;先看一下是否有掛載成功&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;df
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;檔案系統         1K-區段      已用      可用 已用 % 掛載點
/dev/sda1      103081248   9259936  88562048   10% /
none                   4         0         4    0% /sys/fs/cgroup
udev             3992780         4   3992776    1% /dev
tmpfs             801368      1168    800200    1% /run
none                5120         0      5120    0% /run/lock
none             4006840      1032   4005808    1% /run/shm
none              102400        44    102356    1% /run/user
/dev/sda6      459942908 229176172 230766736   50% /media/lee/data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;像我的最後面就出現了 data&lt;/p&gt;
&lt;p&gt;之後暫時將它卸載 (若 &lt;code&gt;df&lt;/code&gt; 之後，分割區沒有出現，那就不用做這步了)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo umount /dev/sda6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(/dev/sda6 要取代成你自己的位置 )&lt;br&gt;
接著再執行一次&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;df
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;剛剛的分割區應該會不見，然後執行&lt;br&gt;
開機自動掛載分割區&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo mount -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果沒有錯誤訊息，就在執行一次&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;df
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果掛載的分隔驅再裡面就是成功了&lt;/p&gt;
&lt;p&gt;如果有任何異常，就去看一下 /etc/fstab 是不是有哪裡寫錯了&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://255121.blogspot.tw/2010/05/linux.html"&gt;巴特的微花盆： 筆記： Linux 中設定開機時自動掛載分割區&lt;/a&gt;&lt;/p&gt;</content><category term="Tech"></category><category term="Linux-Unix"></category><category term="Dual Boot"></category></entry><entry><title>[C++] 如何 create thread</title><link href="https://lee-w.github.io/posts/tech/2013/12/how-to-create-thread-in-c-plus-plus" rel="alternate"></link><published>2013-12-11T00:56:00+08:00</published><updated>2013-12-11T00:56:00+08:00</updated><author><name>Lee-W</name></author><id>tag:lee-w.github.io,2013-12-11:/posts/tech/2013/12/how-to-create-thread-in-c-plus-plus</id><summary type="html">&lt;p&gt;之前因為作業需要使用到 multi-thread，就留下了這篇紀錄&lt;br&gt;
這篇會稍微介紹 C++11 的 &lt;code&gt;thread&lt;/code&gt; 函式庫，還有一點點和 &lt;code&gt;pthread&lt;/code&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;之前因為作業需要使用到 multi-thread，就留下了這篇紀錄&lt;br&gt;
這篇會稍微介紹 C++11 的 &lt;code&gt;thread&lt;/code&gt; 函式庫，還有一點點和 &lt;code&gt;pthread&lt;/code&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;要使用 C++11 的 &lt;code&gt;thread&lt;/code&gt; 在編譯時要加上 &lt;code&gt;-std=c++11 -pthread&lt;/code&gt;&lt;br&gt;
(&lt;code&gt;-std=c++ -lphread&lt;/code&gt; 好像也可以 )&lt;/p&gt;
&lt;p&gt;e.g. &lt;code&gt;g++ -o t thread.cpp -std=c++11 -pthread&lt;/code&gt;&lt;br&gt;
&lt;code&gt;-std=c++11&lt;/code&gt; :  是指定 c++ 的版本&lt;br&gt;
&lt;code&gt;-pthread&lt;/code&gt; ( 或 &lt;code&gt;-lpthread&lt;/code&gt;)：使用 thread 的 liberary&lt;/p&gt;
&lt;p&gt;下面有寫到 join 的部份&lt;br&gt;
join 是開啟這個 thread 的上層程式必須等待到這個 thread 的工作結束了，才可以繼續下面的工作&lt;br&gt;
也就是 join 以上的程式會與 thread 搶 CPU，join 以後的程式就會等待到 thread 結束才開始&lt;/p&gt;
&lt;p&gt;那就直接來看 code 吧&lt;/p&gt;
&lt;h2 id="c-11-thread"&gt;C++ 11 thread&lt;/h2&gt;
&lt;h3 id="main-thread"&gt;在 main 裡面直接開啟 thread&lt;/h3&gt;
&lt;p&gt;直接宣告 thread 型態的變數&lt;br&gt;
thread 的 constructor 的第一個參數是函數名稱，第二個以後就是原本函數的參數&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is funtion1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is function2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="nf"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="nf"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就可以產生兩個 thread，他們會彼此搶 CPU 的資源&lt;br&gt;
cout 似乎是每一個 &amp;lt;&amp;lt; 會去搶一次，所以如果想要一次印完全部，可能可以考慮使用 printf 或者是 thread 的 lock 功能&lt;/p&gt;
&lt;h3 id="class-thread"&gt;在 class 內開啟 thread&lt;/h3&gt;
&lt;p&gt;用上面的方法直接呼叫同個 class 的 function 會出現錯誤&lt;br&gt;
所以就必須用下面的方法&lt;br&gt;
在宣告 thread 的時候&lt;br&gt;
第 1 個參數必須是這個 function 的完整 reference&lt;br&gt;
第 2 個用 this&lt;br&gt;
第 3 個以後才是原本 function 的參數&lt;br&gt;
p.s. 如果 fun1 是 static，則不用 this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is funtion1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後是如何呼叫其他 class 的 function，這裡包含兩個例子 (main, class B)&lt;br&gt;
想法跟上面那種很接近，只是第 2 個參數改成那個物件的實體&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is funtion1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is function2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kr"&gt;thread&lt;/span&gt; &lt;span class="nf"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="pthread"&gt;基本的 pthread 使用&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;arg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argumentForFun1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;argumentForFun1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;pthread_t&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;pthread_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;argumentForFun1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;pthread_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至於 pthread 如何用在 class 的 function 上&lt;br&gt;
可以將 function 加上 static&lt;br&gt;
同樣第 3 個參數也要改成 &amp;amp;A::fun1&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://programmingpaul.blogspot.tw/2013/08/c-thread-function.html"&gt;資訊小兵的胡言亂語 : [C++] Thread Function 相關測試&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://17089349.blog.hexun.com.tw/65836836_d.html"&gt;解析 Linux 中多線程編程並傳遞多個參數實例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/xianghang123/archive/2011/08/11/2134927.html"&gt;linux 下 C/C++, 多线程 pthread&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Tech"></category><category term="C++"></category><category term="Thread"></category></entry></feed>