{"pages":[{"title":"About Me","text":"Hi, this is Wei Lee. I'm a Python Programmer Reader Traveler Ukulele Player Locker Star Wars Fan As a programmer, I'm familiar with web backend development (mainly flask) but open to any opportunities. Resume Experience [Apr 2017 - Present] Independent Contractor, Slice Technologies, Inc Software Development [May 2018 - Present] Chief Teaching Assistant, X-Village Managing Reviewing the teaching proposal of Python course, Programming Design Foundation Designing exercises for Data Structure , the first section of Computer Science Foundations Lecturing Web Programming, Database/Cloud Computing , the fourth section of Computer Science Foundations X-Village is an experimental education program aiming to equip students not major in computer science with the ability of computational thinking and to enhance future cooperation between computer science and other areas. I am the executor of the program and the leader of the teaching assistant team. Besides, I designed a half day exercise for Data Structure and lectured a four-hour web backend course for Web Programming, Database/Cloud Computing . Website Facebook Fan Page [July 2015 - July 2016] Substitute Military Service, K-12 Education Administration, Ministry of Education System Maintenance Automation Program Development Education [2016-2018] Master, Computer Science and Information Engineering National Cheng Kung University, Tainan GPA: 4.16/4.3 [2011-2015] Bachelor, Industrial and Information Management Double Major: Computer Science and Information Engineering National Cheng Kung University, Tainan GPA: 3.77/4.0 (CSIE GA: 3.87/4.0) Talk and Tutorial Experiences [2018/8/16] X-Village - Web Course CRUD in Flask [2018/2/27] NCKU CSIE - Competitions in Data Sciences and Artificial Intelligence (資料科學與人工智慧競技) Intro to Python Data Science Tools [2017/01/22] 2018成大工資管營 資管講座 (一場工資管營的演講) [2016/12/08] NCKU CSIE - Introduction to Knowledge Discovery and Data Engineering (知識挖掘與資料工程導論) Bot Development [2016/11/03] 深度之夜 Keras Demo For more slides, please check my Speaker Deck . Award Honorable Mention, 2013 Railway Application Section Problem Solving Competition Publication Wei Lee, Chien-Wei Chang, Po-An Yang, Chi-Hsuan Huang, Ming-Kuang Wu, Chu-Cheng Hsieh, Kun-Ta Chuang \"Effective Quality Assurance for Data Labels through Crowdsourcing and Domain Expert Collaboration\" 21st International Conference on Extending Database Technology, Demo Track (EDBT-2018) I-Lin Wang, Wei Lee, Chiao-Yu Liao \"Effective Heuristics for Scheduling Hump and Pullback Engines in Railroad Yard Operational Plans\" Proceedings of the 10th Annual Conference of the Operations Research Society at Taiwan (ORSTW 2013) Projects Open Source Contributions git-extras ( tj/git-extras ) batavia ( pybee/batavia ) wtforms-json ( kvesteri/wtforms-json ) pipreqs ( bndr/pipreqs ) pip-check ( bartTC/pip-check ) pelican-clean-blog ( gilsondev/pelican-clean-blog ) Web SITW 二手網 (Backend Development) Chat Bot Dengue Line Bot Server Telegram EchoBot Line EchoBot Utility Flickr Album Downloader LINE Message Parser PttCraweler NCKU Related NCKU Grade NCKU Course Parser NCKU Course Checker Tutorial and Study Note Slide Git Tutorial Sample: Git-Tutorial-Sample Books Learning Python 5e Note Python Cookbook Clean Code MOOCs Machine Learning (Coursera) Intro to Machine Learning Intro to Data Science Udacity Assignments for Udacity Deep Learning class with TensorFlow","tags":"pages","url":"http://lee-w.github.io/pages/about-me.html"},{"title":"About This Blog","text":"Welcome to Wei Lee's blog. Let me introduce you to my blog. 1. Tech Since I'm a developer and like sharing, most of my article would be related to programming or other tech topics. 2. Book I love reading as well. It would be a shame if I finish reading the book and forget everything. Thus, I take notes for them. 3. Gossiping Sometimes I just want to share my thought, and those posts would be placed here. 4. Paper Summary I was a graduate student and had read some papers. Here are summarizations for those papers. As you can see, I'm not a native English user. If you find any error, please leave a comment below the article or contact me. Thanks in advance!","tags":"pages","url":"http://lee-w.github.io/pages/about-this-blog.html"},{"title":"[Note] The Clean Coder","text":"過了幾年又重新看過這本書才慢慢能感受到裡面說的 Uncle Bob 的書真的每個階段看都會有很不一樣的感覺 很值得買回來收 xD 幾年前第一次看這本書的時候 寫程式大多只是交作業，頂多就跟其他的同學一起交大一點的作業或開發一些小專案 能不要被雷（或不要雷別人）就很不錯了 當時記錄下的摘要也就沒什麼內容（ [Book] Clean Coder ） 到了現在。加減算是做過稍微大一點的專案，也帶過一些小專案 重新看過這本書，就慢慢理解了一點 Uncle Bob 想說的 關於本書 什麼是軟體專業人士？ 軟體專業人士如何行事？ 軟體專業人士如何處理衝突，「應對」緊湊的開發進度表？如何和不切實際的管理人員打交道？ 軟體專業人士何時應該說「不」？怎麼說？ 軟體專業人士如何「應對」壓力？ 第一章：專業主義 擔當責任 專業人士如果犯了錯，只好 自己 收拾殘局 專業主義就代表著 「擔當責任」 你說的沒錯。軟體發展太複雜了，不可能沒什麼Bug。但很不幸，這個理由並不能為你開脫。人體太複雜了，不可能完全理解，但醫生仍誓言不傷害病人。如果他們不拿人體的複雜性做託辭，我們又怎麼能拿上述理由，開脫自已的責任呢？ 程式難免出現 bug ，但這不意味著你不用對他們負責；沒人能寫出完美的軟體，但這不代表你不用對不完美負責。 每次 QA 找出問題時，或者更糟糕的是「用戶找出問題」時，你都該震驚羞愧，並決心以此為戒。 自動化測試 寫一些隨時都能執行的「單元測試」，然後盡可能地多執行 要測試多少程式碼呢？ -> 當然是全部！全部都要測！ 但有些程式碼不是很難測嗎？ 沒錯。但之所以難測，是因為設計時沒考慮如何測試 唯一的解決辦法就是要設計 「易於測試的程式碼」 結構 想證明軟體易於修改，唯一的辦法就是「做些實際的修改」 如果發現這些修改不如想像中簡單，就應該改進設計，讓後續的改變更簡單 職業道德 你應該計畫每週的60小時中 40小時給雇主 20小時給自己 （大約每天 3 小時） 不為雇主工作，為自己的職業發展工作 了解你的領域 每個專業軟體發展人員 至少 必須精通的事項 Design patterns GOF POSA Design principles SOLID Methods XP Scrum Lean Kanban Waterflow 結構化分析 結構化設計 and etc. Disciplines TDD 物件導向設計 結構化程式設計 CI Pair Programming Artifacts UML DFD (Data Flow Diagram) 結構圖 Petri net 狀態遷移圖表 流程圖 決策表 學習 自我學習 讀書, 關注 blog, tweets, 參加 conference, 訪問用戶群, 參與讀書會 and etc. 協作 輔導 專業人士會「視輔導新人為己任」，他們不會放任未經輔導的新手胡打亂撞 了解業務領域 如果撰寫財務系統，你就該對財務領域有所了解 你未必要成為該領域的專家，但你仍需要勤勉，付出相當的努力來認識業務領域。 最不專業的做法是，只簡單地按照規格說明來撰寫程式碼，但卻對於那些業務為什麼需要做那樣的規格定義不求甚解。相反的，你應該對該領域有所瞭解，能辨別、執行規格說明書的錯誤 第二章：説「不」 Do or do not ! There is no try! —— Yoda 專業人士敢於說明真相而不屈從於權勢。專業人士有勇氣對他們的經理說「不」。 難道不該照你老闆說的去做嗎？ 不該。只要你是一名專業人士，那就不該 奴隸沒有權利說「不」。勞工或許也對說「不」有所顧慮。但是專業人士應該懂得說「不」 你的經理要求你在明天之前完成登入頁面，這就是他在追求和捍衛的一個目標，那是他的工作職責。如果你明知第二天之前不可能完成登入頁面，嘴上卻說「好的，我會試試看」，那麼便是你失職了。這時候，唯一盡責的方式便是說「不，這不可能」 可能得最好結果 是你和你的經理共同追求的目標。 最關鍵的是要找到那個「共同目標」，而這往往有賴於「協商」。 「為什麼」重要嗎？ 如果你的主管恰好有「技術背景」和「好脾氣」去傾聽理解，這些解釋也許有用 另一種狀況是，主管會不認同這樣的結論或做法不對，可能會說出不用做完整的測試和程式碼審核 有時候，提供太多細節，只會變成一個口令一個動作的管理方式。 第三章：説「是」 作出承諾包含三步驟 口頭上說自己將會去做 心裡認真對待自己所做出的能諾 真的付諸行動去做 識別「缺乏承諾」的徵兆 need / should 我們需要把這工作做完 我需要減肥 有人應當負責去推動這件事 hope / wish 希望明天我能完成這個任務 希望改天我們能見宴嗎 但願我有時間做這件事 但願電腦更快點 Let's (而不是「讓我」) 讓我們回頭見 讓我們把這工作做完 真正的承諾聽起來是怎樣的 我將在...之前... e.g., 我將在星期二之前完成這個任務 你對自己會做某件事做了清晰的事實陳述，而且還明確說明了完成期限 之所以沒成功，是因為我寄望於某某人去做這件事 你只能承諾自己能 完全掌控 的事 如果最終目標依賴於他人，那麼你就應該採取些具體行動以接近最終目標 之所以沒成功，是因為有些時候我真的無能為力 如果你無法兌現承諾，那麼最重要的就是「儘早向你承諾對象發聲預警，越快越好，越早越好」。 如果你不儘早告訴他人可能的問題，就錯失了讓他們幫你兌現能諾的機會。 第四章：寫程式 做好準備 寫程式是件累人的事，你必須做到 讓程式碼能正常工作。理解當前要解決的問題和如何解決，並且確保程式碼忠實的依循解決方案 幫客戶解決問題 很多時候，客戶提出的需求其實並不能真正解決他們自己的問題。這有賴於你去發現這些問題並與客戶交流，以確保能滿足客戶的真實需求 。 程式碼必須和現有系統整合，並妥善管理好各種相依關係，不能讓系統僵化 寫程式時必須遵循穩工程原則 其他的程式設計師必須能讀懂你的程式碼 這包括寫好註解、精心淬煉程式碼，這可能是程式設計師最難精通的一項。 感到疲勞或心煩意亂， 千萬別寫程式 奉獻精神和職業素養更主要的意義在於「遵守紀律原則」而非成為「長時間的工作狂」 要確保自己已經幾睡眠、健康和生活方式調整到最佳狀態，這樣才能做到每天的8小時工作時間內 全力以赴 創意輸入 「創意輸出」依賴於「創意出入」 -> 廣泛閱讀 保持節奏、知道何時應該離開一會 軟體開發是一場馬拉松，不是短跑衝刺 沒解決這個問題不能回家 噢不，你可以回家，而且是應該回家！ 創意和智力來自於大腦的高速運轉，當你感到疲勞時，它們就不翼而飛了 進度延遲 即使是最優秀的程式設計師、最敬業的員工，也不能避免碰到延遲 管理延遲的要訣就是 早期檢測和保持透明 根據目標定期衡量進度，使用三個考慮到各種因素的期限， 不要把預估和期望混淆在一起 樂觀預估, 常態預估, 悲觀預估 不要經受不住誘惑盲目衝刺 你無法更快的寫完程式碼。試圖這麼做，最終只會讓自己變得更慢，同時也只能製造出一堆混亂，讓其他人也慢下來 交付失敗 程式設計師所能表現的不專業中，最糟糕的就是，明知道還沒有完成任務卻宣稱已經完成 明確定義「完成」 最好的方法是讓業務分析師和測試人員建立一套自動化的驗收測試，只有完全通過這些驗收測試，開發任務才能算已經完成 幫助 作為專業人士，你要以能隨時幫助別人為榮 你的工作不可能重要到你不能花一丁點時間來幫助別人 這並不是說你不需要獨處的時間 -> 直接、禮貌的讓人知道某個時間區段不希望受到干擾，其餘的時段敞開大門樂於幫助他人 要學會如何請求幫助 輔導 花時間親自輔導手底下的年輕程式設計師，是資深程式設計師的「專業職責所在」 同樣的道理，向資深導師尋求輔導，也是年輕程式設計師的「專業職責」 第五章：測試驅動開發 TDD 的三大法則 在撰寫一個單元測試（測試失敗的單元測試）前，不可撰寫任何產品程式 只撰寫剛好無法通過的單元測試，不能編譯也算無法通過 只撰寫剛好能通過當前測試失敗的產品程式 TDD 的優勢 確定性 缺陷注入率 勇氣 擁有一套值得信賴的測試，便可完全打消對修改程式碼的全部恐懼。當看見糟糕的程式碼時，就可以放手整理 文件 單元測試就是文件。他們描述了系統的最底層設計細節 設計 基於測試先行的需要，會迫使你去思考什麼才是 好的設計 與採用測試先行方式編寫的測試程式碼比起來，後寫的測試在深度和捕捉錯誤的靈敏度方面要遜色很多 第六章：練習 自身經驗的拓展 老闆通常只會限定一種語言、一種平台，以及程式設計師工作目標的專業領域。這樣會導致經驗不夠豐富的程式設計師，其領域和思維都被侷限 程式設計師發現，面對這個行業的週期性變化造成的新局面，自己並沒有做好準備 保持不落伍的一種方法是為 open source project 貢獻程式碼 嘗試對自己不習慣的語言、平台、領域做出貢獻 第七章：驗收測試 定義驗收測試 「業務方與開發方合作編寫的測試」，其目的在於確認需求已經完成了 「完成」意味著 所有程式碼都寫完了 所有的測試都通過了 QA 和需求方已經認可 測試的協商與被動推進 身為專業開發人員，「與撰寫測試的人協商並改進測試」是你的職責。絕不能被動接受測試，更不能對自己說：「噢，測試就是這麼要求的，我又得這麼做。」 層級 對象 單元測試 系統內部 呼叫特定類別方法 驗收測試 系統外部 通常在 API 或 UI 層級進行 結論 細節交流是件麻煩事。尤其開發方和業務方交流關於程式的細節時，更是如此。 通常，各方握手言歡，以為其他人都明白自己的意思。雙方以為取得了共識，然後帶著截然不同的想法離開，這種事屢見不顯。 要解決開發方和業務方的溝通問題，我 (Uncle Bob) 所知道的唯一有效辦法是「編寫自動化的驗收測試」。 第八章：測試策略 職位 測試面向 業務人員 正常路徑測試 (happy-pathtest) QA 包含極端狀況 (corner)、邊界條件 (boundary)的異常路徑測試(unhappy-path) 自動化測試金字塔 測試 覆蓋率 測試介面 人工探索式測試 ~5% 系統測試 ~10% gui 整合測試 ~20% api 元件測試 ~50% api 單元測試 ~100% 單元測試 目的： 在最低層次上定義系統 先寫測試，在寫程式碼 這些應該作為 CI 的一部分執行，以確保程式設計師的程式碼意圖沒有遭到破壞 元件測試 需要使用合適的 mocking 或 test-doubling，解開「系統和其他元件」的耦合 由 QA 和業務人員編寫，開發人員提供輔助 整合測試 目的： 確認系統架構層面結構正確 只對元件很多的較大型系統才具有意義 由系統架構師或 lead designers 來編寫 系統測試 針對「整個整合完畢的系統」來執行的自動化測試 不會直接測試業務規則，而是測試系統是否以正確組裝完畢 應包含產能測試和性能測試 由系統架構師和 technical leads 來編寫 人工探索式測試 目的： 驗證預期行為時，探索系統預期以外的行為 第九章：時間管理 會議 關於會議，有兩條真理 1. 會議是必須的 2. 會議浪費了大量的時間 離席 仔細管理自己的時間是你的責任。如果你發現參加某個會議是在浪費時間，就應當想個禮貌的辦法出來 顯然，你不該大喊「這會議真讓人厭煩」，沒有必要採取粗魯的辦法。可以選個適當時機來問問大家，你的出席是否必要。你可以解釋說，自己抽不出更多的時間用於這場會議，問問有沒有辦法加快討論，或者另選時間 繼續參加對你沒有太多意義的會議，是不專業的行為 爭論 / 反對 如果觀點無法在短時間（5 ~ 30 分鐘）內達成一致，就永遠無法達成一致 唯一的解決方法是「去取得資料，讓資料來說話」 「既然其他人想要這樣做，就這麼做吧」這可能是非專業的行為中最糟糕的了，千萬千萬不要這麼做 如果你同意了，就 必須 拿出行動來 專注力 Manna 專注力是稀有的資源 如果你用光了自己的專注力 Manna，必須花一個小時或更多時間做不需要專注力的事情來補充它 專業開發人員會安排好他們的睡眠，保證清晨有飽滿的專注力 Manna 去上班 肌肉專注力有助於改善新制專注力，而不僅僅是簡單恢復 定期訓練肌肉專注力，可以提升心智專注力的上限 要避免的行為 優先順序錯亂 無論什麼原因，我們都可以找到辦法逃避真正的工作。提高某項任務的優先順序，之後就有藉口延後真正急迫的任務 專業開發人員會評估每項任務的優先順序，排除個人的喜好和需求，按照真實的緊急程度來執行任務 死胡同 專業開發人員不會執著於不容放棄也無法繞開的 idea。他們會保持開放的頭腦來聽取其他建議，所以即便走到盡頭，他們仍然有選擇 第10章：預估 承諾 v.s. 預估 承諾是必須做到的 預估是一種「猜測」，不帶任何承諾的色彩。之所以要預估，是因為不知道要花多少時間 PERT (Program Evaluation and Review Technique) 三元分析法 O: Optimistic Estimate 一切都很順利的完成時間 N: Nominal Estimate 一般來說的完成時間 P: Pessimistic Estimate 遇到各種意外地完成時間 $ \\mu = \\frac{O+4N+P}{6} $ 任務期望完成的時間 $ \\sigma = \\frac{P-O}{6} $ 任務完成機率分布的標準差 大數法則 把大任務分成許多小任務，分開預估再加總，結果會比單獨評估大任務要精確得多 第11章：壓力 避免壓力 承諾 避免對「沒有把握達成最後期限的工作」做出「承諾」 業務方總是期望能夠拿到這些承諾，因為他們想消除風險。我們要做的就是日風險量會，必將他們陳述給業務方，這樣他們就能做好相對的準備。 有時，有人會代我們做出承諾 出於責任感，我們必須主動協助找到方法來兌現這些承諾，但是一定 不能接受 這些承諾 危機中的紀律 如果在危機中你改變了行為，就說明你並不是真的相信常規行為中的紀律 如果在平時你會注意程式碼整潔，但在危機時刻，你卻會產出髒亂的程式碼，就說明你並不真正相信混亂會導致速度下降 應對壓力 不要驚慌失措 溝通 讓你的團隊或主管知道你身陷困境。告訴他們你為走出困境置地的最佳計畫。請求他們的支援與指引。避免製造意料之外的詫異 依靠你的紀律原則 依靠那些你已經知道確實有效的東西 - 你平時遵守的紀律 尋求幫助 Pair Programming 第12章：協作 專業程式設計師的主要職責是滿足雇主的需求 這意味著要含你的經理們、業務分析師們、測試工程師們和其他團隊成員有良好的協作，並且 深刻理解 業務項目 你需要理解 「手上正在撰寫的程式碼，其業務價值是什麼」 ，了解雇用你的企業將如何從你的工作中獲得回報 「需要長時間努力思考一個問題」、「任務極為簡單、和另一個人一起工作變成一種浪費」時單獨工作是正確的 但一般來說和其他人緊密協作、大部分時間採取 Pair Programming 是最好的作法 程式設計意味著「與人協作」 我們需要和業務人員一起工作，我們之間也需要互相合作 第13章：團隊與專案 形成有凝聚力的團隊是需要時間的 可能需要6個月，甚至是1年 團隊成員首先要建立關係。他們需要學習如何互相協作，需要瞭解彼此的癖好、強項、弱項，最終才能 凝聚成 團隊 有凝聚力的團隊通常有12名成員，多可以有20人，最少可以只有3人 e.g., 12名 7名程式設計師 2名測試人員： 編寫「自動化測試」確認程式正確性 2名分析師： 開發「需求」，為需求編寫「自動化測試」確認業務價值正確 1名專案經理： 跟蹤團隊的「進度」，確保成員理解「專案時間表」和「優先順序」 團隊比專案更難建置 組織穩健的團隊，讓團隊在一個又一個專案中整體移動、共同工作是較好的做法 團隊有了凝聚力，但卻因為專案結束了便將這樣的團隊解散，是極為荒謬可笑的做法 第14章：輔導、學徒期與工藝典範 學校能夠傳授的是電腦程式設計的理論 但學校並不會、也無法傳授作為一名程式設計工匠所需要掌握的原則、實踐和技能 這些東西只有經由師徒個體間多年的細心監督和輔導才能獲得 Appendix A: 工具 Source code control e.g., git IDE / Editor e.g., vi, emacs, IntelliJ, TextMate 問題追蹤 e.g., Pivotal Tracker, Lighthouse, wiki, Board (To-Do/ Doing/ Done) CI e.g., Jenkins 單元測試工具 快速便捷的執行測試 在通過或失敗要有清楚的視覺提示 對於測試進度也要有清楚的視覺提示 避免 test cases 之間的彼此通訊 讓編寫測試變得容易 元件測試工具 理想的情況是「業務分析師和QA」能夠使用這些工具來 編寫 規約 e.g, FitNesse, RobotFX, Cucumber 整合測試工具 e.g., Selenium, Watir UML / MDA","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2018/11/the-clean-coder"},{"title":"[Book] 告別菜尾時代","text":"The plain fact is that the planet does not need more successful people. But it does desperately need more peacemakers, healers, restorers, storytellers and lovers of every kind. It needs people who live well in their places. It needs people of moral courage willing to join the fight to make the world habitable and humane. And these qualities have little to do with success as we have defined it. –– David W. Orr 第一篇：如果舒適圈一點也不舒服 「再重新想一遍。你認為的舒適圈，真的舒適嗎？」 有些人會說，那是因為他們有錢，才能夠擺脫「飢餓威脅」。 可是我的好友M就曾憂心忡忡地告訴我，他身上有龐大的貸款要償還：瑞典人Ｎ在找房子時，也說他沒辦法租太昂貴的房子，因為每個月能花的費用有限：澳洲人S也總是在研究空擋去醫院兼職打工。 這些人並非是天之驕子，都是跟你我一樣為了錢而煩惱的凡人，但他們卻勇於暫時放下外人或自己人生的「飢餓威脅」，嘗試走到世界闖一闖。 美國人Ｍ與Ｋ就告訴過我，若不是在南美、非洲的那幾年，他們不會知道自己想成為一個怎樣的醫生。 You Are In Your Time Zone. 比起年齡，更應該焦慮的是 - 有沒有在做自已喜歡的事 不要用已經付出的「沈沒成本」來限制人生的決定 美國的學校最喜歡能展現領導力的學生，且招生標語總是希望培育出「未來領導人」，因此，進了美國職場後，就算我是整個實驗室裡輩份最小的，同事和老闆也總是告誡我：「 我們要你未來也能成為領導人。千萬不要小看自己，人總是會往上爬，有一天你也會成為主管，而我們希望到那個時候你是『準備好的』 」。由此可知，他們不只把我當個「員工」而已 ，還會花時間教我各種領導能力，例如，有效運用自己的時間，學會取捨、面對無謂的要求要懂得說「不」、學著主持會議、還教我如何與其他老闆社交......等。 如果你因為旁人的負面思考與意見被侷限而不放膽嘗試，那麼，你的最佳狀態就只會是現在的模樣，不會再進步了。 對未來缺乏想像力這件事，或許不能完全怪在台灣的學生身上...... 如果你沒有看過別人成為什麼，便很難去想像自己可以成為什麼 。 「你應該要先去想想，二、三十年後，你想成為一個怎麼樣的人？為了成為這樣的人，十五年後應該要達成什麼樣的位置？又必須做出多少的努力，才能達到二、三十年的目標？以此回推，如果要達成十五年的位置，那麼到了第十年你該做些什麼？第五年呢？第一年呢？ 慢慢逐步推回來。因此你現在應該要為了一年後，做什麼努力？ 」 他點出了我們應該要先放膽去想，二、三十年後想做什麼？然後再慢慢回推現在該做什麼努力，而非以現在能看到的視野、擁有的資源，規劃我們三十年後想成為的樣子。 第二篇：只要敢闖，世界就是你的 聯合國與哈佛的面試： 你的 Commitment 是什麼？ 我還特地問他（組織內的行政助理）：「難道美國人/西方人比較看重承諾？畢竟我過去從未在面試時被問到這樣的問題，就連我進醫學系的時候也沒有。」 他說：「真的！因為 Commitment 是個很慎重的字。」他沈默了也思考一下，然後說：「我的人生中還沒有在面試時被問到這個問題，但我可以想見， 我們(哈佛大學)或聯合國想要找到對於這個世界有熱情、有理想的申請者，才會在面試的時候這麼詢問。 」 第三篇：站在語言、文化與價值觀的十字路口 當你開始在異鄉生活，英文就再也不是考試上那一題題的單選或複選題了，而是工作、讀書，或是生活上的溝通「工具」。就英文程度需求最低的生活層面來看，如果你到了另一個國家，無法聽得懂對方的解釋，又無法清楚表達自己的想法，那麼，在國外吃虧時，該要如何幫自己爭取權益呢？ 第四篇：在地球的另一端，從異鄉看家鄉 只用旅行構成的世界觀並不完整 因為在旅行途中，大部分的時間是快樂的，然而，在當地生活是酸甜苦樂並存的，甚至是時間的苦悶。 透過長住的機會，使我有不一樣的「成長」。這個「成長」，來自於我每天使用非母語的語言，每天努力融入另一個族群的文化、每天拼了命去學習全新的思考模式，然後在空閒時間，好好看著離家半個地球遠的當地風景。 有一位我十分敬重的某 NGO 創辦人來台灣演講時，有學生問他：「如果我有四萬元，你希望我把四萬元捐給你？還是希望我用四萬元買一張機票，去看看你所創建的孤兒院呢？」 NGO創辦人豪不猶豫地說：「 我希望你買一張機票來看看，因為當你買了那張機票，你才會明白我所說的一切貧窮、困苦都是真的。你會把這些震撼與故事帶回到你的生命裡，然後，我要你用你那四萬塊的機票，發揮你生命的影響力，把故事傳出去，讓更多人知道什麼是貧窮，在貧窮裡生活又是如何超乎你原本生活想像的艱難。 」 往後，我看到許多偏鄉志工、國際志工，不論是捐錢、捐物資等，也有相似的行為漠視：半吊子的助人，認為「有幫總比沒幫好」，或是助人後，完全不檢討自己的行為是否為對方帶來傷害、是否有改善的空間，也因此，我開始深刻的體會「做好事，不是只有善意就好」。 Cambodia's Orphanage Business Ethiopia food aid dependency 為善，應該要更柔軟與敏感 心存善念幫助他人的同時，不要只憑一股衝勁去做，完全缺乏事前的評估，也沒有細心調查服務對象的需求，更不要在事後，完全沒有檢討、追蹤與改善。 這就好像待人處事一樣，是需要互相尊重與同理心的，更不是自己的地位比受助人高。別忘了，今天的你只是相對幸運，能夠擁有比較多的資源，説不定，有天你也可能會成為需要幫助的人。行善之前，請試著多想一些。 尤其做好事的人，內心往往要比一般人更柔軟與敏感才是。 The road to hell is paved with good intensions. 同場加映作者的文章: 「愛台灣，就是畢業了先不要回來。」──現在我明白，這句話背後的沉重","tags":"Book","url":"http://lee-w.github.io/posts/book/2018/11/it-s-time-for-the-young-generation"},{"title":"MOPCON 2018","text":"今年其實是因為拿到去年講者用不到的邀請票才來參加的 xD 總結來說，我覺得這趟來還算是蠻有收穫的 幾年前有去過一次 MOPCON 也許是去慣了台北的研討會都在中研院豪華的場地，就覺得 MOPCON 的場地很普通 （其實連國際級的會議 EDBT 的場地都沒中研院好呢 那年的議程也沒給我多大的收穫，之後就沒再來過了 兩天的會議下來，原本自己有做了一些筆記 但後來覺得自己保留一份筆記實在沒什麼意義... 共筆上面的內容還比我多，就把我自己的部分也都更新上共筆了 共筆連結 Day 1 第一天比較有趣的是 從菜鳥警察到資料戰警 , 用 Drone 改善團隊自動化測試及部署流程 原本讓我有考慮來 MOPCON 就是想來聽聽 Drone 的使用 不過果然還是要自己玩玩看才會知道怎麼用啊 xD 感覺聽這樣的 talk 大概就是讓我決定要不要花時間來試新工具 聽說還蠻多場都只是在介紹自家的產品的 還好我很巧妙的避開了（？？？ Day 2 第二天我就幾乎都在 Unconference 了 一般議程只聽了開頭 jserv 的 智慧電網背後的軟體建設 跟結尾的 Flutter 踩雷心得 其實會都待在 Unconference 也是一場意外 xD 原本想說還有五分鐘才正式議程，所以就先過去晃晃 但 創業的辛酸與奧義 實在太精彩了，就一直聽下去了 這場可是讓 Unconfernce 的場地全部坐滿，外面還圍了一整圈的人呢 接下來的 工程師與設計師都該知道的事 也很精彩 還好我有跑去 Dcard 的攤位跟講者要 slide 裡面的內容都還蠻有用的，但實在有點來不及作筆記 而且 Unconference 真的沒什麼人會去更新共筆 這場的整份筆記只有我在更新 QQ 最大的 takeaway 是 UI堆疊的太念 好像是來自 How to fix a bad user interface 這篇文章 Flutter 踩雷心得 也是出乎意料有趣的議程 Flutter 是一套可以拿來用在 iOS 和 Android 的框架 整場聽下來學到了不少 mobile 開發的知識 還有如何叫老闆買新電腦（誤 Lighting Talk 話說今年好像彩蛋題太難解，好多場 Lighting Talk 都在講要怎麼打 MOPCON 的官方 APP xDDD","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2018/11/mopcon-2018"},{"title":"[Book] 做孩子的重要他人","text":"跟蘇老師合作了半年下來 這還真的是我第一次真的有時間好好的看完這本書 第一次知道這本書大概是幾年前政大書城打得很大的標語 我的研究若做好，只幫了幾個人，但走入偏鄉，我要影響的是我們的下一代。 這本書交錯著蘇老師的成長歷程跟在偏鄉看到的事 我想大概還是偏鄉的那段故事比較吸引我 看著不同生長背景的人的故事，讓我更有能力去理解用不同方式去思考的人們 （ 同場加映： 做工的人 ） 我也同樣的記錄下，讓我比較有感的句子 許多人認為偏鄉的孩子沒有進取心，但問題可能在於我們不曾提供希望，讓他們知道向上爬的可能性。 我在教導程式書寫的過程中發現，如果我一味將孩子訓練成寫程式的工匠，而不讓他們知道為什麼要寫這些程式，將來他們只有當代工的命 - 在別人設定的規格下，做出別人要的制式化的東西。 因此訓練學生思考「現在面對的問題是什麼？」「如何解決這些問題」「電腦程式可以為解決這個問題幫上什麼忙？」甚至是「為什麼人們需要解決這種問題？」這一系列問題的替換，塑造他們思辯判斷的能力，才能培養出這個時代需要的領導人才。 孩子們需要的是長期的陪伴，蜻蜓點水式的關係，反而可能造成傷害。 真正的能者不會要求別人給你「公平」，反倒會努力爭取機會，把「公平」分給別人。 我們有什麼資格用「弱勢」二字來形容人家？說不定我們自己才是真的「弱勢」呢！ 裡面有些內容讓我想起去埔寨當國際志工的事 對我來說，那絕對是一趟收穫很多的經歷 但我是不是真的對當地帶來了幫助 回過頭來看，我對此是很懷疑的 我想反而是我從他們身上得到的還比較多 我們離開時，有人問當地的小朋友對我們的想法 我們突然來到他們的生活，卻又突然的離開 其實他們是很難過的，覺得我們這樣是很過分的 也許真的想要做些什麼，還是需要很長期的付出和陪伴 我們以為的幫助，反而卻帶來了傷害","tags":"Book","url":"http://lee-w.github.io/posts/book/2018/10/be-someone-to-the-children"},{"title":"Blog 風格修正","text":"一直以來都有發現 Blog 的風格有點小問題 但都懶得去好好地找出問題 這次終於下定決定修好它 起源其實是我的上一篇文被嘴了 QAQ 整理下來大概有三個問題 1. 大小標的 margin 2. 英文前後也空一格 3. 第二行縮了四分之一字元 1. 大小標的 margin 這應該是三個問題中最簡單的 但我有點懶得動 CSS ，所以就先不修了 xD 2. 英文前後也空一格 剛好最近看到了 中文文案排版指北 才發現原來 「有研究顯示，打字的時候不喜歡在中文和英文之間加空格的人，感情路都走得很辛苦，有七成的比例會在 34 歲的時候跟自己不愛的人結婚，而其餘三成的人最後只能把遺產留給自己的貓。畢竟愛情跟書寫都需要適時地留白。與大家共勉之。」 ——vinta/paranoid-auto-spacing 總之，這也不是特別難處理的問題 只要透過 add-space-between-latin-and-cjk 再加上 os.walk() 就能解決了 不過還是會遇到一些不該加空格的地方，也被加空格了 但也只要用 git diff 再確認一下哪裡有被 script 修改過就可以了 3. 第二行縮了四分之一字元 這個問題就比較頭痛了 因為我在模板找到這段的內容是 {{ article.content }} 也就是説這個多的空白是 pelican (我用的 static blog generator) 所產生的 我沒有辦法透過單純的修改 HTML, CSS 來修正這個問題 必須要找到 pelican 是從哪產生出這個空白的 於是就開始我的 trace pelican 的之旅 接下來，就是一連串的 trace 過程 不想看可以透過 傳送門 直接跳到解法 pelican/readers.py (first try) 要找到 Markdown 是在哪被 parse 並產生內容的並不困難 ( pelican/readers.py 的 334行 ) 透過一些測試，發現這段的行為是因為有了多的 \\n 造成了多的空白 第一個猜想是某些情況下的 \\n 沒有成功的被移除掉 所以只要加一行 content.replace('\\n', '') 確保全部的 \\n 都被移除，應該就可以了 一開始問題也真的解決了 直到我用到 markdown中的 ``` 語法才又出現問題 在整個 code block 中的 code 全部都黏在一起沒有斷行 看來這個做法是行不通... 只好認命的從我平常產生文章的指令一步一步追回去 trace 的過程還有踩到一個雷是「pip 裝的 pelican 並不是 master 上的版本」 所以我還必須要切到 3.7.1版 才能開始解決我遇到的問題 setup.py 平常我都是透過 pelican -r -o output -s pelicanconf.py 這個指令來產生文章 所以第一步就是要從 setup.py 找出 pelican 這個指令是哪裡來的 ... 'pelican = pelican:main' , ... pelican/ init .py 既然在 pelican 這個 package 中沒有 main.py 那 Python 還能找到 main 就只剩下 __init__.py 扣除掉一些 parse 指令參數的程式碼 接下來最像是產生文章的程式碼就是 147行 的 run for p in generators : if hasattr ( p , 'generate_context' ): p . generate_context () 下一步就是要從 generators 找出 generate_context 這個函式 from pelican.generators import ( ArticlesGenerator , PagesGenerator , SourceFileGenerator , StaticGenerator , TemplatePagesGenerator ) pelican/generators.py generators 中看起來最有關的就是 ArticlesGenerator 這個 class 也找到了 generate_context try : article_or_draft = self . readers . read_file ( base_path = self . path , path = f , content_class = Article , context = self . context , preread_signal = signals . article_generator_preread , preread_sender = self , context_signal = signals . article_generator_context , context_sender = self ) 這裡找到的是文章被產生的地方 只要能在找到文章中的內容是在哪產生，應該就能解決我的問題 所以下一步就是要再去找到 Readers pelican/reader.py Readers 在這個檔案的 486行 接著 trace 這個 class 到 526行 就真的是文章內容第一次被產生的地方 到目前為止，文章的內容還是沒有多餘的空白 所以順利的話只要從這繼續 trace 下去就能找出問題 content , reader_metadata = self . get_cached_data ( path , ( None , None )) if content is None : content , reader_metadata = reader . read ( path ) self . cache_data ( path , ( content , reader_metadata )) 最後發現問題是出在 555行 if content : content = typogrify_wrapper ( content ) 只要不對 content 做 typogrify_wrapper 就不會產生多餘的空白 typogrify typogrify 是 pelicanconf.py (pelican 的設定檔) 中的一個設定 TYPOGRIFY = False 只要關掉 typogrify 就不會再產生出多餘的空白 typogrify 看來是某種加強 HTML 的工具 我試過要把 <br> 跟 &nbsp 加入 TYPOGRIFY_IGNORE_TAGS 不過看來還是沒辦法解決 最後只好把 typogrify 整個關掉了 後記 其實這也只是個無傷大雅的小問題 但真的是花了我不少時間才找到真正的問題所在 前幾次都能透過 trace 原始碼，找到 library 的一些小問題 也丟了幾個 Pull Request 不過看來這次沒能再多貢獻什麼 雖然好像有找到可能從 typogrify 解決掉這個 issue的方式 但要再把它加入 pelican 變成一種 config 還是有些麻煩 xD","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2018/10/fix-blog-style"},{"title":"X-Village 課程設計","text":"要一次說完整個 X-Village ，還是有點太花時間 先來聊聊我這次接觸到跟課程設計有關的部分 我在 X-Village 中，主要的工作還是在規劃、管理跟行政的部分 所以我要上的課也不多 跟課程相關，我接觸比較多的大概是這幾個部分 Review 「程式設計基石」(a.k.a. Python 課) 「資料結構」第三天下午的練習 「網頁開發、資料庫、雲端運算」第三天後半課程 1. Review 「程式設計基石」 課綱 起初，我和另一位核心助教規劃了 Python 課程的大綱 但這份課綱對初學者還是太難 因為身上處理的事在太多 這些工作就逐步派給其他助教 過了一週後，我們得到了一份更難了很多的課綱 xD 畢竟大家沒有太多的教學經驗 一開始就要設計好一份適當的課綱，本來就很困難 而且初期 Target Audience 一直不太明確 造成課程難度很難抓 陸續討論了幾週後，這就是我們正式課程前的版本 Topics Day 1 Opening Python Intro Editor Git Day 2 HackMD 淺談電腦基本運作 如何自己解決問題？ (Google, Stack Overflow) Python Basic(I) (Synyax, Data Types) Day 3 Function Module/Package Class Day 4 OOP Introduciton Day 5 Exception Handling File String Coding Convention Day 6 Recap Built-in Day 7 Regular Expression Python 套件管理 requests Day 8 Beautifulsoup Visualization Day 9 Decorator Iterator Generator Context Manager Day 10 Broaden Horizon Rehearsal Rehearsal 的時候，我看到了蠻多值得學習跟反省的地方 不愧是從醒獅團的人們，我看到了一些很有趣的教學方式 看著每個人不同的教學風格和內容 我在思考著 是不是有些人在以往學習程式上比較順利，比較知道如何自己找到解學辦法？ 對這樣的人來說，要如何把知識傳遞給學習不那麼快的人，就會需要比較多的學習 回想起我寫程式的歷程，可是一點都不順利 我在寫 Lisp 的時候，連 Syntax Highlight 都不懂 還要不斷數括號數量，才知道程式能不能跑的 e.g., (cond ((eq 'a 'b) 'first) (atom 'a) 'second)) （其實上面有少一個括號 xD） 課程正式開始 課程的前兩週因為在準備碩士論文口試 我沒有投入教學，也沒辦法整天跟課 但我中午跟晚上幾乎都會去 拿便當、飲料 關心課程狀況 課程開始後，我們要不斷看大家的狀況跟課後的回饋來調整課程的進度 因為這是密集課程 所謂的調整課程就是「今天馬上要改完，明天馬上就要上場」 而且助教們晚上也會留下來陪學員晚自習 造成大家幾乎是沒什麼休息的時間 因為第一次辦，完全無法預期大家的學習速度 只能先用一個版本出來教教看 再來看現場狀況隨時調整 不過有了這次的經驗，明年應該就比較有底了（如果還有明年的話 xD） 2. 「資料結構」第三天下午的練習 Exercise ipynb: DS-Exercise Day3 雖然先前大概有稍微想了一下準備怎樣的 Exercise 但我前一天下午才口試完 我其實只有大概一個晚上的時間準備 ... 可是「資料結構」的老師又是我找的 總覺得還是得要負起一些責任 早上的課程會由老師教理論，下午由助教來帶一些練習 我帶練習的那天早上則是教排序 在教學上我並沒花多少時間 就是帶了一些影片，讓大家 Recap 一下白天老師教的內容 我主要把時間都花在 Exercise 的設計上 Exercise4 用 Python 做排序 (ex4.py) some_list = [ 65 , 81 , 65 , 19 , 6 , 28 , 86 , 40 , 72 , 27 , 76 , 46 , 22 , 98 , 49 , 57 , 52 , 46 , 47 , 14 , 29 , 15 , 59 , 74 , 61 , 47 , 20 , 33 , 89 , 99 , 65 , 82 , 84 , 63 , 93 , 1 , 42 , 13 , 54 , 58 , 84 , 17 , 5 , 18 , 14 , 14 , 19 , 42 , 60 , 77 , 17 , 29 , 2 , 42 , 42 , 31 , 47 , 67 , 15 , 16 , 71 , 56 , 98 , 46 , 18 , 20 , 14 , 36 , 42 , 23 , 87 , 7 , 5 , 5 , 52 , 78 , 76 , 91 , 92 , 88 , 38 , 66 , 13 , 18 , 68 , 96 , 23 , 51 , 77 , 93 , 35 , 18 , 9 , 64 , 51 , 76 , 76 , 96 , 5 , 18 ] 寫過 Python 的人，一定馬上就會想到用 sort 或 sorted 但我故意把練習時間拉長到 20 分鐘 中間一直會有學員、助教問我「真的可以這樣寫嗎？」 恩，可以哦 在早上教完「資料結構」後，馬上帶這樣的練習 很容易讓人直接聯想到要實作排序演算法 我想帶來的想法是「在要下手去做什麼之前，先找找是不是有什麼現存的工具」 回想以前的我，肯定也是埋頭就下去硬幹 甚至我第一次用 Python 爬選課系統的時候，連 json 模組都不會用 只會照著 json 規定的格式，慢慢地做字串處理 e.g., json_str = '{\"' + course_name + '\": \"' + course_id + '\"}' 因為在我的 Knowledget Base，對函式庫的概念還是很模糊 也不知道為什麼要用，好處在哪 大二下的 C++ 寫的 ncurses 反而感覺像是造成我更多的麻煩 xD 因為我並不知道如果不用 ncurses ，要做同樣的事會多麻煩 所以試試看讓學員真的做一次很麻煩的處理 透過痛過，來知道為什麼要使用工具 Exercise5 深入淺出 Python 排序 (ex5.md) Q1: Python 的 some_list.sort() 跟 sorted(some_list) 差別在哪 Q2: Python 的 sorted() 是用哪種排序演算法 ? 這兩個問題其實並不困難 第一個問題是我以前寫 Python 常遇到的錯誤 同時也想讓大家去想想「如果有不同的做法都能解決問題，他們不同的地方在哪」 第二個問題則是想激起大家的好奇心，試著去探究看似理所當然的東西 最後 Exercise 4, 5 我幾乎直接把答案都公佈了 即使是在這之後才用我公布的方法，我也是會計分 因為這個思考的過程才是重要的，答案一點也不重要 Exercise6 用 Python 做排序 我給了一筆 PTT 爬下來的資料，根據某個 key 做排序 早上才從八卦版剛爬下來的（好像有爬到一些奇怪的東西 ...） 靈感就只是前一天跟學員聊天，聊到他們的視覺化作業要用 PTT 的資料 這個練習目的在於用實際的資料 讓大家感受到程式是真的能解決實際的問題 而且並不如想像中的那麼困難 回想我大一不斷的學習用好的架構寫一個 BMI 的程式 總覺得要寫一個稍微有用的程式是非常非常遙遠的事 所以大二下的 C++ ，對我來我說是寫程式很大的里程碑 這題的解答也是差不多一行而已 data = sorted ( ptt_data , key = lambda x : x [ 'some_key' ]) 但我認為這對新手來說，已經會是相對挑戰的練習了 至少以初學的我來說，我可能就要花不少時間去 survey 、去思考 這個練習中，我還埋了一個坑是「key 可能是空的」 我前一天設計這個練習的時候也入坑了，此坑不能只有我入 我也會下去跟大家討論要怎麼解決這個問題 這個問題本身有很多種不同的解法 我自己的解法是使用 filter 過濾掉空值 但我也遇到學員們有很多不一樣的想法，我覺得挺好的 Bouns Bonus 3 實作各種 sort 作法 Bouns 4 分析各種 sort 適合的情境 因為課程的速度放慢，有些學過的就會覺得比較無聊 這兩個 Bouns 就是設計給這樣的人 至少在這的兩個小時不要是浪費時間 Bouns 4 我也沒有正確解答 我蠻好奇會不會有人能給我一點想法的 不過這麼機車的題目最後看來是沒人寫 xD 「資料結構」練習後記 後來有一次跟學員聊天的時候 學員跟我分享他覺得這樣的練習設計，帶著大家思考很有幫助 看來前一天沒什麼睡到是值得的 3. 「網頁開發、資料庫、雲端運算」第三天後半課程 Slide: CRUD in Flask Sample Code: web-acccounting-example 前面的課程中有由博安老師指導的 Database 跟 Flask Introduction （博安老師的課程可是在 Web 課程中唯一零負評的，真不愧是博安老師！） 而我的內容則會注重在 view 的撰寫上 我先讓大家對要做的東西有概念 (i.e., 記帳程式 ) 在寫程式前，我帶著大家看市面上做出來的記帳程式是長怎樣的？ 這些記帳程式有什麼功能？ 如果用我們這幾天教的想法，我們要怎麼去思考這個後端的系統？ 接著才真正要進入程式 我基於博安老師前一個半小時的程式碼在做延伸 從最原始的 0.1 版 每次只做一點點的修改，每一個修改都給那個 commit 一個 tag 在 slide 的右下角，也會放目前到哪個版本 也希望能從這樣的做法，帶到 frequent commit 的重要 講解程式碼之前 我會先讓大家打過程式碼，並確認可以執行 再來才會解釋每一行程式碼在做什麼 但它們組合起來不見得是對的 xD 尤其剛開始講 view 的 0.2 版更是幾乎沒一個功能是對的 但程式是能跑的 除了聽跟照著做以外 希望能讓大家去發現哪裡有奇怪的地方 試著去想想要怎麼解決這些奇怪的地方 直到 1.0 版才看起來像是一個可以動的網站 但就算到這裡，還是有一個小錯 xD 我想從這裡帶出測試的重要性 統整一下，我整個課程設計想帶給學員的思考 1. 如何思考一個後端架構 ? → 其他人的記帳程式 2. 溝通在寫程式是很重要的 → README.md , requriements.txt 3. 如何除錯？ → 滿是錯誤的 view, postman 的使用 4. 為什麼測試是重要的？ → 整個網站雛形都出來了，還有埋錯 整個構想聽起來是很美好 但這次的嘗試，得到的評價不是很好 其中一份回饋告訴我 「他不太喜歡這樣先複製程式碼在學習如何修改的教學方式 因為一開始看不懂程式碼，只能照著我說的改，會很不知道自己在改什麼」 很感謝願意給我建設性回饋的學員 我也在思考 到底是這樣的方式不適合初學者？ 還是我沒有把這樣的內容表達好？ 如果還有下次的機會 除了思考課程的內容外，我還要多花點時間準備在台上的表達","tags":"Gossiping","url":"http://lee-w.github.io/posts/gossiping/2018/09/X-Village-Course-Design"},{"title":"從 Andromoney 到 MOZE","text":"最近不小心被 MOZE 的介面燒到 一個衝動就從 AndroMoney 轉到 MOZE 這篇算是來記錄從 AndroMoney 把資料轉換到 MOZE 的過程 一些無關本文的前言 雖然 X-Village 暫時告一個段落，好像應該來寫個什麼 但真的要寫起來還要再花一點時間 上次 Blog 發文都已經是一年前的事了 但點閱率竟然有一點在上升（雖然還是很低 QAQ） 還有一些人看了我在 Logdown 的 LineBot 文跑來找我討論 覺得蠻開心的 xD 但這邊還是一直都沒辦法被找到 QQ 以後考慮同步發到 Medium 好了 不過好像該進入本文了 xD 為什麼換到 MOZE 當初在 Android 上使用 AndroMoney 就只是因為他免費，而且還算是好用 剛好換到 iOS 的時候，這款 app 也在 App Store 有上架 懶得轉換資料的情況下就繼續買了 用下來覺得 AndroMoney 好像還是在 Android 上比較好用 AndroMoney 的各種功能都很方便，只是介面上就比較普通 xD 而且 AndroMoney 各個平台都有，就算哪天想換 Android 的手機也不怕轉換問題 但是啊， MOZE 的介面就是好看 xD 再來就要說說其他我喜歡 MOZE 的原因 AndroMoney 沒有 (或我不會用) 的功能 借款事件 MOZE 會幫我記住我借錢給誰，而且會一直提醒我誰跟我借了錢 以前都還要特地記錄到其他 app 而且借出的錢，不會算在我的支出，所以也不會影響到我的預算 算是蠻方便的功能 繳費事件 提醒我信用卡要繳費的時間 也會有跟借款事件差不多的提醒 動態改變每天剩餘的預算 這是一個我還蠻需要的功能 我會想知道前幾天花的錢如何影響我這個月剩下的日子的預算 而不是一個從月初的預算直接除以 30 都不改變的數字 帳戶 icon 每個帳戶都能加入自己的 icon 只要是付費版的 MOZE 就會有各家銀行的 icon 雖然他說是付費圖示，但其實這幾個是免費的 只有其他類別的彩色圖是要購買 但我是覺得原本的我比較喜歡 xD 另外，也可以自己製作想要的 icon 匯入 ~ 電子發票載具 以前都沒有什麼要用電子載具的誘因 就完全忘了這回事 現在這個可以直接幫我記帳就很吸引我 而且他也有支援 wideget ，給店家掃過後，馬上就能用 Apple Pay 另外，我原本以為從雲端載下消費紀錄，一定會要再創一個紀錄 但其實這是可以連結到某一筆過去的紀錄 這對我也是蠻重要的功能 只是目前好像還不能針對轉帳或借款事件歸帳 希望這些能透過 MOZE 3.0 會有的分帳功能解決 拆帳 (MOZE 3.0 才有) 雖然目前還沒有，但這個功能我現在很期待 所以還是想列一下 xD MOZE 沒有 (或我不會用) 的功能 專案不能跨幣別 我之前去歐洲的那些紀錄就因為這樣，必須用標籤來分類 QQ 不過聽說 MOZE 3.0 會新增就是 不能將單一紀錄不計算在花費中 主要是有些特別的花費我不會想要扣在我的預算中 這樣那個月剩下的天數的預算就都會是 0，好像也不太對 ... 【AndroMoney 功能教學目錄】 這個我真的覺得超棒的 他把目前能用他現有功能做到的事，全部整理起來 現在 MOZE 還是比較需要去爬舊文翻，或直接問粉專 但不得不說 MOZE 回復速度真的超快 AndroMoney to MOZE transformater 身為一個攻城獅，當然還是要寫自動化的程式來幫我轉換資料格式 手動要處理 5、6000 筆帳務紀錄有點太累了 btw MOZE 有說之後會提供 web 版的匯入工具 在 MOZE 首頁 FAQ 可以找到要如何匯入資料 ( MOZE 格式 ) 基本上就是照著他的格式就能轉換大部分的資料 當然我也寫了一個小 script AndroMoney_to_MOZE_transformater Script 使用方式 python transformater.py --input_file \"Your input filename\" extract 在轉換的過程中，會有一些資料還是要手動輸入的 其實後來大多時間是花在這 ... 會抓出的資料有 帳戶（以及其起始金額） 專案 主類別、次類別 後來發現還有另一個問題是不同幣別的轉帳， AndroMoney 匯出的資料不會有轉入的金額 所以沒辦法自動化，這點倒是比較麻煩 python transformater.py transformat --input_file \"Your input filename\" --output_file MOZE.csv 再來就是要把原本 AndroMoney 的紀錄轉成 MOZE 的格式 只要把這個 MOZE.csv (一定要是這個檔名) 丟到 Dropbox 的 應用程式/MOZE MOZE 就能找到，並能選擇匯入 踩到的一些坑 寫這個 script 的過程中，其實踩到蠻多坑的 匯入了好幾次才成功 一來這是我第一次從 argparse 換到 click 原本想說 argparse 已經算是蠻好用的了 click 真的又更直覺了一點，難怪這麼多人推薦 第一個遇到的問題就是轉帳的「相關行數」 一開始不知道這個行數是從多少開始 以寫程式來說，我就直接去抓那個 row 的 index 所以抓到的 index 是 0-based 後來想到可以試試看 1-based，還是無法匯入成功 最後才發現還要把標頭也考慮進去 第一個 row 其實 index 是 2 第二個問題是轉帳的類別 文件其實只說不用「子類別」，沒說「主類別」要怎麼處理 xD 我試了各種可能的類別後 自己去匯出了一筆轉帳紀錄，才解決 原來轉帳的主類別分別會是「轉入」跟「轉出」 後來弄完後有再去看一下文件，才發現下面其實有寫 ...... 這些問題我都跟作者反應了，他都超快就回了 他是說之後會透過 web 版的工具匯入 Future Improvement 其實我還是蠻喜歡 AndroMoney 的 所以也許會找個時間寫怎麼把 MOZE 轉回 AndroMoney 的功能會寫個 MOZE to AndroMoney 避免我哪天又想回到 Android 了 xD","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2018/09/from-andromoney-to-moze"},{"title":"GitHub Resume","text":"最近發現了這個可以自動從自己的 Github 上產生履歷的東西 GitHub Résumé 實在有點有趣，就來玩了一下 只要在 repo 上按了 star，你就可以透過 他的頁面 產生你的 GitHub 履歷 基本上就是各種以往的專案和貢獻的統整 我的 GitHub 履歷 果然我光 Python 跟 Jupyter Notebook 加起來就六成了 xd","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2017/08/GitHub-Resume"},{"title":"Practical Vim","text":"每天一回一回的看，終於把 Practical Vim 不過到了後期，大部分就真的都看不太懂了＝ ＝ Ch1: The Vim Way Tip2: Don't Repeat Yourself . command: Repeat the last change Command in normal mode The insert mode between two normal mode Repeatable action and how to repeat them Intent Act Repeat Reverse Make a change . u Scan line for next character f ; , Scan line for previous character F ; , Scan document for next match /pattern <CR> n N Scan document for previous match ?pattern <CR> n N Perform substitution :s/target/replacement & u Execute a sequence of changes qx @x u Ch2: Normal Mode Tip10: Use Counts to Do Simple Arithmetic <C-a> : Add number <C-x> : Sub number What if the cursor is not on a number? Operate on the number after the cursor Combine and Conquer Operator + Motion = Action When an operator command is invoked in duplicate, it acts upon the current line (e.g. dd) Trigger Effect c Change d Delete y Yank into register g! Swap case gu Make lowercase gU Make uppercase > Shift right < Shift left = Autoindent Ch3: Insert Mode Tip13: Make Corrections Instantly from Insert Mode If we make a mistake while composing text in Insert mode, we can fix it immediately Keystrokes Effect <C-h> Delete back one character(backspace) <C-w> Delete back one word <C-u> Delete back to start of line The keystrokes above can also be used in bash shell Tip14: Get Back to Normal Mode <C-o> Switch to Insert Normal mode Tip15: Paste from a Register Without Leaving Insert Mode <C-r>0 : Paste the text that we just yanked at the current cursor position Tip19: Overwrite Existing Text with Replace Mode R : Enter replace mode Ch5: Command-Line Mode Tip28: Execute a Command on One or More Consecutive Lines range :{start, end} : from line \"start\" to line \"end\" . : current line % : all lines Tip31: Repeat the Last Ex Commands @: : Repeat the last Ex command Tip32: Tab-Complete Your Ex Commands <C-d> : Reveal a list of possible completions Tip33: Insert the Current Word at the Command Prompt <C-r><C-w> : Get the word under cursor in Ex mode Ch8: Navigate Inside Files with Motions This chapter is extremely practical Ch9: Navigate Between Files with Jumps Tip55: Travel the Jump List Command Effect [count]G Jump to line number //pattern<CR>/?pattern<CR>/n/N Jump to next/previous occurrence of pattern % Jump to matching parenthesis ( / ) Jump to start of previous/next sentence { / } Jump to start of previous/next paragraph H / M / L Jump to top/middle/bottom of screen gf Jump to file name under the cursor <C-]> Jump to definition of keyword under the cursor / Jump to a mark Ch12: Matching Patterns and Literals Tip74: Use the \\V Literal Switch for Verbatim Searches Put \\V before words when searching can cancel regular expression Ch13: Search Tip81: Preview the First Match Before Execution Use <C-r> <C-w> to autocomplete when searching Ch14 Tip88: Find and Replace Every Match in a File %s/word1/word2/g","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2017/06/Practical-Vim"},{"title":"Python@Instagram","text":"Lisa Guo, Hui Ding Keynote PyCon 2017 slide 終於好好花個時間看完今年 IG 在 PyCon US 的 Talk 了 的確蠻值得大家花這個時間去看的 如果要看懶人包 Google 一下「PyCon」、「Instagram」有很多很清楚地整理 我也整理了一點點我覺得特別有意思的 Why Python? (一開始主要是歷史因素，因為當初的創辦人就這麼用了 XD) Use Proven Technology Users do not care what database Instagram runs on. They certainly don't care what language Instagram develop in. Focus on scoping and solve real problems rather than getting stuck on language detail. But Python is still slow, right? At instagram, our bottlenecck is development velocity, not pure code execution The conclusion is that you can get to a few hundred million users with Python before worrying about the performance of framework and language Python Efficiency Strategy Build extensive tools to profile and understand performance bottleneck Moving stable, citical compenents to C/C++ Cythonization Async? New Pyton runtime? Road to Python3 這一段講到 Instragram 如何從 Python2 轉到 Python3 的過程 我覺得很精彩，所以大家就自己去看吧 XD 我只紀錄一個我覺得特別有趣的東西 如同大家所知道的 Python2 跟 Python3 一個很大的不同點，就是對於 byte 跟 str 的處理 這就會導致我們必須先確認他的型態是否符合預期 如果不符合就要在做 encode 或 decode 可能就會像下面這樣 value = 'abc' if isinstance ( value , six . text_type ): value = value . encode ( encode = 'utf-8' ) mymac = hamc . new ( value ) Instagram 處理這種問題的功能實作成 ensure_binary , ensure_str , ensure_text 這類的 helper functon 這也是我之前在 trace transitions 的 source code 發現有一個 listify 的 function 雖然是蠻簡單的小技巧，不過還算蠻實用的","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2017/06/Python-at-IG"},{"title":"PyCon TW 2017 - Sprint","text":"這天的 Sprint 是由今年的 Keynote Speaker - Russell Keith-Magee 帶來他的開源專案 BeeWare 讓大家一起來貢獻 這個專案還蠻有趣的 主要就是要讓 Python 能在各平台上跑 (i.e. web, mobile) 而且這個專案對新手還蠻友善的，文件中就有提供 First Time Contributor 第一次貢獻的人建議貢獻的專案是 voc (Android) 和 batavia (JavaScript) 而且在裡面的 issue 還會標注 first timer only 雖然我其實對 Java 跟 JavaScript 都不熟 但比起來還是對 JavaScript 多了一點愛 所以我就來貢獻 batavia 了 雖然其實我的貢獻大多就是文件上少寫跟一些錯誤 最後還有幫 Python 的 list 轉成 js 加了幾個小 method 原本想解決 args 跟 kwargs 的 issue，但果然還是對 JS 太不熟了ＱＱ 不過覺得整體來說是蠻好玩的 Russell 都會很友善地回答問題 像我一開始採的雷就是 batavia 還沒支援到 Python3.6，他也很熱心幫我解決 我問了好幾個專案的小問題，Russell 都會說 \"That's can be a pull request\" 只要送了 PR 就可以得到 Challenge Coins 拿到這個 challenge coin 其實還蠻開心的 xd 最後再附上在 twitter 上，這次參與 spinrt 的大合照 2017/6/22 折騰了許久，我的 PR 終於被 merge 回 batavia 了 xd 這次的 PyCon 2017 大致就到這裡結束了 這幾篇文章大概先整理了，當時做的筆記 也許之後有時間，再好好看一次影片跟 Slide，重新整理一下所有的內容","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2017/06/PyCon-TW-2017-Sprint"},{"title":"PyCon TW 2017 - Day 3","text":"這天就是 PyCon 的最後一天了 聽說這是 PyCon 第一次引入 Unconference 今年 Unconf 都還蠻有趣的，讓我一直猶豫到底要一般議程還是 Unconference 不過 Unconference 那邊聲音就有點糊聽不太清楚 不知道是不是 R4 場地的關係 議程 [Keynote] From Little Things, Big Things Grow 比美麗的湯更美麗：pyquery Write Elegant Concurrent Code in Python enjoy type hinting and its benefits ( 我很想聽這場，不過還是先跑去聽 Unconference 了 xd) slide 共筆 Coding test-driven Python package with CI and cloud Unconference Lightning Talk [Keynote] From Little Things, Big things grow. Russell 開場就講了一串中文，引來如雷的掌聲 xd 他在 PyCon 官網的介紹也很有趣 xd 他剩下兩洲就能完成 Python 會議基調演講全大洲制霸； 只要企鵝們願意舉辦 PyCon 南極洲，他很樂意提供演說。 同時，他也在這次 PyCon 的 Sprint 帶來專案跟大家分享 不過 Russell 的英文語速就真的有點快，超過我能好好做筆記的語速了ＱＱ 共筆 Technical issues are often social Backward Compatibility matters But it also has a price Hard to introduce new features Timing matters Messaging matters Reading the tea leaves (Trend?) The Kick Ass Curve Tool and ecosystem Community matters Accessibility Toxic shock Denial is not a river in Egypt Complaining matters Codes of Conduct in practice Outreach is important Patches welcome Develop a funding culture Make it easy to spend money and receive money do the right things Don't assume resources are free Q & A 這好像是我第一次在 R0 舉手提問 最後因為時間關係沒被叫到ＱＱ 不過我還是跑到前面去問 Russell，如何在 Backward Compatibility 和 New Fatures 中取捨 Russell 的回答是如果專案已經持續很長的一段時間，並且有一定的使用者 Backward Compatibility 就是一件很重要的事 因為我們並不會希望以前的使用者不能在使用 不過如果是新開始的專案，那就從新的開始就好 像他現在的 Bee Ware 就是全用 Python3 下午 Russell 會給一場跟 Bee Ware 有關的 Talk - Stranger in Strange Land 不過因為標了很高的難度，想說我應該也聽不懂，也先沒去聽了 xd 比美麗的湯更美麗：pyquery slide pyquery 用 jquery 的方式來做 parsing 可以做 crawling ( 一個 lib 就做了 requests + bs4 的事啊！ ) 可以拿 selenium 當 opener 裝不起來的問題，通常是因為 lxml 沒裝好 感覺是一個很值得期待的 library 下次要寫爬蟲，再拿它來試試看 Write Elegant Concurrent Code in Python slide 共筆 Sample Code Concurreny: 一段時間內同時跑 Parallel: 一個時間點同時跑 Why Concurrency? Get the machine into full play! 不要讓 CPU 空轉！ 通常不會用 Python 解 CPU Bound 的問題，而是 I/O Bound 的問題 聽完這場，感嘆自己真的對 Concurrent 還是不太懂＠＠ 雖然我沒記什麼筆記 不過 Slide 很清楚，共筆也記了很多 還附上 Sample Code 了 哪天比較懂 Concurrent 的時候再回來看應該會比較有感覺吧 Unconference 共筆 大會遊戲 line chatbot 黑白亂做 Source Code 懶得答題？寫個 bot 來幫你刷榜 slide Source Code 跟著上面那一個 Unconference 做的大會 chat bot 就有會眾分享如何寫一個 bot 自動去達大會的題目 xdd 覺得很有趣 What Steve Jobs Taught Me about Software Development and Life in General 這就是 Carosell 待過 Apple 的 VP 大致上覺得跟 少，但是更好 Saying, \"No!\" enables focus, flow, success. How to decide when to say \"yes\"? The one that changes your life would be a good one. Lightning Talk 共筆 Lightning Talk 大概是 PyCon 最歡樂的時候了 因為只有 5 分鐘，不然就要被拔線了 大家都得講得很快 今年的 PyCon 金句大概就是 Hisahiro Ohmura 推坑 PyCon JP 的 聽不懂日文？ 沒關係 我也聽不太懂中文 另外，就像 jserv 的 slide 上說的 每年的 pycon 好像都有其他語言的東西混進來，像是 15 年有人根本是在講 d3.js 只是用 python 幫忙準備資料 ; 今年是有人全部都在講 Rust，只是我們用 Rust 寫了個 python module XDDD Lightning Talk 馬上就出現一個 julia 了 xddd 記得兩年前的 PyCon 超多 Julia 的","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2017/06/PyCon-TW-2017-Day3"},{"title":"PyCon TW 2017 - Day 2","text":"第二天有一整個時段的 Job Fair，可以出去晃晃到各個攤販聊天 最有印象的大概就是 Carousel，跟他們聊得還蠻開心的 還多玩了幾次他們的大家來找碴 XD 在 conf 看到他們這麼多次，第一次知道他們來自新加坡 隔天還會有一位待過 Apple 的 VP 會來 Unconf 分享 今年還有音樂會呢，覺得還蠻有趣的 雖然聽完有點晚才去吃晚餐，剩的東西都不多了ＱＱ 議程 [Keynote] Building for Failure: Leraning Lessons from Aviation [自py系列2] 投資策略驗證系統 slide 共筆 對話機器人的腦子與靈魂 Bot's Brain and Soul 鄉民教我做的聊天機器人 Why do projects fail? Slide 利用 Python 與人工智慧快速打造人性化聊天機器人 (IBM) Chatbot @ E.Sun Bank – 玉山小i隨身金融顧問的兩三事 (玉山) [Keynote] Building for Failure: Learning Lessons from Aviation slide 共筆 Warnings Soft Failure Hard Failure Obscure errors and try to carry on Quit at the first error and log it Noisy Warnings Engineers ignore logs/notifications Precise Warnings Alert on actionable things, then fix them Raise clear, verbose exception try : requests . get ( 'http://api.com/user' ) except RequestError : raise APIFetchError ( 'Could not get user list' ) Testing 100% Coverage Fallacy Too many tests that are fragile so you ignore them Checklist The step between manual and automation Cheap and very effective Find the limits The Load Testing Chaos Monkey 測試 server 復原能力 Restore from backups The \"Red Team\" 攻擊系統的工程師們 Trade off between Redundancy & Acceptable Loss Redundancy Acceptable Loss What do you fall back to? Quantify the loss, and recovery Team No Single Cause → No Blame Culture Not someone's mistake Systematic Problem Clear command chains Who makes decisions? Who does the fixing? Leadership can blind Debate for what is right Crew Resource Management Increase your \"bus factor\" People get ill → 一個專案至少要 2 個以上的人懂 Good engineering is not just code Communication matters Slower can be faster Testing, Writing Documents make a project slower in short term, but faster in long term Speakers Advice Checklists Restore your backups Work out roughly what happens for every part of a system failing, and if you care Reward people whose code quietly works, not those who firefight and take the glory Checklists 對話機器人的腦子與靈魂 Bot's Brain and Soul 共筆 這場人太多了，連坐下來的位置都沒有ＱＱ 不過共筆寫得很清楚了 我這裡記錄的是會後跟講者討論的一些問題 Q: Language Generation 要怎麼做 Evaluation，怎樣才算是符合文法？怎樣算是合理的回答？ 判定很主觀 很多研究會導入 Human Evalutaion 目前還是一個 Open Question Q: 目前關於情緒判斷，是否已經到了 Production 了？ 尚未到 Production 這樣的問題很難做，其中一個原因在於資料很難收集 另一個原因是，就算沒有辦法判斷情緒，通常也不會造成太大的問題。不像意圖如果判斷錯誤，就會提供錯誤的服務 香港科技大學目前有一個可以判斷人格的 Bot( 我找不太到＠＠ ) 鄉民教我做的聊天機器人 slide 共筆 Line Bot Chinese Conversation Data Movie subtitle 主題發散，不太容易收斂 先過去出資料用語 Seq2seq 只能回應簡單的問題 大部分回答都是「我不知道」 PTT 八卦版標題和推文有應對關係 → 問答 Backend & Platform ~48 萬篇文章 Information Retrieval 找出文章標題符合 Jaccard Similarity 不能處理介系詞 Modified BM25 針對重要的字給予較大的權重 TF 對短句比較不好用 → 用詞性作為權重 Tried Improvements Tokenizer Improvement Emoji icon pre-processing Improve tokenizer accuracy 把 jieba 換成用繁體中文字典，並加入 PTT 會用的常見詞彙 Keyword Extraction & Association Word2Vec → Query associative term if the original one doesn't exist Evaluate Represent for document with vector Doc2Vec (gensim) RNN-encoder (arXiv: 1506.08909v3) NDCG 量化標注 讓那篇文章的回應當作 ground truth 來評斷機器人產生的結果好不好 利用 Python 與人工智慧快速打造人性化聊天機器人 (IBM) Source Code 有溫度的聊天機器人 輔助性答案 ( 互動性 ) 引導性回饋 - 開放話題 不定時提醒 - 貼近使用者 隨機答案 - 提高趣味 學習與進化 Multi-channel ( 多渠道互動 ) Watson NP, ML 的語意理解 Zero Downtime 擴充 可訓練 搜尋引擎 Watson AI Flow Intent, Parameter, Entity Type Chatbot @ E.Sun Bank – 玉山小i隨身金融顧問的兩三事 (玉山) slide Q & A 還有沒有其他的 客訴 問題呢","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2017/06/PyCon-TW-2017-Day2"},{"title":"PyCon TW 2017 - Day 1","text":"今年 PyCon 終於比起上次聽得懂多了！ 看來這兩年來，還是有點進步的 XD 先放上今年的 共筆 這幾篇記錄我參加議程的筆記 有些投影片跟共筆就很清楚的，就直接放連結了 議程 [Keynote] Choices for Smarter AI Python 開源軟體考古 - 以Viper為例 整合 Slack 與 Docker 搭建 Jupyter 線上程式面試系統 [Keynote] The State of Python for Education Learning Building Microservices in Python 個案分享 Slide 共筆 Understanding Serverless Architecture 同場加映： Don't Reinvent Sandwich (本議程沒供餐 XD) Tensorflow & Python: Fault Detection System [Keynote] Choices for Smarter AI 共筆 Better AI Traditional: 更像人類 New: 更好用 Choice[0]: What Language for AI? 現場會眾一致通過是 Python (Bias Sampling XD) Useful libs xgboost libact : Active Learning Choice[1]: What Application Should AI Help? AI Starts From Problem Solving Motivation Publishable (academia), Profitable Feasibility Modeling, Timeline, Budge Big Problems from Big Data Velocity: Evolving data, Evolving problems Volume: Computational Bottleneck Veracity: Modeling with non-textbook data → Noise, Bias Choice[2]; What Route for AI Human-er Machine-er Subjective Objective Domain Knowledge Computing Power Fast Basic Solution Continuous Improvement Tip: As much human as possible before going to machine Choice[3]: How to Measure AI Goal? Tip: Start with reasonable, measurable and prioritized goals for AI Choice[4]: What Data to (or not to) Use? Choice factors for data Utility: Relationship with goal Necessity: Uniqueness to goal Quality: Noise, Freshness Cost Tip: Start with \"minimum viable data\" Choice[5]: What Model to Start? Linear (Simpler) Model First Choice[6]: What Improvement Steps to Take? Lose Reason Overfitting Misfitting Over-reusing Keep data fresh Choice[-1]: How to verify and Deploy? Code Deployment Workflow AI Deployment Workflow Development → Staging → Production Offline → Online → Production Human Trust matters Need a baseline to be compared Misc[0]: No Choice is a Choice Misc[1]: Learning from Mistake Misc[2]: ??? Python 開源軟體考古 - 以 Viper 為例 這場很實用，slide 也很清楚 蠻推薦影片出來可以看一下 slide 共筆 viper-research 從開源專案學習寫 code 讀 code 技巧 降低專案複雜度 從早期版本追 如何挑版本？ ( 搭配 tig 服用 ) 重大版本號 簡單、可運作之版本 (e.g. viper 的 commit hash: 46a2a ) 感覺太複雜？ 砍！ 鎖定特定功能，移除其他雜質 測試，能動就可以 專案程式邏輯架構 模組相依性 → 一直 trace 到沒有 import 專案自己寫的 code Tools modulegraph pydegraph (py2degraph) snackfood 數據分析 e.g. 被用最多的反而不是核心 → 這些程式碼好用、易用 走訪專案 建立專案整體架構邏輯 深度走訪 由下往上 仔細閱讀單一程式 廣度走訪 由上往下 解釋特定組合的程式的意義 Conclusion 系統化讀 code 從 Commit 學習 架構變化 Commit Message 規則 Branching Model Issue Handling 整合 Slack 與 Docker 搭建 Jupyter 線上程式面試系統 slide pnp-interview 共筆 這場最重要的大概就是 slide 第 12 頁 第 11 頁的架構圖 Tools Used Flask Python 中最簡單使用的 web framework 做小型 web 應用非常適合 Docker 容器化 一鍵部署 限制容器耗費的 CPU, GPU Slack Integration 很好 Bugs Pull Image First So it can be fast Try except for any case dockerpy 的雷 xd File Permission 要採 docker 坑，這很重要 [Keynote] The State of Python for Education Learning slide 共筆 這場 Talk 主要講學習、推廣和社群 Carol 有提到幾個學習 Python 很棒的資源 其中我覺得最有用的大概就是 pyvideo.org 了 之前回去聽工資管系系友演講，趨勢的學長就有提到看 Talk 是很快的學習方式 另外，Carol 強力推薦今年 PyCon US，Instagram 給的 Talk Lisa Guo, Hui Ding Keynote PyCon 2017 之後，應該也會找個時間來看一下 Understanding Serverless Architecture slide 共筆 Serverless Function as a service (FaaS) e.g. AWS lambda Advantage Don't need to maintain servers Disadvantages Functions are allowed to run for only a limited amount of time Heavy workloads cannot be run No control over containers Hard to monitor Hard to scale up It's awesome but not the best choice for everyone. Tensorflow & Python: Fault Detection System slide 共筆 Fault: An abnormal condition or defect at the component Logs Usage of CPU Memory Disk I/O Network Bandwidth System Log Application Log and etc. Log is also natural language. The sequence of words and expression is important sequential data. 這場我真的就有點聽不太懂了＠＠","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2017/06/PyCon-TW-2017-Day1"},{"title":"Common Neovim Problems","text":"Load ~/.vimrc from neovim mkdir -p ${ XDG_CONFIG_HOME := $HOME /.config } ln -s ~/.vim $XDG_CONFIG_HOME /nvim ln -s ~/.vimrc $XDG_CONFIG_HOME /nvim/init.vim No python interpreter found. pip install neovim Reference .nvimrc doesn't seem to be loaded up or working and it cannot create backups on editing existing files No python interpreter found.","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2017/05/common-neovim-problems"},{"title":"[Paper] Deep Learning-Based Document Modeling for Personality Detection from Text","text":"Paper Implementation: Personality-Detection Data Set James Pennebaker and Laura King's stream-of-consciousness essay dataset NRC Word-Emotion Association Lexicon Practical Application of Personality Detection Product and Service Recommandation (People with similiar personalities might have similiar favors) Mental Health Diagnosis Forensics: Reduce the circle of suspects Human Resource: One's suitablitlty for certain jobs Personality Theory Used in This Paper Big Five Personality Trait Basic Idea of the Method Feed sentences from essays to convolution filter → Sentence model in the form of n-gram feature vectors Aggregate the vectors of a document's sentences and combine them with Masiresse features to represent the document Classification: Feed the document vectors into a fully connected neural network Overview of the Method 1. Preprocessing Sentence Splitting Data Cleaning Unification (e.g. lowercase) 2. Document-level feature extraction Mairesse baseline feature set (e.g. word count, average sentence length) 3. Filtering Sentences without personliaty clues are dropped (Based on NRC Word-Emotion Association Lexicon ) 4. Word-level feature extraction word2vec Variable number of fixed-length word feature vectors → Variable number of sentences → Document 5. Classfication Deep CNN (Conolutional Nerual Network) Input Words: Fixed-length feature vector using word2vec Sentences: Variable number of word vectors Process Word Vector is reduced to a fixed length vector of each sentence Document: Variable number of such fixed-length sentence vector Document vector is then reduced to a fixed-length document vector This Document vector is then concatenated with document-level features Predict Yes / No (5 different personality traits are trained seperately) Network Architecture in Detail Main Steps (7 Layers) Word Vectorization Layer 1: Input \\( R &#94;{D \\times S\\times W \\times E}\\) Use Google's pretrained word2vec In implementation, all the documents contain the same number of sentences. Shorter documents are padded shorter sentences with dummy words. Sentence Vectorization Layer 2: Convolution 3 convolutional filters: unigram, bigram, trigram Layer 3: Max Polling Document Vectorization Layer 4: 1-max pooling Classification: (Yes/No) Layer 5: Linear with Sigmoid activation Layer 6, 7 2 Neuron (yes/no) Softmax Output (ReLU and tanh perform worse) fully connected layer of size 200 Training Objective Function: Negative Log Likelihood if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Paper Summary","url":"http://lee-w.github.io/posts/paper-summary/2017/04/Deep-Learning-Based-Document-Modeling-for-Personality-Detection-from-Text"},{"title":"[Paper] Understanding Personality through Social Media","text":"Paper Main Purpose: To see how linguistic features correlate with each personality trait. Use Twitter to predict MBIT personality. Problem of Past Researches Language on social media has richer content that makes the typical linguistic analysis tool perform poorly (e.g. iono -> I don't know) Gain personality information is costly (e.g. Big Five Questionnaire) MBTI Instead of commonly used big five theory, MBTI is used in this paper. Myers-Briggs Type Indicator There are 4 types of personality trait i.e. Introversion(I) / Extraversion(E) Intuition(N) / Sensing(S) Feeling(F) / Thinking(T) Perception(P) / Judging(J) Personality can be expressed as a code with 4 letters. e.g. ENFJ, INTP Data A Twitter dataset Around 90,000 users 120,000 personality-related tweets from 2006~2015 (out of 1.7 M tweets) What is the so-called personliaty-related tweets? English Tweets that contain users' own MBIT code. e.g. \"I'm an ENFJ\" is qualified \"My friend is an ISFJ\" is not qualified Heuristic rules is used (e.g. \"I'm\" , \"I got\" , \"I have been a\" ) No classification method is used for ensuring the personality code is indeed the user's Distribution Personality distribution of this data is skewed. However, in the real word, the personality distribution might also be skewed. Features 1. n-grams Most frequent 1,000 unigram, bigram, trigram words and phrases 1,000 dimensions vectors for unigram, bigram trigram for each user 2. Twitter Part-of-speech tags Based on Part-of-Speech Tagging for Twitter: Annotation, Features, and Experiments 25 types with some Twitter-specific tag. e.g. hashtag at-mention URL emoticon 3.word vectors Word Vector Settings 2,334,564 words 500 dimension Extracted Features Average word vectors Weighted average word vectors (weighted according to TF-IDF) Prediction Logistic Regression is used (Random Forest and SVM produced similar results) Accuracy Measurement Since the data is skewed, AUC is used. Accuracy Indivisula Features Word Vector Only -> (AUC=0.651) n-gram only -> (AUC=0.607) POS only -> (AUC=0.585) Combinded Features All three features -> (AUC=0.661) POS + n-gram -> (AUC=0.616) Insight Among the results, word vector performs best which might illustrate that predictions based on social media and language would work. During the POS conversion process, information is compressed into 25 tags and might lost some important one. This might be the reason why it performs worse.","tags":"Paper Summary","url":"http://lee-w.github.io/posts/paper-summary/2017/04/Understanding-Personality-through-Social-Media"},{"title":"[Paper] Toward Personality Insights from Language Exploration in Social Media","text":"Paper Demo My Slide The main purpose of this paper is to show how social media can be used to gain psychological insights. Different from other papers in the past which use a pre-compiled word category list (e.g. LIWC), it uses an open vocabulary approach that allowing discovery of unanticipated language. Data 75,000 Volunteers Facebook Status Update Age Gender Personality (Through Standard Personality Questionnaire) Architecture Linguistic Feature Extraction N-Gram Point-Wise Mutual Information Topic Probability a person mentioning a topic (Derived from LDA) Correlation analysis Least Squares Linear Regression Visualization Differential Word Clouds Word size represents correlation strength. Color represents relative frequency Standardized Frequency Plot Plot the word frequency against age Result Most results confirm what is already known or obvious. However, I think this method might still be useful to gain insight in other kinds of datasets.","tags":"Paper Summary","url":"http://lee-w.github.io/posts/paper-summary/2017/04/Toward-Personality-Insights-from-Language-Exploration-in-Social-Media"},{"title":"Create a Telegram EchoBot","text":"最近當助教要出一個 Telegram Bot 相關的 Project 先來寫一篇簡單的教學，減少之後的問題 XDD 如果對 Chat Bot 的基本運作概念不太熟 可以參考 [Bot] Introduction to Chatbot What is Telegram 在台灣，好像還沒有那麼多人用 Telegram 簡單來說就跟 Facebook Messenger 或 Line 這類的 IM 差不多 Why Telegram 至於這次為什麼要選用 Telegram 麻 是因為上次有聽其他開發者說 Telegram Bot 提供相當多的功能 就想說來試試看 Web Framework 上次寫 Line EchoBot 的教學是用 django 這次來試試 Flask Source Code 一樣放在 GitHub 上 這篇文章會用 minimal-flask branch 當範例 只有 31 行 Code，比較容易理解 master 上也是用 Flask 只是架構比較複雜，有試一下 Flask 的 blueprint，之後可能還會多加一些奇怪的功能 xd Apply a telegram bot 首先當然必須要有 Telegram 的帳號 再來要加 BotFather 為好友 跟他說 /newbot 接著他會問你，Bot 的 name 跟 username name 是 Bot 在聯絡人資訊顯示的名稱 username 則比較像 id 的概念，而且一定要用 Bot 結尾 之後就會得到剛申請 Bot 的 API Token 然後你就可以從 https://telegram.me/<bot_username> 找到剛申請的 bot Telegram Bot API Wrapper 開發上，我使用的是 python-telegram-bot pip install python-telegram-bot 它其中一點設計的很不錯的是 Telegram API 的命名是 CamelCase (e.g. sendMessage) 但 Python 的命名 convention 卻是 lowercase_separated_by_underscores (e.g. send_message) 而它是兩種都支援 Star Programming 先附上全部的 code，後面再慢慢解釋 import sys import telegram from flask import Flask , request app = Flask ( __name__ ) bot = telegram . Bot ( token = 'Your API Token' ) def _set_webhook (): status = bot . set_webhook ( 'https://Your URL/hook' ) if not status : print ( 'Webhook setup failed' ) sys . exit ( 1 ) @app.route ( '/hook' , methods = [ 'POST' ]) def webhook_handler (): if request . method == \"POST\" : update = telegram . Update . de_json ( request . get_json ( force = True ), bot ) text = update . message . text update . message . reply_text ( text ) return 'ok' if __name__ == \"__main__\" : _set_webhook () app . run () Setup 其中有兩個地方，必須要改成自己的設定 1. API Token bot = telegram . Bot ( token = 'Your API Token' ) Your API Token 要改成剛剛取得的 API Token 2. Webhook URL _set_webhook 中的 Your URL statue = bot . set_webhook ( 'https://Your URL/hook' ) 這裡的 URL 就是設定成你這個 Bot Server 的 URL 不過 Telegram 一樣要求必須要是 https 最簡單的方式就是使用 ngrok (ngrok 的使用在 [Bot] Line Echo Bot on Django 最後面有介紹 ) 平常測試使用 ngrok 就很足夠了 之後要 production 的時候，在 deploy 到適當的 server 就好了 _set_webhook Telegram 有兩種接收訊息的方式 隨時去監聽的 webhook，和主動去要求更新的 get_updates 這裡使用的是 webhook 這個 function 先設定 Bot 的 webhook URL，如果設定失敗就直接終止程式 也就是告訴 Telegram 要把 Bot 收到的訊息傳到哪 而 set_webhook 前面要有個 _的原因是我不希望它被其他的 code 使用 但 Python 本身並不支援 Private 的概念，而是慣例上在前面加一個底線 def _set_webhook (): status = bot . set_webhook ( 'https://Your URL/hook' ) if not status : print ( 'Webhook setup failed' ) sys . exit ( 1 ) 在最後 run Flask app 前，要先把 webhook URL 設定好 if __name__ == \"__main__\" : _set_webhook () app . run () wehook_handler 這裡就是 bot 收到訊息要怎麼處理 @app.route ( '/hook' , methods = [ 'POST' ]) def webhook_handler (): if request . method == \"POST\" : update = telegram . Update . de_json ( request . get_json ( force = True ), bot ) text = update . message . text update . message . reply_text ( text ) return 'ok' app.route 這個 decorator 是 Flask 的語法 表示 https:/Your URL/hook 會導到這個 function，而它只能接受 POST 這裡設定的 /hook 也就是為什麼在 _set_webhook 中的 URL 最後面必須有 /hook 另外還可以發現 webhook_handler 是不帶任何參數的 跟 django 不同的是 Flask 把 request 這種幾乎所有 view function 都會用到的參數直接變成全域可讀取的變數 也就是最一開始的 from flask import Flask , request 接下來 webhook_handler 內做的就只是把收到的訊息轉成 update 再從裡面讀到對方傳來的 text 最後用 reply_text 回傳同樣的 text 回去 這是最簡單的 Telegram Bot 不過我覺得開始學一個東西，還是會希望能在最短時間看到點東西，再慢慢專研 接下來可以從 python-telegram-bot 的 wiki ，試更多 Telegram Bot 的功能 Reference Simple-Echo-Telegram-Bot 開發 Telegram Bot 簡介","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2017/03/create-a-telegram-echobot"},{"title":"[Book] 做工的人","text":"「做工的人」由一個個藍領階級的故事所組成 說的是那些壓迫、歧視和無奈 看這本書是會讓人感到很難過的 處於同溫層 常會覺得世界就只是我們看到的樣子 但世界並不是單一面貌的 每個人所看到的、所感受到的世界都是不同的 而「做工的人」帶我們用不同的角度來看他們所看到的世界究竟是如何的 不同於以往這書摘 這篇會多了一點我自己的想法 同樣的，這也不過是這世界上一個微不足道的人的想法罷了 摘錄 我想如果只看這些摘錄文字，應該會不知道在說什麼 xd 不過它們都代表著每一個故事的一小部分 也是在故事中，讓我有感觸的部分 記錄下它們，是為了提醒我不要忘了現在看完這本書的感受 推薦序 - 如果在工地，一個年輕作家的養成 他看見，年輕不羈的工人願意將寶特瓶壓扁資源回收，是為了讓附近的低收入戶可以拿去賣錢。 學有專精的電焊師傅，在得知外勞的悲慘待遇後，會願意將一身技藝傾囊相授，好讓弱者掙脫被壓榨的命運。 阿忠之死 晚上，阿忠的嫂嫂說阿忠的喪事已經辦好了，打來是為了要告訴我：「阿忠對於自己沒能還你那五千元，很對不起。」 生命是有層次的，一層一層剝開後，每一片回憶都會讓人流淚。 台灣媳婦 如果我們判斷人的標準，是用刻苦，是用勤奮，是用力爭上游的努力和對於生活的認真，去決定一個人的品格 那我們不可能看不出來她們值得擁有尊敬，我們又怎麼能夠允許這個社會將它們分別列上不同的標籤呢？ 我們既然知道以一個人的經濟條件去判定其社會階級以及地位是錯的，並深惡譴責，那又為什麼不改變對她們的看法呢？ 隔閡 那種講理財和產業動態的書從來就無法引起我的興趣。 曾幾何時，我發現自己在看任何文字或是哥與、電影時，總感覺到一股不舒服感。 這些文字似乎與我有著隔閡。 我想，是那種對於內容的不快感使我感到很大的不舒服。 而我很清楚，這來自於我親身的感受和所在的位置，與那些撰書者或是創作者不同。 愈是和這個世界接觸越深，我就愈明白其中的差異。 也因此，我始終不能接受論述式的教科書、自以為高深莫測的經文，也討厭那些成功者的傳記和論述。 我知道，我這樣是畫地自限，為自己設下了這樣的隔閡。 可是會不會哪天我也和那本商周一樣，只能在自己的世界裡，看著自己所要的內容？ 看板人 這社會要求他人有尊嚴活著的，幾乎都是不需為下一餐煩憂，並且收入穩定的人。 而我不是，我能理解他們只是想活著，卑微和努力的活著。 對於那些喊著尊嚴的人，因為那傷痕我無言以對。 摘錄以外 在翻開這本書之前 我有看到一篇關於它的文章 下面得回覆就有站在不同立場的師傅的評論 說它美化了很多不應該存在的錯誤 並不是每個師傅都會犯這樣的錯，而那些錯並不是這麼的美麗 但翻完「做工的人」後 我覺得其實作者並沒有說那些事是對的 只是敘述了這樣的事情確實存在著，而它們為什麼存在 「做工的人」不會是這世界的全貌 也不見得能代表整個藍領階級的故事 就像前面也提到有不同立場的師傅提出他們的看法 但我覺得它已經足夠讓我們重新去思考 那些認為是理所當然的事，並不是那麼理所當然 自以為是的正義，不見得就是正義 而我們又是多麼習慣於帶著有色的眼鏡，去看、去批評、去攻擊與我們不同的人們 我很喜歡張獻忠先生在 TEDx Tainan 2016 說的話 如果今天換作是我們遇到同樣的處境 我們真的能處理得更好嗎？ 也許在下次評斷一件事前，去想想這樣的問題，能看到更多 這樣的同理並不是、也不會讓對的事情變錯的，或錯的事情就變成對的 而是嘗試去思考，除了對錯以外的事 最後我想分享一段節錄自實驗室學長在上大學部的課時說過的話 回高中聊天的時候，會發現有些在比較後面學校的同學 他們的家境可能並不是那麼好，可能要打工存學費 生存都是件辛苦的事了，很難有餘力在做出太多的改變 而我們是一群夠幸運的人，能順利地唸到成大 所以可以想想，我們是不是能再多做些什麼改變 除了認知到這些幸運不是那麼的理所當然外 我想再補充的是 在想想還能做什麼改變的時候 是不是也能站在那些不那麼幸運的人們的角度，來思考這些改變 讓這些改變，也可以為他們發聲","tags":"Book","url":"http://lee-w.github.io/posts/book/2017/03/worker"},{"title":"SITCON 2017","text":"聽說這次 SITCON 一分鐘就賣完了＠＠ 還好我申請了開源貢獻票 xdddd 所以大家快來貢獻開源專案，脫離搶票吧（？？？？？ RO 共筆 R1 共筆 R2 共筆 R3 共筆 這次大概就這兩場比較印象深刻 前端工程的過去、現在與未來 slide 整體算是給完全不懂前端的我，關於前端的知識 overview Present Webpack 未來可能取代 Gulp 與 grunt Babel : 目前最主流的 Javascript Transpiler e.g. 轉換 ES6 -> ES5 雖然 ES6 支援模組標準，但瀏覽器尚未有定論，目前前端依然無法支援模組 可以用 webpack 打包來模擬 非同步處理 : ES6 Promise, async/await 第一次做光劍就上手 slide 雖然隔壁兩場，一場在講 Chat Bot，一場在講 AI 我好像應該去聽 但身為星戰迷，實在無法抵抗光劍的誘惑 The force is strong in this session 一把最簡單的光劍大概台幣 1000 可以起來 感覺有時間蠻值得來玩玩的 xD","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2017/03/sitcon-2017"},{"title":"Tool for Checking Python Coding Style","text":"Pylint Setup pip install pylint Usage Generate a code quality report pylint your_code.py Customize your pylint settings Some rules in default settings might be too trivial. (e.g. PEP8 E501: line too long error (no more than 79 characters) ) Generate pylintrc file pylint --generate-rcfile > ~/.pylintrc This generate a common used pylintrc . For further customization, you'll have to change this file. Generate a code quality report using you pylintrc pylint --rcfile ~/.pylintrc you_code.py Integrate with Vim 1. ale ale also supports other linters in other languages. It uses the new async feature in vim 8. Thus, it checks your code when you are typing. (You can disable it.) The following settings are for pylint in ~/.vimrc # The default value is pytlinh # If your pylint executable is not pylint, it should be set let g:ale_python_pylint_executable = 'pylint' # options of your pylint command let g:ale_python_pylint_options = '--rcfile ~/.pylintrc' All the available linters are enabled by default. For Python, flake8 , mypy are also used. Thus, you might find that even if you ignore some rules in pylintc , you are still notified. In this case, add the following setting in ~/.vimrc let g:ale_linters = { \\ 'python' : [ 'pylint' ] , \\} This enables pylint as the only linter for Python p.s. mypy , flake8 are also great linters. I'm just not familiar with it 2. python-mode It's a powerful package supports not only linters but also plenty of useful features a python programer would need. Unlike ale , python-mode check your code only when you save or open your python file (You can set this in your ~/.vimrc ) Add these lines in ~/.vimrc to enable pylint let g:pymode_lint_checkers = ['pyflakes', 'pylint', 'pep8'] let g:pymode_lint_ignore = \"C0111,W0621,E501,F0002\" Note that space cannot appear in pymode_lint_ignore","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2017/03/tools-for-checking-python-coding-style"},{"title":"[Book] 此人進廠維修中","text":"這本書不談情緒管理，而是如何與情緒共處 我總覺得這些有關情緒的書，要做筆記實在是一件很困難的事 不過這裡就稍微紀錄比較能紀錄的部分吧 序： 接受不是認同，而是允許存在 身體或心理的痛苦，其實都帶著一些訊號 當你願意接受、承認這份痛苦的存在，並允許它有存在的空間 才可以客觀、中立的觀察它要傳達的訊息 負面情緒從來都不是問題，造成問題的常常是我們面對的方法 允許這些情緒的存在，把用在對抗負面情緒的能量拿回來，放在理解情緒所帶來的訊息上，從中學習而成長 Ch4 - 談後悔 我們總在問別人：「該怎麼辦？」 美其名是參考別人的意見，實際上只是想要別人幫我們做決定 一旦後果不如預期，我們可以將責任歸咎於別人 但事實上，最後決定是否聽取意見，也還是我們自己決定的 後悔，是在告訴我們原有的決定行不通了，該轉向了！就只是如此而已 轉向很麻煩，但比堅持走那條不會抵達的老路還來得有效 Ch5 - 談孤單 孤單提醒我們建立有意義的人際連結 判定你與某人之間存在著「有意義的人際連結」的一個指標，是你們之間的對話內容 是不是有大部分會是聚焦在個人化的議題上，也就是個人的思想、觀點、情感、願景、期待、決定 ... 等 Ch8 - 談憂鬱 試圖安慰處於極度傷心難過中的人盡量往好處想，是沒有用的 反而只是會讓當事人感受到不被理解 因為這麼做無疑是否定了他們此時此刻的真實感受 如果真的得做點什麼，讓自己不再憂鬱，就試著做這兩件事吧 1. 保持正常作息 2. 出門運動並曬點陽光 Ch9 - 談失落 沒能好好說再見，常是關係失落中最令人遺憾的事情，也是人無法走出失落的原因之一 失落的情緒很可能會一在反覆出現，而這是再正常不過的 一旦來了，就允許它存在 只要知道，那都是在提醒我們曾經有著一段令我們在意的關係就好了","tags":"Book","url":"http://lee-w.github.io/posts/book/2017/03/take-a-rest"},{"title":"[Book] 如何閱讀一本書","text":"Ch2 - 閱讀的層次 法蘭西斯 · 培根：「有些書可以淺嚐即止，有些書是要生吞活剝，只有少數的書是要咀嚼與消化的」 Ch4 - 閱讀的第二層次：檢視閱讀 假設一個常見的狀況「你想要發掘所有的東西，但時間卻很有限」 這時候得先做的就是略讀 1. 先看書名頁，有序就先看序 2. 目錄 3. 檢視索引 4. 出版者介紹 5. 挑幾個跟主題相關的章節看 6. 隨意在書中挑幾個小段落看 頭一次面對一本難讀的書的時候，從頭到尾先讀完一遍，碰到不懂的地方不要停下來查詢或思索 Ch5 - 如何做一個自我要求的讀者 主動的閱讀基礎 : 一個閱讀者要提出的四個基本問題 整體來說，這本書在談什麼？ 作者細部說了什麼，怎麼說的？ 這本書說得有道理嗎？全部都有道理呢？還是部份有道理？ 這本書跟你有什麼關係？ Ch7 - 透視一本書 對於「整體內容」這件事，模糊的認知是不夠的 只有一個方法能知道你是否確切清楚的了解 你必須要能用幾句話，告訴你自己或別人，這整本書在說的是什麼 分析閱讀的第一個階段，找出一本書在談些什麼的四個規則： 1. 依照書本的種類與主題做分類 2. 用最簡短的句子說出整本書在談些什麼 3. 按照順序與關係，列出全書的重要部分。將全書的綱要擬出來之後，再將各個部分的綱要也一一列出 4. 找出作者在問的問題，或作者想要解決的問題 Ch9 - 判斷作者的主旨 分析閱讀的第二個階段，找出一本書到底在說什麼的規則： 5. 詮釋作者使用的關鍵字，與作者達到共識 6. 從最重要的句子中抓出作者的重要主旨 7. 找出作者的論述，重新架構這些論述的前因後果，以明白作者的主張 8. 確定作者已經解決了那些問題，還有哪些未解決的。在未解決的問題中，確定哪些是作者認為自己無法解決的 Ch13 - 如何閱讀實用型的書 任何實用型的書都不能解決該書所關心的實際問題。一本理論性的作品可以解決自己提出的問題。但實際的問題卻只能靠行動解決","tags":"Book","url":"http://lee-w.github.io/posts/book/2017/03/how-to-read-a-book"},{"title":"git ignore-io 與 開源貢獻經驗","text":"雖然已經隔了一年多 當初 git ignore-io 這個小功能，也是花了一兩個月 好不容易才 git extras merge 回去的 當初看到這封信的時候，很是感動啊 xd git ignore-io 這個工具主要是從 gitignoore.io 上下載 .gitignore 的範本 e.g. git ignore-io -a vim osx python 像這就是 vim 常見的暫存檔們 一般來說應該被忽略掉，不用被 commit # Created by https://www.gitignore.io/api/vim ### Vim ### # swap [._]*.s[a-v][a-z] [._]*.sw[a-p] [._]s[a-v][a-z] [._]sw[a-p] # session Session.vim # temporary .netrwhist *~ # auto-generated tag files tags # End of https://www.gitignore.io/api/vim 當初可是連文件都要寫好，才會被作者接受 所以我這裡就直接沿用我當初寫的文件了 xd Without option, git ignore-io <type> shows the sample gitignore of specified types on screen. $ git ignore-io vim # Created by https://www.gitignore.io/api/vim ### Vim ### [ ._ ] *.s [ a-w ][ a-z ] [ ._ ] s [ a-w ][ a-z ] *.un~ Session.vim .netrwhist *~ To export it to .gitignore file you can use the following options: -a or --append to append the result to .gitignore -r or --replace to export .gitignore with the result $ git ignore-io vim python For efficiency, git ignore-io store all available types at ~/.gi_list . To list all the available types: -l or -L : These two options will show the list in different format. Just try it. You can also search type from the list by: -s <word> or --search <word> $ git ignore-io -s ja django jabref java ninja 為什麼要貢獻開源專案？ 貢獻開源專案最主要的原因 還是就是 我需要這個功能啊！！！ 但是就沒有人寫，bug 沒有人修 所以就只好先承認自己就是「沒有人」了 xd 其實 gitignore.io 本身就有提供一個簡單的 script gi 不過實在有點不夠我用 xd 於是我就寫了 gi_extension 後來又覺得，如果整併的 git extras 我就能透過 homebrew 安裝了 (????? 整個從 pull request 到 merge 的過程其實蠻有趣的 我找到當初我開的 pr #439 和 pr #448 從 shell script 的風格（有人建議我用 shellcheck ）到 command 的 option 為什麼要這樣命名 都有人跟我討論，給我建議 從中也學到了很多 貢獻這些專案還能去申請 SITCON 跟 COSCUP 的開源貢獻票，這樣就不用跟大家搶票了","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2017/02/git-ignoreio-and-open-source-experience"},{"title":"[Book] 看！情緒幹得好事","text":"本書鼓勵你接受一切無法改變的事情 (e.g. 你的個性、行為、感情、工作 and etc.) 並提供方法更有效的管理人生難題，而 不是妄想去改變他們 上面這段話節錄自這本書的前言 比起一般心靈勵志的書 這本書更要告訴你的是「面對現實」 我們得接受很多事情不是我們所能改變的 尤其是那些我們以為只要努力就一定可以做到的 但這本書也試圖提供一些實際的作法，給我們一點面對人生難題的方向 如果努力過還是失敗了，就試著接受無法改變的現實吧 接受，從來就是不是件容易的事 也許就算這麼做了，還是是會不開心 但自我責備和衝動行事，只會一切更糟 試著與這些情緒或無法改變的事共存，並讓自己的人生更好 這本書的原文書名是 \"F*ck Feelings\" 每一個章節的原文甚至全都用 Fuck 當作開頭 不過目錄的中文翻譯倒是沒這麼直接 前言 - 你訂下什麼目標 該死的做更好的自己 該死的自尊 該死的公平正義 該死的熱心助人 該死的心平氣和 該死的真愛無敵 該死的溝通 該死的天下無不是的父母 該死的混蛋 [Bouns] 該死的治療 後記 - 好吧，該死的我 每一個章節都有很多個小問題 每個小問題都會有下面這些內容 問題概述 那些你想做到，而做不到的事（e.g. 突然哪天醒來，憂鬱症就好了） 遇到這個問題，人們許下的願望（真正想達到的事） 案例分析 簡易自我診斷表 無法企及的心願 切合實際且可達成的目標 你能做的事 真心話練習腳本 （一個範本，讓你可以帶入各種角色、事件，對你或其他人說） 不一定會有的額外補充 前言 - 你訂下什麼目標 接受吧！有些失去就是一輩子的痛，所以別再鑽牛角尖 請習慣帶著一顆沈重的心活著，努力開創比現在更好的人生 該死的做更好的自己 上癮的自我治療 自我批評或祈求誘惑那天突然消失，都對戒除上癮沒有幫助，而是要接受癮頭存在的事實 你得用盡全力對付它，才不會把力氣浪費在自我怪罪、虛假希望、絕望與自憐上 該死的做更好的自己 克服身障缺陷 隱藏疾病或迴避治療往往讓情況更糟 你能做的就是接受它，即便會尷尬或對自己失望 人們唯有真正了解你的疾病，才會尊重你管理疾病的方式，進而幫助你對付它 說出你真正的問題，並非告解，而是聲明 該死的公平正義 洗刷污名 當你被不實指控時最大的錯誤就是用事實與理智反擊 你的目的不是要證明敵人錯了，而是要避免你的人生被敵人和他的指控糾纏 討公道 失去了你覺得不該失去的東西後，也許會發現自己無法走出悲傷 直到找到能平衡不平的東西或賦予「失去」意義 其實你真正需要的是打擊某個根深蒂固的假說，也就是「不會發生不公平的事」 如果你法停止遺憾，請思考這麼做的代價 體驗美好卻不願放手是要付出代價的 請建立一套對抗懊悔與渴望公平的哲學，人間本來就不存在公平 該死的熱心助人 助人的感覺驅使我們努力改變他們，不管做不做得到，也不顧會不會產生意想不到的後果 犧牲奉獻做公益 這是你想擁有但很可能缺乏的力量之一： 神奇的後見之明 保證你的援助不會損及對方文化，也不會引發嫉妒 不會因為破壞而造成反彈，更保證人們對你的援助只有感激與敬佩 該死的心平氣和 緊張、恐懼還或是憤怒，人生所有的都不愉快是無法避免的 另一個角度來看，這些情緒都是有益的，它們讓我們對外在世界多一份警戒 如果你真的想致力過完全平靜的人生，你只能這麼做 1. 大腦額葉切除成功，成功過著完全平靜的人生 2. 因為做不到而自認失敗者 我愛你，我不要恨你 你可以試著化解造成仇恨的負面情緒 但努力後還是無法不恨的話，也不要對此感到絕望 對自己無法不憎恨而責怪自己，只會讓一切更糟 一旦接受了憤怒不會消失，接下來就想想該如何管理這份憤怒 無法企及的願望 不被仇恨玷汙的心 切合實際可達成的目標 與仇恨共處，不會恨自己 你能做的事 盡一切阻止惡行，降低與這些行為接觸的機會 永遠不要因為可恨的人而感到氣餒 管理好恨意是值得尊敬的事 治療心痛 有些失落是無法復原的，即使有很多支持，工作很努力，也不斷向前走 很多時候，失落的心痛能否復原由不得自己 帶著一顆破碎的心生活也許很難 但這並不會阻止你活出更好的人生 該死的真愛無敵 找一個伴 眼光請超越吸引力，想清楚你需要怎樣的人格特質和個性 如果這些特質不存在，要有心理準備不要理會強大的吸引力 該死的溝通 如果無法與他人達成共識，請花時間弄清楚為什麼溝通無效 也許就是不能溝通呢？ 或者更重要的是根本不該溝通 重要的是知道溝通的能力其實有限 說出創傷 不要再逼受創傷的人講述自己的故事 人們對復原傷痛都有一套自己的方法，也許把話說開對你最好，卻可能成了別人的痛處 很多時候，創傷可能無法被解決，不論是透過分享或哄騙他人分享 但你可以學著傾聽自己的需要和在乎的事 儘管你現在必須經驗的焦慮或目睹痛苦 宣洩憤怒 如果你決定保持沈默好過抒發自我 這不是因為你是懦夫，而是你有比起讓內部火山噴發更具價值的目標 例如維繫家庭、替感情找到最好出路，以及保留談判的力量 該死的天下無不是的父母 停止親子衝突 如果你對孩子即將變成什麼樣的人感到悲傷 請客觀看待他的長處，不要混肴真正的他與你期望的他，兩者差距有如鴻溝 尤其你的期待可能帶著成見和錯誤 [Bouns] 該死的治療 尋求治療 透過治療，你想找到問題根源，找得到當然很好，但那只會出現在電影裡 現實人生中，大多數問題成因太多，很多甚至是無法改變的 即便有耀眼的洞察力或痛哭一場也改變不了 如果你還期望這樣的治療能解決問題，一定會覺得自己很失敗 人們以為心理治療有某種神奇的力量，可以剷除不開心的事 但現實是，這些不切實際的期望把你鎖在無法實現的目標 而它們只會讓你更痛苦而已 拒絕就醫者的治療 如果有什麼不好的事發生，不要把焦點放在該怪誰 尊重嚴重精神疾病很難忍受的事實，並看重你和他人都盡力幫助這件事 有人說自殺是懦弱的結束，是被愛者失敗的表現 但套句臨床術語來形容那些說這種話的人是「他馬的白痴！」 對病入膏肓且失去大多數原始個性的人 當你持續愛他並關心他，就沒有失敗這回事 當有人每天從床上爬起來與疾病奮戰，就沒有懦弱這件事 即使他們最後連這樣的事都做不了了 後記 - 好吧，該死的我 請記得天下沒有「公平」這回事 情緒不過是蠢事 而人生艱難 ... 如此你的日子大概就會過得比較ＯＫ 即使不快樂，因為你的目標很實際 而為了達成目標付出的努力也會讓你很驕傲","tags":"Book","url":"http://lee-w.github.io/posts/book/2017/02/fuck-feelings"},{"title":"我如何更有效率的使用時間","text":"過年整理了好多以前的書摘 好像該來發一點自己的東西了 前一段時間被找回母系演講 被問了，我是怎麼管理時間的 當下沒有回答的很好 於是乎就有了這篇文章 XD 如何達到一個目標 我們常常會給自己定一個很大的目標 像是我要看完 \"Learning Python\" ( 一本 1400 頁的 Python 教學書） 嗯，聽起來好像也不太大 不過至少這不太容易在一天內完成 剛定下目標的時候，會很有衝勁的去做 過了一段時間就會發現，怎麼離完成目標還是好遠 再來我們就會去做一些比較容易達成的事，像是滑個 FB、整理一下 e-mail 然後這個目標就會擺在這，等到很久以後再想起它 恩，就像新年新希望一樣 怎麼樣才能達到目標呢？ 每天做一點點 我非常喜歡 Act Small 這支影片 他把目標比喻成走完一千階的階梯 光是看著這長長的階梯就會讓人感到挫折和疲憊 這時候我們會先去吃個早餐、遛個狗，做些輕鬆可以達到的事 想辦法拖延要爬上這個階梯這件苦差事 但是，如果我們試著不要只專注在很遙遠的目標 而是眼前的每一個小階梯 走一個小階梯，並不會讓人感到壓力 但是每天都走這簡單的一小步，最後就會達到甚至超過這一千階的階梯 訂下目標後，要把目標拆解成一個個很小很明確的行動 最好是可以小到不會讓人感受到壓力 再來就是每天不斷地完成這些小小的行動 這部影片是 Daily Checklist 的社群分享的 這個 App 可以幫我們追蹤今天是不是完成了要達成的行動，到了凌晨 12 點就會重設 Checklist 接下來會提到這個 App，如何幫我達成目標 如何養成習慣 那麼把目標拆解成很小的行動後 要怎麼堅持每天都要走這一小步，而不會半途而廢呢？ 這裡非常推薦大家看「 為什麼我們這樣生活，那樣工作? 」（連結是我的書摘） 裡面提到要養成一個習慣的條件有以下四個 1. 提示 2. 慣性行為 （習慣） 3. 獎籌 4. 創造渴望 以我最前面說我要看完 \"Learning Python\" 為例 我會定只要某個時間一到，我就得要看這本書 只要我花了一個小時看它，我就會在 Daily Checklist，按下 check，表示我看完今天的進度了 如果我突然怠惰不想看，就會中斷我連續達成這個行動的累績次數 也會讓我今天的習慣達成率沒辦法達到 100% 這都會驅使我今天就算只做一點點，也要努力再前進一小步 把這些敘述換成剛剛所提到的四個條件 1. 提示 -> 時間到了 2. 慣性行為 （習慣）-> 看 Learning Python 3. 獎酬 -> 在 Checklist 上打個勾 4. 創造渴望 -> 我要讓 Checklist 上的達成率達到 100% 而且隨著達到的目標越來越多 就會感到更有成就感 越來越相信自己可以做到這些事情 透過追蹤自己習慣和時間使用 可以讓自己知道接下來要從哪裡修正起 如果自己漸漸有進步，就會有成就感繼續堅持下去 除了 Daily Checklist，另外也推薦追蹤工作時間用的 Toggl 一天不做，不會怎樣啦 花了好久時間建立的習慣，還是會有想怠惰的時候 我很喜歡「 你如何衡量你的人生 」的一句話 百分之百的堅持比百分之九十八容易 一旦你放下了這個堅持，之後就會更容易放下 反之，如果一直堅持，就會有力量讓自己一直堅持下去 時間有限，做出選擇 再來可能會再遇到下一個問題 想完成的事情太多，能分配的時間太少 這就是必須做出選擇的時候了 那麼要怎麼決定那些事情是真的很重要，要留下來的呢？ 這裡我要推薦的書是「 少，但是更好 」 不過如果要給一個最簡單的原則，那就是 No more yes. It's Either HELL YEAH! Or No 如果這件事不是「太棒了！我一定要去做！！！」，那麼就不要做了 另外一個更明確的做法是 Rule of Three 在一天結束前，為明天定下三件重要而且一定要完成的事 只要三件， 可以少，但不可以多 ，就算只有一件也很好 只要這三件事情還沒有達成就不能做其他的事 這樣做的好處是可以明確的知道接下來要做什麼，大腦的負擔會比較小 也不會讓自己因為有太多未完成的代辦事項而分心 意志力有限 人的意志力是非常有限的 所以留給一點彈性給自己吧 不要把整天都排滿工作，適時的排給自己一點休閒 人畢竟不是機器，沒辦法不停的工作 尤其到了越晚，意志力會越來越薄弱 所以我會盡量把重要的習慣，擺在早上做完 如果真的累了，就休息吧 不論是體力上的疲憊，或只是意志力的消磨殆盡 死撐著也只是無意義的消磨時間，而且還有可能導致工作出錯 不過休息就真的休息，聽點音樂或什麼的都好 去滑臉書、收信件、看新聞，這些往往會讓意志力恢復得更慢 後記 其實我一直想花時間，紀錄一下服役時間各種嘗試讓自己更有效率的方法 今天終於下定決心好好的寫這篇文章 大三、大四的那兩年，好像常常把自己搞得很忙 雖然不算沒有做到事 但總覺得自己好像有點是在瞎忙 明明花這些時間應該可以做更多的事 服役期間，剛好坐我隔壁的學長很喜歡看書 就漸漸地養成一週至少會看一本書的習慣 上面提到的這些書也都是這段時期看的 後來就漸漸把這些應用在其他我想學想做的事情上 第一次好好上完一個為期三個月的線上課程，其實蠻有成就感的 再來遇到的問題就是，在這之後我排了太多的線上課程和想看的書 有時候白天工作量比較多，回到宿舍還要持續好幾個小時的 work 實在太讓人吃不消 所以我重新檢視了我的計劃和每天要達成的習慣 哪些是真的重要的 這些事又要怎麼拆解才能不會讓我太費力，或只要多花一點力，不會很容易半途而廢的 這些只是我嘗試覺得有用的方法 不見得適用於每個人 不過也許都能去嘗試看看，相信總會有一些有幫助的部分","tags":"Gossiping","url":"http://lee-w.github.io/posts/gossiping/2017/02/how-do-i-manage-my-time"},{"title":"More than Just Echo Bot","text":"知道怎麼實作一個會 Echo 的 Bot 後 再來就要思考，開發一個 Bot 我們要提供什麼功能 (e.g. 天氣查詢, 訂票, 推薦旅遊景點 ) 不過這裡要討論的不是 Bot 的功能 Bot 的功能實作，跟一般網站或 App 的實作並沒有太大的差別 接下來來談如何從使用者說的話來判斷，使用者要使用的功能 如果使用者問：「今天天氣如何？」「天氣今天好嗎？」 要如何知道，他都是要詢問今天的天氣狀況 也就是使用者的「意圖」 Based on Keyword 上一篇文章，輸入關鍵字就能回傳 template message 的 bot 也是用這樣的方式實作的 if 'button' in text : # Send ButtonTemplate ...... elif 'confirm' in text : # Send ConfirmTemplate ...... elif 'carousel' in text : # Send CarouselTemplate ...... else : # Echo TextMessage ...... 回歸到天氣的問題 可以試著找出「天氣」是否有出現在使用者的問句中 再來判斷「今天」, 「明天」這樣敘述時間的詞 e.g. if '天氣' in text : if '今天' in text : return today_s_weather elif '明天' in text : return tomorrow_s_weather Pros 不需要其他的背景知識，容易實作 運算量小 Cons 建立規則很麻煩 規則很容易就會出現例外，很難定義得完整 只要使用者無法觸發到關鍵字，就無法使用功能 一堆 if else 造成程式冗長，不易擴充和維護 AIML Artificial Intelligence Modelling Language 它是一款基於 XML 的 markup language 這是最基本的 AIML <aiml version= \"1.0.1\" encoding= \"UTF-8\" ? > <category> <pattern> HELLO ALICE </pattern> <template> Hello User! </template> </category> </aiml> 只要符合特定的 pattern，就回傳指定的 template 也能透過 <random> 這樣的 tag，從多種回覆隨機丟一種回傳 <random> <li> response1 </li> <li> response2 </li> ... </random> Pros 比起只用 if else 更結構化，較易維護和擴充 Cons 依然很難包含所有的狀況 Other NLP Service Wit.ai (Facebook) COSCUP 2016 的聊天機器人小啄，就是透過 Wit.ai 實作的 LUIS (Microsoft) API.ai (Google) 這些服務能透過標記和訓練 解析出這句話的每一個片段，所具有的意義 e.g. 「今天西雅圖天氣如何」 時間：今天 地點：西雅圖 意圖：天氣如何 Wit.ai Wit.ai 跟 LUIS, API.ai 比較不同的地方是 從 Wit.ai 得到的是，我們設定的回覆 而不是一句話解析後的結果 LUIS 從 這裡 可以測試兩個訓練過的範例機器人，看看從 LUIS 可以得到什麼 e.g. Question how is the weather in the Taipei Response { \"query\" : \"how is the weather in the Taipei\" , \"topScoringIntent\" : { \"intent\" : \"GetCurrentWeather\" , \"score\" : 0.50119406 , \"actions\" : [ { \"triggered\" : false , \"name\" : \"GetCurrentWeather\" , \"parameters\" : [ { \"name\" : \"location\" , \"required\" : true , \"value\" : null } ] } ] }, \"entities\" : [], \"dialog\" : { \"contextId\" : \"80cd646a-d85d-4b40-873d-1b47fa49adc8\" , \"status\" : \"Question\" , \"prompt\" : \"Where would you like to get the current weather for?\" , \"parameterName\" : \"location\" } } API.ai Question Hey Calendar, schedule lunch with Mary Johnson at 12 pm tomorrow. Response { \"action\" : \"meeting.create\" , \"name\" : \"Lunch with Mary Johnson\" , \"invitees\" :[ \"Mary Johnson\" ], \"time\" : \"2014-08-06T12:00:00-07:00\" } Implement Through Powerful Libraries 不過這些服務，通常會有它的限制 這時候就能用上 Python 強大的函式庫們，來實作自己的版本 NLTK Python 經典的 NLP 函式庫 word2vec 透過詞向量，找出相似詞 jieba 中文斷詞 判斷句子中的關鍵詞 我在 NLP Libs Sample 寫了這些函式庫的基本使用範例 另外，也可以看 自己动手做聊天机器人教程 它是一系列聊天機器人教學，談這些做法背後的理論和實作 Beyond NLP 不過就算做了這些分詞、判斷意圖 也不能保證使用者就會買單 有人稱 Chat Bot 為下一代的 UX Design The Next Phase Of UX: Designing Chatbot Personalities Issue 如何讓使用者，在機器人的 Scope 內不會碰壁 如何讓機器人的判斷足夠 robust，不會每次回答都是不明白 如何讓使用者在最少的操作下，得到想得到的服務 更進一步是 如何設計一個有個性、有溫度的機器人 這裡就可以再去研究 NLP 的情感分析 Read More WHEN BOTS GO BAD: COMMON UX MISTAKES IN CHATBOT DESIGN Does Conversation Hurt Or Help The Chatbot UX? Reference Head First ChatBot AIML Tutorial AI Chat Bot in Python with AIML Wit.ai Quickstart 自己动手做聊天机器人教程 An overview of the bot landscape","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/11/more-than-just-echo-bot"},{"title":"More About Line Messaging API - Template Messages","text":"除了傳送文字外，Line Bot 還可以傳 圖片, 影像, 聲音, 地圖 貼圖 (Line Bot 所能使用的 貼圖清單 ) Imagemap Tempalte Button Confirm Carousel 大部分使用上很直覺，可以直接參考 API Reference - Messaging API 和 line-bot-sdk-python 這篇文章主要談 Template Messages 的使用 Template Template 分為 Button, Confirm 跟 Carousel 三種 這些功能也是我認為從 Line Bot Trail 升級到 Line Messaging API 最好用的功能 Example 以下的測試是 bot 收到關鍵字，回傳相對應的訊息 Button Confirm Carousel (如果超出版面，則可以左右滑動) 另外必須要注意的是，這些功能目前都只支援手機版 在電腦版上的 Line 看到的訊息會是這樣 這個文字內容可以透過 template 的 alt_text 參數設定 上面的例子是 line-bot-sdk-python 的使用範例 ( 可以回傳 template message 的 echo bot ) 大部分都能透過 Code 和 Example 比對，找到需要調整的參數 接下來談的是那些按鍵的設定 上面所看到的按鍵都是一個 Action 三種 Template 最大的不同，主要是這些 action 擺設的方式不同 限制的數量也不同 Button 一次可以支援四個 action Confirm 支援三個 action Carousel 則可以用 5 個 CarouselColumn，每一個 Column 支援 3 個 Action 另外需要注意的是 Carousel 中每一個 Column 的 action 數量必須是一樣的 Action 這些 action 的 label 參數，就是顯示在按鍵上的文字，必須在 20 字以內 text 參數則是按下這個按鍵，會由使用者回傳設定的文字 e.g. 這是我按下上面 Button 的 postback 的效果 而 text 就是設定為 postback ( 注意並非 label 的 'postback') Postback 當使用者按了這個按鍵 Line Server 會傳一個 postback event 給我們，裡面包含著 data 參數中設定的字串 在收到 event 的時候，透過 event.postback.postback.data 取出 data Postback 可以不給 text 參數 Message text 參數在 Message Action 是必須的，也不能給空字串 如果希望這個按鍵，只有顯示但不會由使用者傳文字過來，可以給一串空白 (e.g. ' ') URI 使用者按下這個按鍵就會用 Line 的瀏覽器跳到外部網頁 Reference API Reference - Messaging API line-bot-sdk-python","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/11/more-about-line-messaging-api-template-messages"},{"title":"Deploy LineBot on Heroku","text":"上一篇提到如何用 ngrok 讓我們可以不用架 Https Server，直接在本地端測試 Bot 再來要談的是如何把 Bot 部署到 Heroku 上 Why not ngrok 使用 ngrok 必須要讓你的本地端一直開著才能收到訊息 而且免費版的 ngrok 每次都會更改 url 所以我們需要一個可以讓其他人較長時間測試的 Server 以我自己的開發習慣 我會使用 ngrok，來做 Bot 的基本除錯 Heroku 則是用來讓其他人測試功能 真的要上線的時候才會自己架一個 Https Server Line 的帳號也是 ngrok, heroku 跟上線需要的各申請一個 不過 ngrok 可以好幾個 Line Bot 專案共用一個即可 Heroku Create App 先上 Heroku 辦個帳號 到個人的 dashboard New -> Create New App 選一個名字，就創好 App 了 Deploy Add Remote 在部署之前要先安裝 Heroku CLI 再來我們要到原本 line-echobot，將 heroku 加入這個專案的 remote heroku login heroku git:remote -a leewbot 接著用 git remote -v 就能看到 heroku 已經被加入 remote 了 以後只要 git push heroku master ，就能部署到 Heroku 不過我們還必須要多做一些設定才能讓 Bot 順利的部署 Environment Variables 首先是我們原先設定的環境變數 Heroku 是透過這個指令來做設定 heroku config:set \"env key\" : \"env value\" 或者也能到 dashboard 的 Settings -> Config Variables -> Reveal Config Vars 做設定 Python Envrionments 因為 Heroku 支援多種不同的語言 所以要讓 Heroku 知道我們使用的是 Python Heroku 可過專案中是否有 requirements.txt 來判斷這個專案是否為 Python 專案 並且安裝 requirements.txt 內的函式庫 名稱如果打錯，可能會讓 Heroku 不知道這是 Python 專案，導致部署失敗 另外可以透過 runtime.txt 來指定 Python 的版本 目前支援這兩種版本 - python-2.7.12 - python-3.5.2 Deploy Settings - Procfile 再來必須要讓 Heroku 知道我們執行專案的指令是什麼 這個指令就是寫在 Profile 中 這裡使用的部署套件是 gunicorn 先在 requirements.txt 加入 gunicorn==19.0.0 再來創一個 Profile ，內容是 web : gunicorn line_echobot . wsgi -- log - file - 如果用其他的部署套件，則需要修改 web 後面的指令 到了這裡就做好所有的設定了 最後只要 git push heroku master 就會部署到 Heroku 上 透過 heroku open 能看到剛剛部署上去的專案 接著把專案的網址加上我們先前設定的 callback url echobot/callback 設定到 Line Bot 的 Webhook URL，就完成了 Reference Getting Started on Heroku with Python Deploying Python and Django Apps on Heroku","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/11/deploy-linebot-on-heroku"},{"title":"Line Echo Bot on Django","text":"單純要寫一個只會 Echo 的 Line Chat Bot 用 flask 只要 85 行的 code 就能解決 官方已經有提供相當清楚的範例[flask-echo] (https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-echo) 了 這篇文章則是提供了 django 的做法 想直接看 code 也可以參考 line_echobot Line Messaging API (line-bot-sdk-python) 詳細的 Line Bot 提供哪些功能，該如何使用 可以在 API Reference - Messaging API 找到 之後的文章，會談如何使用文字以外的功能 這裡直接使用官方提供的 line-bot-sdk-python pip3 install line-bot-sdk 另外官方也提供 java , go , php , ruby , perl 的版本 Start Project Create Project # Create a line_echobot project django-admin startproject line_echobot # Create an echobot app python3 manage.py startapp echobot Setup Line Secrets 接著設定 Line Bot 的 Channel Secret , Channel Access Token ( 可以在 Line Bot 的 Line Deverloper 頁面取得 ) 不過這些值不該被 git 記錄，所以不該被寫死在 settings.py 中 建議將這些值寫入環境變數 export SECRET_KEY = 'Your django secret key' export LINE_CHANNEL_ACCESS_TOKEN = 'Your line channel access token' export LINE_CHANNEL_SECRET = 'Your line channel secret' 執行時，讓設定檔先去讀取這些環境變數 下面的 get_env_variable 函式是用來取得環境變數 只要有少設定，就會丟出 ImproperlyConfigured 的例外事件中斷執行 # line_echobot/settings.py ...... def get_env_variable ( var_name ): try : return os . environ [ var_name ] except KeyError : error_msg = 'Set the {} environment variable' . format ( var_name ) raise ImproperlyConfigured ( error_msg ) SECRET_KEY = get_env_variable ( 'SECRET_KEY' ) LINE_CHANNEL_ACCESS_TOKEN = get_env_variable ( 'LINE_CHANNEL_ACCESS_TOKEN' ) LINE_CHANNEL_SECRET = get_env_variable ( 'LINE_CHANNEL_SECRET' ) ...... INSTALLED_APPS = [ ...... , 'echobot' ] 不過如果只是單純測試用，這些值也可以直接寫死在 settings.py 中 另外也不要忘了在 INSTLLED_APPS 加入 echobot 一般來說，django 產生 project 時 settings.py 裡面就會有 secret key 這裡的做法是把預設的 secret key 刪掉 設定到環境變數中，避免被 git 記錄下來 如果還需要另外還要重新產生可以透過 django-secret-keygen.py Setup Line Webhook URL 再來要設定一個 Webhook URL 讓 Line 可以把 Bot 收到的訊息傳給我們 先在 project 的 urls.py 設定 讓 project 可以找到 echobot 這個 app 的 urls.py # line_echobot/urls.py ...... import echobot urlpatterns = [ ...... , url ( r '&#94;echobot/' , include ( 'echobot.urls' )), ] ...... 接著在 echobot 內，創一個 urls.py 並將 url 再導到 callback ，呼叫 views.py 裡面的 callback 函式 ( 接下來才會實作 ) # echobot/urls.py from django.conf.urls import url from . import views urlpatterns = [ url ( '&#94;callback/' , views . callback ), ] 這些都設定完後，要在 Line 那邊設定的 Webhook Url 就是 https://\"your domain name\"/echobot/callback/ ( your domain name 要設定什麼，會在這篇文章的 最後 說明) Implement Callback Funtion 接下來就是要在 echobot/views.py 實作 callback 了 Initial 先 import 相關的函式庫 from django.conf import settings from django.http import HttpResponse , HttpResponseBadRequest , HttpResponseForbidden from django.views.decorators.csrf import csrf_exempt from linebot import LineBotApi , WebhookParser , WebhookHandler from linebot.exceptions import InvalidSignatureError , LineBotApiError from linebot.models import MessageEvent , TextMessage , TextSendMessage 透過 line_bot_api 傳訊息給 Line，讓 Line 轉傳給使用者 line_bot_api = LineBotApi ( settings . LINE_CHANNEL_ACCESS_TOKEN ) Callback Function 有兩種方法可以處理 Line Server 送過來的訊息 這裡先用 Todo 記著，待會再來補上 # TODO: Define Receiver @csrf_exempt def callback ( request ): if request . method == 'POST' : signature = request . META [ 'HTTP_X_LINE_SIGNATURE' ] body = request . body . decode ( 'utf-8' ) # TODO: Handler when receiver Line Message return HttpResponse () else : return HttpResponseBadRequest () Validate Signature 處理訊息之前 先確認這個 request 是不是真的是從 Line Server 傳來的 要確認這件事，需要 - request 的 body - request header 中的 X-Line-Signature 也就是上面的 signature = request . META [ 'HTTP_X_LINE_SIGNATURE' ] body = request . body . decode ( 'utf-8' ) Handle Recevied Message 取得 body 跟 signature 後 Line Bot API 會在處理訊息的同時，確認這個訊息是否來自 Line 而處理 Line 傳過來給我們的訊息，有兩種不同的做法 WebhookParser WebhookParser 會 Parse 這個訊息的所有欄位 讓我們針對各種不同型別的訊息做個別的處理 e.g. - UserID - Event Type - Message Content - and etc. 在 這裡 可以找到有哪些欄位 這段 code 要取代上面的 # TODO: Define Receiver parser = WebhookParser ( settings . LINE_CHANNEL_SECRET ) 下面三段 code 則要取代 # TODO: Handler when receiver Line Message parser 會 parse 所有的 event 跟各個 event 中的所有欄位 如果 request 不是從 Line Server 來的，就會丟出 InvalidSignatureError 其他使用錯誤，或 Line Server 的問題都會是丟出 LineBotApiError try : events = parser . parse ( body , signature ) except InvalidSignatureError : return HttpResponseForbidden () except LineBotApiError : return HttpResponseBadRequest () 再來要判斷收到的事件是什麼事件 這個 Bot 只需要 echo 純文字訊息 所以先判斷這個事件是不是訊息事件，而這個訊息是不是文字訊息 for event in events : if isinstance ( event , MessageEvent ): if isinstance ( event . message , TextMessage ): line_bot_api . reply_message ( event . reply_token , TextSendMessage ( text = event . message . text ) ) 最後的 reply_message 函式，讓我們傳訊息給 Line Server 第一個參數是要回傳要用的 reply_token，可以從事件中取得 （ event.reply_token ） 使用這個 reply_token 做回覆，是不用收費的 不過同一個 reply_token 只能使用一次，而且在一定的時間內就會失效 第二個參數是這次要回傳的訊息 這裡 有所有能回傳的訊息 也可以傳一個都是訊息的 list 或 tuple 不過一次最多只能傳 5 個 只要超過就會有 LineBotApiError WebhookHandler WebhookHandler 是針對每一種不同的訊息型態註冊一個處理器 只要收到這樣的訊息，就會丟給對應的處理器 如果確定每一類訊息，在任何情況下都會有相似的處理方式，就很適合這樣的設計 接下來的三段 code 要取代 # TODO: Define Receiver handler = WebhookHandler ( settings . LINE_CHANNEL_SECRET ) 先為 handler 加入，TextMessage 的處理器 參數是接收到的 event 這裡做的也是讀取到原本 event 中的文字，並回傳回去 @handler.add ( MessageEvent , message = TextMessage ) def handle_text_message ( event ): line_bot_api . reply_message ( event . reply_token , TextSendMessage ( text = event . message . text ) ) 因為沒有要處理其他訊息 如果收到其他訊息 (e.g. 貼圖 , 照片 ) 或訊息以外的事件 使用 default 來回傳 \"Currently Not Support None Text Message\" 的文字訊息 @handler.default () def default ( event ): print ( event ) line_bot_api . reply_message ( event . reply_token , TextSendMessage ( text = 'Currently Not Support None Text Message' ) ) 下面的這段 code 是要取代 # TODO: Handler when receiver Line Message handler 判斷完這個訊息，應該被哪個處理器處理，就會傳給那個函式處理 try : handler . handle ( body , signature ) except InvalidSignatureError : return HttpResponseForbidden () except LineBotApiError : return HttpResponseBadRequest () Full Code 由於上面的 code 說明比較分散 這裡附上兩個版本各自的完整版 WebhookParser # line_echobot/echobot/views.py # WebhookParser version from django.conf import settings from django.http import HttpResponse , HttpResponseBadRequest , HttpResponseForbidden from django.views.decorators.csrf import csrf_exempt from linebot import LineBotApi , WebhookParser from linebot.exceptions import InvalidSignatureError , LineBotApiError from linebot.models import MessageEvent , TextMessage , TextSendMessage line_bot_api = LineBotApi ( settings . LINE_CHANNEL_ACCESS_TOKEN ) parser = WebhookParser ( settings . LINE_CHANNEL_SECRET ) @csrf_exempt def callback ( request ): if request . method == 'POST' : signature = request . META [ 'HTTP_X_LINE_SIGNATURE' ] body = request . body . decode ( 'utf-8' ) try : events = parser . parse ( body , signature ) except InvalidSignatureError : return HttpResponseForbidden () except LineBotApiError : return HttpResponseBadRequest () for event in events : if isinstance ( event , MessageEvent ): if isinstance ( event . message , TextMessage ): line_bot_api . reply_message ( event . reply_token , TextSendMessage ( text = event . message . text ) ) return HttpResponse () else : return HttpResponseBadRequest () WebhookHandler # line_echobot/echobot/views.py # WebhookHandler version from django.conf import settings from django.http import HttpResponse , HttpResponseBadRequest , HttpResponseForbidden from django.views.decorators.csrf import csrf_exempt from linebot import LineBotApi , WebhookHandler from linebot.exceptions import InvalidSignatureError , LineBotApiError from linebot.models import MessageEvent , TextSendMessage , TextMessage line_bot_api = LineBotApi ( settings . LINE_CHANNEL_ACCESS_TOKEN ) handler = WebhookHandler ( settings . LINE_CHANNEL_SECRET ) @handler.add ( MessageEvent , message = TextMessage ) def handle_text_message ( event ): line_bot_api . reply_message ( event . reply_token , TextSendMessage ( text = event . message . text ) ) @handler.default () def default ( event ): print ( event ) line_bot_api . reply_message ( event . reply_token , TextSendMessage ( text = 'Currently Not Support None Text Message' ) ) @csrf_exempt def callback ( request ): if request . method == 'POST' : signature = request . META [ 'HTTP_X_LINE_SIGNATURE' ] body = request . body . decode ( 'utf-8' ) try : handler . handle ( body , signature ) except InvalidSignatureError : return HttpResponseForbidden () except LineBotApiError : return HttpResponseBadRequest () return HttpResponse () else : return HttpResponseBadRequest () 到了這裡，echo bot 實作的部分就完成了 Https Server (Setup 'your domain name') 使用這些 Bot 的服務時，大多會要求我們一定要先有一個 Https Server 除了自己架 Http Server 外，還透過其他服務，更方便我們做測試 接下來我會分享兩種做法 架在 Heroku ( 由於篇幅的關係，Heroku 會在接下來的文章談 ) 使用 ngrok ngrok ngrok 提供的服務是 讓外部的訊息先經過 ngrok 的 server，ngrok 再將這個訊息傳給你的 server 回傳時也是從你的 server 傳給 ngrok 的 server，再把訊息傳出去 所以外部都只會看到 ngrok 的 server # Install ngrok on mac brew cask install ngrok 先把 django 的 server run 起來 python3 manage.py runserver 預設 django 的 port 是 8000 這裡並不需要使用 0.0.0.0:8000，讓外部可以連到這個 django server ngrok 會把 request 傳到 local 端相對應的 port 接著就要用 ngrok 將 request 導到本地端的 port 8000 ngrok http 8000 再來到 Line Bot 的 Line Developer 頁面設定 Webhook URL 這時候填上 ngrok 後的 https 那串 url，再加上 echobot/callback/ ( 我們設定的 callback url) (e.g. https://2.....f.ngrok.io/echobot/callback/ ) 值得注意的是我的 Webhook URL 下面有一個 Read timeout. 如果按了後面的 Verify，Line Server 會傳一些測試訊息過來 但是那個 reply_token 是無法被回覆的 這時候在 Server 就會丟出 LineBotApiError 不過沒關係，這只是給我們檢查用的 並沒有一定要通過才能使用 Line Bot 這時候加 Bot 為好友，就可以開始跟它聊天了 如果你發現除了 echo 訊息外，還有其他的訊息 可能就是沒有把 Atuo Reply Message 關掉 這時候就可以去 Line Bot 的 LINE@ Manger Settings -> Bot Settings 把它關掉 或者到 Messages -> Auto Reply Message 做修改訊息內容 Reference 新版 Line@ Messaging API 使用心得 (Line Bot v2) LineBot - Sinatra ngrok","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/11/line-echo-bot-on-django"},{"title":"Apply Line Messaging API","text":"先到 Messaging API 申請帳號 開始使用 Messaging API 和 開始使用 Developer Trial 申請到的帳號是不同的 之後不能互換，所以一開始就要根據需求來決定申請哪種帳號 開始使用 Messaging API 會申請免費版的帳號 之後可以選擇付費升級為入門版等更多功能的版本 主要拿來做正式發佈用的帳號 開始使用 Developer Trial 則是 Developer 的帳號 雖然一開始就能使用 Push API，但好友人數只有 50 人 如果還在開發階段，就適合辦這個帳號來測試 不過需要注意的是 developer 帳號，並不能接升級成一般帳號 再來會詢問業務類別，跟要求設定 Bot 名稱和照片 回到 Line Bussiness Center 的帳號清單 就能看到帳號已經創好了 進入剛剛創好的帳號的 LINE@ Manager 頁面左上方，Bot 名稱下方 @ 開頭的就是這個 Bot 的 id 可以從 Line 輸入這個 id 加 Bot 為好友 （需加上 @） 接著到設定頁面左下方，找到 Settings -> Bot Settings 進入以下的畫面開啟 Messaging API 開啟 Bot API 後，就會不能用以下三個功能 - 1-on-1 Chat - LINE@ app - Store Chat 之後會進到以下畫面 記得要把 Use webhooks 調成 Allow 才能把這個 Line Bot 串到自己的 server 上 往下拉可以看到更多的選項 如果不想要 Line 每次收到訊息都自動幫你回覆 就要把 Auto Reply Message 調成 Don't Allow Greeting Message 則是，剛加 Bot 為好友時的歡迎詞 如果有需要對這些訊息做設定 都可以在左手邊選單的 Messages 找到 再回到帳號清單就會看到，帳號已經開通 Messaging API 了 進到 LINE Developers 就能取得你的 Channel Secret 和 Channel Access Token 了 （這些都是運用 Line Messaging API 會用到的） 除了前面提到可以用 ID 加好友，也能透過這裡的 QR code 另外要注意的是 Webhook URL 這裡之後要填的就是你的 Server 的 Webhook url Reference Enable the Messaging API for your LINE@ account","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/11/apply-line-messaging-api"},{"title":"Introduction to Chatbot","text":"有人說聊天機器人 Chat Bot 將要取代 APP Why chatbots are replacing apps This is how Chatbots will Kill 99% of Apps 各大軟體公司也爭相提供 Bot 的服務 Facebook Messenger Platform Line Messaging API Slack API Telegram Bot Platform What can Bot Do? 那 Chat Bot 究竟能幹嘛呢 ? 先來看段影片吧 【公式】BOT & THE NEW WORLD by LINE 影片中出現了什麼？ 預約餐廳 訂車 偵測 Beacon 提供 coupon 遠端控制家中的 IoT 設備澆水 原本在 App 上處理的這些服務 未來都有可能逐漸被 Chat Bot 所取代 背後發生了什麼事 e.g. 預約餐廳 User 傳一個訊息給 Bot 的帳號 Bot 把訊息傳給服務提供者的 Server 服務提供者的 Server 把訊息，傳給指定的 Server 指定的 Server 做了適當的運算和判斷，把結果回傳給服務提供者 Server 服務提供者 Server 收到後，再傳給 User 的帳號 e.g. Line Chat Bot 架構 Why Chat Bot? 市面上 App 太多了，要開發使用者黏著度高的 App 很困難 每一個 App 都有自己的介面，對使用者都是一次學習成本 不如把服務嵌入現在使用者常用的 App (e.g. Facebook Messenger, Line) 文字是人類相對直覺的溝通方式 Why not Chat Bot? 設計彈性不如 App 雖然 Chat Bot 大多提供按鍵等功能，但使用上的彈性不像 App 那麼大 文字處理依然不夠好 簡單的 Bot，如果使用者一直無法對應到相對的關鍵字，就無法觸發功能 How to Design a Bot? 那麼開發一個 Bot 需要什麼呢？ 選擇使用的 Bot 平台 (e.g., Facebook Messenger Platform, Line Messaging API and etc.) 寫一些服務 (e.g., 訂票、新聞推播) 把服務架在一台 https server 用 Bot 平台提供的 sdk，把 Server 跟平台串起來 用 NLP 判斷使用者的意思，串接到服務上 Chatbot Platform - Line Messaging API 既然看了 Line Bot 的新功能 接下來的幾篇文章會談要如何在 Line 平台上 做一個最簡單只會 Echo 的 Chat Bot Reference 這篇文章整理了相當多的相關資源 The Rise of Chat Bots: Useful Links, Articles, Libraries and Platforms 相當推薦對 ChatBot 有興趣的人參考 Slide 如果有點不喜歡看文章的，也可以看看 slide 的版本","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/11/introduction-to-chatbot"},{"title":"TEDx Tainan 2016 - 0 到 1","text":"趁著昨天才剛結束 把一些感受記錄下來 第一次來現場聽 TED 感受真的跟看影片很不同 劉致昕 這場的主題是敘利亞戰事 談 ISIS 和敘利亞難民到歐洲避難過的生活 而這些都是在台灣不會接受到的訊息 雖然平常有在看 CNN，多少有接觸到這樣的訊息 但不同的情境不同的講者，同樣的故事還是有很不同的溫度 最後講者阿富汗朋友的一句話，讓我印象很深刻 雖然現在是黑夜 但在黑夜中期待光 很美 貓不 當一個溫柔的人，也要當一個有原則的人 赫然發現 google 一下找得到講者在其他地方講的 大概就是 原文 的第 5, 6 點吧 XD 張獻忠 這場主要談的是街友議題 講者分享遇到的各個街友的故事 顛覆一些人認為街友總是好吃懶做的印象 最後結尾時的這句話，才讓我去反思，這場說了這麼多街友的故事，背後想帶出的意義 如果今天換作是我們遇到同樣的處境 我們真的能處理得更好嗎？","tags":"Gossiping","url":"http://lee-w.github.io/posts/gossiping/2016/11/tedx-tainan-2016"},{"title":"[Paper] Mining Online Social Data for Detecting Social Network Mental Disorders","text":"Paper My Slide This paper proposes a model named SNMDD to detect Social Network Mental Disorder (SNMD) through users' behaviors on online social networks (OSN) instead of asking their mental condition. In addition, multi-source learning (FB and IG) is used to improve performance through STM. SNMDD is a classification model based on TSVM The use of domain knowledge from psychology to extract features is the core of this model. The most interesting part is choosing features as the proxy features to replace ones that are hard to detect. For example, distinguishing whether a social capital is a strong tie or a weak tie is crucial to the detection of SNMD. However, it's hard to detect through OSNs data. Thus, it guesses that friends you interacts (e.g. posts, likes, comments) with might be the strong tie ones. STM is a tensor model based on Tucker Decomposition Through Tucker Decomposition, it's possible to combine data from different sources and extract new features vectors.","tags":"Paper Summary","url":"http://lee-w.github.io/posts/paper-summary/2016/11/mining-online-social-data-for-detecting-social-network-mental-disorders"},{"title":"[Book] 所有問題都是一場賽局","text":"序章 : 用賽局來思考，培養解決問題的「三種能力」 賽局理論 : 分析兩人以上的玩家，其決策和行動的理論 學賽局理論的目的 掌握賽局的整體樣貌 （對問題的分析能力） 預測即將發生的未來 找到適當的解決方法 贏不了的賽局，就改變規則吧 e.g. 減少排放二氧化碳有損國家經濟，所有國家都不願意，然而破壞環境卻對大家都是不好的 → 獎勵二氧化碳排放少的國家，讓二氧化碳變成對經濟有利 Ch1: 合理的下一步是 ......? 「囚犯賽局」與「合理的豬」 囚犯賽局 相信接觸過賽局理論的人，一定會聽過囚犯賽局 假設今天有兩個囚犯 A 和 B，他們被分開訊問，並且知道 如果都不認罪的話，兩個人都會被關一年 都認罪的話，兩個人都會被關兩年 但是要是一方認罪，另一方不認罪的話，則認罪方無罪釋放，不認罪方要關三年 將上述狀況畫成表格就會像下面這樣 ( 每一格左邊的數字代表左邊參與者的獲益，右邊的數字代表上面參與者的獲益 ) B 認罪 B 沈默 A 認罪 -2, -2 0, -3 A 沈默 0, -3 -1, -1 在考量了對方所會做的最佳選擇後，所做的最佳選擇就會導向 A 和 B 都認罪 然而對他們來說共同的最大利益，卻是都保持沈默 最後導向的這個點就是所謂的奈許均衡 (Nash Equilibrium) Ch2: 協調賽局 - 為何你拿蘋果、用微軟 參加賽局的玩家，透過協調讓雙方得到利益 協調賽局 以朋友出去玩作為案例 假設 A, B 有音樂劇和電影兩個方案 兩人一起去看音樂劇，滿足度是 10 一起去看電影是 9 分開去的兩種結果，雙方滿意度都是 0 B 音樂劇 B 電影 A 音樂劇 10, 10 0, 0 A 電影 0, 0 9, 9 此時的奈許均衡有兩個，就是雙方選擇同樣行動的兩個點 這時候只要有一方先做了選擇，則另一方就會趨向於 一樣的選擇 協調賽局的根本就是「和大家一樣」 協調的失敗 協調賽局中，有多個奈許均衡點 但最後仍有可能落在對大家都不利的均衡點上 (e.g. 以上面的例子來說就是看電影 ) 而且協調賽局具有「穩定了就很難改變」的性質 所以陷入這個不好的平衡點是相當危險的 實際案例 病態的過度加班 （有人加班，其他人不敢走） Ch3: 知彼知己，百戰不殆 - 三種賽局，搞懂你的對手 膽小鬼賽局 假設兩人各開一台車，朝向牆壁全速前進 看誰能不採煞車前，到離牆最近的地方 → 先踩剎車的人就輸了 B 踩剎車 B 不踩煞車 A 踩煞車 0, 0 -5, 5 A 不踩剎車 5, -5 -20, -20 奈許均衡有兩個 對方先踩剎車，則自己不踩 對方不踩剎車，則自己先踩 實際案例 古巴危機 美國要蘇聯撤除軍備，蘇聯要美國認同蘇聯裝設核子飛彈 如果都不讓步，就會爆發核子戰爭 不存在都讓步的情況 誰都不願意做的事，為什麼有人做 膽小鬼賽局雖然是決定誰是膽小鬼的賽局，但不要只是讚賞勝利者 犧牲自己成為膽小鬼的那一方也應該獲得注目 猜銅板賽局 某個城市中，有警察和小偷 警察的選擇是「巡邏」和「偷懶」 小偷則是「進入偷竊」和「不進入」 小偷進入偷竊 小偷不進入 警察巡邏 1, -1 -1, 0 警察不巡邏 1, 1 0, 0 這樣的賽局並不存在奈許均衡 如果改變規則，則賽局構造也會改變 e.g. 增加警察抓到小偷的利益，或沒抓到的懲罰 霍特琳賽局 某片沙灘上，A, B 兩家冰淇淋店都想開店 沙灘約 100m，遊客也均勻分散 那兩家店的老闆會在哪開店呢 左右兩邊是海，一個 - 代表離沙灘 10m 1. A B |- - - - - - - - - - -| 左邊的 50m 都是 A 的範圍，反之亦然 但所有顧客都要走 50m 2. A B |- - - - - - - - - - -| 對顧客最方便，因為對顧客來說最遠也不過就走 30m 最後的奈許平衡會是 1，即使 2 才是最好的結果 然而當 A 想要設店在離海 30m 的地方的時候 B 就會像把店往左移，如此就能吸引到更大範圍的顧客 實際案例 日本拉麵店都集中在車站 Ch4: 動態賽局 - 時間，可以解決問題 動態賽局並不是一個特定賽局，而是一種統稱 隨著時間經過，賽局發展也會產生變化的結構 擴散型賽局 假設目前城市中已經有一家 A 工廠，B 工廠在考慮是否進入 A 工廠的選項是「戰鬥」和「合作」 B 工廠是「進入」和「不進入」 原本 A 工廠的利益是 3 如果 B 工廠不加入的話，自身利益是 0 如果 B 工廠加入，而 A 工廠選擇合作，則雙方利益為 1 如果 B 工廠加入，A 工廠選擇戰鬥則雙方都是 -1 如果用原本的 2x2 表格來做計算 可以發現奈許均衡在「A 戰鬥 Ｘ B 不進入」「A 合作 X B 進入」 B 進入 B 不進入 A 戰鬥 -1, -1 3, 0 A 合作 1, 1 3, 0 不過「A 戰鬥 X B 不進入」是不會發生的 這時候就可以透過「賽局樹」來觀察時間流 - 戰鬥 -> (-1, -1) A 工廠 - 進入 -> - 合作 -> (1, 1) B 工廠 - 不進入 -> (3, 0) 這種賽局要使用反向歸納（backward induction），排除「奇怪的奈許均衡」 1. 如果 B 工廠進入，A 工廠就會合作 2. 則「A 戰鬥 X B 進入」可以被排除 3. 再來 B 工廠去比較「A 合作 X B 不進入」和「B 不進入」 4. 就能消除不進入的選項 時間矛盾的問題 - 空包彈式的威脅 就前面的 A, B 工廠例子來說 A 工廠進入市場前的最佳行動是戰鬥，所以一定會表現出強硬的姿態 然而 B 工廠一旦進入，A 工廠就會為了利益選擇合作 像這樣 A 工廠的強勢姿態就只是「空包彈」 實際案例 不 ... 的話，就會 ...。 然而這樣的情況卻沒發生，久而久之就無效了 解決方案之一 - 創造出必須遵守約定的狀況 製藥特許權制度 製藥需要很大的成本，如果沒給予製藥公司製藥成功有販售的特許權 製藥公司就會不願意投入，最後人民會受害 所以這個特許權必須被法定 高級品決不降價 一旦降價，就會產生「等一段時間，價格會下降」的想法 以後的物品更不可能用原價把商品賣出 「重複賽局」和「扣板機策略」 回到最一開始的囚犯賽局 如果這個賽局會執行不止一次 最終兩人就會選擇都不認罪的最佳利益 這兩人本來就已經知道最好的選擇是都不認罪 但因為無法抹去「如果對方背叛了 ...」的想法，才會不做出最佳選擇 但是如果「對方背叛我，我就讓他好看」的策略成為可能 就會產生某種信賴關係，讓兩人都導向選擇不認罪 將無限重複的賽局視為大型賽局，而會成為奈許均衡的選項，即是採取合作關係 這稱為「無名氏定理」(folk theorem) 就算是在短期關係中極可能背叛對方的狀況 只要關係變成長期的，就有可能表現出能好好維持合作的關係 Ch5: 人為什麼無法理性？ - 情感和賽局理論 所有的賽局都是在一個共通條件上成立的 - 玩家只考慮自己的利益，各自做出符合理性的行動 而這個前提卻是常常不會成立的 人能預測未來嗎？ - 蜈蚣賽局 爸爸手上有 100 枚硬幣，要分配給 A, B 兩個兒子 但必須遵循以下兩個規定 首先，爸爸會在 A 面前放 1 枚 A 可以選擇「停止」或「繼續」 如果選擇「停止」就結束 選擇「繼續」，則爸爸會從 A 那邊拿起 1 枚 ( 即使後期 A 有不止 1 枚，還是只會拿 1 枚 ) 並且再加上手上的 1 枚，2 枚一起給 B 這個狀況用反向歸納預測的結果是「A 在第一回合就應該選擇停止」 如此 A 便能獲得比 B 還多的硬幣 但是在實際實驗中，卻沒有人做出了這樣的決定 人並沒有辦法預測未來 拍賣賽局 - 證明人會從理性到瘋狂 與一般拍賣不同 競標成功後，未得標的前一位出價者，需要付他喊出的價錢 而這個東西依然會給得標者 也就是，前一位出價者付了錢卻什麼都拿不到 這種賽局一直執行下去，玩家就必須一直往高價喊 實際案例 選舉的燒錢比賽 泡沫經濟 「你沒想清楚後果」確實是個問題，但是你還要考慮的是「其他人沒想清楚後果的可能性」 只用金錢，無法驅動人心 利益並非唯一能影響人心的，往往情感也是 最後通牒賽局 A, B 兩位玩家憑空得到 1000 元 由 B 決定分配方式，A 有同意或否決權 A 同意的話則造這個分配方式 A 否決的話就都拿不到錢 只執行一次賽局 如果人是理性的，A 即使只拿到 1 元都應該接受 然而實際上這樣的狀況卻幾乎不會發生 獨裁者賽局 (Dicatator game) 跟上面同樣的情境 只是這次 A 沒有任何決定權，只能接受 B 的分配 此時 B 的最佳選擇就是 1000 元全部拿走 然而實驗結果，相當多的人依然會給對方一定程度的金額","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/10/how-to-think-like-a-game-theorist"},{"title":"[Book] 穀倉效應","text":"什麼是穀倉？ 組織內各部門自成一格 後續可能造成，組織內資訊不流通，組織各部門內鬥 然而在現在專業分工的時代，聚集專業人士的穀倉也是必須存在的 這本書用案例說明穀倉會帶來的問題和如何減少那些問題 Outline 第 1 章介紹如何透過人類學的概念來思考 2~4 章是穀倉效應造成問題的案例 第 2 章是 sony 的案例，即使他們已經發現穀倉的問題，卻也還是無法解決 5~7 章則是打破穀倉的實際案例 第 6 章是 Facebook 的案例 第 7 章是克理夫蘭臨床醫學中心 第 8 章則是在穀倉造成問題及打破穀倉各提一些 如果要快速看過，建議順序是 前言 -> ( 第 1 章，可看可不看 ) -> 2~4 選一章 -> 5~7 選一章 -> 結語 前言：彭博市府的機密任務 廢油處理問題 （跨部門的合作） 餐廳多半趁深夜偷偷倒油，數年來讓當局一直束手無策。 弗勞爾斯小組從環保部取得廢油污染的資料，跟餐廳執照、退稅紀錄與廚房火警等不同資料互相比對。 他們標定並未申請廢油處理的餐廳，列出可能偷倒廢油的餐廳名單。 然後到市府另一個負責廣生柴油的部門，詢問部門人員時否願意跟食安稽查員與消防單位合作， 說服餐廳不再偷倒廢油，而是把廢油賣給回收單位。 福勞爾斯說：「現在稽查員發現餐廳偷倒廢油時，不會只是走上前說：『喂，搞什麼鬼啊！罰緩二萬五千美元！』 他們改成說：『別傻了，拿這些來換錢吧！賣給生質柴油公司吧！外頭一大堆公司巴不得要購買這些廢油呢！』」 Ch1 - 局外人：從人類學照見穀倉 環境裡的習性不僅反映我們頭腦裡的心理地圖與分類系統，還會加以強化 由於菁英階級樂於維持現狀，他們會設法強化既有的文化、規則與分類方式 沈默具有意義，特定議題遭到忽略，是因為大家早已經把這些議題視為無趣、禁忌、平淡或無禮 Ch2 - 章魚甕：穀倉如何拖累革新 儘管專業化穀倉讓公司顯得更有效率，至少短期如此，但有利也有弊 管理階層發現要自負盈虧，他們開始試著「保護」自己的部分 不只對抗公司外的競爭對手，也對抗公司裡的其他部門 不願彼此分享點子 優秀人員不在跨部門輪調，合作程度降低 連創新實驗與長期投資也逐漸減少，大家短視近利，不願承受風險。 Satya Nadella 說：「一但你太過依賴過往的成功，就容易不願互相合作 ... 但外頭競爭對手才不管你們內部有什麼問題」 Ch4 - 俄羅斯娃娃：穀倉如何造成狹隘視野 決策者看不見危機的最大原因在於整個系統過度分工 e.g. 總體經濟研究者關注經濟數字，卻忽略金融系統的細微變化 銀行監管機關監督個別銀行，卻忽略其他金融機構 有些民營銀行相當了解影子銀行，但沒有跟中央銀行人員交流 Ch6 - 改寫社會規則：打開穀倉大門 每一個進入臉書的員工都必須參加新兵訓練營，在不同部門論調，藉此了解整間公司，透過這個想達到是的是兩件事 人員分為不同的專案團隊，各自專門負責特定任務 編寫程式需要針對特定專案進行密切的團隊合作 穀倉是臉書這類的公司的必要之惡 如果沒有專業部門和團隊，根本無法完成工作，也難以集中火力與區分權責 讓不同專案團隊的成員之間斯底亞有第二套人際關係，不受正式的部分區分所限 藉此避免專案團隊變得僵化與封閉，讓人員不只對所屬團隊有感情，也對整個公司有向心力 Ch7 - 取下鏡片：醫生如何避免經濟專家的錯誤 透過建築空間來鼓勵人員打破穀倉 Facebook 的 Hacker 廣場 克理夫蘭臨床醫學中心的空橋 李透說：「長年傳統與慣例只在不得不時才會改變。哈佛不必改變，哈佛就是哈佛，具有悠久歷史，還是世上募款能力最強的名校。但我們（克理夫蘭臨床醫學中心）試衣間不太賺錢的醫院，位於人口逐漸減少的夕陽工業成，不得不做得更好，並發揮創意。」 結語 像人類學家一樣看世界，換你主宰穀倉 世界上穀倉造成的問題 官僚部門之間缺乏溝通 公司內部團隊明爭暗鬥，把資訊扣在自己手上 破除穀倉的啟示 大型組織不仿讓團隊界線保持彈性 讓不同部門一起激盪與合作 透過空間設計讓人員不期而遇 組織必須反思薪資與獎勵，當人員報酬完全取決於團隊表現，不同團隊容易彼此內鬥 資訊流通的重要 跳脫一般想像的分類方式 多數人幾乎始終把既有的分類、制度視為理所當然","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/10/the-silo-effect"},{"title":"COSCUP 2016 小啄如何實作的","text":"今年 COSCUP 的聊天機器人「小啄」 終於在今天宣告退休了 退休前他讓我們詢問了「你是如何實作的」 這邊是我測試的所有結果 跟大家分享一下 XD 總結 技術相關 主要用 Python 開發 使用 Flask + Gunicorn + Nginx，達到系統輕量化與多執行緒 用 redis 作為文本儲存，SQL Injection 無效 後台文本管理使用 google sheet 使用 Python 的 gspred 文案編輯完後，對 bot 下同步指令，將 google sheet 資料更新到後端資料庫 跟吃飯喝水一樣簡單，連麻瓜劇本管理員都會用（？？？？？？） 使用 wit.ai （這是我直接問開發者的，不是小啄回答的） 小啄回覆的原文 小啄的後台文本管理使用 google sheet，透過 Python 的 gspread 套件進行溝通；當文案編輯完畢後，對 bot 下同步指令，後端就會透過 gspread 將 google sheet 的資料同步到後端資料庫唷 小啄的後台文本管理使用 google sheet，python 有個套件叫 gspread，讓你存取 google sheet 跟吃飯喝水一樣簡單！ 小啄的後台文本管理使用 google sheet，python 有個套件叫 gspread，讓你存取 google sheet 跟吃飯喝水一樣簡單！ 真的超簡單的，連麻瓜劇本管理員都會用！（麻瓜忍不住一定要再說一次） 小啄使用的佈署環境是 Flask + Gunicorn + Nginx 的組合，藉此達成系統輕量化與多執行緒的接收訊息。 小啄使用 redis 作為文本儲存系統，因此不要再試著 SQL Injection 喇，這是沒用的!!! 小啄是採用 Python 做為主要的程式語言開發喔，因應短暫兩個禮拜的開發時間，可以快速建置的 Python 成為最佳選項！ 小啄開發團隊核心人物有 4+1 個：三個寫扣手，一個文案小編，一個文案小編的助理．我們白天都有正職！文案小編和文案小編的助理是程式麻瓜 你知道後台文本管理的劇本是怎麼產生出來的嗎？是劇本管理員在夜深人靜、抱著電腦想著所有使用者可能在使用中遇到哪些問題，套用哪些回應可以又好笑又不無聊、絞盡腦汁想出來的；也因此好幾天發現窗外鳥兒演唱會都在清晨五點左右開唱。 你有選英文模式小啄嗎？真抱歉人力不足，沒有能力提供好笑有趣的回饋讓大家使用。 (舉起誠實樹) 因為缺乏英文小編寫幽默風趣的回饋，所以團隊人員最後放棄英文幽默版小啄。 小啄 @LINE 開發時程只有兩週，要申請正式帳號前須到 LINE 本部進行 DEMO，當時大會還有些 API 沒開好、攤位集點巔峰賽還沒有畫好圖。嚴格說起來是大會團隊在忙其他緊急事件延遲了 BOT 開發時程，請大家多包容唷 小啄 @LINE 上線前需要經過 LINE 內部審核，然後才會投單到日本總部申請上限；內部審核當天其實有些功能還沒做完啊啊啊啊啊 很可惜今年閃電秀沒有 COSCUP LINE BOT 的分享；而實際上我們是有報名的，只是沒有被抽到 QQ，想在明年看到團隊在議程上分享秘辛，請用力回饋：明年想看 小啄 @LINE 分享 開發團隊有報名閃電秀，可惜沒有被抽到，想進一步鼓勵團隊明年投稿，歡迎用力回饋：明年想看 小啄 @LINE 分享","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/10/coscup-2016-how-to-implement-small-pecks"},{"title":"Basic Git Tutorial","text":"最近終於下定決定把很久以前的這份 Git and GitHub 改版了 聽說這份在我進實驗室前，就已經被不想教大家 Git 的學長拿去流傳 ... 新版： Git Tutorial 新版主要加了 - 如何寫好 commit - tag - stash - rebase - submodule 還有各種我這些年開發上有用到的 Git 功能 順便來練習一直想學的 reveal.js 因為用了 exteral.js，一開始 load 的時間會稍微久一點","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/09/basic-git-tutorial"},{"title":"Using GitHub to Develop Software Collaboratively","text":"這是兩年前 GitHub 來成大教育課程的筆記 最近在整理 git 的筆記才翻出來 因為當時是以英文進行，課程筆記就也用英文做了 這篇的內容可能比較雜亂，之後還會再整理進另一篇 git 的筆記 Introduction to Git Hub (Company) There are around 2600 staffs in GitHub and 40% of them live in San Fransisco. Among them, there is one Taiwanese. Git Wrote by Linus Torvalds. Why version control? Historical propose Collaboration Tutorial git init \"path\" .git is just a folder with normal file There is no daemon or background progress Everything is operated in file Never rm -rf .git XD git stauts touch REAMDE.mdd There are three main stages 1. working 2. staging 3. repo Stage Action Stage working add -> staging staging commit -> repo working <- checkout repo git add REAMDE.md When we're ready git commit -m \"add a blank commit\" After README.md is modified git add REAMDE.md git status Now this file is in staging area So, how to go back to history? git reset REAMDE.md Take a look at our history git log Go back to history git checkout \"SHA1\" git checkout master Everything comes back master is the default branch name of git. It is a default word but not reserved. git checkout -b \"branch_name\" create a branch and checkout to it diff git diff : View the difference between working and staging git diff --staged : Difference between staging and repo git diff \"SHA1\" : Difference between current version and SHA1 git diff master~1 : difference between current and the one before master git diff master&#94; -> master~1 git diff master&#94;&#94; -> master~2 git diff a b : Show the change from a to b branch In git, branch is not copy. It's like bookmark Actually git branch -d \"name\" just delete the pointer but not the entry. HEAD: the pointer points to current entry detach error If you go back to a entry not in certain branch, a detach error might occur. For example, checkout to a commit that is parent of more than one branch and then append a new commit to it. In such case, this new appended commit might not be able to be referenced. The solution to this problem is to create a new branch for it. log git log --decorate : Show also branch info git log --all : Show all branch git log --graph : Show graph The difference between log and show git log : Only the first line git show : All the message, not only the first line GitHub push origin is a short hand name of that remote url. In other word, your repo. git push -u origin master - upload master to origin - -u tell git the default url to push for that branch(master) is origin, it would also make git pull remember - Do -u and after that you can just use git push pull git push --all : push all branch git pull --prune difference between fetch and pull git fetch : go to remote and copy it git pull -> fetch + merge on-site pull request on GitHub @person-name -> notification Have a conversation with the whole team Write \"fix #2 ....\" in git commit -> special meaning -> specify the bug in issue on GitHub Wiki -> documentation How to write a good git commit Principle Separate each commit Let the commit tell a story More specific One line 80 character Use present tense instead of past tense Don't repeat what can be found in git diff If more detail is to be written, left the second line to be blank. Write more detail about why this change happened after the third line. Other issue git config --global -e : Edit your .gitconfig file. Not include binary files and executable Don't version control these kinds of files. Also, large files are not recommended to add to git. If it's needed, try git-annex (web-site). git revert \"SHA1\" -> save another entry of undo If you commit the password -> git rebase can change commit, but it is not that recommended. git submodule create a sub-module","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/09/using-github-to-develop-software-collaboratively"},{"title":"[Book] 賈伯斯傳","text":"記得我去上海交通大學交換的時候 一門有關創新的課，老師跟我們說一定要看喬布斯傳 終於把他看完了，算一算竟然花了 11 個小時 亞特金森也用高階程式語言 Pascal，為蘋果二號寫程式。 賈伯斯本來認為蘋果二號只要用 Basic 就夠了， 但他還是告訴亞特金森：「 既然你這麼喜歡 Pascal，我給你六天的時間證明我是錯的。 」 亞特金森果然做到了，賈伯斯自此對他更加尊敬 。 在蘋果公開上市三十年後，賈伯斯曾回想一夕之間億萬在手的心情 我向來不曾為了錢傷腦筋。我生長在中產階級的家庭，從不擔心自己會餓死。 我在雅達利工作過，知道我還能以工程師混口飯吃，生活一定過得去。 上大學和去印度那段時間會那麼窮，是為了體驗清貧的感覺。 我的生活一向簡單，上班之後也一樣。我經歷過窮苦的日子。 我覺得很棒，反正沒錢，就用不著為了錢掛心。 後來變得非常富有，錢多到數不完，也不必擔心錢的事。 我看到蘋果工作的一些人賺了大錢，便覺得自己飛過另一種生活不可。 有人買了勞斯萊斯和好幾棟豪宅，每一棟都得請管家來管理，之後又得找個經理來管這些管家。 他們的老婆紛紛去整形，最後變得怪裡怪氣。 實在很瘋狂。這不是我要的生活。我對自己承諾： 我決不讓金錢破壞我的人生 。 賈伯斯很喜歡跟人說一件事：他每次做對一件事情的時候，都是因為先前有機會讓自己暫停、按一下倒帶鈕。 每一次，他發現事情不夠完美，一定重新再做一次。 「如果你發現有些事情不對勁，你不能當作沒看見，之後再回頭來處理」賈伯斯說：「那是別家公司的作法，不是蘋果的做法」 從一開始，我就知道蘋果必須仰賴智慧財產的保護，才能蓬勃發展。 如果大家都盜用我們的軟體，我們根本就沒戲唱了。 如果智慧財產不能受到保護，我們就沒有任何動力，去創造新的軟體或打造新的設計。 一旦沒有了智慧財產權的保護，靠創意存活的企業也將消失，或根本不會出現， 但最根本的原因還是：偷竊就是不對。不止傷害別人，也有損自己的人格。 賈伯斯的企業經營原則是，決不害怕吃掉自既有的市場。 他說：「你不自己吃，別人也會吃下去！」 因此，即使 iPhone 有可能侵蝕 iPod 的市場，iPad 也可能吃掉蘋果筆電的是長，賈伯斯也從不卻步。","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/09/jobs"},{"title":"[Book] 一個人的會議時間","text":"這本書其實是我幾年前買的 最近開始覺得好想應該檢視一下自己每天的生活到底過得如何 突然才想起還有這樣的一本書 學會跟自己開會，才懂得怎麼經營「自己」這家公司 Ch2-3 問題對策會議 人們大多愛瞎操心 問題本身不見得是大問題 反而是「有問題還沒處理」所引發的這種煩躁造成了問題 試著全都寫下來 即使被事情壓得喘不過氣 把它們寫下來就能讓自己心安許多 接著將他們分類成以下四種 1. 「何時要做」（列入 TO-Do） 2. 「拜託、請教別人」（列入 To-Do） - 成功、達成目標的人，大多是「擅長拜託別人」的人 - 訣竅在於弄清楚要「拜託誰」、「拜託什麼」 3. 「接受」（煩惱也沒用的事） 4. 「捨棄」（丟掉那些對人生並不是那麼重要的事） Ch2-8 行程會議的訣竅：醞釀期待感 列出「如果有 5 分鐘，要做的事」 試著總是把明天排成令人期待的日子 Ch3-2 自己的行動方式 如何將 To-Do 迅速地付諸行動 不得不做，只好做了 長久以來內心會累 要不要試著做一點點 即使沒有太多成果也無所謂 訣竅在於不努力 將做這些事變成習慣，而是不是努力要去做的 這樣就能輕鬆地做到這些事 Ch3-3 回覆的方式 E-mail 從新的開始回覆，就可以令對方感到「回應的速度真快」 若從舊的開始依序回覆，新的就會變成舊的 如果舊的真的很重要，對方就會打電話或再寫 E-mail 來催促 忙碌的時候要從新的工作開始處理 Ch4-2 一個月跟自己開一次進階版會議 推薦的問題 小時候，你喜歡什麼呢？ 如果沒有限制，你期望怎樣的將來？ 自己在什麼時候最耀眼？ 人生中最痛苦的時候是怎麼重新站起來的？ 有 30 個你不認識的人，和他們打成一片的過程中，你會想替他們做什麼？ 自己擅長和不擅長的事是什麼呢？ 該請誰幫忙呢？ 臨終時，你會後悔什麼呢？ 你現在想見的人是誰呢？ 你在人生中的什麼時候實現了夢想？ 人生在最耀眼那一瞬間的情緒？ 目標是什麼？什麼進展得順利？什麼又不順利呢？該做什麼？透過這些問題，獲得了什麼？ 該怎麼做才能改變現在的狀況？ Bonus 跟自己開會的步驟 將「跟自己開會」排進 To-Do 找到能夠一個人思考的地方 宣告「現在開始跟自己開會」 向自己報告近況 五種跟自己開會的形式 主題會議 提出主題 變成怎樣才好呢 該怎麼做才會變成那樣 記下 To-Do 問題對策會議 寫下面對的問題 變成怎樣才好呢 該怎麼做才會變成那樣 記下 To-Do 自由會議 不斷寫下心中浮現的想法 行程會議 當自己的秘書，將 To-Do 記下 搜集資訊會議 隨意瀏覽，只記下心中有感的內容 一個月跟自己開一次進階版的會議","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/08/meeting-with-youself"},{"title":"[Book] 你如何衡量你的人生","text":"最近發現竟然沒有把這本還蠻喜歡的書 po 上來 就好好的把之前整理的書摘，再重新整理過一遍 這本書的每一個章節都是先講商業上的案例和處置，之後再將這些套用到生涯中 Part 1 發現生涯之樂 希望你也能有這種感覺 — 每天一睜開眼睛，為了可以做自己喜歡的事而欣喜 有很多人看什麼是最緊急就花時間在上面，或是把心血注入到最快得到回饋的事 這都是建構策略時必須小心的陷阱 Ch2 如何讓你的熱情燃燒 ( 誘因理論 ) 為什麼經理人在營運的時候不考慮股東的最佳利益？ 因為你付多少錢給經理人，他們就做多少事 只有經理人的利益跟股東的利益相連才能解決這個問題 e.g. 公司股價上升，經理人也獲得較高的酬勞 一個理論是否可靠，最好的驗證方式就是找出反常的例子，也就是該理論無法解釋的現象 e.g. 最先研究飛行的先驅認為羽毛是必要 卻發現蝙蝠沒羽毛會飛，鴕鳥有羽毛卻不會飛 保健因素 vs 動機因素 保健因素 : 工作的某些因素如果出問題，讓我們覺得不滿意，這些就是保健因素 有趣的是，薪水對於工作來說只是保健因素 即使不斷改善工作的保健因素，也不能讓一個人熱愛工作，頂多就是不討厭而已 需要的是動機因素 追逐薪水頂多緩和工作的挫折感 為了發掘真正的快樂，你必須不斷找尋有意義的機會，讓你得以學到新的東西，肩負更多責任 如果你找到你愛的工作，你將沒有一天覺得自己在工作，而是在做一件有意義的事 Ch3 計劃與變化 在工作生涯當中，你會發現你最喜歡的領域是甚麼，最後必然可找到能滿足保健因素，也能使動機因素發揮最大效用的工作 最重要的是， 你一定要走出去嘗試 ，才能知道甚麼樣的工作最符合你的才能和興趣 如果要工作愉快，哪些假設必須證明為真 ? 接受這份工作的動機是出自內在，還是外在因素 ? 為什麼你認為自己可以愉快勝任 ? 每次考慮換工作時，請你想想最重要的假設是甚麼，如何去證明他 ? Ch4 策略的試金石 個人的誘因跟公司長遠目標衝突，是常見的現象 e.g. 立委任期為四年 一個好的國家計劃要五年十年 然而要讓自己繼續連任，只有提出短期能有成效的計劃才能達到讓自己連任的目標 要同時顧及個人及團體，是非常不容易的 Part 2 圓滿的人際關係 在做資源分配時，你必須注意是否與心中的優先順序相符 對你來說，什麼是成功 ? 什麼是不重要的 ? 沒有結果並非代表你失敗了，只能證明你用的方法還不對 Ch5 時鐘滴答響 在所有成功的公司當中，有 93% 都必須改變最初的策略 所以 不一定要訂定一個固定的生涯目標，而是隨著自己不斷的成長而一直改變 稍微想想，就會發現在忙碌時我們疏忽了哪些人 你或許覺得家人很愛你，你和朋友友誼深厚，他們不會在乎被疏忽 其實不然 長久不花時間、精力去培養人際關係，身邊的人最後還是會離你而去 Ch6 一杯奶昔的任務 每一個成功的產品或服務之所以能大受歡迎，是因為這種東西 幫我們完成了不得不做的工作 如果一個人開發出一種有趣的產品，但沒能幫上消費者的忙，這種東西就難以成功 我們可以為伴侶做任何事情，但是如果做得並不是她最需要的，就會面對挫折與困惑 即使我們用心良善，也有深切的愛，還是常常誤解彼此需要的 請問自己「另一半需要我做甚麼 ?」 Ch7 席瑟司之船 別把未來外包 你得了解未來要成功必須具備的能力，無論如何都別把這樣的能力外包了，否則就是把未來交給別人 e.g. DELL 逐步將個人電腦的技術包給華碩，最後華碩自創品牌，DELL 就不再具有優勢了 「我父母給我最好的禮物並非他們為我做了甚麼，而是他們沒為我做的」 Ch8 經驗學校 很有趣的統計，企業主管認為自己所用非人約有 25% 換言之，主管時常用錯人 他們在產品製造或服務上追求零瑕疵 但在挑選人才時，出錯機率卻高達 25% 然而他們卻認為這樣的錯誤率是可接受的 Ch9 一隻看不見的手 在孩子還小，尚未面臨困難的選擇時，就必須培養他們心中設定優先順序的能力 長大以後，他們才知道如何評估各種選擇，做出最好的決定 企業文化 文化不是管理階級花時間和員工溝通、講述就可以形成的，當然也不是寫寫標語就好了 文化會建立在員工做的一連串決定上 每次碰到問題或挑戰時，如何去解決他的決定 例如 :「新產品是不是品質尚可就達到出貨標準了 ?」 如果面對這樣的問題，負責的人討論後決定只要品質尚可就能出貨 下一次員工面臨類似問題的時候就會做出同樣的決定 碰到問題時，不只是解決就好了，還必須從解決的過程了解什麼是最重要的 同樣的道理，如果你希望家人都能在家庭文化的影響下 依循依定的優先順序做事，這樣的優先順序則必須跟文化相符合 例如你希望家裡有和善的文化，那麼在孩子第一次碰到跟和善相關的選擇，你就得幫他做決定 若孩子沒這麼做，你就得針對這件事指導孩子，並解釋為什麼他們該採取和善的做法 Ch10 就這麼一次 ... 百分之百的堅持比百分之九十八來得容易 有很多人都相信自己真的只是一次妥協，下不為例 如果是小小的選擇，我們都有很好的理由 這些選擇往往不是攸關一生的重大決定。乍看之下邊計成本都很低 然而一個又一個決定累積下來，你就會慢慢走上不歸路，變成不一樣的人 百分之百堅守原則，比百分之九十八來得容易 如果你不越界，個人道德界限的力量就會很強大 要是你用好理由說服自己，那就成了一個沒有原則的人，甚麼事都做得出來 為了變成自己理想中的，每一個人的過程都不同。不管如何，你應該要能回答這樣的問題 :「我真的想要變成那樣的人嗎 ?」 「如果我將每日禱告、反思的時間拿來研究迴歸分析，我將後悔莫及。 每年，我用到計量經濟學工具不過只有幾次，而我對人生目的的認知卻天天都可派上用場」","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/08/how-will-you-measure-your-life"},{"title":"[Paper] A Learning-based Framework to Handle Multi-round Multi-party Influence Maximization on Social Networks","text":"Paper 1. Introduction Problem Description A company intends to select a small set of customers to distribute praises of their trial products to a larger group Influence maximization Goal: Identify a small subset of seed nodes that have the best chance to influence the most number of nodes Competitive Influence Maximization (CIM) Assumption Influence is exclusive (Once a node is influenced by one party, it will not be influenced again) Each round all parties choose one node and then the influence propagates before the next round starts STORM (STrategy-Oriented Reinforcement-Learning based influence Maximization) performs Data Generation the data, which is the experience generated through simulation by applying the current model, will become the feedbacks to refine the model for better performance Model Learning Difference with Others Known strategy -> Both know and unknown Known or Unknown but available to compete -> Train a model to learn strategy Unknown -> Game-theoretical solution to seek the Nash equilibrium Single-roung -> Multi-round Model driven -> learning-based, data-drivern Not considering different network topology -> General to adapt both opponent's strategy and environment setting (e.g. underlying network topology) 2. Problem Statment Def 1: Competive Linear Threshold (CLT) CLT model is a multi-party diffusion model The party who has the highest influence occupied the node Def 2: Multi-Round Competitive Influence Maximization (MRCIM) Max its overall relative influence 4. Methodology NP-hardness of MRCIM -> looks for approxmiate solution Max the inflence for each round does not guarantee overall max Due to the fact that each round are not independent 4.1 Preliminary: Reinforcement Learning Learn a policy \\(\\pi(s)\\) to determine which action to take state s (environment) How to estimated \\(\\pi\\) ? Expected Accmulated Reward of a state (V function) \\( V&#94;\\pi(s) = E_\\pi\\{R_t|S_t=s\\}=...\\) Expected Accmulated Reward of a state-action pair (Q function) \\( Q&#94;\\pi(s, a) = E_\\pi\\{R_t|S_t=s, a_t=a\\}=...\\) The optimal \\(\\pi\\) can be obtained through Q functinon \\( \\pi = \\arg \\min_{a\\in A}Q(s,a)\\) (i.e. For all \"a\" in A, find the \"a\" such that min Q(s, a)) 4.2 Strategy-Oriented Reinforcement-Learning Setup Env Influence propagation process Reward Delay Reward: The difference of activated nodes between parties at the last round After the last round, rewards are propagated to the previous states through Q-function updating Slow but more accurate Action Choosing certain node to activate too many overfit Single Party IM strategies Namely, which strategy to choose given the current state The size can be reduced to strategies choosen Chosen Strategies sub-greedy degree-first block max-weight State Represents network environment status record the occupation status of all nodes \\(3&#94;{|V|}\\) , too many overfit Features Designed Number of free nodes Sum of degrees of all nodes Sum of weight of the edges for which bot h vertices are free Max degree among all free nodes Max sum of free out-edge weight of a node among nodes which are the first player's neighbors Second player's Max activated nodes of a node for the first player alter two rounds of influence propagation Second player's The feautres are quantize into low medium high Totally, \\(3&#94;9\\) states Data For Training Propagation model is known (e.g. LT in the experiments) Strategies served as actions are predefined In training phase, train the agent aginst a certain strategy and see how it performs on the given network These data can be used to learn the value functions Training Against Opponents Opponent Strategy Known: Simulate the strategy during training Unknown but availble during training: Same as above Unknown: More Gerneral Model in 4.4 Phase Phase 1: Training The agent update its Q function from the simulation experiences throughout the training rounds Update \\(\\pi\\) in the meantime Phase 2: Competition The agent would not update Q-table Generates \\(\\pi\\) according to Q-table 4.3 STORM with Strategy Known Training the model compete against the strategy to learn \\(\\pi\\) STORM-Q Update Q-function following the concept of Q-learning Q-Learning: \\(Q(S_t, a_t) = Q(S_t, a_t) + \\alpha * (r_{t+1} + \\gamma * max_{a}Q(S_{t+1}, a) -Q(S_t, a_t))\\) \\(\\epsilon\\) -greedy Determine strategies on the current policy derived from Q-table. Explore the new directions to avoid local optimum Pure Strategy The most likely strategy is choosen $ Algorithm $ 4.4 STORM with Strategy Unknown Unknown but available to train The differece between the known case is that experience cannot be obtained through simulation Train against unknown opponent's strategy during competition It's feasible because STORM-Q only needs to know the seed-selection outcoms of the opponent to update the Q-table, not exact strategy it takes Unknown Goal: Create a general model to compete a variety of rational strategies Assumption: The oppoent is rational (Wants to max influence and knows its oppoent wants so) STORM-QQ Two STROM-Q compete and update Q-tabale at the same time Using current Q-table during training phase Pure Strategy Does Not guarantee that equilibrium exists in MRCIM STORM-MM Mix Strategy (Samples an action from the distribution of actions in each state) In two-player zero-sum game Nash equilibrium is graranteed to exist with miexed strategies Use MINMAX theorem to find the equilibrium \\(Q(s, a, o)\\) : The reward of first party when using strategy \\(a\\) against oppoent's strategy \\(o\\) in state \\(s\\) \\(Q_{t+1}(s_t, a_t, o_t) = (1-\\alpha)Q_t(s_t, a_t, o_t)+\\alpha[r_{t+1}+\\gamma V(s_{t+1})]\\) Operations Research The differece between STROM-QQ and STORM-MM STROM-QQ STROM-MM Max the reward in their own Q-table Finds equilibrium with one Q-table and determines both side's \\(a\\) at the same time Pure Strategies Mixed Strategies Choose strategy by greedy Samples from the mixed strategy \\(\\pi_a\\) or \\(\\pi_o\\) Ideally, they should have simliar result in two-party MRCIM. In practice, the result might not due to STORM-QQ does not guarantee equilibrium Although equilibrium exists in STORM-MM. It does not guarantee to be found due to lack of training data or bad init or such problems. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Paper Summary","url":"http://lee-w.github.io/posts/paper-summary/2016/08/a-learning-based-framework-to-handle-multi-round-multi-party-inflence-maximization-on-social-networks"},{"title":"COSCUP 2016","text":"hackholder 共筆 Day1 R 語言翻轉教室簡介 Why R ？ 統計人多用 R，所以最新的統計演算法，最可能最早被實作在 R 上 R 套件的易開發性 易讓非工程背景者上手 先進的視覺化 教 or 學 R 的挑戰 函數名稱不一致 同樣的方法可以用太多方式達成 PTT R 版 聽說對新手很友善 R 語言翻轉教室 開源軟硬體實做全套電子鼓 (python + RPi) 第一場在中研院的演場會 (?) 我到的時候就差不多在 live demo 了 算是剛好沒錯過精彩的部份 XD 商業公司如何建立開發者生態系統 B2D(Business to Developere) Open Source 跟 Open API，對於商業公司來說有什麼價值 Open Source OpenAPI 開放程式碼 開放呼叫功能 Read/Write model Read-Only model 貢獻者社群 使用者社群 產業聯盟 -> 產業標準 相互競爭 -> 寡佔市場 另外比較有趣的是 華為有個部門就是專門在預測未來哪種 Open Source 會火 作為下一個貢獻的 Open Source 專案 早期投入那項技術 自己的樂器自己做：第一把開放硬體設計的電烏克麗麗 閃電麗麗 之所以閃電麗麗這麼不像一般的烏克麗麗 是因為一般 3D 印表機，印不了那麼長 講者有提到他如何去構思該做出怎樣的改變，才有辦法符合 3D 印表機的限制 好像是弦要到那樣的長度才能剛好發出烏克麗麗的聲音 其他的部分就能改用不同的方式取代，不用受限於制式的樣式 於是閃電麗麗就誕生了 Day2 Opensource 將如何對第五代行動通訊 (5G) 造成革命性的改變 4G 到 5G 的改變 使網路能以軟體的速度成長，而非硬體的速度 將以往綁在硬體商的部分虛擬化 SDN NFV 讓各種不同的服務可以有各自不同需求的網路特性 講者的 slideshare Debater 辯論家：網路筆戰大亂鬥 講者直接在 hackpad 寫她不會脫稿演出，可以直接看 投影片 + Note 所以我就也放她的連結就好 XD 講者有提到 HackMD 主要是用來 Markdown 協作 之前一直覺得 Hackpad 的 Markdown support 沒有很好 終於有人做出這個東西了 XD 開放公司文化之下的軟體開發 / 如何用開源軟體賺錢？ 找到使用者的痛，解決他 如果其中部份剛好有開源軟體可用，算你撿到的 我們如何用開源軟體 觀察客戶要甚麼 加上重要功能，甚至比原來的軟體還大 願意自己重寫 甚至徹底改變商業模式 建置世界級的大系統 注重使用者體驗 Lightning 今年 Lightning 也有很多有趣的主題 - MRT & GIT - 用 git branch 來畫台北捷運的路線圖 - 不要亂玩 git branch 啊 XD - https://github.com/othree/taipei-mrt/network - 徵音梅林新歌發表 - 講者完全沒說到話，真的就是新歌發表到三分鐘結束 XD - https://www.youtube.com/watch?v=daAI2agxzs0 今年的 COSCUP2016 梗全集 ，還蠻有趣的 XD","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/08/coscup-2016"},{"title":"Scrollable RISE","text":"RISE 是一套結合 jupyter-notebook 和 reveal.js 的專案 讓我們能在 jupyter notebook 直接開啟如同 reveal.js 的 slide 不過如過 notebook cell 中的內容太長 在播放的時候就會導致內容被裁剪 而 RISE 預設是無法用滑鼠滾動的 所以這裡記錄該如何讓 RISE 可以滾動 進入 jupyter notebook 的任一個 notebook 後 在上方工具列點選 Edit -> Edit Notebook Metadata 接著在裡面加入 livereveal 的設定 如下 （只需加入 livereveal 的部分） { \"kernelspec\" : { ... }, \"livereveal\" : { \"scroll\" : true } } 不過開發者其實有說，開啟滾動會造成不少問題 所以預設上才會設定為不能滾動 damianavila commented on Jul 12 After several and long discussions with a lot of people, we have arrived to the conclusion that scrolling on reveal.js based slideshows brings more problems than benefits, so I will not add the scrolling as a default option BUT we should clearly document how to get scrolling slides with the config option available. I will mark this as a docs issue and prioritize properly. Reference scrolling vertically #185","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/08/scrollable-rise"},{"title":"[Book] 引誘科學","text":"Ch1 - 注意力有三種 : 即時、短期、長期，怎樣抓住 顏色應用的一般性原則 藍色多代表平靜 最令人喜歡的顏色或組合：藍色、藍綠色、綠色、綠紫色、紅紫色、紫色 最不討喜：綠黃色、黃色 令人感到興奮、激勵或警覺，應該選用暖色系 Ch3 - 框架誘因 認定某樣東西很受歡迎不會改變其價值，但如果認定某樣東西本來就是限量的，則會提高其身價 Ch5 - 獎勵誘因：不只給錢、祭優惠、送獎品，怎樣獎勵最有效 幾年前的某個晚上，我和一群科技界的朋友，在舊金山一家高級餐廳聚餐，主客是遠道來的米娜拉。 可是我們竟然集體冷落她，每個人都在低頭防著滑手機、寫簡訊、看推特、回電郵，簡直像在比賽誰能一直盯著手機似的。 看不下去的米娜拉提議大家來玩手機疊疊樂遊戲，每個人都要交出手機，並疊在另一支手機上，第一個伸手去拿手機的人要負責買單。 後來再也沒有人去碰手機了，我們終於有機會開懷大聊。 內源性獎勵 外源性獎勵和內源性獎勵的差異，在於想要得到獎勵的東擊是不同的 我們會為外源性獎勵而去注意或做某件事 內源性獎勵的動機則是來自事情本身，我們會去注意或從事我們認為值得的事，不在乎是否能得到任何外源性獎勵 通用內源性獎勵 權力 獨立 好奇 接納 秩序 收藏 榮譽 理想 社會接觸 家庭 地位 報復 飲食 體能活動 平靜（安全） Ch7 - 懸念誘因：弔胃口、待解之謎 讓完成強迫症發作 懸念誘因必須具備懸而未決、情感投入、逆轉劇情以及結局未卜四個要件，才能持續吸引注意力 如果個人或公司遇上了危機，而且社會大眾和媒體都睜大眼睛等著下一步作為時，正確的收尾行動乃是第一要務 因為這樣事件才能做個了斷。如果你的收尾行動無法讓人滿意，就會留下一個結局未卜的小缺口，讓人們有機會不斷議論及報導 Ch8 - 肯定誘因：想被認得、想被賞識、想被同理心對待 「球場蓋好，人就會來」在現代世界裡事行不通的","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/08/captivology-the-science-of-capturing-people-s-attention"},{"title":"[Book] 增強你的意志力","text":"前言 - 意志力：人類最強大的力量 意志力就肌肉一樣，會因為過度使用而疲乏，但也能透過長期鍛鍊來強化 Ch1 - 意志力不只是一種比喻 控制情緒反應會折損意志力。即使是假裝的也會累 從自我耗損研究歸納出來的法則： 一次專注一項工作 Ch2 - 意志力的能量從哪裡來 沒有葡萄糖，就沒有意志力 當你的身體要對面對疾病，就會消耗大量葡萄糖，所以這個時候就要避免去做需要自我控制的事 血糖過低者受刺激時，會比一般人更難專心和控制自己的負面情緒 餵飽怪獸 如果你有考試、重要會議、或攸關重大的計畫 不要在缺乏葡萄糖的情況下匆匆上場 e.g. 別在午餐四個小時後和老闆吵架 別在晚餐前和另一半討論嚴重的問題 到歐洲浪漫之旅時，別在晚上七點才開進城牆包圍的中古小鎮，企圖餓著肚子找到你的旅館 就算你的車能在錯綜複雜的石板路穿梭無礙，你和伴侶的關係也可能經不起這個考驗 飲食應該挑選熱量燃燒慢的食物 升糖指數高的食物（e.g. 白麵包、馬鈴薯、白飯、零食）會產生大起大落的循環 想維持穩定的自制力，應該吃蔬菜、堅果、水果、起司、魚類、肉類、橄欖油這類的升糖指數低的食物 累了就睡覺 休息可以降低身體對葡萄糖的需要，還能提高對血液裡的葡萄糖的利用能力 Ch3 - 待辦事項的大學問 Zeigarnik Effect: 未完成的工作和未達成的目標會盤旋在心中。等到工作完成、目標達成，不斷提醒的狀況變嘎然而止。 e.g. 聽一首歌，聽到一半突然關掉。稍微過一段時間，這首歌的某個片段可能不斷著在心中唱著 Ch4 - 決策疲勞 做決定需要意志力，而在意志力耗損的情況下，人們會竭盡一切延遲或躲避決定。 「關掉其中一個選項感覺上等於是損失，為了避免這種損失的感覺，人們寧願付出代價」 這麼做有時候很有道理，但我們多半太想保留選擇的自由，而沒看到我們長期付出的代價，或別人付出的代價。 Ch5 - 錢都花到哪去了？ 遠視：太過擔心未來，而損及眼前的生活。 這樣的吝嗇心態會讓人花更多時間、與朋友疏離、讓家人抓狂也讓自己痛苦 Ch6 - 意志力可以鍛鍊嗎 「讓你的大腦習慣訂定小目標，並加以達成，能幫助你做到原本做不到的大事情」 「不光為了練習特定的技能，還要把困難度加高，決不寬貸，如此一來，你才會行有餘力，超過原本設定的目標。對我來說，這就是紀律。全靠不斷重複和練習而來」 練習控制情緒並不能強化意志力。意志力也無法用來控制情緒 控制情緒一般得靠其他技巧，像是改變對眼前問題的看法，或者讓自己分心 試著改變一些習慣性的動作（e.g. 坐姿坐正、右撇子用左手寫字），都是自我控制的練習 Ch8 - 戒癮的真相 對許多人來說，停下來喝一杯也許無傷大雅，之後好幾個月也不會酗酒 可是如果是無法控制喝酒的人，就不能把偶爾一次喝酒當成獨立事件 最好的方法，就是離酒吧遠一點 明確界線 如果你只承諾自己「適量」，這並不是明確界線。模糊的界線會漸漸讓你沒發現自己已經失控 零容忍才是明確界線 Ch10 - 節食風暴 What-the-hell Effect e.g. 節食者已經定下每日最高卡路里攝取量，當他們因為某種原因而吃進超標的熱量時，例如實驗喝下兩大杯奶昔，他們便認為當日的節食努力告吹。這時候就會放縱自己去享受，甚至讓自己吃比原本超標的量還多得多的食物 延遲享樂 vs 不 告訴自己「我待會再吃」對大腦的作用等同於「現在就吃」 拒絕甜點需要意志力 對於大腦來說，等一下顯然比永遠不來得輕鬆一點 時間拉長，你的慾望降低，吃進的食物也變少 結語 - 你可以更有意志力，只要你不拖延 減輕生活壓力的最佳方式就是停止搞砸生活 你得好好規劃人生 自制力強的人花在拒絕慾望的時間少於其他人 他們不會把意志力當成經常性策略 他們妥善安排生活，所以能避免麻煩，避免生活出現需要意志力的事件 他們用意志力來避免危機，而不是度過危機 早在汽車故障錢就送車去保養，並遠離吃到飽的自助餐 意志力的運用過程比結果重要 如果你企圖抗拒誘惑、最後屈服，因為你曾經掙扎過，還是會耗損意志力，屈服並不會補充意志力 你必須隨時維持至少五年的籠統願景，然後訂出較具體的立即目標 要知道你在當月要完成什麼，以及如何做到 預留一些彈性，也要做好失敗的心理準備 月底檢討時，要記得你 不需要每一次都達成目標 更重要的是，你的人生逐月進步 「在管理上，我們要求公司主管和其他員工訂出每週的優先目標，目標不能超過三個，小於三個也沒關係。我們每週逐一檢討上週的成果。如果三個目標中，你只完成一個或兩個，無妨，但在前三個目標未完成前，你不能進行其他目標，就這樣，這就是我們的管理方式。它很簡單，但能強迫你先處理最優先的事情，而且嚴格執行」 正向拖延的力量 等一下再享受 把惡習拖延，最後可能就不會去做 保存意志力的持久技巧：習慣","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/06/willpower"},{"title":"解決更新 gcc 找不到 libgfortran.3.dylib (Octave,R)","text":"最近在 mac 上更新了 gcc 6 後，不管是開 Octave 還是 R 都會出現以下的錯誤訊息 dyld: Library not loaded: /usr/local/lib/gcc/5/libgfortran.3.dylib Referenced from: /usr/local/Cellar/r/3.3.0/R.framework/Versions/3.2/Resources/lib/libR.dylib Reason: image not found Trace/BPT trap: 5 這是因為原本的 lib 會去找 /usr/local/lib/gcc/5/ 下的 lib 但是更新過後已經被變成 /usr/local/lib/gcc/6/ 了 所以只要從 /usr/local/lib/gcc/5/ 建立 soft link 到 /usr/local/lib/gcc/6/ 即可 ( 版本號則要根據自身 gcc 的版本來做修改 ) ln -s /usr/local/lib/gcc/5/ /usr/local/lib/gcc/6/ Reference R and julia won't start after upgrade (perhaps gcc 5.1, Xcode 6.3.2, or Command Line Tools 6.3)","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/06/solve-libgfortran3dylib-not-found"},{"title":"[Book] 最後的演講","text":"不論在工作上還是感情關係裡，就算自己居於主導地位，也絕對不能為所欲為 「就算你做在駕駛座上，也不表示你一定要輾過別人」 如果你發現自己某件事做得不好，可是卻沒有人告訴你，那可就糟了 你也許不喜歡聽到別人批評，可是你的批評者其實是在說他們仍然愛你，仍然關心你，希望你自己能夠變得更好 假動作 讓孩子去參予組織化的運動，通常不是希望他們真的精通那項運動 而是希望他們學到團隊合作、堅忍不拔、運動家精神、努力的價值，以及克服逆境的能力 阻礙我們前進的磚牆，不會無緣無故擋在我們前面。這種磚牆的存在目的不是為了把我們排除在外，而是要讓我們有機會證明自己多想要一件東西 計劃可以隨時改變，可是前提是必須先有計劃 讓團隊不必花時間再猜測對方在想什麼 「你永遠不用擔心我在想些什麼。不論好壞，我都一定會讓你知道我的想法」 「我如果沒說話，你就不必擔心」 讓別人把話說完 不要打斷別人的話。說話比較大聲或者比較快，不表示你的意見就比較好 不情不願或不真誠的道歉，通常比不道歉更糟糕，因為接受道歉的對方會覺得這種道歉是一種汙辱。草率的道歉就像是在傷口上灑鹽 典型惡例 「很抱歉我的行為讓你受傷。」( 這麼說表示你有意安輔對方的情緒，可是明顯可以看出你根本不打算彌合傷口 ) 「我為我的行為道歉，但你必須為你的行為向我道歉」( 這不叫道歉，這叫作要求對方道歉 ) 適當的道歉要有的要素 我做的事情是錯的 我對自己傷害到你感到很難過 我該怎麼做才能彌補過錯 開口問吧，不用怕。獲得肯定答案的機會，一定比你想像的還要頻繁。","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/06/the-last-lecture"},{"title":"[Book] 演算法統治世界","text":"演算法可以被視為由一連串二元決策構成的大型決策樹 我們所做的幾乎每件事，從開車到買賣股票乃至擇偶，都可以根據二元的輸入訊息被細分成一串二元決策 撰寫合乎常態分配的演算法比較容易，儘管歷史一再告訴世人，人類行為不能以正常視之，但一些駭客寧可只考慮常態分配 常態分配的假設可以在 100 天中賺 100 天，但是 1987 年的黑色星期五、1998 年的俄羅斯倒債危機以及 2010 年的閃電崩盤等都屬於第 101 天，可能毀了那些使用謹守高斯分配原則的演算法來做交易的人 就連高斯本人早在 200 多年前都曾警告世人，常態分配也可能發生各種強度不一的錯誤 創意工作者以為，緩緩蔓延的機器人革命碰不到他們，認為演算法無法創新，機器人不懂得創造 但我們現在漸漸知道，這些假設很危險 為何要讓優秀的人背負例行公事、詢問他這個領域的專家每天面對的案例？ 把疑難雜症留給優秀的人，把其他問題交給演算法 例如你上禮拜的感冒或者去年的鼻腔感染。演算法既便宜又精準，而且一天比一天聰明","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/05/automate-this-how-algorithms-came-to-rule-our-world"},{"title":"[Book] 內向者的優勢","text":"與恐懼周旋 有意識地去感知恐懼 讓自己看清楚，為什麼你想做的事情是重要的，而且重要的即便心中恐懼也願意冒險 內向者經營單身生活的策略，下列是幾個值得參考的建議 每年嘗試一種新嗜好 每年兩次認識一個新地方 每兩週可以參觀一下展覽，或看看電影、舞台劇或舞蹈表演 每個月參與一場慶祝會或社交活動 藉由親自會面建立起來的人脈，動輒需要一兩年的時間，才能成為固定成員，並與他人建立穩定的互動，而且前提還是你的確很積極，掛名成員是產生不了什麼實質的互動 請在時間管理中預留固定的時段給數位人際互動。你該定期活動，盡可能每週一次以上。你可以發表文章、確認你認為合適的互動請求、讀一讀網頁上的留言，若有必要則回應一下。 這也表示：當你在進行其他活動時，不要因為一直顧著看推特的時間軸或臉書的留言而分心 當你身為會議主持人，請特別留意會場裡的內向者，他們可能需要較長的時間才願意表達意見，而且他們說起話來往往比外向的與會者小聲。設法讓這些內向者也能暢所欲言","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/04/leise-menschen-starke-wirkung"},{"title":"[Book] 隨機騙局","text":"序：不必把知識看得那麼重 「有錢人想的跟你不一樣」點出百萬富翁跟一般人不同的一些特質 韌性和勤勞 就算所有的百萬富翁都是這樣的人，並不會使韌性跟勤勞的人變成百萬富翁 百萬富翁共同的特質可能還有冒險犯難 這是大獲成功的必要條件，也是失敗的必要條件 要是對破產公民做出相同的研究，他們肯定也是喜愛冒險犯難 前言：雲中的清真寺 所謂的「勇氣」可能是來自低估隨機性在某些事物佔有的份量 經濟「冒險者」比較像是某種錯覺的受害者，他們低估可能的不利結果，結果過度樂觀和自信 怪異的會計衡量方法 現實遠比俄羅斯輪盤惡毒 首先，它射出致命子彈的次數相當少。如果把現實比喻為左輪手槍，那麼它的彈夾能裝上千發，而不是六發。 試射了實際次都沒問題後，我們便會 產生虛假的安全感 ，忘了裡面還有一顆子彈 副現象 (epiphenomenalism): 看著你的風險，你能有效的降低風險 ? 還是你因此給自己一種感覺，覺得你已經盡了本份 ? 從組織的觀點來看，風險經理的存在，和為了實際降低風險比較沒有關係，和將低風險的印象比較有關係 用數學沈思歷史 在短暫的時間增量內，我們觀察到的是投資組合的變異性，不是報酬率。換言之，我們看到的是變異。一個人觀察到的，頂多就是變異和報酬的組合，不只是報酬 隨機性、胡說八道和科學知識份子 我們可能不需要什麼事都那麼理性和科學，只有在會傷害我們和威脅我們生存的狀況下，才需要 有趣的是，現代生活卻要我們做相反的事 談到宗教和個人行為等事物，我們變得極其實務和知性 談到由隨機性主宰的事物（e.g. 投資組合或不動產投資），卻盡可能的不用理性 最不適者生存 - 進化有可能被隨機性愚弄嗎 所謂的最適者，可能是適應了現在的這一個樣本路徑 而這種生物生存的越久不曾遇到稀有事件，他們就越脆弱 如果時間無限延長，那麼稀有事件就會發生，於是物種會滅絕 進化的意思說只是應一個時間序列，而不是適應所有可能環境的平均值 歸納的問題 下面的一段話是單純解讀過去的資料所發生的問題 我剛對布希總統的一生進行完整的統計檢視。從五十八年來，接近二萬一千次的觀察值，發現他不曾一次死掉。所以我可以宣稱他將萬壽無疆，而且統計顯著性很高 當一個人使用的策略可能包含偏態，也就是大賠的機率低，小賺的機率高，則將贏的機率極大化，不會使競賽的期望值極大化 如果你用的是俄羅斯輪盤式的策略，大賠的機率低，也就是每隔幾年才會使你破產，那麼幾乎所有樣本中，你都是贏家，除了你死掉的那年 維根斯坦的尺 除非你對尺的可靠度有信心，否則當你用尺去量桌子，你可能也同時用桌子在量尺 再談隨機性的好處 一點小小的不確定性，可以讓我們當個足夠滿意者，而不是極大滿意者 你的行為展現輕微的不可預測性，可以在發生衝突的情況保護自己 如果你一定要被罵了十七次，才在第十八次生氣，這樣的行為就很容易被操縱","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/04/fooled-by-randomness"},{"title":"External.js - Load HTML in Reveal.js","text":"reavel.js 提供了 data-markdown=\"example.md\" 這個 tag 可以載入外部的 markdown 卻沒提供可以載入 html 的 tag 於是就有人寫了這個 External.js 有了 External.js，就可以不用把所有的內容都寫在 index.html 裡面 Install Method1: Download 到 https://github.com/calevans/external 下載 把 extneral 裡面的 external 資料夾放到 plugin 裡面 在 index.html 中的 Reveal.initalize 這個 block 加入下面的內容 { src : 'plugin/external/external.js' , condition : function () { return !! document . querySelector ( '[data-external]' ); } }, Method2: Submodule 不過為了讓他的更新也能被追蹤，我使用了 git submodule git submodule git submodule add https://github.com/calevans/external plugin/external 在 index.html 中的 Reveal.initalize 這個 block 加入下面的內容 { src : 'plugin/external/external/external.js' , condition : function () { return !! document . querySelector ( '[data-external]' ); } }, ( 注意兩種方式加入的內容有些微的不同 ) Usage 之後就能使用 data-external 這個 tag 來載入外部的 html 原本的 index.html < section data-external = \"module_01/index.html\" > </ section > 外部 html <!-- module_01/index.html --> < h1 > This is external < h1 > 載入後的 html < section data-external = \"module_01/index.html\" > <!-- module_01/index.html --> < h1 > This is external < h1 > </ section >","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/03/external-js-load-html-in-reveal-js"},{"title":"男子漢理論","text":"這篇文實在太有趣了，還是該留下來做個紀錄 XD 男子漢理論 真正的男子漢 programmer 是不會用那些亂七八糟，花枝招展的，所謂整合開發環境。 真正的男子漢 programmer 就是直接用 emacs, 或是 vi 這些男子漢編輯器直接寫程式。 如果你不知道這是甚麼東東，簡單來說，就是男子漢用的\"記事本\"。 當然在花枝招展，看來很娘的 Wxxxxws下要找到這些男子漢編輯器有一定難度， 但這絕對難不倒一個真正的男子漢 programmer。 另外真正的男子漢也不會用那些亂七八糟，花枝招展的所謂應用程式寫網頁。 真正的男子漢就是直接用 emacs, 或是 vi 這些男子漢編輯器直接寫 HTML， 因為那些亂七八糟，花枝招展的所謂應用程式寫出來的網頁 加了一大堆亂七八糟的 tag 根本沒有人看得懂。 真正的男子漢也不會用那些亂七八糟，花枝招展的所謂應用程式寫論文。 真正的男子漢就是直接用 emacs, 或是 vi 這些男子漢編輯器直接寫 latex。 因為那些亂七八糟，花枝招展的所謂應用程式寫出來的論文，字型醜的要命， 圖還會亂跑，換一台電腦就換一個樣子，一點也不像男子漢做出來的東西。 最後你可以看出真正的男子漢 programmer 不管做什麼事， 都只用男子漢編輯器就能搞定，這就是成為男子漢 programmer 的重點。 當然最好還是用 ed 這種神物，只是現存看過 ed 的 programmer 可能比看過\"真理\"的煉金術士還少，在此就不苛求了。 --Re: 男子漢理論,pangfeng (P老師)@pangfeng, ptt2.cc From MARK CHANG'S BLOG - About Me","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/03/article-man-theory"},{"title":"[Book] 少，但是更好","text":"Weniger aber besser 德語的 Less is more 如何成為「精‧簡‧準」的人 專準主義 (Essentialism) 者之道摒棄「我們甚麼都可以做」 而這需要費心去做出真正的取捨和艱難的決定 如果你不替自己的生活排定優先次序，別人就會為你代勞 彼得杜拉克 :「幾百年後，當以長遠的角度書寫我們這個時代的歷史時，歷史學者看見的最重要事件，很可能不是科技，不是網路，不是電子商務，而是人類形勢前所未有的改變。這是第一次─真的是史上頭一遭─有為數可觀且級數增加的人們 擁有選擇 的餘地。這是第一次，他們將不得不管理自己。而社會對此毫無準備。」 懂得取捨 「我要如何兩者兼顧 ?」 不，那是非專準主義者的想法 專準主義者會想「我想要哪一個問題」 更審慎的做出取捨 經濟學家 Thomas Sowell:「沒有解決方案。唯有取捨」 專準主義者者視取捨位生活中固有的一部份 不會問「我必須放棄什麼」 而是「我該在哪方面全力以赴」 玩樂 玩不只幫助我們，探索必要的事物。它本身就是不可或缺的事。 睡眠 如果對自己投資得不夠，這裡指的是我們的身心靈，我們便會損害用來做出最高貢獻的必備工具 非專準主義者 專準主義者 少睡一小時等於多了一個小時的生產力 多睡一個小時等於多了更有生產力的幾小時 睡眠是奢侈品 睡眠是優先事項 睡眠滋生懶惰 睡眠孕育創造力 睡眠讓你無法「全部都做」 睡眠能使新制做出最高程度的貢獻 嚴選 No more yes. It's Either HELL YEAH! Or No 如果答案不是明確的好，那它就應該是不 釐清 普通 具體 鼓舞人心 願景 / 使命 必要意圖 ( 只做出一個決定 ) 平凡無奇 價值 季目標 問「我們怎麼知道自己做到了 ?」 e.g. 「消除世間的飢餓」 <--> 「位住在低久區的家庭打造一百五十間經濟實惠、環保，又能抵抗暴風的住家」(Make It Right) 後者回答了「我們怎麼之道自己成功了」，而他也成功鼓舞人心 取消承諾 沉沒成本偏誤 對已知虧本的生亦持續投入時間、金錢或精力的傾向 避免沉沒成本偏誤 假設你還沒擁有它 「如果我不是已經在這個專案投入這麼多，我現在會投入多少 ?」 「如果我現在種指這個專案，這些時間金錢還能用來做甚麼 ?」 「如果我沒有這樣東西，我願意付多少錢買它 ?」 「如果我沒有這個機會，我願意為了得到它，做出多少犧牲 ?」 不介意停損 界限 不推辭的成本往往更高，它會使我們在選擇生命中最重要的事情上變得無能為力 找出那些你不該接受的絆腳石 只要你覺得被某人的要求侵犯或欺騙 它不見得會以某種極端的方式被你注意到。即使那只有一點惱怒，都是發現自己隱含界線的線索 進展 當我們從小地方著手並獎勵進展時，最後所達到的成就，將比訂下偉大、崇高卻往往遙不可及的目標時更大 更棒的是，積極強化自身成孤的舉懂，能使從這個過程獲得更多的樂趣和滿足 心流 習慣的力量 ( 可以參考 「為什麼我們這樣生活，那樣工作」 )","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/03/essentialism"},{"title":"Reveal.js 安裝錯誤","text":"當我安裝步驟執行到 npm install 會跳出很多錯誤訊息 這才發現 Reveal.js 要用 python >= 2.5 and < 3.0.0 而我預設的 python 是 python3.5 所以只要像下面的指令把 python 指到 python2 就可以了 npm install --python = python2.7 --python= 後面是 python2 的執行擋，需要根據自己的設定做調整 Reference Reveal.js","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/02/reveal-s-installation-error"},{"title":"解決安裝 IRKernel 缺少 zmq.h","text":"安裝 IRKernel 進入 R 的命令列，輸入下面的指令 就能安裝 IRKernel，以後就能在 jupyter 中使用 R install.packages(c('rzmq','repr','IRkernel','IRdisplay'), repos = c('http://irkernel.github.io/', getOption('repos'))) IRkernel::installspec() 錯誤訊息 interface . cpp : 22 : 10 : fatal error : ' zmq . h ' file not found #include <zmq.h> &#94; 1 error generated . make : *** [ interface . o ] Error 1 ERROR : compilation failed for package ' rzmq ' 解決 這時候就要將缺少的套件補齊 brew install czmq zmq 再執行一次最上面的安裝指令 接著在指令列執行輸入下面的指令 jupyter qtconsole --kernel=ir jupyter console --kernel=ir 安裝成功後就可以看到 Reference Failed to install rzmq #50 IRkernel","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/02/resolve-irkernel-missing-zmqh"},{"title":"[Book] 蘋果橘子經濟學","text":"誘因 誘因 促使人多做好事、少做壞事的手段 多數誘因並非自然發生，而是由某些人（e.g. 經濟學者、政治人物或父母）所發明設計 這樣的誘因主要分為經濟、社會與道德，不過單一誘因通常三者兼備 托兒所常有家長遲到接小孩的問題。如果我們提出遲到十分鐘以上的人要罰三美元，結果會如何呢？ 遲到的人竟然大幅增加了！ 因為這是用經濟誘因（三美元）取代道德誘因（愧疚感），而低額的罰款似乎也在告訴家長這不是一件很嚴重的事 然而很有趣的是，之後取消了罰款制度，遲到的人數並未因此減少 因為他們遲到不用罰款，也不再覺得於心不安 如果捐血可以得到一些錢，是否會增加捐血的人數呢？ 肯定會的 那是要增加到 50 元、500 元或甚至 5000 元呢？ 然而也會讓有些事情變得不同，每項誘因都有黑暗的一面 如果 500cc 的血值 5000 元，可能會有人偷採別人的血，或用豬血混充 不論誘因如何，總會有不誠實的人想盡各種辦法來謀取利益 這樣的欺騙是一種本能的經濟行為：以更少的代價來獲得更多 資訊 在很多狀況下，與專家面對面接觸可能使資訊不對稱更為嚴重 —— 專家更可以利用資運優勢讓你覺得自己愚蠢無知 就算資訊不真正的存在，只要別人認定你擁有資訊，這樣的假定就能有很大的影響力 資訊犯罪的特點之一就是犯行曝光者很少。資訊犯罪會浮上檯面，必然是因為發生重大事件 專家透過資訊讓人們害怕就能產生很巨大的操控力 因果關係 美國殺人案比率偏高，部分要歸咎於槍枝取得太容易。研究結果的確也支持這樣的說法 不過槍枝並非唯一的原因 以瑞士為例，政府發給每名成年男子一把步槍作為民兵服役用，而且可以存放家中 瑞士擁有了相當高的武器持有率，卻被認為幾乎是最安全的地方 我們習慣把因果關係連結到周遭可以實際接觸戶感受的事物上，而不是遙遠或不易理解的狀況 我們尤其相信短期的因果關係，你的朋友被蛇咬了一口，之後死了 我們會推論蛇咬是他的死因 這種推論大多數時候是正確的 然而談到因果關係，這種簡單直接的思考往往存有陷阱 就算兩件事相關，也不一定有因果關係。只代表他們之間存在某種關係 假設這兩件事是 X, Y，可能Ｘ導致Ｙ，也可能Ｙ導致Ｘ，甚至是另一個因素Ｚ同時影響Ｘ、Ｙ - 回歸分析所能顯示的是相關性，但無法證明因果性","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/02/freakonomics"},{"title":"[Book] 每天最重要的兩小時","text":"在日常事務中辨識每個決定點 遇到決定點（一個事件結束或被打斷的時候）的時候，花五分鐘的思考再進行下一件事 看似浪費了這五分鐘，實際上卻是有意識的決定該做的事，讓接下來時間運用得更有效率 如果總以「效率」為理由，略過這些決定點，隨便找一件事做，最後會落入事情做不完的迴圈，而做的那些事很可能都不是最重要或最適合的，這樣想想反而損失了更多的時間 我們常常面對了很多「緊急」的事，然後那些「重要，但不急迫」的事往後放，漸漸的我們就會忘記處理這些真正重要的事，最後這些事情就變得「重要且急迫」 利用決定點的秘訣 珍惜決定點 事先計劃在決定點要做的事 在沒意識決定接下來該做的事前，別急著做下件事 計劃「不要做 ...」通常會不成功，應該要計畫「如果 ... 就 ...」 前者是抑制衝動，後者是實際選擇採取的行動 管理你的心智能量，善用好情緒跟壞情緒 做決定會導致心智疲倦，即使不是很大的決定 負面情緒 生氣： 當你知道某件事是對的，卻因為害怕風險而不做，這時候激將法就是很有用的 悲傷： 悲傷讓我們比較公平不自私，傾向慎重，也會努力讓自己傳遞的訊息有說服力 焦慮： 焦慮讓我們高度警覺、隨時能做出反應 當然這些不是在鼓勵負面情緒，而是提出在特定情況下，負面情緒也可能有用 正面情緒 好心情有助於創意、迅速做出決定 主動讓自己進入正面情緒 放鬆看幾分鐘的書 做點運動 回想開心的事 減輕心智疲勞 學會辨識那些最可能顯著消耗心智能量的事物 從事重要的工作前，避免去做那些消耗心智能量的事 那麼該如何判斷的？ 如果這件事做完後會感到疲倦，那在某種程度上都已經使用到自制力 實際上我們不可能完全避開消耗心智的事，也不實際 我們不是機器，不用隨時都表現得很好 與其讓自己時時刻刻表現傑出，應該策略性的選擇待辦事項的執行順序 在大腦不疲憊的時候，創造出最高效率的時段，最優異的完成重要的事物 下列四點是減輕心智疲勞的策略 早上優先完成最重要的工作，避免腦力被小決定消耗 這裡指的優先，指的是第一件事，而且是在檢查任何訊息或查看任何媒體前 區分待辦事項，「重要」、「創意」、「雜項」 將雜項安排在心智力最弱的時候 偶爾試著只在下午花一個小時看郵件和回郵件 在非常重要或忙碌的工作日前一晚，先做出一些決定 如果心智已經十分疲勞了，下列三點可以讓你恢復精神 緩慢地深呼吸 設法讓自己大笑 小睡十分鐘，研究指出十分鐘可以回復人體的認知功能，大約可維持兩小時半 好好選擇在何時有巔峰表現，並且大方做出其他犧牲 為了好好善用心智能量，應該把少數的事做到優異，而不是企圖做完所有的事 調整對抗分心的方法，學會放自己一馬 靜坐，有助於鍛鍊專注力 沒關係就讓大腦分心吧 人類的注意力系統天生就會刷新，以對抗臨時產生的事件 但別讓思緒回不來 下列不會造成認知能力的沈重負擔，都是分心時可以試試的 欣賞景色 簡單收拾桌面 聽聽音樂 而避免做以下的事，因為他們會讓你心智疲勞 歸檔文件 閱讀新聞、動態 回覆電子郵件 做有難度的解謎，如填字遊戲或數學遊戲 如果想長時間持續做一件事，不要盲目地對抗分心，但也別盲目的屈服 當你的心思漫遊時，它只是需要一分鐘做一些其他事，想要提神或更新資訊，讓它去吧 但不要轉換去做別的事務 掌握運動和飲料的訣竅，你就能表現得出色 曼德拉：「我發現，在身體狀況良好的情況下，我可以把工作做得更好、思考更清楚。因此，鍛鍊身體變成我生活中必不可少的紀律之一」 做完溫和的運動後，能有效提升正面情緒 然而如果是較劇烈或長時間的運動，這方面的效果反而沒有那麼大 那麼何謂「適量」? 20~30 分鐘的高強度運動（呼吸有點喘、流了很多汗） 30~40 分鐘的中等強度運動（稍微出汗，但離極限還有一段距離） 運動就像是重設鈕，是改善心智表現有效且快速的策略 當感到精神不濟、無法專注，出去辦公室走一走 在令人感到焦慮的會議前，適量運動 當天有特別消耗心力的事務時，當天早上做點運動 當你在必須處於最佳狀態，而又一、兩小時沒喝水，趕快去喝點水吧，不要低估一杯水在保持心智活力的效用 咖啡因 攝取咖啡因的同時，最好再加上一點其他食物 如果只是黑咖啡，只會在半小時後提振精神，之後可能會令你感到更疲倦，甚至提高敵意 如果混著其他東西，能使咖啡因的正面作用持續更久（只加糖也不夠） 多少咖啡因含量才有提振生產力的效益呢？ 自己嘗試吧，因人而異 「所有的東西都是毒物，沒有東西是無毒的。唯有適當的劑量能使一項東西變成不是毒物」 咖啡因要三十分鐘後才會產生效果，在此之前請不要再喝，否則再感受到它的助益前，會先感受到它導致的焦慮 即使在你很累的時候，也只應該攝取正常的量 如果咖啡因沒辦法提升你的注意力，喝再多可能也沒用，請考慮小睡一下 噪音、光線、雜物？自己動手打造最有益的工作環境 安靜是最有助益的工作環境 聽音樂雖然能產生正面情緒，但在也會降低專注力上 桌邊的雜亂會影響專注力 因為桌上的那些東西都會使你分心 總結 看完這本書後，不要再想盡辦法擠出更多時間工作，而是試著去調整作法，讓自己每天都能有穩定高工作成效的時段，留一點時間來品味生活","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/01/two-awesome-hours"},{"title":"在 mac 上安裝 gcc","text":"最近用 brew 來安裝 gcc 5.3，一直卡在 make --bootstrap 放了幾個小時還是停在這 之後才查到，要用 xcode 的命令來安裝 xcode-select --install 主要是因為 homebrew 下載的是還沒 compile 過的版本 而 compile gcc 需要非常長的時間 根據 Reference 中的文章，至少要超過 45 分鐘 ( 雖然我放了一天還是沒好 ) Reference brew install gcc too time consuming brew install gcc /Mac OS 10.9 Mavericks","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2016/01/install-gcc-on-mac"},{"title":"[Book] IDEA 物語","text":"創新始於雙眼 跳脫慣有的節奏，到國外旅行、新運動、體驗新活動，創新就是從這些地方開始的 不管藝術、科學或商業，靈感通常來自 親身體驗 即使是網路時代，地理位置依然重要 這就是為什麼高科技發源地是矽谷不是康乃狄克州 「當個左撇子」哲學： 我們應該關懷消費者的需要，即使是習慣不同於一般人的消費者 完美的動腦會議 動腦會議 60~90 分鐘就綽綽有餘，不要耗掉一整個早上或下午 不用簡報 不用覺得像是工作 扼殺動腦會議的六大計畫 老闆率先發言 輪流發言 專家至上 異地開會 不准有蠢點子 勤做筆記 活力團隊創造優質企業 Francis Jehl: 「愛迪生實際上是眾人之力的集合詞」 孤獨天才的傳說是阻礙公司創新與創造力的絆腳石 Boston Phiharmonic 的指揮 Benjamin Zander 在上課的第一天告訴學生，每個人的成績都會是Ａ，唯一的條件只有，他們必須在學期中告訴他自己憑什麼得Ａ 建立學生信心 學生為了得到Ａ努力 比傳統由老師評分給Ａ，學生為了得到自己心中的Ａ付出更多的努力 每個人都應該有表演的機會，每個人的立足點是平等的，然後接受各種挫折的機會 IDEO 通常會讓新人在新專案中擔任吃重的角色，甚至負責整個專案 原型製造是創新的捷徑 使用自動提款機時，如果有人在旁邊常會令我們感到不自在甚至害怕 所以當 IDEO 接到這個銀行專案時，先觀察消費者使用自動提款機的行為，然後腦力激盪各種可能的方案，包括昂貴的攝影機 結果發現，只要在自動提款機上頭裝上一個 1.8 美元的魚眼睛，就有良好的效果 當然，也可以找出更高科技、更貴的解決方法 但製作原型後能提醒你，有時候最簡單、便宜的方式往往也是最有效的方案 跨越障礙 海洋和文化差異都是難以改變的巨大障礙，手機這類高科技消費性產品，之所以能大舉入侵各種不同文化並不令人意外，因為大家對手機沒有歷史的情節或傳統的包袱 然而，像家具或廚具這類有悠久傳統的產品，便問題重重。 除了用起來好用以外，還要看起來好用 真正優良的設計來自和人們的接觸 人們對改變的容忍程度沒有一個準。但如果你執意要改變一種大家鍾愛的儀式，那將會吃力不討好 易碎的軟酒瓶塞就是個好例子，因為每個人都認為高級酒要用好的軟木塞，即時這絕對不是保持好酒品質最好的方法 不能忽略傳統到創新之間的橋樑，否則消費者會不知道這是什麼產品 即使是一項史無前例的重大創新，還是得具備傳教士的銷售精神 產品的價值固然重要，但真正對潛在客戶和消費者銷售的，還有設計過的使用經驗","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/01/the-art-of-innovation"},{"title":"[Book] 行銷前必修的購物心理學","text":"定錨 (anchoring) Steve Jobs 在推出 iPad 的時候說「我們應該給他設定何種價格？如果你聽信自以為聰明的人，我們會把它的價格訂在 1000 美元以下」 螢幕出現了 999，然後「我很高興地向大家宣佈，iPad 的起價不是 999 美元，而是只要 499 美元」 這麼做降低了知覺成本，因為已經被一開始的 999 給定錨了。第二次的價格就會被拿來跟第一次的錨比較 另外，他沒有拿來跟筆電比較，維護了產品的獨特性，也不減少筆電的行銷 「價值 - 成本」是相對的 下面三種，哪種會最多人訂閱？ 1. 電子版 59.00 美元 2. 紙本 125.00 美元 3. 紙本 + 電子版 125.00 美元 答案是「紙本 + 電子報」，紙本則不被考慮 那下面兩種呢？ 1. 電子版 59.00 美元 2. 紙本 + 電子版 125.00 美元 只訂電子版的大大的增加了 看似沒用的「紙本」選項，實際上很有用，影響了「價值 - 成本」關係的計算 我們必須凸顯出人們正在尋找的那個價值，而且這個價值必須要能讓系統一偵測和知覺到 購買決策： 「淨值 ＝ 報償 - 痛苦」，淨值越高帶來越大的購買 如何提升淨值？ 價值 ( 報償 ) 外顯價值 內隱價值 成本 ( 痛苦 ) 外顯成本 ( 財務 ) 內隱成本 ( 行為 ) 知覺流暢性 下面這兩張圖你比較想買哪個呢？ 一般的右撇子會比較想選右邊的。這完全符合我們的習慣，讓系統一更容易處理這樣的資訊 如果健身房要你每年付 600 英鎊年費或每月付 50 英鎊，哪個容易讓你頻繁地去健身房？ 答案是 50 英鎊的月費 因為每次付費後都會特別有感覺。費用就會變得具體 「有巧克力的健康天然食品」和「內含天然成分的巧克力」，哪個比較受歡迎呢？ 「內含天然成分的巧克力」 消費者買巧克力可不是想獲取健康養分，要先滿足消費者的基本目標 - 大快朵頤 Just Noticeable Difference （恰辨差） 750 萬畫素的照相功能才能給消費者帶來有差別的感受","tags":"Book","url":"http://lee-w.github.io/posts/book/2016/01/decoded"},{"title":"[Book] 為什麼我們這樣生活，那樣工作 ?","text":"Wiliam James: 「我們這輩子所做所為均已定型，一切不過是習慣的總和」 我們看似的深思熟慮，其實常常都只是因為習慣 2006 年杜克大學的論文提出，人們每天的活動中，40% 是習慣使然，而非決定 習慣：刻意或深思後而做了選擇，過了一段時間後，不經思考卻依然繼續、往往每天在做的行為。 e.g. 早餐吃什麼？ 什麼時候去跑步？ 大腦的渴求 養成新的習慣 找出簡單又醒目的提示訊號 清楚界定獎籌內容 Examples 白速得牙膏 牙齒上的黏斑 一口白牙 慢跑習慣 下班 無罪惡感地放鬆休息 養成新的習慣 (Cont.) 提示 慣性行為 （習慣） 獎籌 創造渴望 （之前沒提到的） 電腦或手機的提示音響起 (1)，習慣打開訊息 (2)，以便自己可以有短暫的分心 (3) 如果這份期待跟渴望沒被滿足，就會讓人充滿焦躁不安 (4) 其實這些訊息可能根本無關緊要 所以可以用關掉手機或 Do Not Disturb 來關閉提示訊號，就能專心工作了 如果你想養成每天晨跑的習慣 簡單的提示 (e.g. 早餐前綁好鞋帶、把慢跑鞋擺在床邊 ) 清楚的獎籌 (e.g. 中午大吃一頓、記錄慢跑里程的成就感、腦內啡的分泌 ) 除此之外還必須要讓大腦對獎籌有期待才有辦法養成習慣 (e.g. 渴望這份成就感或腦內啡 ) 渴望的養成 渴望是建立全新慣性模式很重要的一環 想建立新的飲食習慣嗎？ 成功節食的人通常有吃早餐的習慣，而成功減重的人另外還會預設獎籌，告訴自己只要嚴守節食計畫就能得到獎籌 獎籌必須經過仔細挑選，所以誘惑或讓人分心的事出現時，才能不為所動，專注於對獎籌的渴望 扭轉習慣的黃金律 沿用相同的提示訊號和獎籌，加入新的慣性行為 改變舊習，和培養新習慣不同 必須同時顧及根深柢固的舊渴望 只要察覺習慣的運作方式，以及清楚知道提示訊息和獎籌是什麼，就成功一半了 ( 反轉訓練 ) Example 假設你想戒掉上班吃點心的習慣 你是為了什麼吃點心？ 為了消除飢餓？ 為了擺脫無聊？ 或只是短暫放鬆 ? 如果只是短暫放鬆，上網三分鐘，散個步都是可以達到的目的，但那卻不會讓你變胖 相信 還有很重要的一點，你必須相信改變是會成真的 戒酒無名會就是仰賴團體的力量，讓個體學習相信 而在團體中，人比較容易去相信 總結 想改變習慣，要 找到替代舊習慣的行為模式 如果能的話，加入某個互助團體，跟著大家一起努力改掉舊習，成功的機率會大增 必須相信人可以改變 。而相信得靠他人幫忙，即使只是兩人的團體也沒關係 星巴克讓人成功的習慣 意志力不是一種技能，比較像是一種肌肉，用得越多就會越累，所以還要用在其他事情上面的時候就會剩下比較少 意志力是可以訓練的 這就是為什麼讓孩子上鋼琴課或參加運動是重要的。不是一定要培養這些技能，而是強迫自己練習和運動的過程，增加自我規範的力量。 星巴克的員工手冊詳細地寫出員工遇到困難時應該採取什麼樣的措施 提供員工意志力的習慣迴路，讓他們知道如何處理不愉快的情況 危機就是轉機 危機是非常珍貴的契機，有智慧的領導者通常會故意延長危機感，讓大家正視問題 連鎖零售商搶先知道你要什麼 以推銷新歌的例子 ( 兩首舊歌中間夾一首新歌 ) 如果你能 用舊習慣包裝新東西 ，就能讓大眾比較接受新東西。 蒙哥馬利公車抵制事件 格蘭若維特發現如果 要找到工作，弱連結的點頭之交時常比強連結的朋友更為重要 ，因為弱連結可以讓我們進入我們不屬於的社交網路。 我們隨時都在跟親密的朋友相處，他們聽到新的機會時，我們大概也已經知道 另一方面，弱連結則可以告訴我們，我們原本不知道的 自由意志的神經學 習慣是讓我們能「第一次做一件困難的事，但很快那件事就會越來越簡單，最後有了充分的練習後，就可以半機械式地做下去，或是幾乎不需要任何的意識」 人們會朝他們練習的方式前進，就像一張紙，一旦被摺過，之後就容易折成相同的摺 附錄：習慣改造指南 方法架構 認出慣性行為 做實驗找出獎勵 那些造成習慣的渴望 用不同的行為來測試自己是否有滿足了 如果做完這件事，還是想重複原本的習慣，代表這個不是獎勵 篩選提示 事先選好要檢查哪種行為類別，可以歸為下列五大類 地點 時間 情緒狀態 其他人 緊接在前的行為 訂定計畫","tags":"Book","url":"http://lee-w.github.io/posts/book/2015/11/the-power-of-habit"},{"title":"[Book] 為什麼他接的案子比我多","text":"隨時趕在對方需要以前，讓他們大吃一驚 上司要求下午三點要東西，兩點就備妥 設計師要期待任何批評跟忠告的場合，能把你推到更高層次的意見是重要的 跟同事抱怨，除了放大問題外，沒有任何作用，往上呈報，有助於產生正向的轉機 搶救雷恩大兵 「跟上頭抱怨，不是跟手下」 開會應有的準備 準備好寫筆記 先看過題材，在腦中溫習主題 寫下幾個好問題，鼓起發問的勇氣 為了避免最後變成「一案各表」，可以先界定好這些規格 尺寸 構想 特色 功能 包含的內容 排除的內容 可修改次數 專案持續時間 腦力激盪的點子有九成的淘汰率，但為了那一成的好點子，我們仍然要去思考更多的點子 不管甚麼情況，隨即回復收到的 e-mail，是個好習慣 收到信了，謝謝 謝謝您的詢問，我目前無法回答，在像某人詢問後，在某時給您答覆 完成了 謝謝，您的回覆我們很受用 善意的告知進度，尤其在各階段時間拉得很長的時候 想像手術室的家屬，如果沒有護士告知進度會有多焦急 絕對不能讓客戶空等 如果趕不上，一定要事先告知 讓客戶空等，會急遽減低客戶對你的信賴 在有時差的地方，交件日期會受到時區影響 最好的方式是在當天早上，甚至前一天就交件 弄懂你的客戶關係圖，並且確保這些人滿意度很高，這些人脈變成金流的機會相當的高 不要使用帶有負面觀感的用詞，別用導致狀況升溫的用字遣詞 病人的狀況普普，還有許多需要即刻處置的地方 → 病人的狀況尚佳，有些地方需要積極的調整 修改 → 微調 or 修正 趕緊 → 積極處理 問題 → 要素 料想到顧客的需求，預先執行你的計畫，往往好過於問客戶笨問題 當你察覺到客戶花了一個鐘頭在談話，聲音有點沙啞，不要問要不要喝水，而是找個機會插話 :「你等一下，我去拿杯水」 撰寫提案時，絕對不能出現「等等」或「及其他等等」 詳細、清楚的界定各部份的細節 正常的合約應該兼顧雙方的利益。如果有一份奇怪的條款，別傻傻的簽下去，去問律師。放掉客戶往往比簽下不平等的條款好 不要過度假設客戶甚麼都知道，為「狀況外」的客戶提供指示和教學 e.g. 「期待收到您度商標樣搞的回饋意見」 → 「為了讓商標設計盡善盡美，請提供下列回饋意見。您喜歡的商標跟理由 ? 您不喜歡的商標跟理由 ? 哪個配色跟搭配最接近您的期望？您想不想混合、搭配不同商標上面的元素」 讓數字幫你說明 碰到不合理的要求，試著用數字算清楚，說明哪裡是不可行的，說不定一場火爆場面就化解了 訂好自己的「義工」守則 回饋社會 充實作品 一次一件： 不要讓自己身上扛太多免費案子 界定範圍： 作超過多少就超出免費範圍，是需要收費的 收成本價 不會只是「見面聊聊」 每次開會，你都應該準備好，做一場驚人的簡報 天有不測風雲，每天都要備份 !!! 創業的人會在工作上更有「彈性」，但肯定是不會更「自由」的 不管如何都別做尚未白紙黑字的工作，千萬不要！一定要先確認要做的是甚麼！ 替人幹活沒有白紙黑字，就像是在做善事 下一個籌錢日 銀行現金 + 應收款 + 當月剩餘請款 + 次月剩餘請款 - 稅金 ( 季稅金預留 ) - 救急金 = 現金流量 現金流量 / 每月經常開支 = 現金流量覆蓋月數 現金流量覆蓋月數 - 1 個月 = 下一個籌錢日 成功的全職接案者，在某些時間點，必須放手一搏雇用人手，來處理一些不必親自處理的簡單事務","tags":"Book","url":"http://lee-w.github.io/posts/book/2015/11/burn-your-portfolio-stuff-they-don-t-teach-you-in-design-school-but-should"},{"title":"在 jupyter 中同時使用 Python2 Python3","text":"先安裝 Python2 和 Python3 的 ipython notebook pip2 install ipython notebook pip3 install ipython notebook 分別用各自的 ipython 執行下面的指令 ipython2 kernelspec install-self ipython3 kernelspec install-self 就能在 ipython notebook 裡面同時使用兩種版本的 Python 了 Python2 上面是另一個也被 jupyter notebook 支援的語言 julia 最近才剛開始碰，有機會再來分享 julia 的心得 Reference Using both Python 2.x and Python 3.x in IPython Notebook","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2015/11/used-in-the-jupyter-python2-python3"},{"title":"No More Zero Day","text":"決定開始來寫些程式以外的內容 整理之前看過的書或文章，跟大家分享心得或書摘 反正都寫了，不分享一下也是蠻可惜的 (?) https://www.ptt.cc/bbs/t-management/M.1399297547.A.A5E.html 這是在 PTT 上看到一篇還不錯的文章 原作者還做了這麼一張圖激勵大家 1. 從今天開始不再有「零成就日」 零成就日 一整天什麼事情都沒做的日子 一整天都沒有任何對於你的目標而努力的日子 今天一整天啥都沒做，而現在已經是 23:58 了？ 寫一個句子。做一下伏地挺身。讀完課本一章節的其中一頁。 每天只要這樣做下去就有很大的差別 生產力來自於持續每天都維持在「非零狀態」 2. 對三個「我」心存感激 過去我、現在我、未來我 對「過去我」所做過任何正面的事情心存感激 昨天不是「零成就日」因為你寫了兩百（不過，這是你最大的能力了嗎？）字？謝謝過去的自己。存了一點錢而可以買你想要的好東西？謝謝過去的自己。 把「未來我」當作你最好的朋友，現在做任何事都要像是為你最好的朋友付出一樣拼命 你必須幫「未來我」一個忙，就像幫你最好的朋友一個忙一樣 累得要死但還是無法放下網路和電玩嗎？去你的，「現在我」，我現在要替「未來我」做點事了。 鬧鐘響了但是床太舒服？去你的，「現在我」，我現在要替我最好的朋友「未來我」做點事了，我要起來跑個 5 公里（或是 25 尺，無所謂，只要不是 0 就好）。 你現在能過的一點好生活都源自於過去的努力。這樣子「努力」和「感謝」的循環模式就是讓你維持生產力和感恩之心的源頭 3. 原諒自己 責備自己只會讓你更沒有生產力。 昨天試著想避免「零成就日」卻失敗了嗎？那又怎樣！ 過去的自己。我原諒你！ 但是今天呢？今天是要盡你最大的能力發揮「非零成就日」的威力 4. 書和運動 每天持續運動真的會讓你更聰明。當你運動時身體會釋放讓你快樂的物質 至於書？所有我們能想得到的想法，或是感受、經驗、體驗、欲望、或是想知道怎麼做某件事，不管是什麼東西，都已經被某個人想出來了 讀網路上關於減重的文章並將他納入你的運動準則中 閱讀就像是瑪莉歐電玩中的水管快速通道，他是你到達下一個層級的快速捷徑。","tags":"Gossiping","url":"http://lee-w.github.io/posts/gossiping/2015/10/no-more-zero-day"},{"title":"[Book] 思考的技術","text":"解決問題不能只是把問題倒過來，就當作想到辦法了 e.g.「商品沒競爭力，所以要加強商品競爭力」 該如何增加商品競爭力才是重點！ 測試知識不再能判斷一個人是否能勝任工作，要測驗的是思考模式 得到正確答案也不見得該錄取，應該注重推理過程 先說前提，才說對策 e.g. 「如果明天要你去坦桑尼雅出差？只能帶一個背包，你會帶什麼？」 「我並不清楚坦桑尼雅在哪，但是如果以這是一個非洲的國家為前提，來回答這個問題的話 ......」 具備「有前提就有結論」的思考模式的人，不容易陷入恐慌 就算前提變了，還是能導出不同的結論，這就是麥肯錫需要的人才 投資自己最糟糕的就是半途而廢 會一點鋼琴、會一點小提琴，但卻都無法在他人面前演奏 能否突破的差別在於，遇到沒遇過的經驗時，是逃避選擇旁路，還是「不管如何先踏入再說，說不定會有些什麼」 Unlearn，或者「歸零」，這是很困難的，對於成績好的人尤其困難 抱持著謙遜的態度，重新學習，就像自己才剛上小學一樣，才能在這個時代生存 練習題 拿出去年的記事本，試著分析時間 除了睡覺以及吃飯的時間，統計一下你花了多少的時間在通勤及工作上 然後想想 「預定表上空白的時間，佔了多少醒著的時間？」 「在這些空白的時間裡，你做了什麼？」 「在接下來的一年裡，你還會用同樣的方法，運用你的時間嗎？」 為自己預算下一年的時間要怎麼分配，並研擬為自我投資計畫 試著在大腦裡描繪一年後自己的模樣 讀完每天的報紙後，提出五個疑問 接著提出自己可以運用怎樣的方式、進行怎樣的調查，是否可以提出完成度更高的報導內容","tags":"Book","url":"http://lee-w.github.io/posts/book/2015/10/thinking-technique"},{"title":"[Book] 創新是一種態度","text":"想解決問題，先突破框架 講師在安排課程的時候 第一種是講聽眾想聽的 更好的做法是講出那些聽眾需要的 給魚不如給釣竿 ? 那教他釣竿怎麼做呢 ? 或者教他甚麼是釣竿的原理 ? (bachelor) 為什麼一定要用釣竿 ? (master) 為什麼一定要吃魚 ? (doctor) PHD (Doctor of Philosophy) 博士要有自己的哲學和思想理念 不能只是把別人的東西做得很好 隱含假設 : 控制你思考方向的寄生蟲 「1+1=?」 「2」 ? 在自然數的系統下也許是 在 Computer Science 的布林邏輯運算則是 1 如果沒把隱含假設搞清楚的話，答案就不會是正確的，很容易變成雞同鴨講 上下文、環境關係與現實限制 上下文很重要 !!! 再看一段文章時，不用專牛角尖。先記下來，再繼續看下去，也許就懂了 漸進式創新 : 點子是可以偷來的 「先求有，再求好」反而可能變成「先求惡名昭彰，再來就沒下文了」 「人才是企業資產」不是口號 誰闖了禍不重要，重要的是誰能解決問題，更重要的是防止問題再發生 「誰的錯」 -> 「我們的制度有甚麼問題」 曾有一個故事，IBM 一個經理人犯了重大錯誤，賠了公司兩百萬美金，他慚愧的像老闆辭職。老闆拍桌大罵 :「你這個人做事怎麼這麼沒責任感」還沒等他開口說自己是辭職以示負責，老闆就說「我們才花了兩百萬幫你上了一課，你現在就想跑」 機會成本，才是公司最大的成本 為了省辦公成本，去做限制，卻剝奪了員工可能產出公司營收的創新想法，這才是最浪費成本的事 台達電不會因為公司業務少了就砍人，而這麼作是為了在未來景氣回升的時候，能有更大的產能，擴大市占率","tags":"Book","url":"http://lee-w.github.io/posts/book/2015/10/innovation-is-an-attitude"},{"title":"解決 django-admin 在 mac 找不到 django.core","text":"問題 在 mac 上，用 pip3 安裝完 django 1.8.1 後 執行 django-admin 出現了以下的錯誤訊息 Traceback ( most recent call last ): File \"/usr/local/bin/django-admin\" , line 2 , in < module > from django.core import management ImportError : No module named django . core 解決 找到 /usr/local/lib/python3.4/site-packages/django/bin/django-admin.py 把第一行的 #!/usr/bin/env python 改成 Python 的路徑 以我為例，我改成 #!/usr/local/bin/python3.4 之後就可以執行了","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2015/05/solve-django-admin-cant-find-the-djangocore-on-mac"},{"title":"rename - 批次更改檔名","text":"只是要改變一兩個檔案的檔名，只要 mv 就很夠用了 但如果要一次改很多相似的檔名就用到 rename 指令就會更有效率 安裝 Ubuntu, Linux Mint 預設就已經安裝好了 Mac brew install rename 使用 rename s/pattern1/pattern2/ files 把 files 中的檔案符合 pattern1 替代成 pattern2 files 要使用萬用字元，pattern 則是使用 regular expression 在改檔名之前，會想先看會改成什麼樣子 這時候就要加上參數 -n 需要特別注意要跳脫的字元 可以參考下面這篇文章整理需要跳脫的保留字 [Regular Expression] 使用正規表達時需要 escape 的保留字 保留原本檔名的片段 而在批量更改檔名時，常常會需要保留 pattern1 的某些片段 這就需要用到 regular expression 的 group 例如，我們希望把檔名從 01~05 這五個檔案改成 01A~05A 我們如果只用 rename -n s/\\[0-\\9]{2}/\\[0-9\\]{2}A/ * 就會錯誤 必須要改成像下面這樣 rename -n s/ \\(\\[ 0 - \\9 ]{ 2 } \\) / \\$ 1A/ * 扣除跳脫用的 \\ 這個例子在 [0-9]{2} 外面加上 () ，將他們視為群組 在 pattern2 用 $1 ，代替第一個 group Reference ubuntu linux 用 rename 指令批次改檔名 regular expression - Substitute text with sed and keep part of the original text - Unix & Linux Stack Exchange","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2015/02/rename"},{"title":"[Book] Zero to One","text":"Book 從 1 到 n，只是複製別人的做法 -> 全球化 從 0 到 1，則是創新 -> 科技的進步 「有什麼是你跟其他人有不同看法，但是你覺得很重要的事實？」 商業版：「哪些有價值的公司還沒創立」 新創產業運作的原則就是必須和其他人合作完成工作，而且組織要小到能讓所有事情順利運作 大膽冒險比無聊瑣碎好 壞計畫比沒計畫好 競爭市場賺不到錢 銷售與產品同樣重要 只有獨佔者能考慮賺錢以外的事 完全競爭下，企業會專注在今天的利潤，無法規劃場遠的未來 只有一件事可以讓企業超越求生的日常廝殺，創造新的東西，就是獨佔利潤 在完全競爭下，長期來看，沒有公司可以得到經濟利潤 有利可圖則新公司加入，促使大家降低利潤 反之，若無利可圖，則公司倒閉，利潤恢復。最終到無利潤的平衡 只有獨佔企業才能達到利潤最大化 如果想要創造、並長久留住價值，不該建立一個沒有差異化的商品模式 獨佔企業不會扼殺創新。新的獨佔事業會帶來改變 長達數十年的獨佔利潤提供強大的發明誘因 獨佔可以讓發明持續，因為利潤讓他們得以擬定長程計畫 在競爭的狀態下，公司無法花時間再創新的計畫 不要執著於競爭，競爭會讓大家在毫無機會的時候幻想機會存在 如果這場仗不值得打，每個人都是輸家 所謂一家有價值的企業，不但必須成長，還必須能夠 持續成長 這事業 10 年後還在嗎？ 許多創業家都僅專注在短期成長 藉口是「成長容易衡量，但持續就很難了」。 你可能聽過創業的「先發優勢」 但這只是種策略，而不是目標 真正重要的是能在未來產生現金流 如果有其他人會追上並超越你，就算你是第一個做的人也不會有好處 「做什麼不重要，做得好就行」這可能不是正確的 要做什麼很重要，你該全神貫注在擅長的事情上 在此之前，你要想清楚你擅長的是在未來是否有前景。 對於新創事業招募員工，一個要先問自己的問題「能到 Google 享受高新和地位的人為什麼會想加入你的公司成為第 20 位工程師」 工程問題： 你創造的是一個突破的科技，還是微幅改善的方法？ 你必須有比替代品好上 10 倍的專利技術。市面上常碰到誇大不實的廣告，你的微幅進步很難讓人相信。 時機問題： 現在是開始這個事業的正確時機嗎？ 獨佔問題： 你一開始就現在小型市場搶得高市佔率嗎？ 人員問題： 你有合適的團隊嗎？ 銷售問題： 你除了有開發產品的能力，還有銷售計劃嗎？ Speech Wow, Taiwan is his first stop. Speech content Don't outsource your future to a big institution. Figure it out yourself. It is large market share that matters instead of a big market. All happy companies are unique. The others are those who stuck in compete. Well defined, well differentiate jobs ~run away from big data or clouding XD ~ What makes facebook valuable might not be purely social networking but real identity in social networking. Q&A Q: How to tell the different between crazy ideas and new ideas? It's hard to answer. Is the idea that no one does it or no one does it for good reason? Is it valuable and no others did it? Be honor yourself, don't be over-optimistic. Get to be the best in the world rather than best in Taipei or Taiwan. Q: Startup after having some working experience? It's true for business or management. Startup is something new and by definition, you will not learn from others. Thus, you might not be able to learn from working experience. Idea matters. Although management is important, when it compares to the new idea, it might be not that important. e.g. Twitter Somebody might say that they gonna startup 5 or 10 years later. However, that's rare. The fact is that most of these people would be stuck in many different problems and not that willing to take risks. There is no particular moment for one to startup. If you have a good idea, it's the time. Q: Why Thiel Fellowship support only drop-out students? It's stop-out instead drop-out. For one who wanna startup, full time working is needed. Q: Does there exist any character or special of entrepreneurs? Not easily give up, listen to others, and not to easily to be influenced. How well a team working together is important to a startup. The team members have to get along with each other. Thus, those who performs well in college aren't necessarily good entrepreneurs. Q: How to pick a startup team partner? No formula. It works best if you know they enough. Complementary skills and alike interests would be good. Q: Education problems. How about the flip classroom or MOOCS? It's education bubble. Peter cannot give an ultimate way to replace the university system. The suggestion is that don't get up the same or similar track. What makes education bubbles is that everyone treats university as church or religion. If you don't go into a college, your life would ruin. Such thought is the main problem. Q: How do startups in Taiwan get into the world and get resource? The first capital is the most difficult part and it's super difficult. This is the core challenge. Convincing people that your idea is real and gonna work is really hard. There are some great parts in Silicon Valley but also some bad parts. For example, office and hiring people there is expensive. Q: What the key point to convince peter to invest? ...... Q: Does Peter admire any other entrepreneurs? Mark Zuckerberg. ...... Q: Does Peter have any setback, failure? How to deal with that? It was the law school story wrote in the book. The interesting part is that this failure turns out to be not failure. Failure is overrated. The most important part of failure is not to give up.","tags":"Book","url":"http://lee-w.github.io/posts/book/2015/02/zero-to-one"},{"title":"vimspell - vim 檢查英文文法的套件","text":"vimspell 是一套提供 vim 根據字典來檢查文法的套件 有了 vimsepll，寫 Markdown 或 LaTeX 的時候，就不用再怕拼錯字了 用 vundle 安裝 在 vimrc 中加入下面這行 Bundle 'vimspell' 接著用 :BundleInstall 安裝 字典檔 到下面的網站下載字典檔 http://archive.services.openoffice.org/pub/mirror/OpenOffice.org/contrib/dictionaries/ 我下載的是 en_US.zip 解壓縮完後，用 vim 開啟街壓縮完的資料夾 應該會看到下面這樣 接著進入 vim 在 normal mode 輸入 :mkspell en en_US en 可以自己定義， en\\_US 必須是 .aff 和 .dic 的檔名 檢查一下 vim 資料夾下的 spell 資料夾有沒有新增字典檔，確定有了後就新增完成了 設定 首先要先定義要根據哪個字典檔 :set spelllang=en en 就是剛剛所定義的名稱 接著 :set spell 就可以開啟了 :set nospell 則是關閉 如果每次都要設定一次，就太麻煩了 我在 vimrc 加入了下面這些 set spelllang = en nmap < F7 > : setlocal spell !< cr > autocmd BufRead *.txt , *.md , *.tex setlocal spell 第二行是每次按 F7 就能開啟或關閉 vimspell，也可以換成自己想要的快捷鍵 第三行則是每次遇到副檔名是 txt, md, tex 時就自動開啟 vimspell 使用 vimspell 被開啟後，就會自動把拼錯的字反白起來 如果有其他的語言一樣會被反白起來 指令 ]s : 跳到下一個錯字 [s : 跳到上一個錯字 z= : 開啟建議，可以參考下面的圖，選擇完按 enter 後，就會替換原本的字 zg : 將目前游標上的字加入字典 新增的字都會被加到 ~/.vim/spell/en.utf-8.add ( 根據語言不同，檔名會不同 ) zug : 復原加入字典的字 (刪除) zw : 加入壞字字典，壞字也會被加入同樣的檔案中，最後面會另外加上 /! zuw : 復原加入壞字字典的字 (刪除) Reference Vim documentation: spell How to use spell check with vim [Reply] 如何在 vim 裡用拼字檢查 - iT 邦幫忙 ::IT 知識分享社群 Create a spell file for VIM vim - Automatically enabling spell checking in vimrc - Stack Overflow","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2015/02/vim-spell-check"},{"title":"gitignore.io","text":"每次開一個 git 專案，要為它找適當的 .gitignore，都要上網找模板蠻麻煩的 能不能有個簡單的方法，我開什麼專案就產生怎樣的 .gitignore 然後我就發現了 gitignore.io 簡單來說 gitignore.io 提供各式各樣的 gitignore，而且可以自動合併成一個 file 最棒的是它有提供 api 讓我們在 command line 上使用 gitignore.io on command 這是 gitignore.io 的官方文件 https://www.gitignore.io/docs 設定 以 mac 的 zsh 的使用者為例，只要在執行下面這段 echo \"function gi() { curl -L -s https://www.gitignore.io/api/\\$@ ;}\" >> ~/.zshrc && source ~/.zshrc 或者在 ~/.zshrc 加入下面這段後，執行 source ~/.zshrc function gi () { curl -L -s https://www.gitignore.io/api/ $@ ; } 設定完成後就可以使用 gi 的功能 使用 基本上只有兩種用法 首先當然要先看 gi 支援哪些 .gitignore gi list 執行完會看到一長串的結果 actionscript,ada,agda,android... 接著在 gi 後面輸入想產生的 .gitignore 的 types gi \"types\" 如果有超過一個必須用 , 隔開 e.g., gi vim,osx 不過這樣還不會產生 .gitignore，只會顯示在螢幕上 還要再使用 output redirection 才會有 .gitignore gi vim,osx >> .gitignore My Custom gi 但用起來還是有點小小的不順手 尤其每次要看 list 都要重新連上網抓一次，挺浪費時間 所以就自己寫了一個新的 gi 我把它放在我的 GitHub 上 https://github.com/Lee-W/gi_extension 那我的 Custom gi 到底多支援了什麼呢？ 1. 線下查看 gitignore.io 支援的類型，用更適合閱讀當方式印出 2. 將 output redirection 寫成一個 option 3. 支援以空格作為類型的分隔 ( 逗號依然支援 ) e.g., vim,osx -> vim osx 安裝 git clone https://github.com/Lee-W/gi_extension && cd gi_extension sudo cp gi_extension.sh /usr/bin/gi 如果之前有在 shell 的設定檔中，設定過 gitignore.io 提供的 gi 記得要把它註解掉，不然那個 gi 會蓋過我的 gi 如果想移除掉 git clone https://github.com/Lee-W/gi_extension && cd gi_extension sudo rm gi_extension.sh /usr/bin/gi 使用 第一次使用的時候要先下 gi -u 將原本 gi list 的 output，儲存到 ~/.gi_list 顯示支援類型 以表格的方式輸出支援的類型 目前設定一個 row 容納 5 個 column，每個 column 長度為 25 gi -l 以字母的順序輸出 gi -L 顯示 .gitignore 的內容 跟原本的 gi 一樣，只是多支援了以空白作為分隔 gi \"types\" # e.g., gi vim osx 輸出 .gitignore 將結果加入目前資料夾下的 .gitignore gi -a \"types\" # e.g., gi -a vim osx 在目前的資料夾產生一份新的 .gitignore 取代舊有的 gi -e \"types\" # e.g.,e.g.,, gi -e vim osx 更新本地端的支援列表 gi -u 其實每次 gi 被執行的時候，都會在 backgroud 更新列表 但是這次的更新，下次才能被使用 所以如果想要強制更新就可以用上這個指令","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2015/02/gitignoreio"},{"title":"[Book] 點子都是偷來的","text":"Steal Like an Artist - 10 Things Nobody Told You about Being Creatvie 所有的建言都只是經驗談 1. Steal like an artist Wiliam Ralph Inge: 「什麼是原創？就是沒被人看出來的抄襲」 Garbage in Gabage out 藝術是搜集好的想法，但不是囤積狂 Save Your Theft for Latter 隨時都要養成紀錄的習慣。存在紀錄裡的東西是死的，只又讓它再重新被使用才會活過來 Steal from yourself. e.g. Dream, Memory 2. Don't wait until you know who you're until you get started. Fake it'til you make it 如果你只有受到某一個人的影響，大家會說你是下一個誰誰誰；但如果你偷學的對象有一百個，大家就會說你是渾然天成 3. Write the book you want to read 4. Use your hand 只有動腦的作品是不會出色的 5. Side projects and hobbies are important 如果你有兩、三樣熱情，不要覺得自己非得擇一不可。留著每一項熱情！ 讓各種興趣交流，就會產生變化 6. The Secret : Do good work and share it with people 一開始，不受注意是好事。一旦人們開始注意你，隨性的自由就不再復返。盡力享受和善用未成名的時期 Step 1: Wonder at Something. Step 2: Invite Others to Wonder with You. Howard Aiken: 「別擔心別人偷你的構想，若你的想法真的很棒，你會盡力說服別人接受」 Don't worry about people stealing your ideas. If your ideas are any good, you'll have to ram them down people's throats. 7. Geography is no longer our master. 在日常環境裡，大腦會開始變得安逸，所以你必須顛覆現狀 旅行讓世界變得新鮮，也能活化大腦運作 8. Be nice. (The world is a small town.) Stand Next to Talent <- Garbage in Garbage out Write Fan Letters 不用直接寫信給偶像。用行動、作品來像他致敬吧！ 9. Be boring. (It's the only way to get work done.) Gustave Flaubert: 「生活維持常態和規律」，工作上才有衝刺的動力和原創的靈感。 Make sure how much sleep you get. Get yourself a calendar. 在行事曆上記下每日的目標。完成後在行事曆畫一個叉，並且持續維持這個叉的連線 10. Creatvity is substraction. What's Next? Take a walk Start you swipe file Go to the library Buy a notebook and use it Get youself and calendar Start your logbook Give a copy of this book away (?) Start a blog Take a nap","tags":"Book","url":"http://lee-w.github.io/posts/book/2015/01/steal-like-an-artist-10-things-nobody-told-you-about-being-creatvie"},{"title":"驅動 BCM43228 網卡在 Linux 的無線功能","text":"最近本來下定決心要來玩 arch linux 結果竟然被筆電的網卡搞死了 抓了官網的驅動竟然不能 build... 沒想到改成灌 Linux mint 17，依然有問題＝＝ 最後找到一個解決的辦法 先確定你的網卡是不是 BC43228 lspci | grep Network 如果是的話就能開始進行安裝了 sudo apt-get install linux-headers-generic sudo apt-get install --reinstall bcmwl-kernel-source 如果成功的話，Wifi 應該馬上就能用了 Reference Ubuntu14.04 Acer Aspire V5 571 Broadcom BCM43228 WiFi - BeyondLogic","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2015/01/enable-bcm43228-wifi-on-linux"},{"title":"Gitbook on Command Line","text":"最近比較認真在寫 Gitbook，順便記錄一下該怎麼用 簡單來說 Gitbook 就是可以使用 Markdown 來寫書的平台，可以轉成各種電子書的格式 目前已經支援的有 html, pdf, ePUB, MOBI 之前寫了一本 Clean Code 的筆記 最近又開始寫一本 FreeBSD 和網管相關的 Gitbook 如果有興趣可以到 我的 Gitbook 上看看 XD 目前 Gitbook 主要支援網站上的 Editor，不過我比較習慣在本地端進行編輯 雖然有 Gitbook 編輯器，但有時候用起來還是會出點問題 所以最後還是決定來學如何用 command line + sublime 寫 Gitbook 安裝 Gitbook npm install gitbook -g 開始撰寫 Gitbook 一本 Gitbook 一般都會包含 SUMMARY.md , README.md , package.json , book.json 像我的 Learning Python 筆記的檔案架構大概長的是這樣 README.md 是這本書的簡介 package.json 是額外使用的 package 的定義和設定 book.json 是這本書的額外設定 這裡不會多做介紹，可以參考 Reference 的網站，裡面有很詳細的介紹 最重要的是 SUMMARY.md，它會定義整本 gitbook 的架構 每個章節下面都還可以給予更多的小節 下面是我 Learning Python 的 SUMMARY.md # Summary * [ Introduction ]( README . md ) * [ Getting Started ]( 1 _getting_started / README . md ) * [ A Python Q & A Session ]( 1 _getting_started / a_python_q & a_session . md ) * [ How Python Runs Programs ]( 1 _getting_started / how_python_runs_programs . md ) * [ How You Run Programs ]( 1 _getting_started / how_you_run_programs . md ) * [ Types and Operations ]( 2 _types_and_operations / README . md ) * [ Introducing Python Object Types ]( 2 _types_and_operations / introducing_python_object_types . md ) * [ Numeric Types ]( 2 _types_and_operations / numeric_types . md ) * [ The Dynamic Typing Interlude ]( 2 _types_and_operations / the_dynamic_typing_interlude . md ) 這是預覽的結果 下了這個指令後就會根據 SUMMARY.md 的定義，自動產生相對應資料夾和檔案 gitbook init 接著就可以開始編輯裡面的檔案了 預覽 寫完之後當然預覽一下 gitbook serve 用了這個指令後就會為目前的目錄開一個預覽 HTML 的 port 只要在瀏覽器上輸入 http://localhost:4000 就可以預覽剛剛寫的 Gitbook 只要有更新後存擋，重新整理就能看到更新後的結果 輸出 在 export 前，需要為 pdf, epub, mobi 三種格式多安裝程式才能使用 先到的官網下載 Calibre http://calibre-ebook.com/download 以 mac 為例 需要下面這個指令，為 ebook-covert 建立一個捷徑，讓 gitbook 可以找到這個功能 ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/local/bin 以下的四個指令依序可以產生 html, pdf, epub, mobi gitbook build ./ gitbook pdf ./ gitbook epub ./ gitbook mobi ./ 後面可以多指定一個參數 --output=\"Directory\" \"Directory\" 換成你要的位置或檔名 如果不指定，預設 html 會 export 到 _book 裡面，其他檔案則會以 book 命名 Publish 到 Gitbook.com 上 先到 Gitbook 官網 上註冊帳號 接著 create a new book，到 setting 頁面往下拉，就會看到一個 URL 接下來的操作就跟 git 基本上是一樣的，init, add, commit ... 等 只有在 remote 的設定有點不同 git remote add gitbook \"URL\" git push -u gitbook 這裡要輸入的帳號、密碼是 gitbook 上的，不是與其連結的帳號的 如果還沒設定就要再去自己的 profile 內設定 Reference Gitbook GitBook Documentaion 深入淺出 GitBook 寫作與自助出版，電子書也能多人協作","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2015/01/gitbook-on-command-line"},{"title":"[Book] Clean Coder","text":"如果非專業人事把事情搞砸了，收拾爛攤子的往往是僱主 而專業人事如果犯了錯，只好自己收拾殘局。 當然，你說的沒錯。軟體發展太複雜了，不可能沒什麼 bug 但很不幸，這個理由並不能為你開脫 人體太複雜了，不可能完全理解，但醫生仍誓言不傷害病人 如果他們都不拿人體的複雜性作託辭，我們又怎麼能拿上述的理由，開脫自己的責任呢？ 程式難免會出現 bug，但這並不意味著你不用對它們負責 沒人能寫出完美的軟體，但這並表示你不用對不完美負責 把自己沒把握的程式碼發送給 QA 這麼做本身就是不專業 每次 QA 找出問題時，或者更糟糕的是「用戶找出問題」時，你都該震驚羞愧，並決心以此為戒 如果你希望自己的軟體靈活可變，那就應該時常修改它！ 讓軟體保持固定並不變才是危險的！！ 如果一直不重構程式碼，等到最後不得不重構的時候，你就會發現程式碼已經「僵化了」 你應該計劃每週工作 60 小時 前 40 個小時是給僱主的，後 20 小時是給自己的 這剩餘的 20 小時裡，也就是每天 3 小時，你應該看書、練習、學習，或者做其他提升職業能力的事 那 20 小時你不用為僱主工作。相反，你該為自己的職業發展工作","tags":"Book","url":"http://lee-w.github.io/posts/book/2015/01/clean-coder"},{"title":"[Book] 人月神話","text":"因為溝通的時間，人力和工時互換是不成立的，別用人月來衡量工作規模大小 溝通又可分為，訓練和相互交流 訓練的成本可以是線性關係，但相互交流花的時間可多了 所以為了趕上時程而增加的人力，通常不會只會讓進度更落後。 系統設計的時候，保有概念整體性是很重要的原則 寧可忽略掉新奇或更好的特色，來反映同一組設計理念 系統的目的是使用便利性，所以功能概念複雜度比才是系統設計的最終測試標準 好的設計不可以單獨偏重功能性，也不可只偏重簡單性 產品測試小組代表顧客，就是為了挑出產品毛病存在 隨著時間的投入，細心的產品測試人員將找出設計意圖並未正確傳達之處，也就是設計的決策沒有被正確了解或準確實作的地方 基於這個理由，測試小組絕對有必要與設計意念傳達的過程相結合，並且必須在造其跟根設計的工作一起同時進行 在大部分的專案中，第一次出爐的系統絕少是有用的 因此，無需考慮是否要做一個試探性的系統，然後把他丟棄，因為這是必然的問題 所以應該要預先規劃去做一個本來就要丟掉的試驗品 在規劃時程的時候，把必然的一次失敗納入正式計劃之中。 規劃軟體開發專案的文件 目標 產品規格 時程 預算 場地配置 組織編制圖 為使用程式而寫的文件 目的 程式主要功能為何？ 為什麼要寫這支程式？ 環境 程式要在哪種機器上跑？ 硬體和作業系統的組態該如何設定？ 輸入值域與輸出值域 程式輸入與輸出資料的合理範圍為何？ 欲達成的功能與使用的演算法 精確的說出程式到底要做什麼事情 ? 輸出入格式 要精確而完整的描述 執行過程中的指示 包括運行正常時，或因異常而終止時，在控制台或任何輸出裝置上應該要看得到的任何提示 選項 使用者在功能上有哪些選擇彈性？ 這些選項該如何正確的加以指定？ 執行時間 對於某個工作，在某個組態所指定的空件大小限制之下，程式要花多少時間來完成？ 輸出結果的精確度與檢驗方式 預期的結果必須精確到什麼程度？ 跟這種精確度相搭配的檢驗方式為何？ 將文件維護的負擔剪到最小 借助那些基於語言的要求而必須存在的語 儘可能容納更多訊息在裡頭 標籤、宣告、符號名稱都可以用來表達某些函意 善用留白或固定格式來增加可讀性，表現出從屬和巢狀的關係 以註解的形式在程式中加入一些註解 但許多程式為了這個逐行加入註解，這更會讓人感到困惑。","tags":"Book","url":"http://lee-w.github.io/posts/book/2015/01/the-mythical-man-month"},{"title":"MacBook Pro Retina 開箱","text":"這篇只是想給自己換 MacBook Pro Retina 留下一個紀念 順便紀錄一些從 Ubuntu 轉過來不習慣的地方 想要看更專業的開箱文就要再去翻別篇囉ＸＤ 先附上幾張照片 從 Ubuntu 轉過來 MacBook，不用一天就上手了 不過也可能是我常常把 Ubuntu 改得很像 MacBook 吧ＸＤ 轉過來 MacBook 最大的好處就是超強大的觸控板 不過還是有一些比較不習慣的地方 沒有 guake terminal guake terminal 實在太好用了啊ＸＤ 雖然可以用 iTerm2 做出類似的效果，但感覺還是不太對 SETUP ITERM2 TO BEHAVE LIKE GUAKE 不支援 NTFS 寫入 下面這裡提供一個在 PTT 找到的解決方案 不過寫入速度好像只有 USB 2.0 [軟體] NTFS for Mac OSX Yosemite 10.10 無法直接讀到 Android 手機的檔案 雖然可以用 Android File Transfer 解決，但不知道為什麼遇到我的手機很容易死當＝＝ Android File Transfer 總之我現在也是個 MacBook user 了 lol","tags":"Gossiping","url":"http://lee-w.github.io/posts/gossiping/2015/01/mbpr-out-of-the-box"},{"title":"Android Studio+Genymotion 安裝 (12/29 更新 )","text":"最近 Google 在推行的 Android IDE，前身是 IntelliJ IDEA 它的檔案架構跟 eclipse 差蠻多的，所以用不同的 IDE 來協作會有點麻煩 就我的經驗 Android Studio 比 eclipse 來得穩定一些 反正現在還有 Google 在背後支持它，就來試試看吧 XD 2014/11/23 更新 Install SDK : 更新了 Android Studio 0.8.14 後需要的額外設定 Setup SDK : SDK 版本更新至 API21(Android 5.0) 2014/12/29 更新 Android Studio 正式版已經發布了，現在好像完全無法把 sdk 放在 Android Studio 資料夾內 所以之前沒有把 sdk 獨立出來的，記得要獨立出來，不然可能會發生無法更新的問題 Installation Download Android Studio 先到官網下載 Android Studio ( 這篇文以 Windows 為例 ) https://developer.android.com/sdk/installing/studio.html 下載後會進入到下面的教學頁面 其實寫得還蠻清楚的，所以如果可以接受就可以跳過以下的教學了 XD Install JDK 在安裝 Android Studio 前，要先安裝好 JDK 現在最新的版本是 JDK 8，可以到下面的連結下載 http://www.oracle.com/technetwork/java/javase/downloads/index.html 選好自己的作業系統 再來就是一直下一步囉 XD 設定環境變數 安裝完 JDK 後，我們還需要設定環境變數 以 Win7 為例 電腦 -> 內容 -> 進階系統設定 -> 進階 -> 環境變數 接著在 系統變數 這個欄位按下 新增 變數名稱 輸入 JAVA_HOME ( 可能會因為 Android Studio 的版本而不同 ) 變數值 輸入 你安裝 JDK 的路徑 (e.g. C:\\Program Files\\Java\\jdk1.8.0_20 ) Install Android Studio 安裝過程中會問要讓 目前使用者 使用還是 所有使用者 使用 再來會要你選安裝目錄 如果不想理它，就一直下一步吧 除了 Android Studio 外，可能還會安裝一些 Dependent 的套件 不過就放著讓他跑就可以了 Install SDK manager 自從 0.8.14 版之後，SDK Manager 就不會再跟 Android Studio 綁在一起 所以要額外 下載 SDK tools 如果是在 0.8.14 版前安裝的也不用擔心，更新後需要多做設定 Android Studio 會自動幫你把 SDK 的路徑設定到原本的位置 把網頁往下拉會看到 SDK Tools Only 下載完解壓縮到你要的路徑 之後設定 SDK manager 設定到這個路徑就可以了 開始 Android Studio Configure -> Project Default -> Project Structure 記得要把 SDK 的路徑改成剛剛安裝的路徑 SDK setup 接著我們要設定 SDK 現在最新的版本是 Android 5.0 (API 21) 先開啟 Android Studio，進入 Configure 進入 SDK Manager 把選單拉到 API 21 選起來 接著把選單拉到最後選 - Android Support Repository - Android support Libarary - Coogle Play services - Google Repository - Google USB Driver - Intel X86 Emulator Accelerator(HAXM installer) 最後的這個 HAXM 是為了讓模擬器加速用的，從 SDK manager 下載完之後，還有另外的安裝步驟 安裝到這裡 Android Studio 已經可以使用了 ，不過還可以再做一些設定讓手機模擬器跑得更快 Emulator Accelerator 在安裝 HAXM 前要先確定 Intel VT-x 是否有在你的 BIOS 被啟用 我沒遇到這個問題，所以我也不知道怎麼解決＠＠ 可以在 cmd 下 sc query intelhaxm 來看有沒有開啓，只要有看到 Running 應該就是沒問題了 再來到 Android Studio 的目錄下找到 HAXM 的安裝檔 它被放在 ...\\android-studio\\sdk\\extras\\intel\\Hardware_Accelerated_Execution_Manager ... 指的是安裝的目錄 看到 intelhaxm 按下去 ! 一直按下一步就大功告成了 不過 ... 這樣還是不夠快，我們需要更快的模擬器！ Genymotion ！！！ Genymotion 安裝 Genymotion 的模擬器前，我們必須先註冊 http://www.genymotion.com/ Download 進入下載頁面後，往下拉會看到 Windows，mac 和 Liunx 版 Windows 只要直接安裝就可以了，它會連 Oracle Virtual Box 一起安裝 mac 和 Linux 還要額外先安裝 Oracle Virtual Box Install IDE plug-in 在下載頁面往下拉會看到 genymotion 在 IDE 上的 plugin，可以讓我們從 IDE 內直接開啟 Genymothion Android Studio 屬於 IntelliJ IDEA，所以我們就照著他上面的指示設定 開啟 Android Studio File -> Settings 找到 Plungins ，接著點 Browse repositories 上方輸入 Genymotion 就可找到，接著就安裝它吧 安裝完記得重新啟動 Android Studio，就會在工具列看到多一個按鈕，Genymotion 就安裝完成囉 第一次使用會要求設定 Genymotion 安裝的資料夾 (e.g. C:\\Program Files\\Genymobile\\Genymotion ) 設定完就可以開始使用 Genymotion 了 Plugins IdeaVim: 如果你是重度 Vim 狂熱者，這絕對是你不能不裝的 plugin!!! MarkDown: 這個 Plugin 提供直接在 Android Studio 中，Preview Markdown 的功能","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2014/11/android-studio-and-genymotion-installation"},{"title":"Dual Boot FreeBSD Using GRUB2","text":"其實原本的標題是 Dual Boot FreeBSD with Ubuntu 這篇文章寫的都是用 Ubuntu 測試的 不過我想只要是 grub2 應該都差不多吧 XD 加入 FreeBSD 到 grub 開機選單 更改 grub 的設定檔 vi /etc/grub.d/40_Custom 加入下面這幾行 menuentry \"FreeBSD (/boot/loader)\" { insmod ufs2 set root=(hd0,1,a) kfreebsd /boot/loader } FreeBSD (/boot/loader) 是在開機時顯示的名稱 (hd0,1,a) 要根據你的 FreeBSD 灌在磁碟的哪一塊決定 更新 grub 設定檔 sudo update-grub 這樣就會在開機選單上看到 FreeBSD 了 其實還有一些其他的設定方法 可以參考 Set up Grub2 to boot Freebsd 換 grub 開機順序 如果希望改變預設的開機順序，就必須要修改下面的檔案 /etc/default/grub vi /etc/default/grub 會看到下面這串 GRUB_DEFAULT=0 #GRUB_HIDDEN_TIMEOUT=0 GRUB_HIDDEN_TIMEOUT_QUIET=true GRUB_TIMEOUT=10 GRUB_DISTRIBUTOR=`lsb_release -i -s 2> /dev/null || echo Debian` GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\" GRUB_CMDLINE_LINUX=\"\" 把第 1 行設定為多少 (注意是從 0 開始)，就會預設從那裡開機 在 ubuntu mount FreeBSD sudo mount -t ufs -r -o ufstype = ufs2 /dev/sda4 ~/freebsd","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2014/10/dual-boot-freebsd-using-grub2"},{"title":"powerline on zsh, vim, tmux","text":"用了 vim 的 powerline 後覺得很酷，就找了很多的 powerline 來玩 於是這篇文章產生了 XDD 這是各個 powerline 的預覽圖 1. vim 2. tmux 3. zsh powerline 字體 安裝這些 powerline 之前要先下載 powerline 字體 不然可能會無法正常顯示 在 powerline-fonts 下載後，之後安裝就完成了 記得要把終端機的字體條成這些有 powerline 結尾的字體，我當初就是沒用這個卡了很久 = = git clone https://github.com/Lokaltog/powerline-fonts /tmp/git/clone sudo mv /tmp/git-clone/powerline-fonts /usr/share/fonts/powerline-fonts sudo fc-cache -v -f zsh 其實 oh-my-zsh 本身就有 agnoster 了 但我更推薦 oh-my-zsh-powerline-theme 安裝完之後記得再 zshrc 中加入 ZSH_THEME=\"powerline\" 如果要更多客制化設定可以參考 repo 內的設定 git clone https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme /tmp/oh-my-zsh-powerline-theme /tmp/oh-my-zsh-powerline-theme/oh-my-zsh-powerline-theme/install_in_omz.sh vim 其實我也不是用 vim-powerline 而是 vim-airline 不過基本上好像是差不多的東西，而且 vim-airline 比較輕量化 建議直接用 vundle 這類的套件管理安裝比較方便 vim-airline tmux tmux 有非常多的東西可以客製化設定 在各系統也有不同的安裝方式，就自己看 repo 的 readme 文件吧 XD tmux-powerline","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2014/07/powerline-on-zsh-vim-tmux"},{"title":"解決 Win 8、Ubuntu 雙系統無法掛載 NTFS 分割區問題","text":"現在安裝了 Win8 和 Ubuntu 雙系統 每次只要開 Win 8 ，再重新開機進到 Ubuntu 就會出現 file system 無法掛載的問題 然後我在兩個系統間共同的 data 分割區就會無法掛載 可是再重開一次 Win 8，問題就神祕的解決了 @@ 後來才發現原來是因為 Win 8 的 Fast Boot 造成的 解決 控制台 \\ 硬體和音效 \\ 電源選項 \\ 系統設定 只要把 開啟快速啟動 取消掉就可以了 Reference Cannot mount NTFS partition in Ubuntu 13.04 [duplicate]","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2014/02/solution-to-win-8-ubuntu-dual-system-cannot-mount-ntfs-parition-problem"},{"title":"Git and Git Hub","text":"這份筆記已經是舊的版本了 請參考 新版 最近因為專題需要，所以寫了一份簡單的 Git 筆記 裡面大概就是我常用的指令 因為我也只是剛開始使用 Git 沒多久，內容不會太深入 Git and git hub from 唯 李","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2014/02/git-and-git-hub"},{"title":"Guake terminal","text":"隱藏在背景的 terminal 並且可以隨時呼叫 ( 預設是 F12) 安裝 Guake Terminal sudo apt-get install guake 設定 滑鼠一移開就自動隱藏 從「偏好設定 （Preferences)」勾選「Hide on lost focus」 開機就啟動 Guake Terminal 在「初始應用程式 （Startup Applications) 」把 guake terminal 加上去 Reference Ubuntu 安裝 Guake Terminal","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2014/02/guake-terminal"},{"title":"autojump - 在 terminal 中快速跳轉資料夾","text":"快速跳轉資料夾的工具 e.g. 有個資料夾是 /a/b/c/d/e/f/g/h 原本要輸入 cd /a/b/c/d/e/f/g/h 可是現在有了 autojump，而且你也去過這個 h 資料夾，你就可以 j h 很方便吧！！！ 安裝 cd /tmp git clone https://github.com/joelthelion/autojump cd autojump chmod +x install.py ./install.py 然後把下面這行加入 shell 的設定檔 (e.g. ~/.bashrc , ~/.zshrc) [[ -s ~/.autojump/etc/profile.d/autojump.sh ]] && . ~/.autojump/etc/profile.d/autojump.sh 最後只要重開 shell 就完成了 使用 最基本的功能當然就是跳轉囉 j word 如果有重複的名稱 (e.g. worda, wordb)，就在打一次同樣的指令，就會跳到下一個 strong text 2. list 現在 autojump 可以跳到的資料夾 j -s 刪除已經背改變路徑或刪除的紀錄 j --purge Reference autojump readme","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2014/02/autojump"},{"title":"Linux 開機自動掛載分割區","text":"分割區的掛載資訊，存在 /etc/fstab 中，所以需要自動掛載分割區時可以針對此檔案做修改 需要注意的是，如果設定不好，可能會沒辦法開機的！！！ 我們先來看一下 /etc/fstab 內的東西 sudo cat /etc/fstab # /etc/fstab: static file system information. # # Use 'blkid' to print the universally unique identifier for a # device; this may be used with UUID= as a more robust way to name devices # that works even if disks are added and removed. See fstab(5). # # <file system> <mount point> <type> <options> <dump> <pass> # / was on /dev/sda1 during installation UUID=c5744283-f105-47e9-8a2e-21f477d895b7 / ext4 errors=remount-ro 0 1 # swap was on /dev/sda5 during installation UUID=72b6a10a-f0b6-43ef-927d-0d74673febe7 none swap sw 0 0 #data UUID=571F168F3D98D759 /media/lee/data ntfs auto,rw 0 2 # 是註解 最後六行是比較重要的 1~2 是 root 的掛載 3~4 是 swap 的掛載 5~6 是我自己的 data 的掛載 #data UUID=571F168F3D98D759 /media/lee/data ntfs auto,rw 0 2 總共有 6 個欄位 掛載硬碟的標籤 掛載硬碟的標籤我用的是 UUID 的標籤，可以用下面的指令查詢 ls -l /dev/disk/by-uuid/ 也可以直接使用 /dev/sda1 這樣的格式，只是如果硬碟的代號改變，就要再去手動改變比較麻煩 掛載位置 掛載的位置要是一個已經存在的位置，建議是一個空的資料夾 如果不是空的，裏面的東西應該都會被清空 另外，一個掛載點只能掛載一個 disk 另外，注意在 Linux 中大小寫是不同的 分隔區格式 而一般的檔案朝的分割驅格式都是都是 ntfs，不過也可以用指令來查詢 df 選項 是否被 dump 備份指令作用 是否以 fsck 檢驗磁區 基本上 4 5 6 我也沒去研究，如果有興趣的話可以在我最後面附上的參考資料中找到 測試 先看一下是否有掛載成功 df 檔案系統 1K-區段 已用 可用 已用 % 掛載點 /dev/sda1 103081248 9259936 88562048 10% / none 4 0 4 0% /sys/fs/cgroup udev 3992780 4 3992776 1% /dev tmpfs 801368 1168 800200 1% /run none 5120 0 5120 0% /run/lock none 4006840 1032 4005808 1% /run/shm none 102400 44 102356 1% /run/user /dev/sda6 459942908 229176172 230766736 50% /media/lee/data 像我的最後面就出現了 data 之後暫時將它卸載 (若 df 之後，分割區沒有出現，那就不用做這步了) sudo umount /dev/sda6 (/dev/sda6 要取代成你自己的位置 ) 接著再執行一次 df 剛剛的分割區應該會不見，然後執行 開機自動掛載分割區 sudo mount -a 如果沒有錯誤訊息，就在執行一次 df 如果掛載的分隔驅再裡面就是成功了 如果有任何異常，就去看一下 /etc/fstab 是不是有哪裡寫錯了 Reference 巴特的微花盆： 筆記： Linux 中設定開機時自動掛載分割區","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2014/02/auto-mount-disk-after-boot"},{"title":"[C++] 如何 create thread","text":"之前因為作業需要使用到 multi-thread，就留下了這篇紀錄 這篇會稍微介紹 C++11 的 thread 函式庫，還有一點點和 pthread 要使用 C++11 的 thread 在編譯時要加上 -std=c++11 -pthread ( -std=c++ -lphread 好像也可以 ) e.g. g++ -o t thread.cpp -std=c++11 -pthread -std=c++11 : 是指定 c++ 的版本 -pthread ( 或 -lpthread )：使用 thread 的 liberary 下面有寫到 join 的部份 join 是開啟這個 thread 的上層程式必須等待到這個 thread 的工作結束了，才可以繼續下面的工作 也就是 join 以上的程式會與 thread 搶 CPU，join 以後的程式就會等待到 thread 結束才開始 那就直接來看 code 吧 C++ 11 thread 在 main 裡面直接開啟 thread 直接宣告 thread 型態的變數 thread 的 constructor 的第一個參數是函數名稱，第二個以後就是原本函數的參數 #include <iostream> #include <thread> using namespace std ; void fun1 () { cout << \"This is funtion1\" << endl ; } void fun2 ( int p1 , int p2 ) { cout << \"This is function2\" << p1 << p2 << endl ; } main (){ thread t1 ( fun1 ); thread t2 ( fun2 , 1 , 2 ); t1 . join (); t2 . join (); } 這樣就可以產生兩個 thread，他們會彼此搶 CPU 的資源 cout 似乎是每一個 << 會去搶一次，所以如果想要一次印完全部，可能可以考慮使用 printf 或者是 thread 的 lock 功能 在 class 內開啟 thread 用上面的方法直接呼叫同個 class 的 function 會出現錯誤 所以就必須用下面的方法 在宣告 thread 的時候 第 1 個參數必須是這個 function 的完整 reference 第 2 個用 this 第 3 個以後才是原本 function 的參數 p.s. 如果 fun1 是 static，則不用 this #include <iostream> #include <thread> using namespace std ; class A { public : void fun1 ( int p1 ) { cout << \"This is funtion1\" << endl ; } void fun2 () { thread t ( & example :: fun1 , this , 1 ); t . join (); } }; main () { A a ; a . fun2 (); } 最後是如何呼叫其他 class 的 function，這裡包含兩個例子 (main, class B) 想法跟上面那種很接近，只是第 2 個參數改成那個物件的實體 #include <iostream> #include <thread> using namespace std ; class A { public : void fun1 () { cout << \"This is funtion1\" << endl ; }; }; class B { public : void fun2 () { cout << \"This is function2\" << endl ; thread t ( & A :: fun1 , & a ); t . join (); } private : A a ; }; main () { B b ; b . fun2 (); A a ; thread t1 ( & A :: fun1 , & a ); t1 . join (); } 基本的 pthread 使用 #include <iostream> #include <pthread.h> using namespace std ; struct arg { int p1 ; }; void * fun1 ( void * a ) { arg * argument ; argument = ( arg * ) a ; cout << argument -> p1 << endl ; } main () { arg * argumentForFun1 = new arg ; argumentForFun1 -> p1 = 1 ; pthread_t t1 ; pthread_create ( & t1 , NULL , fun1 , argumentForFun1 ); pthread_join ( t1 , NULL ); } 至於 pthread 如何用在 class 的 function 上 可以將 function 加上 static 同樣第 3 個參數也要改成 &A::fun1 Reference 資訊小兵的胡言亂語 : [C++] Thread Function 相關測試 解析 Linux 中多線程編程並傳遞多個參數實例 linux 下 C/C++, 多线程 pthread","tags":"Tech","url":"http://lee-w.github.io/posts/tech/2013/12/how-to-create-thread-in-c-plus-plus"}]}